# 测试环境
logging:
  level:
    org:
      dddml:
        ffvtraceability:
          domain:
            hibernate:
              OFF
          restful:
            DEBUG
      springframework:
        web: TRACE #打印 Mapped 信息 比如：{PUT /users/{user_id}, produces [application/json;charset=UTF-8]}: updateUser(Long,UserVo)
  #file:
  #  name: logs/${spring.application.name}.log

spring:
  profiles:
    active: dev
  application:
    name: ffvtraceability-service-rest
  main:
    allow-bean-definition-overriding: true

  jpa:
    open-in-view: false
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        hbm2ddl:
          auto: update
        connection:
          pool_size: 2
        cache:
          provider_class: org.hibernate.cache.EhCacheProvider
          use_second_level_cache: false

  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration
      - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
      - org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration

  jackson:
    time-zone: UTC
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSSX
    default-property-inclusion: NON_EMPTY

  messages:
    encoding: UTF-8
    basename: i18n/messages

  mvc:
    pathmatch:
      matching-strategy: ant-path-matcher
    static-path-pattern: /**
    servlet:
      path: /api

  resources:
    static-locations: classpath:/static/
    add-mappings: true

  web:
    resources:
      static-locations: classpath:/static/
      add-mappings: true

  integration:
    #jdbc:
    #  initialize-schema: always  # 可选值: always, never, embedded
    channel:
      auto-create: true  # 允许自动创建通道

  # 如果需要使用 Kafka
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: ffvtraceability
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

server:
  port: 1023
  servlet:
    context-path: /
    register-default-servlet: true

  compression:
    enabled: true
    min-response-size: 20480
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xml

  max-http-header-size: 81920

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9000
          jwk-set-uri: http://localhost:9000/oauth2/jwks

# 如果需要自定义CORS配置，可以添加：
cors:
  allowed-origins: "http://localhost:3000,http://127.0.0.1:3000"
  allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
  allowed-headers: "Authorization,Content-Type,X-Requested-With"
  allow-credentials: true
