// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import java.util.stream.*;
import jakarta.servlet.http.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.dddml.support.criterion.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.partyrole.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.order.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;
import org.dddml.support.criterion.TypeConverter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RequestMapping(path = "OrderHeaders", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class OrderHeaderResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());


    @Autowired
    private OrderApplicationService orderApplicationService;


    /**
     * Retrieve.
     * Retrieve OrderHeaders
     */
    @GetMapping
    @Transactional(readOnly = true)
    public OrderHeaderStateDto[] getAll( HttpServletRequest request,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "firstResult", defaultValue = "0") Integer firstResult,
                    @RequestParam(value = "maxResults", defaultValue = "2147483647") Integer maxResults,
                    @RequestParam(value = "filter", required = false) String filter) {
        try {
        if (firstResult < 0) { firstResult = 0; }
        if (maxResults == null || maxResults < 1) { maxResults = Integer.MAX_VALUE; }

            Iterable<OrderHeaderState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderHeaderResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderHeaderMetadata.aliasMap.containsKey(n) ? OrderHeaderMetadata.aliasMap.get(n) : n));
            states = orderApplicationService.get(
                c,
                OrderHeaderResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);

            OrderHeaderStateDto.DtoConverter dtoConverter = new OrderHeaderStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderHeaderStateDtoArray(states);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve in pages.
     * Retrieve OrderHeaders in pages.
     */
    @GetMapping("_page")
    @Transactional(readOnly = true)
    public Page<OrderHeaderStateDto> getPage( HttpServletRequest request,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "page", defaultValue = "0") Integer page,
                    @RequestParam(value = "size", defaultValue = "20") Integer size,
                    @RequestParam(value = "filter", required = false) String filter) {
        try {
            Integer firstResult = (page == null ? 0 : page) * (size == null ? 20 : size);
            Integer maxResults = (size == null ? 20 : size);
            Iterable<OrderHeaderState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderHeaderResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderHeaderMetadata.aliasMap.containsKey(n) ? OrderHeaderMetadata.aliasMap.get(n) : n));
            states = orderApplicationService.get(
                c,
                OrderHeaderResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);
            long count = orderApplicationService.getCount(c);

            OrderHeaderStateDto.DtoConverter dtoConverter = new OrderHeaderStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            Page.PageImpl<OrderHeaderStateDto> statePage =  new Page.PageImpl<>(dtoConverter.toOrderHeaderStateDtoList(states), count);
            statePage.setSize(size);
            statePage.setNumber(page);
            return statePage;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves Order with the specified ID.
     */
    @GetMapping("{orderId}")
    @Transactional(readOnly = true)
    public OrderHeaderStateDto get(@PathVariable("orderId") String orderId, @RequestParam(value = "fields", required = false) String fields) {
        try {
            String idObj = orderId;
            OrderHeaderState state = orderApplicationService.get(idObj);
            if (state == null) { return null; }

            OrderHeaderStateDto.DtoConverter dtoConverter = new OrderHeaderStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderHeaderStateDto(state);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("_count")
    @Transactional(readOnly = true)
    public long getCount( HttpServletRequest request,
                         @RequestParam(value = "filter", required = false) String filter) {
        try {
            long count = 0;
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap());
            }
            Criterion c = CriterionDto.toSubclass(criterion,
                getCriterionTypeConverter(), 
                getPropertyTypeResolver(), 
                n -> (OrderHeaderMetadata.aliasMap.containsKey(n) ? OrderHeaderMetadata.aliasMap.get(n) : n));
            count = orderApplicationService.getCount(c);
            return count;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    /**
     * Create.
     * Create Order
     */
    @PostMapping @ResponseBody @ResponseStatus(HttpStatus.CREATED)
    public String post(@RequestBody CreateOrMergePatchOrderDto.CreateOrderDto value,  HttpServletResponse response) {
        try {
            OrderCommand.CreateOrder cmd = value;//.toCreateOrder();
            if (cmd.getOrderId() == null) {
                throw DomainError.named("nullId", "Aggregate Id in cmd is null, aggregate name: %1$s.", "Order");
            }
            String idObj = cmd.getOrderId();
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(cmd);

            return idObj;
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    /**
     * Create or update.
     * Create or update Order
     */
    @PutMapping("{orderId}")
    public void put(@PathVariable("orderId") String orderId, @RequestBody CreateOrMergePatchOrderDto value) {
        try {
            if (value.getVersion() != null) {
                value.setCommandType(Command.COMMAND_TYPE_MERGE_PATCH);
                OrderCommand.MergePatchOrder cmd = (OrderCommand.MergePatchOrder) value.toSubclass();
                OrderHeaderResourceUtils.setNullIdOrThrowOnInconsistentIds(orderId, cmd);
                cmd.setRequesterId(SecurityContextUtil.getRequesterId());
                orderApplicationService.when(cmd);
                return;
            }

            value.setCommandType(Command.COMMAND_TYPE_CREATE);
            OrderCommand.CreateOrder cmd = (OrderCommand.CreateOrder) value.toSubclass();
            OrderHeaderResourceUtils.setNullIdOrThrowOnInconsistentIds(orderId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    /**
     * Patch.
     * Patch Order
     */
    @PatchMapping("{orderId}")
    public void patch(@PathVariable("orderId") String orderId, @RequestBody CreateOrMergePatchOrderDto.MergePatchOrderDto value) {
        try {

            OrderCommand.MergePatchOrder cmd = value;//.toMergePatchOrder();
            OrderHeaderResourceUtils.setNullIdOrThrowOnInconsistentIds(orderId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("_metadata/filteringFields")
    public List<PropertyMetadataDto> getMetadataFilteringFields() {
        try {

            List<PropertyMetadataDto> filtering = new ArrayList<>();
            OrderHeaderMetadata.propertyTypeMap.forEach((key, value) -> {
                filtering.add(new PropertyMetadataDto(key, value, true));
            });
            return filtering;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{orderId}/_events/{version}")
    @Transactional(readOnly = true)
    public OrderEvent getEvent(@PathVariable("orderId") String orderId, @PathVariable("version") long version) {
        try {

            String idObj = orderId;
            //OrderStateEventDtoConverter dtoConverter = getOrderStateEventDtoConverter();
            return orderApplicationService.getEvent(idObj, version);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{orderId}/_historyStates/{version}")
    @Transactional(readOnly = true)
    public OrderHeaderStateDto getHistoryState(@PathVariable("orderId") String orderId, @PathVariable("version") long version, @RequestParam(value = "fields", required = false) String fields) {
        try {

            String idObj = orderId;
            OrderHeaderStateDto.DtoConverter dtoConverter = new OrderHeaderStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderHeaderStateDto(orderApplicationService.getHistoryState(idObj, version));

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves OrderRole with the specified PartyRoleId.
     */
    @GetMapping("{orderId}/OrderRoles/{partyRoleId}")
    @Transactional(readOnly = true)
    public OrderRoleStateDto getOrderRole(@PathVariable("orderId") String orderId, @PathVariable("partyRoleId") String partyRoleId) {
        try {

            OrderRoleState state = orderApplicationService.getOrderRole(orderId, new com.fasterxml.jackson.databind.ObjectMapper().readValue(partyRoleId, PartyRoleId.class));
            if (state == null) { return null; }
            OrderRoleStateDto.DtoConverter dtoConverter = new OrderRoleStateDto.DtoConverter();
            OrderRoleStateDto stateDto = dtoConverter.toOrderRoleStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create or update.
     * Create or update OrderRole
     */
    @PutMapping(path = "{orderId}/OrderRoles/{partyRoleId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putOrderRole(@PathVariable("orderId") String orderId, @PathVariable("partyRoleId") String partyRoleId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchOrderRoleDto.MergePatchOrderRoleDto body) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new CreateOrMergePatchOrderDto.MergePatchOrderDto();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchOrder.setVersion(version); }
            mergePatchOrder.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderRoleCommand.MergePatchOrderRole mergePatchOrderRole = body;//.toMergePatchOrderRole();
            mergePatchOrderRole.setPartyRoleId(new com.fasterxml.jackson.databind.ObjectMapper().readValue(partyRoleId, PartyRoleId.class));
            mergePatchOrder.getOrderRoleCommands().add(mergePatchOrderRole);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete OrderRole
     */
    @DeleteMapping("{orderId}/OrderRoles/{partyRoleId}")
    public void deleteOrderRole(@PathVariable("orderId") String orderId, @PathVariable("partyRoleId") String partyRoleId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new CreateOrMergePatchOrderDto.MergePatchOrderDto();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchOrder.setVersion(version); 
            } else {
                mergePatchOrder.setVersion(orderApplicationService.get(orderId).getVersion());
            }
            mergePatchOrder.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderRoleCommand.RemoveOrderRole removeOrderRole = new RemoveOrderRoleDto();
            removeOrderRole.setPartyRoleId(new com.fasterxml.jackson.databind.ObjectMapper().readValue(partyRoleId, PartyRoleId.class));
            mergePatchOrder.getOrderRoleCommands().add(removeOrderRole);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * OrderRole List
     */
    @GetMapping("{orderId}/OrderRoles")
    @Transactional(readOnly = true)
    public OrderRoleStateDto[] getOrderRoles(@PathVariable("orderId") String orderId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderHeaderResourceUtils.getOrderRoleFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderRoleMetadata.aliasMap.containsKey(n) ? OrderRoleMetadata.aliasMap.get(n) : n));
            Iterable<OrderRoleState> states = orderApplicationService.getOrderRoles(orderId, c,
                    OrderHeaderResourceUtils.getOrderRoleQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            OrderRoleStateDto.DtoConverter dtoConverter = new OrderRoleStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderRoleStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create.
     * Create OrderRole
     */
    @PostMapping(path = "{orderId}/OrderRoles", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postOrderRole(@PathVariable("orderId") String orderId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchOrderRoleDto.CreateOrderRoleDto body) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new AbstractOrderCommand.SimpleMergePatchOrder();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchOrder.setVersion(version); }
            mergePatchOrder.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderRoleCommand.CreateOrderRole createOrderRole = body.toCreateOrderRole();
            mergePatchOrder.getOrderRoleCommands().add(createOrderRole);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves OrderContactMech with the specified ContactMechPurposeTypeId.
     */
    @GetMapping("{orderId}/OrderContactMeches/{contactMechPurposeTypeId}")
    @Transactional(readOnly = true)
    public OrderContactMechStateDto getOrderContactMech(@PathVariable("orderId") String orderId, @PathVariable("contactMechPurposeTypeId") String contactMechPurposeTypeId) {
        try {

            OrderContactMechState state = orderApplicationService.getOrderContactMech(orderId, contactMechPurposeTypeId);
            if (state == null) { return null; }
            OrderContactMechStateDto.DtoConverter dtoConverter = new OrderContactMechStateDto.DtoConverter();
            OrderContactMechStateDto stateDto = dtoConverter.toOrderContactMechStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create or update.
     * Create or update OrderContactMech
     */
    @PutMapping(path = "{orderId}/OrderContactMeches/{contactMechPurposeTypeId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putOrderContactMech(@PathVariable("orderId") String orderId, @PathVariable("contactMechPurposeTypeId") String contactMechPurposeTypeId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchOrderContactMechDto.MergePatchOrderContactMechDto body) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new CreateOrMergePatchOrderDto.MergePatchOrderDto();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchOrder.setVersion(version); }
            mergePatchOrder.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderContactMechCommand.MergePatchOrderContactMech mergePatchOrderContactMech = body;//.toMergePatchOrderContactMech();
            mergePatchOrderContactMech.setContactMechPurposeTypeId(contactMechPurposeTypeId);
            mergePatchOrder.getOrderContactMechCommands().add(mergePatchOrderContactMech);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete OrderContactMech
     */
    @DeleteMapping("{orderId}/OrderContactMeches/{contactMechPurposeTypeId}")
    public void deleteOrderContactMech(@PathVariable("orderId") String orderId, @PathVariable("contactMechPurposeTypeId") String contactMechPurposeTypeId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new CreateOrMergePatchOrderDto.MergePatchOrderDto();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchOrder.setVersion(version); 
            } else {
                mergePatchOrder.setVersion(orderApplicationService.get(orderId).getVersion());
            }
            mergePatchOrder.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderContactMechCommand.RemoveOrderContactMech removeOrderContactMech = new RemoveOrderContactMechDto();
            removeOrderContactMech.setContactMechPurposeTypeId(contactMechPurposeTypeId);
            mergePatchOrder.getOrderContactMechCommands().add(removeOrderContactMech);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * OrderContactMech List
     */
    @GetMapping("{orderId}/OrderContactMeches")
    @Transactional(readOnly = true)
    public OrderContactMechStateDto[] getOrderContactMeches(@PathVariable("orderId") String orderId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderHeaderResourceUtils.getOrderContactMechFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderContactMechMetadata.aliasMap.containsKey(n) ? OrderContactMechMetadata.aliasMap.get(n) : n));
            Iterable<OrderContactMechState> states = orderApplicationService.getOrderContactMeches(orderId, c,
                    OrderHeaderResourceUtils.getOrderContactMechQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            OrderContactMechStateDto.DtoConverter dtoConverter = new OrderContactMechStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderContactMechStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create.
     * Create OrderContactMech
     */
    @PostMapping(path = "{orderId}/OrderContactMeches", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postOrderContactMech(@PathVariable("orderId") String orderId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchOrderContactMechDto.CreateOrderContactMechDto body) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new AbstractOrderCommand.SimpleMergePatchOrder();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchOrder.setVersion(version); }
            mergePatchOrder.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderContactMechCommand.CreateOrderContactMech createOrderContactMech = body.toCreateOrderContactMech();
            mergePatchOrder.getOrderContactMechCommands().add(createOrderContactMech);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves OrderItem with the specified OrderItemSeqId.
     */
    @GetMapping("{orderId}/OrderItems/{orderItemSeqId}")
    @Transactional(readOnly = true)
    public OrderItemStateDto getOrderItem(@PathVariable("orderId") String orderId, @PathVariable("orderItemSeqId") String orderItemSeqId) {
        try {

            OrderItemState state = orderApplicationService.getOrderItem(orderId, orderItemSeqId);
            if (state == null) { return null; }
            OrderItemStateDto.DtoConverter dtoConverter = new OrderItemStateDto.DtoConverter();
            OrderItemStateDto stateDto = dtoConverter.toOrderItemStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create or update.
     * Create or update OrderItem
     */
    @PutMapping(path = "{orderId}/OrderItems/{orderItemSeqId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putOrderItem(@PathVariable("orderId") String orderId, @PathVariable("orderItemSeqId") String orderItemSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchOrderItemDto.MergePatchOrderItemDto body) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new CreateOrMergePatchOrderDto.MergePatchOrderDto();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchOrder.setVersion(version); }
            mergePatchOrder.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderItemCommand.MergePatchOrderItem mergePatchOrderItem = body;//.toMergePatchOrderItem();
            mergePatchOrderItem.setOrderItemSeqId(orderItemSeqId);
            mergePatchOrder.getOrderItemCommands().add(mergePatchOrderItem);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete OrderItem
     */
    @DeleteMapping("{orderId}/OrderItems/{orderItemSeqId}")
    public void deleteOrderItem(@PathVariable("orderId") String orderId, @PathVariable("orderItemSeqId") String orderItemSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new CreateOrMergePatchOrderDto.MergePatchOrderDto();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchOrder.setVersion(version); 
            } else {
                mergePatchOrder.setVersion(orderApplicationService.get(orderId).getVersion());
            }
            mergePatchOrder.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderItemCommand.RemoveOrderItem removeOrderItem = new RemoveOrderItemDto();
            removeOrderItem.setOrderItemSeqId(orderItemSeqId);
            mergePatchOrder.getOrderItemCommands().add(removeOrderItem);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * OrderItem List
     */
    @GetMapping("{orderId}/OrderItems")
    @Transactional(readOnly = true)
    public OrderItemStateDto[] getOrderItems(@PathVariable("orderId") String orderId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderHeaderResourceUtils.getOrderItemFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderItemMetadata.aliasMap.containsKey(n) ? OrderItemMetadata.aliasMap.get(n) : n));
            Iterable<OrderItemState> states = orderApplicationService.getOrderItems(orderId, c,
                    OrderHeaderResourceUtils.getOrderItemQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            OrderItemStateDto.DtoConverter dtoConverter = new OrderItemStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderItemStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create.
     * Create OrderItem
     */
    @PostMapping(path = "{orderId}/OrderItems", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postOrderItem(@PathVariable("orderId") String orderId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchOrderItemDto.CreateOrderItemDto body) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new AbstractOrderCommand.SimpleMergePatchOrder();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchOrder.setVersion(version); }
            mergePatchOrder.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderItemCommand.CreateOrderItem createOrderItem = body.toCreateOrderItem();
            mergePatchOrder.getOrderItemCommands().add(createOrderItem);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves OrderAdjustment with the specified OrderAdjustmentId.
     */
    @GetMapping("{orderId}/OrderAdjustments/{orderAdjustmentId}")
    @Transactional(readOnly = true)
    public OrderAdjustmentStateDto getOrderAdjustment(@PathVariable("orderId") String orderId, @PathVariable("orderAdjustmentId") String orderAdjustmentId) {
        try {

            OrderAdjustmentState state = orderApplicationService.getOrderAdjustment(orderId, orderAdjustmentId);
            if (state == null) { return null; }
            OrderAdjustmentStateDto.DtoConverter dtoConverter = new OrderAdjustmentStateDto.DtoConverter();
            OrderAdjustmentStateDto stateDto = dtoConverter.toOrderAdjustmentStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create or update.
     * Create or update OrderAdjustment
     */
    @PutMapping(path = "{orderId}/OrderAdjustments/{orderAdjustmentId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putOrderAdjustment(@PathVariable("orderId") String orderId, @PathVariable("orderAdjustmentId") String orderAdjustmentId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchOrderAdjustmentDto.MergePatchOrderAdjustmentDto body) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new CreateOrMergePatchOrderDto.MergePatchOrderDto();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchOrder.setVersion(version); }
            mergePatchOrder.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderAdjustmentCommand.MergePatchOrderAdjustment mergePatchOrderAdjustment = body;//.toMergePatchOrderAdjustment();
            mergePatchOrderAdjustment.setOrderAdjustmentId(orderAdjustmentId);
            mergePatchOrder.getOrderAdjustmentCommands().add(mergePatchOrderAdjustment);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete OrderAdjustment
     */
    @DeleteMapping("{orderId}/OrderAdjustments/{orderAdjustmentId}")
    public void deleteOrderAdjustment(@PathVariable("orderId") String orderId, @PathVariable("orderAdjustmentId") String orderAdjustmentId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new CreateOrMergePatchOrderDto.MergePatchOrderDto();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchOrder.setVersion(version); 
            } else {
                mergePatchOrder.setVersion(orderApplicationService.get(orderId).getVersion());
            }
            mergePatchOrder.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderAdjustmentCommand.RemoveOrderAdjustment removeOrderAdjustment = new RemoveOrderAdjustmentDto();
            removeOrderAdjustment.setOrderAdjustmentId(orderAdjustmentId);
            mergePatchOrder.getOrderAdjustmentCommands().add(removeOrderAdjustment);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * OrderAdjustment List
     */
    @GetMapping("{orderId}/OrderAdjustments")
    @Transactional(readOnly = true)
    public OrderAdjustmentStateDto[] getOrderAdjustments(@PathVariable("orderId") String orderId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderHeaderResourceUtils.getOrderAdjustmentFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderAdjustmentMetadata.aliasMap.containsKey(n) ? OrderAdjustmentMetadata.aliasMap.get(n) : n));
            Iterable<OrderAdjustmentState> states = orderApplicationService.getOrderAdjustments(orderId, c,
                    OrderHeaderResourceUtils.getOrderAdjustmentQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            OrderAdjustmentStateDto.DtoConverter dtoConverter = new OrderAdjustmentStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderAdjustmentStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create.
     * Create OrderAdjustment
     */
    @PostMapping(path = "{orderId}/OrderAdjustments", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postOrderAdjustment(@PathVariable("orderId") String orderId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchOrderAdjustmentDto.CreateOrderAdjustmentDto body) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new AbstractOrderCommand.SimpleMergePatchOrder();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchOrder.setVersion(version); }
            mergePatchOrder.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderAdjustmentCommand.CreateOrderAdjustment createOrderAdjustment = body.toCreateOrderAdjustment();
            mergePatchOrder.getOrderAdjustmentCommands().add(createOrderAdjustment);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves OrderShipGroup with the specified ShipGroupSeqId.
     */
    @GetMapping("{orderId}/OrderShipGroups/{shipGroupSeqId}")
    @Transactional(readOnly = true)
    public OrderShipGroupStateDto getOrderShipGroup(@PathVariable("orderId") String orderId, @PathVariable("shipGroupSeqId") String shipGroupSeqId) {
        try {

            OrderShipGroupState state = orderApplicationService.getOrderShipGroup(orderId, shipGroupSeqId);
            if (state == null) { return null; }
            OrderShipGroupStateDto.DtoConverter dtoConverter = new OrderShipGroupStateDto.DtoConverter();
            OrderShipGroupStateDto stateDto = dtoConverter.toOrderShipGroupStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create or update.
     * Create or update OrderShipGroup
     */
    @PutMapping(path = "{orderId}/OrderShipGroups/{shipGroupSeqId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putOrderShipGroup(@PathVariable("orderId") String orderId, @PathVariable("shipGroupSeqId") String shipGroupSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchOrderShipGroupDto.MergePatchOrderShipGroupDto body) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new CreateOrMergePatchOrderDto.MergePatchOrderDto();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchOrder.setVersion(version); }
            mergePatchOrder.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderShipGroupCommand.MergePatchOrderShipGroup mergePatchOrderShipGroup = body;//.toMergePatchOrderShipGroup();
            mergePatchOrderShipGroup.setShipGroupSeqId(shipGroupSeqId);
            mergePatchOrder.getOrderShipGroupCommands().add(mergePatchOrderShipGroup);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete OrderShipGroup
     */
    @DeleteMapping("{orderId}/OrderShipGroups/{shipGroupSeqId}")
    public void deleteOrderShipGroup(@PathVariable("orderId") String orderId, @PathVariable("shipGroupSeqId") String shipGroupSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new CreateOrMergePatchOrderDto.MergePatchOrderDto();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchOrder.setVersion(version); 
            } else {
                mergePatchOrder.setVersion(orderApplicationService.get(orderId).getVersion());
            }
            mergePatchOrder.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderShipGroupCommand.RemoveOrderShipGroup removeOrderShipGroup = new RemoveOrderShipGroupDto();
            removeOrderShipGroup.setShipGroupSeqId(shipGroupSeqId);
            mergePatchOrder.getOrderShipGroupCommands().add(removeOrderShipGroup);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * OrderShipGroup List
     */
    @GetMapping("{orderId}/OrderShipGroups")
    @Transactional(readOnly = true)
    public OrderShipGroupStateDto[] getOrderShipGroups(@PathVariable("orderId") String orderId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderHeaderResourceUtils.getOrderShipGroupFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderShipGroupMetadata.aliasMap.containsKey(n) ? OrderShipGroupMetadata.aliasMap.get(n) : n));
            Iterable<OrderShipGroupState> states = orderApplicationService.getOrderShipGroups(orderId, c,
                    OrderHeaderResourceUtils.getOrderShipGroupQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            OrderShipGroupStateDto.DtoConverter dtoConverter = new OrderShipGroupStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderShipGroupStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create.
     * Create OrderShipGroup
     */
    @PostMapping(path = "{orderId}/OrderShipGroups", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postOrderShipGroup(@PathVariable("orderId") String orderId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchOrderShipGroupDto.CreateOrderShipGroupDto body) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new AbstractOrderCommand.SimpleMergePatchOrder();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchOrder.setVersion(version); }
            mergePatchOrder.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderShipGroupCommand.CreateOrderShipGroup createOrderShipGroup = body.toCreateOrderShipGroup();
            mergePatchOrder.getOrderShipGroupCommands().add(createOrderShipGroup);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves OrderItemShipGroupAssociation with the specified OrderItemSeqId.
     */
    @GetMapping("{orderId}/OrderShipGroups/{orderShipGroupShipGroupSeqId}/OrderItemShipGroupAssociations/{orderItemSeqId}")
    @Transactional(readOnly = true)
    public OrderItemShipGroupAssociationStateDto getOrderItemShipGroupAssociation(@PathVariable("orderId") String orderId, @PathVariable("orderShipGroupShipGroupSeqId") String orderShipGroupShipGroupSeqId, @PathVariable("orderItemSeqId") String orderItemSeqId) {
        try {

            OrderItemShipGroupAssociationState state = orderApplicationService.getOrderItemShipGroupAssociation(orderId, orderShipGroupShipGroupSeqId, orderItemSeqId);
            if (state == null) { return null; }
            OrderItemShipGroupAssociationStateDto.DtoConverter dtoConverter = new OrderItemShipGroupAssociationStateDto.DtoConverter();
            OrderItemShipGroupAssociationStateDto stateDto = dtoConverter.toOrderItemShipGroupAssociationStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create or update.
     * Create or update OrderItemShipGroupAssociation
     */
    @PutMapping(path = "{orderId}/OrderShipGroups/{orderShipGroupShipGroupSeqId}/OrderItemShipGroupAssociations/{orderItemSeqId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putOrderItemShipGroupAssociation(@PathVariable("orderId") String orderId, @PathVariable("orderShipGroupShipGroupSeqId") String orderShipGroupShipGroupSeqId, @PathVariable("orderItemSeqId") String orderItemSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchOrderItemShipGroupAssociationDto.MergePatchOrderItemShipGroupAssociationDto body) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new CreateOrMergePatchOrderDto.MergePatchOrderDto();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchOrder.setVersion(version); }
            mergePatchOrder.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderShipGroupCommand.MergePatchOrderShipGroup mergePatchOrderShipGroup = new CreateOrMergePatchOrderShipGroupDto.MergePatchOrderShipGroupDto();
            mergePatchOrderShipGroup.setShipGroupSeqId(orderShipGroupShipGroupSeqId);
            mergePatchOrder.getOrderShipGroupCommands().add(mergePatchOrderShipGroup);
            OrderItemShipGroupAssociationCommand.MergePatchOrderItemShipGroupAssociation mergePatchOrderItemShipGroupAssociation = body;//.toMergePatchOrderItemShipGroupAssociation();
            mergePatchOrderItemShipGroupAssociation.setOrderItemSeqId(orderItemSeqId);
            mergePatchOrderShipGroup.getOrderItemShipGroupAssociationCommands().add(mergePatchOrderItemShipGroupAssociation);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete OrderItemShipGroupAssociation
     */
    @DeleteMapping("{orderId}/OrderShipGroups/{orderShipGroupShipGroupSeqId}/OrderItemShipGroupAssociations/{orderItemSeqId}")
    public void deleteOrderItemShipGroupAssociation(@PathVariable("orderId") String orderId, @PathVariable("orderShipGroupShipGroupSeqId") String orderShipGroupShipGroupSeqId, @PathVariable("orderItemSeqId") String orderItemSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new CreateOrMergePatchOrderDto.MergePatchOrderDto();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchOrder.setVersion(version); 
            } else {
                mergePatchOrder.setVersion(orderApplicationService.get(orderId).getVersion());
            }
            mergePatchOrder.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderShipGroupCommand.MergePatchOrderShipGroup mergePatchOrderShipGroup = new CreateOrMergePatchOrderShipGroupDto.MergePatchOrderShipGroupDto();
            mergePatchOrderShipGroup.setShipGroupSeqId(orderShipGroupShipGroupSeqId);
            mergePatchOrder.getOrderShipGroupCommands().add(mergePatchOrderShipGroup);
            OrderItemShipGroupAssociationCommand.RemoveOrderItemShipGroupAssociation removeOrderItemShipGroupAssociation = new RemoveOrderItemShipGroupAssociationDto();
            removeOrderItemShipGroupAssociation.setOrderItemSeqId(orderItemSeqId);
            mergePatchOrderShipGroup.getOrderItemShipGroupAssociationCommands().add(removeOrderItemShipGroupAssociation);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * OrderItemShipGroupAssociation List
     */
    @GetMapping("{orderId}/OrderShipGroups/{orderShipGroupShipGroupSeqId}/OrderItemShipGroupAssociations")
    @Transactional(readOnly = true)
    public OrderItemShipGroupAssociationStateDto[] getOrderItemShipGroupAssociations(@PathVariable("orderId") String orderId, @PathVariable("orderShipGroupShipGroupSeqId") String orderShipGroupShipGroupSeqId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> OrderHeaderResourceUtils.getOrderItemShipGroupAssociationFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (OrderItemShipGroupAssociationMetadata.aliasMap.containsKey(n) ? OrderItemShipGroupAssociationMetadata.aliasMap.get(n) : n));
            Iterable<OrderItemShipGroupAssociationState> states = orderApplicationService.getOrderItemShipGroupAssociations(orderId, orderShipGroupShipGroupSeqId, c,
                    OrderHeaderResourceUtils.getOrderItemShipGroupAssociationQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            OrderItemShipGroupAssociationStateDto.DtoConverter dtoConverter = new OrderItemShipGroupAssociationStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toOrderItemShipGroupAssociationStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create.
     * Create OrderItemShipGroupAssociation
     */
    @PostMapping(path = "{orderId}/OrderShipGroups/{orderShipGroupShipGroupSeqId}/OrderItemShipGroupAssociations", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postOrderItemShipGroupAssociation(@PathVariable("orderId") String orderId, @PathVariable("orderShipGroupShipGroupSeqId") String orderShipGroupShipGroupSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchOrderItemShipGroupAssociationDto.CreateOrderItemShipGroupAssociationDto body) {
        try {
            OrderCommand.MergePatchOrder mergePatchOrder = new AbstractOrderCommand.SimpleMergePatchOrder();
            mergePatchOrder.setOrderId(orderId);
            mergePatchOrder.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchOrder.setVersion(version); }
            mergePatchOrder.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            OrderShipGroupCommand.MergePatchOrderShipGroup mergePatchOrderShipGroup = new AbstractOrderShipGroupCommand.SimpleMergePatchOrderShipGroup();
            mergePatchOrderShipGroup.setShipGroupSeqId(orderShipGroupShipGroupSeqId);
            mergePatchOrder.getOrderShipGroupCommands().add(mergePatchOrderShipGroup);
            OrderItemShipGroupAssociationCommand.CreateOrderItemShipGroupAssociation createOrderItemShipGroupAssociation = body.toCreateOrderItemShipGroupAssociation();
            mergePatchOrderShipGroup.getOrderItemShipGroupAssociationCommands().add(createOrderItemShipGroupAssociation);
            mergePatchOrder.setRequesterId(SecurityContextUtil.getRequesterId());
            orderApplicationService.when(mergePatchOrder);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }



    //protected  OrderHeaderStateEventDtoConverter getOrderHeaderStateEventDtoConverter() {
    //    return new OrderHeaderStateEventDtoConverter();
    //}

    protected TypeConverter getCriterionTypeConverter() {
        return new DefaultTypeConverter();
    }

    protected PropertyTypeResolver getPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return OrderHeaderResourceUtils.getFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getOrderRolePropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return OrderHeaderResourceUtils.getOrderRoleFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getOrderContactMechPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return OrderHeaderResourceUtils.getOrderContactMechFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getOrderItemPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return OrderHeaderResourceUtils.getOrderItemFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getOrderAdjustmentPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return OrderHeaderResourceUtils.getOrderAdjustmentFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getOrderShipGroupPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return OrderHeaderResourceUtils.getOrderShipGroupFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getOrderItemShipGroupAssociationPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return OrderHeaderResourceUtils.getOrderItemShipGroupAssociationFilterPropertyType(propertyName);
            }
        };
    }

 
    public static class OrderHeaderResourceUtils {

        public static void setNullIdOrThrowOnInconsistentIds(String orderId, org.dddml.ffvtraceability.domain.order.OrderCommand value) {
            String idObj = orderId;
            if (value.getOrderId() == null) {
                value.setOrderId(idObj);
            } else if (!value.getOrderId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", orderId, value.getOrderId());
            }
        }
    
        public static List<String> getQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, OrderHeaderMetadata.aliasMap);
        }

        public static List<String> getQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, OrderHeaderMetadata.aliasMap);
        }

        public static String getFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (OrderHeaderMetadata.aliasMap.containsKey(fieldName)) {
                return OrderHeaderMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getFilterPropertyType(String propertyName) {
            if (OrderHeaderMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = OrderHeaderMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getOrderRoleQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, OrderRoleMetadata.aliasMap);
        }

        public static List<String> getOrderRoleQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, OrderRoleMetadata.aliasMap);
        }

        public static String getOrderRoleFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (OrderRoleMetadata.aliasMap.containsKey(fieldName)) {
                return OrderRoleMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getOrderRoleFilterPropertyType(String propertyName) {
            if (OrderRoleMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = OrderRoleMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getOrderRoleQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getOrderRoleFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getOrderRoleFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getOrderContactMechQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, OrderContactMechMetadata.aliasMap);
        }

        public static List<String> getOrderContactMechQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, OrderContactMechMetadata.aliasMap);
        }

        public static String getOrderContactMechFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (OrderContactMechMetadata.aliasMap.containsKey(fieldName)) {
                return OrderContactMechMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getOrderContactMechFilterPropertyType(String propertyName) {
            if (OrderContactMechMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = OrderContactMechMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getOrderContactMechQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getOrderContactMechFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getOrderContactMechFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getOrderItemQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, OrderItemMetadata.aliasMap);
        }

        public static List<String> getOrderItemQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, OrderItemMetadata.aliasMap);
        }

        public static String getOrderItemFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (OrderItemMetadata.aliasMap.containsKey(fieldName)) {
                return OrderItemMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getOrderItemFilterPropertyType(String propertyName) {
            if (OrderItemMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = OrderItemMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getOrderItemQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getOrderItemFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getOrderItemFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getOrderAdjustmentQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, OrderAdjustmentMetadata.aliasMap);
        }

        public static List<String> getOrderAdjustmentQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, OrderAdjustmentMetadata.aliasMap);
        }

        public static String getOrderAdjustmentFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (OrderAdjustmentMetadata.aliasMap.containsKey(fieldName)) {
                return OrderAdjustmentMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getOrderAdjustmentFilterPropertyType(String propertyName) {
            if (OrderAdjustmentMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = OrderAdjustmentMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getOrderAdjustmentQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getOrderAdjustmentFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getOrderAdjustmentFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getOrderShipGroupQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, OrderShipGroupMetadata.aliasMap);
        }

        public static List<String> getOrderShipGroupQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, OrderShipGroupMetadata.aliasMap);
        }

        public static String getOrderShipGroupFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (OrderShipGroupMetadata.aliasMap.containsKey(fieldName)) {
                return OrderShipGroupMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getOrderShipGroupFilterPropertyType(String propertyName) {
            if (OrderShipGroupMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = OrderShipGroupMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getOrderShipGroupQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getOrderShipGroupFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getOrderShipGroupFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getOrderItemShipGroupAssociationQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, OrderItemShipGroupAssociationMetadata.aliasMap);
        }

        public static List<String> getOrderItemShipGroupAssociationQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, OrderItemShipGroupAssociationMetadata.aliasMap);
        }

        public static String getOrderItemShipGroupAssociationFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (OrderItemShipGroupAssociationMetadata.aliasMap.containsKey(fieldName)) {
                return OrderItemShipGroupAssociationMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getOrderItemShipGroupAssociationFilterPropertyType(String propertyName) {
            if (OrderItemShipGroupAssociationMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = OrderItemShipGroupAssociationMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getOrderItemShipGroupAssociationQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getOrderItemShipGroupAssociationFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getOrderItemShipGroupAssociationFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static OrderHeaderStateDto[] toOrderHeaderStateDtoArray(Iterable<String> ids) {
            List<OrderHeaderStateDto> states = new ArrayList<>();
            ids.forEach(i -> {
                OrderHeaderStateDto dto = new OrderHeaderStateDto();
                dto.setOrderId(i);
                states.add(dto);
            });
            return states.toArray(new OrderHeaderStateDto[0]);
        }

    }

}

