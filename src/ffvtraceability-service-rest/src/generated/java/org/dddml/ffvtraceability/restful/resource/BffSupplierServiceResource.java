// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffSuppliers", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffSupplierServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffSupplierApplicationService bffSupplierApplicationService;

    @GetMapping
    public Page<BffSupplierDto> getSuppliers(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size
    ) {
        BffSupplierServiceCommands.GetSuppliers getSuppliers = new BffSupplierServiceCommands.GetSuppliers();
        getSuppliers.setPage(page);
        getSuppliers.setSize(size);
        try {
        getSuppliers.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffSupplierApplicationService.when(getSuppliers);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{supplierId}")
    public BffSupplierDto getSupplier(
        @PathVariable("supplierId") String supplierId
    ) {
        BffSupplierServiceCommands.GetSupplier getSupplier = new BffSupplierServiceCommands.GetSupplier();
        getSupplier.setSupplierId(supplierId);
        try {
        getSupplier.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffSupplierApplicationService.when(getSupplier);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @PostMapping
    public String createSupplier(
        @RequestBody BffSupplierDto supplier
    ) {
        BffSupplierServiceCommands.CreateSupplier createSupplier = new BffSupplierServiceCommands.CreateSupplier();
        createSupplier.setSupplier(supplier);
        try {
        createSupplier.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffSupplierApplicationService.when(createSupplier);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @PutMapping("{supplierId}")
    public void updateSupplier(
        @PathVariable("supplierId") String supplierId,
        @RequestBody BffSupplierDto supplier
    ) {
        BffSupplierServiceCommands.UpdateSupplier updateSupplier = new BffSupplierServiceCommands.UpdateSupplier();
        updateSupplier.setSupplierId(supplierId);
        updateSupplier.setSupplier(supplier);
        try {
        updateSupplier.setRequesterId(SecurityContextUtil.getRequesterId());
        bffSupplierApplicationService.when(updateSupplier);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @PutMapping("{supplierId}/active")
    public void activateSupplier(
        @PathVariable("supplierId") String supplierId,
        @RequestBody Boolean active
    ) {
        BffSupplierServiceCommands.ActivateSupplier activateSupplier = new BffSupplierServiceCommands.ActivateSupplier();
        activateSupplier.setSupplierId(supplierId);
        activateSupplier.setActive(active);
        try {
        activateSupplier.setRequesterId(SecurityContextUtil.getRequesterId());
        bffSupplierApplicationService.when(activateSupplier);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

}

