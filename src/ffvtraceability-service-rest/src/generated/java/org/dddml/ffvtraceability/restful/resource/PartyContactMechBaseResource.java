// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import java.util.stream.*;
import jakarta.servlet.http.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.dddml.support.criterion.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.partycontactmech.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;
import org.dddml.support.criterion.TypeConverter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RequestMapping(path = "PartyContactMechBases", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class PartyContactMechBaseResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());


    @Autowired
    private PartyContactMechApplicationService partyContactMechApplicationService;


    /**
     * Retrieve.
     * Retrieve PartyContactMechBases
     */
    @GetMapping
    @Transactional(readOnly = true)
    public PartyContactMechBaseStateDto[] getAll( HttpServletRequest request,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "firstResult", defaultValue = "0") Integer firstResult,
                    @RequestParam(value = "maxResults", defaultValue = "2147483647") Integer maxResults,
                    @RequestParam(value = "filter", required = false) String filter) {
        try {
        if (firstResult < 0) { firstResult = 0; }
        if (maxResults == null || maxResults < 1) { maxResults = Integer.MAX_VALUE; }

            Iterable<PartyContactMechBaseState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> PartyContactMechBaseResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (PartyContactMechBaseMetadata.aliasMap.containsKey(n) ? PartyContactMechBaseMetadata.aliasMap.get(n) : n));
            states = partyContactMechApplicationService.get(
                c,
                PartyContactMechBaseResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);

            PartyContactMechBaseStateDto.DtoConverter dtoConverter = new PartyContactMechBaseStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toPartyContactMechBaseStateDtoArray(states);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve in pages.
     * Retrieve PartyContactMechBases in pages.
     */
    @GetMapping("_page")
    @Transactional(readOnly = true)
    public Page<PartyContactMechBaseStateDto> getPage( HttpServletRequest request,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "page", defaultValue = "0") Integer page,
                    @RequestParam(value = "size", defaultValue = "20") Integer size,
                    @RequestParam(value = "filter", required = false) String filter) {
        try {
            Integer firstResult = (page == null ? 0 : page) * (size == null ? 20 : size);
            Integer maxResults = (size == null ? 20 : size);
            Iterable<PartyContactMechBaseState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> PartyContactMechBaseResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (PartyContactMechBaseMetadata.aliasMap.containsKey(n) ? PartyContactMechBaseMetadata.aliasMap.get(n) : n));
            states = partyContactMechApplicationService.get(
                c,
                PartyContactMechBaseResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);
            long count = partyContactMechApplicationService.getCount(c);

            PartyContactMechBaseStateDto.DtoConverter dtoConverter = new PartyContactMechBaseStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            Page.PageImpl<PartyContactMechBaseStateDto> statePage =  new Page.PageImpl<>(dtoConverter.toPartyContactMechBaseStateDtoList(states), count);
            statePage.setSize(size);
            statePage.setNumber(page);
            return statePage;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves PartyContactMech with the specified ID.
     */
    @GetMapping("{partyContactMechBaseId}")
    @Transactional(readOnly = true)
    public PartyContactMechBaseStateDto get(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @RequestParam(value = "fields", required = false) String fields) {
        try {
            PartyContactMechBaseId idObj = PartyContactMechBaseResourceUtils.parseIdString(partyContactMechBaseId);
            PartyContactMechBaseState state = partyContactMechApplicationService.get(idObj);
            if (state == null) { return null; }

            PartyContactMechBaseStateDto.DtoConverter dtoConverter = new PartyContactMechBaseStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toPartyContactMechBaseStateDto(state);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("_count")
    @Transactional(readOnly = true)
    public long getCount( HttpServletRequest request,
                         @RequestParam(value = "filter", required = false) String filter) {
        try {
            long count = 0;
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap());
            }
            Criterion c = CriterionDto.toSubclass(criterion,
                getCriterionTypeConverter(), 
                getPropertyTypeResolver(), 
                n -> (PartyContactMechBaseMetadata.aliasMap.containsKey(n) ? PartyContactMechBaseMetadata.aliasMap.get(n) : n));
            count = partyContactMechApplicationService.getCount(c);
            return count;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    /**
     * Create.
     * Create PartyContactMech
     */
    @PostMapping @ResponseStatus(HttpStatus.CREATED)
    public PartyContactMechBaseId post(@RequestBody CreateOrMergePatchPartyContactMechBaseDto.CreatePartyContactMechBaseDto value,  HttpServletResponse response) {
        try {
            PartyContactMechBaseCommand.CreatePartyContactMechBase cmd = value;//.toCreatePartyContactMechBase();
            if (cmd.getPartyContactMechBaseId() == null) {
                throw DomainError.named("nullId", "Aggregate Id in cmd is null, aggregate name: %1$s.", "PartyContactMech");
            }
            PartyContactMechBaseId idObj = cmd.getPartyContactMechBaseId();
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            partyContactMechApplicationService.when(cmd);

            return idObj;
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    /**
     * Create or update.
     * Create or update PartyContactMech
     */
    @PutMapping("{partyContactMechBaseId}")
    public void put(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @RequestBody CreateOrMergePatchPartyContactMechBaseDto value) {
        try {
            if (value.getVersion() != null) {
                value.setCommandType(Command.COMMAND_TYPE_MERGE_PATCH);
                PartyContactMechBaseCommand.MergePatchPartyContactMechBase cmd = (PartyContactMechBaseCommand.MergePatchPartyContactMechBase) value.toSubclass();
                PartyContactMechBaseResourceUtils.setNullIdOrThrowOnInconsistentIds(partyContactMechBaseId, cmd);
                cmd.setRequesterId(SecurityContextUtil.getRequesterId());
                partyContactMechApplicationService.when(cmd);
                return;
            }

            value.setCommandType(Command.COMMAND_TYPE_CREATE);
            PartyContactMechBaseCommand.CreatePartyContactMechBase cmd = (PartyContactMechBaseCommand.CreatePartyContactMechBase) value.toSubclass();
            PartyContactMechBaseResourceUtils.setNullIdOrThrowOnInconsistentIds(partyContactMechBaseId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            partyContactMechApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    /**
     * Patch.
     * Patch PartyContactMech
     */
    @PatchMapping("{partyContactMechBaseId}")
    public void patch(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @RequestBody CreateOrMergePatchPartyContactMechBaseDto.MergePatchPartyContactMechBaseDto value) {
        try {

            PartyContactMechBaseCommand.MergePatchPartyContactMechBase cmd = value;//.toMergePatchPartyContactMechBase();
            PartyContactMechBaseResourceUtils.setNullIdOrThrowOnInconsistentIds(partyContactMechBaseId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            partyContactMechApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("_metadata/filteringFields")
    public List<PropertyMetadataDto> getMetadataFilteringFields() {
        try {

            List<PropertyMetadataDto> filtering = new ArrayList<>();
            PartyContactMechBaseMetadata.propertyTypeMap.forEach((key, value) -> {
                filtering.add(new PropertyMetadataDto(key, value, true));
            });
            return filtering;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{partyContactMechBaseId}/_events/{version}")
    @Transactional(readOnly = true)
    public PartyContactMechBaseEvent getEvent(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @PathVariable("version") long version) {
        try {

            PartyContactMechBaseId idObj = PartyContactMechBaseResourceUtils.parseIdString(partyContactMechBaseId);
            //PartyContactMechBaseStateEventDtoConverter dtoConverter = getPartyContactMechBaseStateEventDtoConverter();
            return partyContactMechApplicationService.getEvent(idObj, version);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{partyContactMechBaseId}/_historyStates/{version}")
    @Transactional(readOnly = true)
    public PartyContactMechBaseStateDto getHistoryState(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @PathVariable("version") long version, @RequestParam(value = "fields", required = false) String fields) {
        try {

            PartyContactMechBaseId idObj = PartyContactMechBaseResourceUtils.parseIdString(partyContactMechBaseId);
            PartyContactMechBaseStateDto.DtoConverter dtoConverter = new PartyContactMechBaseStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toPartyContactMechBaseStateDto(partyContactMechApplicationService.getHistoryState(idObj, version));

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves PartyContactMech with the specified FromDate.
     */
    @GetMapping("{partyContactMechBaseId}/PartyContactMeches/{fromDate}")
    @Transactional(readOnly = true)
    public PartyContactMechStateDto getPartyContactMech(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @PathVariable("fromDate") OffsetDateTime fromDate) {
        try {

            PartyContactMechState state = partyContactMechApplicationService.getPartyContactMech((new AbstractValueObjectTextFormatter<PartyContactMechBaseId>(PartyContactMechBaseId.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(partyContactMechBaseId)), fromDate);
            if (state == null) { return null; }
            PartyContactMechStateDto.DtoConverter dtoConverter = new PartyContactMechStateDto.DtoConverter();
            PartyContactMechStateDto stateDto = dtoConverter.toPartyContactMechStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create or update.
     * Create or update PartyContactMech
     */
    @PutMapping(path = "{partyContactMechBaseId}/PartyContactMeches/{fromDate}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putPartyContactMech(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @PathVariable("fromDate") OffsetDateTime fromDate,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchPartyContactMechDto.MergePatchPartyContactMechDto body) {
        try {
            PartyContactMechBaseCommand.MergePatchPartyContactMechBase mergePatchPartyContactMechBase = new CreateOrMergePatchPartyContactMechBaseDto.MergePatchPartyContactMechBaseDto();
            mergePatchPartyContactMechBase.setPartyContactMechBaseId((new AbstractValueObjectTextFormatter<PartyContactMechBaseId>(PartyContactMechBaseId.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(partyContactMechBaseId)));
            mergePatchPartyContactMechBase.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchPartyContactMechBase.setVersion(version); }
            mergePatchPartyContactMechBase.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            PartyContactMechCommand.MergePatchPartyContactMech mergePatchPartyContactMech = body;//.toMergePatchPartyContactMech();
            mergePatchPartyContactMech.setFromDate(fromDate);
            mergePatchPartyContactMechBase.getPartyContactMechCommands().add(mergePatchPartyContactMech);
            mergePatchPartyContactMech.setRequesterId(SecurityContextUtil.getRequesterId());
            partyContactMechApplicationService.when(mergePatchPartyContactMechBase);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete PartyContactMech
     */
    @DeleteMapping("{partyContactMechBaseId}/PartyContactMeches/{fromDate}")
    public void deletePartyContactMech(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @PathVariable("fromDate") OffsetDateTime fromDate,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {
            PartyContactMechBaseCommand.MergePatchPartyContactMechBase mergePatchPartyContactMechBase = new CreateOrMergePatchPartyContactMechBaseDto.MergePatchPartyContactMechBaseDto();
            mergePatchPartyContactMechBase.setPartyContactMechBaseId((new AbstractValueObjectTextFormatter<PartyContactMechBaseId>(PartyContactMechBaseId.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(partyContactMechBaseId)));
            mergePatchPartyContactMechBase.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchPartyContactMechBase.setVersion(version); 
            } else {
                mergePatchPartyContactMechBase.setVersion(partyContactMechApplicationService.get((new AbstractValueObjectTextFormatter<PartyContactMechBaseId>(PartyContactMechBaseId.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(partyContactMechBaseId))).getVersion());
            }
            mergePatchPartyContactMechBase.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            PartyContactMechCommand.RemovePartyContactMech removePartyContactMech = new RemovePartyContactMechDto();
            removePartyContactMech.setFromDate(fromDate);
            mergePatchPartyContactMechBase.getPartyContactMechCommands().add(removePartyContactMech);
            mergePatchPartyContactMechBase.setRequesterId(SecurityContextUtil.getRequesterId());
            partyContactMechApplicationService.when(mergePatchPartyContactMechBase);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * PartyContactMech List
     */
    @GetMapping("{partyContactMechBaseId}/PartyContactMeches")
    @Transactional(readOnly = true)
    public PartyContactMechStateDto[] getPartyContactMeches(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> PartyContactMechBaseResourceUtils.getPartyContactMechFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (PartyContactMechMetadata.aliasMap.containsKey(n) ? PartyContactMechMetadata.aliasMap.get(n) : n));
            Iterable<PartyContactMechState> states = partyContactMechApplicationService.getPartyContactMeches((new AbstractValueObjectTextFormatter<PartyContactMechBaseId>(PartyContactMechBaseId.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(partyContactMechBaseId)), c,
                    PartyContactMechBaseResourceUtils.getPartyContactMechQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            PartyContactMechStateDto.DtoConverter dtoConverter = new PartyContactMechStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toPartyContactMechStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create.
     * Create PartyContactMech
     */
    @PostMapping(path = "{partyContactMechBaseId}/PartyContactMeches", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postPartyContactMeches(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchPartyContactMechDto.CreatePartyContactMechDto body) {
        try {
            PartyContactMechBaseCommand.MergePatchPartyContactMechBase mergePatchPartyContactMech = new AbstractPartyContactMechBaseCommand.SimpleMergePatchPartyContactMechBase();
            mergePatchPartyContactMech.setPartyContactMechBaseId((new AbstractValueObjectTextFormatter<PartyContactMechBaseId>(PartyContactMechBaseId.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(partyContactMechBaseId)));
            mergePatchPartyContactMech.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchPartyContactMech.setVersion(version); }
            mergePatchPartyContactMech.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            PartyContactMechCommand.CreatePartyContactMech createPartyContactMech = body.toCreatePartyContactMech();
            mergePatchPartyContactMech.getPartyContactMechCommands().add(createPartyContactMech);
            mergePatchPartyContactMech.setRequesterId(SecurityContextUtil.getRequesterId());
            partyContactMechApplicationService.when(mergePatchPartyContactMech);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves PartyContactMechPurpose with the specified ContactMechPurposeTypeId.
     */
    @GetMapping("{partyContactMechBaseId}/PartyContactMeches/{partyContactMechFromDate}/PartyContactMechPurposes/{contactMechPurposeTypeId}")
    @Transactional(readOnly = true)
    public PartyContactMechPurposeStateDto getPartyContactMechPurpose(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @PathVariable("partyContactMechFromDate") OffsetDateTime partyContactMechFromDate, @PathVariable("contactMechPurposeTypeId") String contactMechPurposeTypeId) {
        try {

            PartyContactMechPurposeState state = partyContactMechApplicationService.getPartyContactMechPurpose((new AbstractValueObjectTextFormatter<PartyContactMechBaseId>(PartyContactMechBaseId.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(partyContactMechBaseId)), partyContactMechFromDate, contactMechPurposeTypeId);
            if (state == null) { return null; }
            PartyContactMechPurposeStateDto.DtoConverter dtoConverter = new PartyContactMechPurposeStateDto.DtoConverter();
            PartyContactMechPurposeStateDto stateDto = dtoConverter.toPartyContactMechPurposeStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create or update.
     * Create or update PartyContactMechPurpose
     */
    @PutMapping(path = "{partyContactMechBaseId}/PartyContactMeches/{partyContactMechFromDate}/PartyContactMechPurposes/{contactMechPurposeTypeId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putPartyContactMechPurpose(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @PathVariable("partyContactMechFromDate") OffsetDateTime partyContactMechFromDate, @PathVariable("contactMechPurposeTypeId") String contactMechPurposeTypeId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchPartyContactMechPurposeDto.MergePatchPartyContactMechPurposeDto body) {
        try {
            PartyContactMechBaseCommand.MergePatchPartyContactMechBase mergePatchPartyContactMechBase = new CreateOrMergePatchPartyContactMechBaseDto.MergePatchPartyContactMechBaseDto();
            mergePatchPartyContactMechBase.setPartyContactMechBaseId((new AbstractValueObjectTextFormatter<PartyContactMechBaseId>(PartyContactMechBaseId.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(partyContactMechBaseId)));
            mergePatchPartyContactMechBase.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchPartyContactMechBase.setVersion(version); }
            mergePatchPartyContactMechBase.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            PartyContactMechCommand.MergePatchPartyContactMech mergePatchPartyContactMech = new CreateOrMergePatchPartyContactMechDto.MergePatchPartyContactMechDto();
            mergePatchPartyContactMech.setFromDate(partyContactMechFromDate);
            mergePatchPartyContactMechBase.getPartyContactMechCommands().add(mergePatchPartyContactMech);
            PartyContactMechPurposeCommand.MergePatchPartyContactMechPurpose mergePatchPartyContactMechPurpose = body;//.toMergePatchPartyContactMechPurpose();
            mergePatchPartyContactMechPurpose.setContactMechPurposeTypeId(contactMechPurposeTypeId);
            mergePatchPartyContactMech.getPartyContactMechPurposeCommands().add(mergePatchPartyContactMechPurpose);
            mergePatchPartyContactMech.setRequesterId(SecurityContextUtil.getRequesterId());
            partyContactMechApplicationService.when(mergePatchPartyContactMechBase);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete PartyContactMechPurpose
     */
    @DeleteMapping("{partyContactMechBaseId}/PartyContactMeches/{partyContactMechFromDate}/PartyContactMechPurposes/{contactMechPurposeTypeId}")
    public void deletePartyContactMechPurpose(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @PathVariable("partyContactMechFromDate") OffsetDateTime partyContactMechFromDate, @PathVariable("contactMechPurposeTypeId") String contactMechPurposeTypeId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {
            PartyContactMechBaseCommand.MergePatchPartyContactMechBase mergePatchPartyContactMechBase = new CreateOrMergePatchPartyContactMechBaseDto.MergePatchPartyContactMechBaseDto();
            mergePatchPartyContactMechBase.setPartyContactMechBaseId((new AbstractValueObjectTextFormatter<PartyContactMechBaseId>(PartyContactMechBaseId.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(partyContactMechBaseId)));
            mergePatchPartyContactMechBase.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchPartyContactMechBase.setVersion(version); 
            } else {
                mergePatchPartyContactMechBase.setVersion(partyContactMechApplicationService.get((new AbstractValueObjectTextFormatter<PartyContactMechBaseId>(PartyContactMechBaseId.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(partyContactMechBaseId))).getVersion());
            }
            mergePatchPartyContactMechBase.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            PartyContactMechCommand.MergePatchPartyContactMech mergePatchPartyContactMech = new CreateOrMergePatchPartyContactMechDto.MergePatchPartyContactMechDto();
            mergePatchPartyContactMech.setFromDate(partyContactMechFromDate);
            mergePatchPartyContactMechBase.getPartyContactMechCommands().add(mergePatchPartyContactMech);
            PartyContactMechPurposeCommand.RemovePartyContactMechPurpose removePartyContactMechPurpose = new RemovePartyContactMechPurposeDto();
            removePartyContactMechPurpose.setContactMechPurposeTypeId(contactMechPurposeTypeId);
            mergePatchPartyContactMech.getPartyContactMechPurposeCommands().add(removePartyContactMechPurpose);
            mergePatchPartyContactMechBase.setRequesterId(SecurityContextUtil.getRequesterId());
            partyContactMechApplicationService.when(mergePatchPartyContactMechBase);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * PartyContactMechPurpose List
     */
    @GetMapping("{partyContactMechBaseId}/PartyContactMeches/{partyContactMechFromDate}/PartyContactMechPurposes")
    @Transactional(readOnly = true)
    public PartyContactMechPurposeStateDto[] getPartyContactMechPurposes(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @PathVariable("partyContactMechFromDate") OffsetDateTime partyContactMechFromDate,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> PartyContactMechBaseResourceUtils.getPartyContactMechPurposeFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (PartyContactMechPurposeMetadata.aliasMap.containsKey(n) ? PartyContactMechPurposeMetadata.aliasMap.get(n) : n));
            Iterable<PartyContactMechPurposeState> states = partyContactMechApplicationService.getPartyContactMechPurposes((new AbstractValueObjectTextFormatter<PartyContactMechBaseId>(PartyContactMechBaseId.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(partyContactMechBaseId)), partyContactMechFromDate, c,
                    PartyContactMechBaseResourceUtils.getPartyContactMechPurposeQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            PartyContactMechPurposeStateDto.DtoConverter dtoConverter = new PartyContactMechPurposeStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toPartyContactMechPurposeStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create.
     * Create PartyContactMechPurpose
     */
    @PostMapping(path = "{partyContactMechBaseId}/PartyContactMeches/{partyContactMechFromDate}/PartyContactMechPurposes", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postPartyContactMechPurposes(@PathVariable("partyContactMechBaseId") String partyContactMechBaseId, @PathVariable("partyContactMechFromDate") OffsetDateTime partyContactMechFromDate,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchPartyContactMechPurposeDto.CreatePartyContactMechPurposeDto body) {
        try {
            PartyContactMechBaseCommand.MergePatchPartyContactMechBase mergePatchPartyContactMechBase = new AbstractPartyContactMechBaseCommand.SimpleMergePatchPartyContactMechBase();
            mergePatchPartyContactMechBase.setPartyContactMechBaseId((new AbstractValueObjectTextFormatter<PartyContactMechBaseId>(PartyContactMechBaseId.class, ",") {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    }.parse(partyContactMechBaseId)));
            mergePatchPartyContactMechBase.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchPartyContactMechBase.setVersion(version); }
            mergePatchPartyContactMechBase.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            PartyContactMechCommand.MergePatchPartyContactMech mergePatchPartyContactMech = new AbstractPartyContactMechCommand.SimpleMergePatchPartyContactMech();
            mergePatchPartyContactMech.setFromDate(partyContactMechFromDate);
            mergePatchPartyContactMechBase.getPartyContactMechCommands().add(mergePatchPartyContactMech);
            PartyContactMechPurposeCommand.CreatePartyContactMechPurpose createPartyContactMechPurpose = body.toCreatePartyContactMechPurpose();
            mergePatchPartyContactMech.getPartyContactMechPurposeCommands().add(createPartyContactMechPurpose);
            mergePatchPartyContactMech.setRequesterId(SecurityContextUtil.getRequesterId());
            partyContactMechApplicationService.when(mergePatchPartyContactMechBase);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }



    //protected  PartyContactMechBaseStateEventDtoConverter getPartyContactMechBaseStateEventDtoConverter() {
    //    return new PartyContactMechBaseStateEventDtoConverter();
    //}

    protected TypeConverter getCriterionTypeConverter() {
        return new DefaultTypeConverter();
    }

    protected PropertyTypeResolver getPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return PartyContactMechBaseResourceUtils.getFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getPartyContactMechPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return PartyContactMechBaseResourceUtils.getPartyContactMechFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getPartyContactMechPurposePropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return PartyContactMechBaseResourceUtils.getPartyContactMechPurposeFilterPropertyType(propertyName);
            }
        };
    }

 
    public static class PartyContactMechBaseResourceUtils {

        private static final com.fasterxml.jackson.databind.ObjectMapper objectMapper;

        static {
            objectMapper = new com.fasterxml.jackson.databind.ObjectMapper();
            objectMapper.setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL);
            objectMapper.configure(com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            objectMapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule())
                    .setDateFormat(new com.fasterxml.jackson.databind.util.StdDateFormat().withColonInTimeZone(true))
                    .configure(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)
                    .configure(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, false)
                    .configure(com.fasterxml.jackson.databind.DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE, false);
        }

        public static PartyContactMechBaseId parseIdString(String idString) {
            try {
                return objectMapper.readValue(idString, PartyContactMechBaseId.class);
            } catch (com.fasterxml.jackson.core.JsonProcessingException e) {
                throw new RuntimeException(e);
            }
        }

        public static void setNullIdOrThrowOnInconsistentIds(String partyContactMechBaseId, org.dddml.ffvtraceability.domain.partycontactmech.PartyContactMechBaseCommand value) {
            PartyContactMechBaseId idObj = parseIdString(partyContactMechBaseId);
            if (value.getPartyContactMechBaseId() == null) {
                value.setPartyContactMechBaseId(idObj);
            } else if (!value.getPartyContactMechBaseId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", partyContactMechBaseId, value.getPartyContactMechBaseId());
            }
        }
    
        public static List<String> getQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, PartyContactMechBaseMetadata.aliasMap);
        }

        public static List<String> getQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, PartyContactMechBaseMetadata.aliasMap);
        }

        public static String getFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (PartyContactMechBaseMetadata.aliasMap.containsKey(fieldName)) {
                return PartyContactMechBaseMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getFilterPropertyType(String propertyName) {
            if (PartyContactMechBaseMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = PartyContactMechBaseMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getPartyContactMechQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, PartyContactMechMetadata.aliasMap);
        }

        public static List<String> getPartyContactMechQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, PartyContactMechMetadata.aliasMap);
        }

        public static String getPartyContactMechFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (PartyContactMechMetadata.aliasMap.containsKey(fieldName)) {
                return PartyContactMechMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getPartyContactMechFilterPropertyType(String propertyName) {
            if (PartyContactMechMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = PartyContactMechMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getPartyContactMechQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getPartyContactMechFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getPartyContactMechFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getPartyContactMechPurposeQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, PartyContactMechPurposeMetadata.aliasMap);
        }

        public static List<String> getPartyContactMechPurposeQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, PartyContactMechPurposeMetadata.aliasMap);
        }

        public static String getPartyContactMechPurposeFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (PartyContactMechPurposeMetadata.aliasMap.containsKey(fieldName)) {
                return PartyContactMechPurposeMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getPartyContactMechPurposeFilterPropertyType(String propertyName) {
            if (PartyContactMechPurposeMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = PartyContactMechPurposeMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getPartyContactMechPurposeQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getPartyContactMechPurposeFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getPartyContactMechPurposeFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static PartyContactMechBaseStateDto[] toPartyContactMechBaseStateDtoArray(Iterable<PartyContactMechBaseId> ids) {
            List<PartyContactMechBaseStateDto> states = new ArrayList<>();
            ids.forEach(i -> {
                PartyContactMechBaseStateDto dto = new PartyContactMechBaseStateDto();
                dto.setPartyContactMechBaseId(i);
                states.add(dto);
            });
            return states.toArray(new PartyContactMechBaseStateDto[0]);
        }

    }

}

