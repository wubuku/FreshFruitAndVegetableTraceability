// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import java.util.stream.*;
import jakarta.servlet.http.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.dddml.support.criterion.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.shipment.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;
import org.dddml.support.criterion.TypeConverter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RequestMapping(path = "Shipments", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class ShipmentResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());


    @Autowired
    private ShipmentApplicationService shipmentApplicationService;


    /**
     * Retrieve.
     * Retrieve Shipments
     */
    @GetMapping
    @Transactional(readOnly = true)
    public ShipmentStateDto[] getAll( HttpServletRequest request,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "firstResult", defaultValue = "0") Integer firstResult,
                    @RequestParam(value = "maxResults", defaultValue = "2147483647") Integer maxResults,
                    @RequestParam(value = "filter", required = false) String filter) {
        try {
        if (firstResult < 0) { firstResult = 0; }
        if (maxResults == null || maxResults < 1) { maxResults = Integer.MAX_VALUE; }

            Iterable<ShipmentState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> ShipmentResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (ShipmentMetadata.aliasMap.containsKey(n) ? ShipmentMetadata.aliasMap.get(n) : n));
            states = shipmentApplicationService.get(
                c,
                ShipmentResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);

            ShipmentStateDto.DtoConverter dtoConverter = new ShipmentStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toShipmentStateDtoArray(states);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve in pages.
     * Retrieve Shipments in pages.
     */
    @GetMapping("_page")
    @Transactional(readOnly = true)
    public Page<ShipmentStateDto> getPage( HttpServletRequest request,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "page", defaultValue = "0") Integer page,
                    @RequestParam(value = "size", defaultValue = "20") Integer size,
                    @RequestParam(value = "filter", required = false) String filter) {
        try {
            Integer firstResult = (page == null ? 0 : page) * (size == null ? 20 : size);
            Integer maxResults = (size == null ? 20 : size);
            Iterable<ShipmentState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> ShipmentResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (ShipmentMetadata.aliasMap.containsKey(n) ? ShipmentMetadata.aliasMap.get(n) : n));
            states = shipmentApplicationService.get(
                c,
                ShipmentResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);
            long count = shipmentApplicationService.getCount(c);

            ShipmentStateDto.DtoConverter dtoConverter = new ShipmentStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            Page.PageImpl<ShipmentStateDto> statePage =  new Page.PageImpl<>(dtoConverter.toShipmentStateDtoList(states), count);
            statePage.setSize(size);
            statePage.setNumber(page);
            return statePage;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves Shipment with the specified ID.
     */
    @GetMapping("{shipmentId}")
    @Transactional(readOnly = true)
    public ShipmentStateDto get(@PathVariable("shipmentId") String shipmentId, @RequestParam(value = "fields", required = false) String fields) {
        try {
            String idObj = shipmentId;
            ShipmentState state = shipmentApplicationService.get(idObj);
            if (state == null) { return null; }

            ShipmentStateDto.DtoConverter dtoConverter = new ShipmentStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toShipmentStateDto(state);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("_count")
    @Transactional(readOnly = true)
    public long getCount( HttpServletRequest request,
                         @RequestParam(value = "filter", required = false) String filter) {
        try {
            long count = 0;
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap());
            }
            Criterion c = CriterionDto.toSubclass(criterion,
                getCriterionTypeConverter(), 
                getPropertyTypeResolver(), 
                n -> (ShipmentMetadata.aliasMap.containsKey(n) ? ShipmentMetadata.aliasMap.get(n) : n));
            count = shipmentApplicationService.getCount(c);
            return count;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    /**
     * Create.
     * Create Shipment
     */
    @PostMapping @ResponseBody @ResponseStatus(HttpStatus.CREATED)
    public String post(@RequestBody CreateOrMergePatchShipmentDto.CreateShipmentDto value,  HttpServletResponse response) {
        try {
            ShipmentCommand.CreateShipment cmd = value;//.toCreateShipment();
            if (cmd.getShipmentId() == null) {
                throw DomainError.named("nullId", "Aggregate Id in cmd is null, aggregate name: %1$s.", "Shipment");
            }
            String idObj = cmd.getShipmentId();
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(cmd);

            return idObj;
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    /**
     * Create or update.
     * Create or update Shipment
     */
    @PutMapping("{shipmentId}")
    public void put(@PathVariable("shipmentId") String shipmentId, @RequestBody CreateOrMergePatchShipmentDto value) {
        try {
            if (value.getVersion() != null) {
                value.setCommandType(Command.COMMAND_TYPE_MERGE_PATCH);
                ShipmentCommand.MergePatchShipment cmd = (ShipmentCommand.MergePatchShipment) value.toSubclass();
                ShipmentResourceUtils.setNullIdOrThrowOnInconsistentIds(shipmentId, cmd);
                cmd.setRequesterId(SecurityContextUtil.getRequesterId());
                shipmentApplicationService.when(cmd);
                return;
            }

            value.setCommandType(Command.COMMAND_TYPE_CREATE);
            ShipmentCommand.CreateShipment cmd = (ShipmentCommand.CreateShipment) value.toSubclass();
            ShipmentResourceUtils.setNullIdOrThrowOnInconsistentIds(shipmentId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    /**
     * Patch.
     * Patch Shipment
     */
    @PatchMapping("{shipmentId}")
    public void patch(@PathVariable("shipmentId") String shipmentId, @RequestBody CreateOrMergePatchShipmentDto.MergePatchShipmentDto value) {
        try {

            ShipmentCommand.MergePatchShipment cmd = value;//.toMergePatchShipment();
            ShipmentResourceUtils.setNullIdOrThrowOnInconsistentIds(shipmentId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete Shipment
     */
    @DeleteMapping("{shipmentId}")
    public void delete(@PathVariable("shipmentId") String shipmentId,
                       @NotNull @RequestParam(value = "commandId", required = false) String commandId,
                       @NotNull @RequestParam(value = "version", required = false) @Min(value = -1) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {

            ShipmentCommand.DeleteShipment deleteCmd = new DeleteShipmentDto();

            deleteCmd.setCommandId(commandId);
            deleteCmd.setRequesterId(requesterId);
            deleteCmd.setVersion(version);
            ShipmentResourceUtils.setNullIdOrThrowOnInconsistentIds(shipmentId, deleteCmd);
            deleteCmd.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(deleteCmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("_metadata/filteringFields")
    public List<PropertyMetadataDto> getMetadataFilteringFields() {
        try {

            List<PropertyMetadataDto> filtering = new ArrayList<>();
            ShipmentMetadata.propertyTypeMap.forEach((key, value) -> {
                filtering.add(new PropertyMetadataDto(key, value, true));
            });
            return filtering;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{shipmentId}/_events/{version}")
    @Transactional(readOnly = true)
    public ShipmentEvent getEvent(@PathVariable("shipmentId") String shipmentId, @PathVariable("version") long version) {
        try {

            String idObj = shipmentId;
            //ShipmentStateEventDtoConverter dtoConverter = getShipmentStateEventDtoConverter();
            return shipmentApplicationService.getEvent(idObj, version);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{shipmentId}/_historyStates/{version}")
    @Transactional(readOnly = true)
    public ShipmentStateDto getHistoryState(@PathVariable("shipmentId") String shipmentId, @PathVariable("version") long version, @RequestParam(value = "fields", required = false) String fields) {
        try {

            String idObj = shipmentId;
            ShipmentStateDto.DtoConverter dtoConverter = new ShipmentStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toShipmentStateDto(shipmentApplicationService.getHistoryState(idObj, version));

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves ShipmentItem with the specified ShipmentItemSeqId.
     */
    @GetMapping("{shipmentId}/ShipmentItems/{shipmentItemSeqId}")
    @Transactional(readOnly = true)
    public ShipmentItemStateDto getShipmentItem(@PathVariable("shipmentId") String shipmentId, @PathVariable("shipmentItemSeqId") String shipmentItemSeqId) {
        try {

            ShipmentItemState state = shipmentApplicationService.getShipmentItem(shipmentId, shipmentItemSeqId);
            if (state == null) { return null; }
            ShipmentItemStateDto.DtoConverter dtoConverter = new ShipmentItemStateDto.DtoConverter();
            ShipmentItemStateDto stateDto = dtoConverter.toShipmentItemStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create or update.
     * Create or update ShipmentItem
     */
    @PutMapping(path = "{shipmentId}/ShipmentItems/{shipmentItemSeqId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putShipmentItem(@PathVariable("shipmentId") String shipmentId, @PathVariable("shipmentItemSeqId") String shipmentItemSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchShipmentItemDto.MergePatchShipmentItemDto body) {
        try {
            ShipmentCommand.MergePatchShipment mergePatchShipment = new CreateOrMergePatchShipmentDto.MergePatchShipmentDto();
            mergePatchShipment.setShipmentId(shipmentId);
            mergePatchShipment.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchShipment.setVersion(version); }
            mergePatchShipment.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentItemCommand.MergePatchShipmentItem mergePatchShipmentItem = body;//.toMergePatchShipmentItem();
            mergePatchShipmentItem.setShipmentItemSeqId(shipmentItemSeqId);
            mergePatchShipment.getShipmentItemCommands().add(mergePatchShipmentItem);
            mergePatchShipment.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(mergePatchShipment);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete ShipmentItem
     */
    @DeleteMapping("{shipmentId}/ShipmentItems/{shipmentItemSeqId}")
    public void deleteShipmentItem(@PathVariable("shipmentId") String shipmentId, @PathVariable("shipmentItemSeqId") String shipmentItemSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {
            ShipmentCommand.MergePatchShipment mergePatchShipment = new CreateOrMergePatchShipmentDto.MergePatchShipmentDto();
            mergePatchShipment.setShipmentId(shipmentId);
            mergePatchShipment.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchShipment.setVersion(version); 
            } else {
                mergePatchShipment.setVersion(shipmentApplicationService.get(shipmentId).getVersion());
            }
            mergePatchShipment.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentItemCommand.RemoveShipmentItem removeShipmentItem = new RemoveShipmentItemDto();
            removeShipmentItem.setShipmentItemSeqId(shipmentItemSeqId);
            mergePatchShipment.getShipmentItemCommands().add(removeShipmentItem);
            mergePatchShipment.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(mergePatchShipment);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * ShipmentItem List
     */
    @GetMapping("{shipmentId}/ShipmentItems")
    @Transactional(readOnly = true)
    public ShipmentItemStateDto[] getShipmentItems(@PathVariable("shipmentId") String shipmentId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> ShipmentResourceUtils.getShipmentItemFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (ShipmentItemMetadata.aliasMap.containsKey(n) ? ShipmentItemMetadata.aliasMap.get(n) : n));
            Iterable<ShipmentItemState> states = shipmentApplicationService.getShipmentItems(shipmentId, c,
                    ShipmentResourceUtils.getShipmentItemQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            ShipmentItemStateDto.DtoConverter dtoConverter = new ShipmentItemStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toShipmentItemStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create.
     * Create ShipmentItem
     */
    @PostMapping(path = "{shipmentId}/ShipmentItems", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postShipmentItems(@PathVariable("shipmentId") String shipmentId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchShipmentItemDto.CreateShipmentItemDto body) {
        try {
            ShipmentCommand.MergePatchShipment mergePatchShipment = new AbstractShipmentCommand.SimpleMergePatchShipment();
            mergePatchShipment.setShipmentId(shipmentId);
            mergePatchShipment.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchShipment.setVersion(version); }
            mergePatchShipment.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentItemCommand.CreateShipmentItem createShipmentItem = body.toCreateShipmentItem();
            mergePatchShipment.getShipmentItemCommands().add(createShipmentItem);
            mergePatchShipment.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(mergePatchShipment);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves ShipmentPackage with the specified ShipmentPackageSeqId.
     */
    @GetMapping("{shipmentId}/ShipmentPackages/{shipmentPackageSeqId}")
    @Transactional(readOnly = true)
    public ShipmentPackageStateDto getShipmentPackage(@PathVariable("shipmentId") String shipmentId, @PathVariable("shipmentPackageSeqId") String shipmentPackageSeqId) {
        try {

            ShipmentPackageState state = shipmentApplicationService.getShipmentPackage(shipmentId, shipmentPackageSeqId);
            if (state == null) { return null; }
            ShipmentPackageStateDto.DtoConverter dtoConverter = new ShipmentPackageStateDto.DtoConverter();
            ShipmentPackageStateDto stateDto = dtoConverter.toShipmentPackageStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create or update.
     * Create or update ShipmentPackage
     */
    @PutMapping(path = "{shipmentId}/ShipmentPackages/{shipmentPackageSeqId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putShipmentPackage(@PathVariable("shipmentId") String shipmentId, @PathVariable("shipmentPackageSeqId") String shipmentPackageSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchShipmentPackageDto.MergePatchShipmentPackageDto body) {
        try {
            ShipmentCommand.MergePatchShipment mergePatchShipment = new CreateOrMergePatchShipmentDto.MergePatchShipmentDto();
            mergePatchShipment.setShipmentId(shipmentId);
            mergePatchShipment.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchShipment.setVersion(version); }
            mergePatchShipment.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentPackageCommand.MergePatchShipmentPackage mergePatchShipmentPackage = body;//.toMergePatchShipmentPackage();
            mergePatchShipmentPackage.setShipmentPackageSeqId(shipmentPackageSeqId);
            mergePatchShipment.getShipmentPackageCommands().add(mergePatchShipmentPackage);
            mergePatchShipment.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(mergePatchShipment);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete ShipmentPackage
     */
    @DeleteMapping("{shipmentId}/ShipmentPackages/{shipmentPackageSeqId}")
    public void deleteShipmentPackage(@PathVariable("shipmentId") String shipmentId, @PathVariable("shipmentPackageSeqId") String shipmentPackageSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {
            ShipmentCommand.MergePatchShipment mergePatchShipment = new CreateOrMergePatchShipmentDto.MergePatchShipmentDto();
            mergePatchShipment.setShipmentId(shipmentId);
            mergePatchShipment.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchShipment.setVersion(version); 
            } else {
                mergePatchShipment.setVersion(shipmentApplicationService.get(shipmentId).getVersion());
            }
            mergePatchShipment.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentPackageCommand.RemoveShipmentPackage removeShipmentPackage = new RemoveShipmentPackageDto();
            removeShipmentPackage.setShipmentPackageSeqId(shipmentPackageSeqId);
            mergePatchShipment.getShipmentPackageCommands().add(removeShipmentPackage);
            mergePatchShipment.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(mergePatchShipment);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * ShipmentPackage List
     */
    @GetMapping("{shipmentId}/ShipmentPackages")
    @Transactional(readOnly = true)
    public ShipmentPackageStateDto[] getShipmentPackages(@PathVariable("shipmentId") String shipmentId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> ShipmentResourceUtils.getShipmentPackageFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (ShipmentPackageMetadata.aliasMap.containsKey(n) ? ShipmentPackageMetadata.aliasMap.get(n) : n));
            Iterable<ShipmentPackageState> states = shipmentApplicationService.getShipmentPackages(shipmentId, c,
                    ShipmentResourceUtils.getShipmentPackageQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            ShipmentPackageStateDto.DtoConverter dtoConverter = new ShipmentPackageStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toShipmentPackageStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create.
     * Create ShipmentPackage
     */
    @PostMapping(path = "{shipmentId}/ShipmentPackages", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postShipmentPackages(@PathVariable("shipmentId") String shipmentId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchShipmentPackageDto.CreateShipmentPackageDto body) {
        try {
            ShipmentCommand.MergePatchShipment mergePatchShipment = new AbstractShipmentCommand.SimpleMergePatchShipment();
            mergePatchShipment.setShipmentId(shipmentId);
            mergePatchShipment.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchShipment.setVersion(version); }
            mergePatchShipment.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentPackageCommand.CreateShipmentPackage createShipmentPackage = body.toCreateShipmentPackage();
            mergePatchShipment.getShipmentPackageCommands().add(createShipmentPackage);
            mergePatchShipment.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(mergePatchShipment);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves ShipmentPackageContent with the specified ShipmentItemSeqId.
     */
    @GetMapping("{shipmentId}/ShipmentPackages/{shipmentPackageSeqId}/ShipmentPackageContents/{shipmentItemSeqId}")
    @Transactional(readOnly = true)
    public ShipmentPackageContentStateDto getShipmentPackageContent(@PathVariable("shipmentId") String shipmentId, @PathVariable("shipmentPackageSeqId") String shipmentPackageSeqId, @PathVariable("shipmentItemSeqId") String shipmentItemSeqId) {
        try {

            ShipmentPackageContentState state = shipmentApplicationService.getShipmentPackageContent(shipmentId, shipmentPackageSeqId, shipmentItemSeqId);
            if (state == null) { return null; }
            ShipmentPackageContentStateDto.DtoConverter dtoConverter = new ShipmentPackageContentStateDto.DtoConverter();
            ShipmentPackageContentStateDto stateDto = dtoConverter.toShipmentPackageContentStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create or update.
     * Create or update ShipmentPackageContent
     */
    @PutMapping(path = "{shipmentId}/ShipmentPackages/{shipmentPackageSeqId}/ShipmentPackageContents/{shipmentItemSeqId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putShipmentPackageContent(@PathVariable("shipmentId") String shipmentId, @PathVariable("shipmentPackageSeqId") String shipmentPackageSeqId, @PathVariable("shipmentItemSeqId") String shipmentItemSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchShipmentPackageContentDto.MergePatchShipmentPackageContentDto body) {
        try {
            ShipmentCommand.MergePatchShipment mergePatchShipment = new CreateOrMergePatchShipmentDto.MergePatchShipmentDto();
            mergePatchShipment.setShipmentId(shipmentId);
            mergePatchShipment.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchShipment.setVersion(version); }
            mergePatchShipment.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentPackageCommand.MergePatchShipmentPackage mergePatchShipmentPackage = new CreateOrMergePatchShipmentPackageDto.MergePatchShipmentPackageDto();
            mergePatchShipmentPackage.setShipmentPackageSeqId(shipmentPackageSeqId);
            mergePatchShipment.getShipmentPackageCommands().add(mergePatchShipmentPackage);
            ShipmentPackageContentCommand.MergePatchShipmentPackageContent mergePatchShipmentPackageContent = body;//.toMergePatchShipmentPackageContent();
            mergePatchShipmentPackageContent.setShipmentItemSeqId(shipmentItemSeqId);
            mergePatchShipmentPackage.getShipmentPackageContentCommands().add(mergePatchShipmentPackageContent);
            mergePatchShipment.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(mergePatchShipment);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete ShipmentPackageContent
     */
    @DeleteMapping("{shipmentId}/ShipmentPackages/{shipmentPackageSeqId}/ShipmentPackageContents/{shipmentItemSeqId}")
    public void deleteShipmentPackageContent(@PathVariable("shipmentId") String shipmentId, @PathVariable("shipmentPackageSeqId") String shipmentPackageSeqId, @PathVariable("shipmentItemSeqId") String shipmentItemSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {
            ShipmentCommand.MergePatchShipment mergePatchShipment = new CreateOrMergePatchShipmentDto.MergePatchShipmentDto();
            mergePatchShipment.setShipmentId(shipmentId);
            mergePatchShipment.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchShipment.setVersion(version); 
            } else {
                mergePatchShipment.setVersion(shipmentApplicationService.get(shipmentId).getVersion());
            }
            mergePatchShipment.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentPackageCommand.MergePatchShipmentPackage mergePatchShipmentPackage = new CreateOrMergePatchShipmentPackageDto.MergePatchShipmentPackageDto();
            mergePatchShipmentPackage.setShipmentPackageSeqId(shipmentPackageSeqId);
            mergePatchShipment.getShipmentPackageCommands().add(mergePatchShipmentPackage);
            ShipmentPackageContentCommand.RemoveShipmentPackageContent removeShipmentPackageContent = new RemoveShipmentPackageContentDto();
            removeShipmentPackageContent.setShipmentItemSeqId(shipmentItemSeqId);
            mergePatchShipmentPackage.getShipmentPackageContentCommands().add(removeShipmentPackageContent);
            mergePatchShipment.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(mergePatchShipment);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * ShipmentPackageContent List
     */
    @GetMapping("{shipmentId}/ShipmentPackages/{shipmentPackageSeqId}/ShipmentPackageContents")
    @Transactional(readOnly = true)
    public ShipmentPackageContentStateDto[] getShipmentPackageContents(@PathVariable("shipmentId") String shipmentId, @PathVariable("shipmentPackageSeqId") String shipmentPackageSeqId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> ShipmentResourceUtils.getShipmentPackageContentFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (ShipmentPackageContentMetadata.aliasMap.containsKey(n) ? ShipmentPackageContentMetadata.aliasMap.get(n) : n));
            Iterable<ShipmentPackageContentState> states = shipmentApplicationService.getShipmentPackageContents(shipmentId, shipmentPackageSeqId, c,
                    ShipmentResourceUtils.getShipmentPackageContentQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            ShipmentPackageContentStateDto.DtoConverter dtoConverter = new ShipmentPackageContentStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toShipmentPackageContentStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create.
     * Create ShipmentPackageContent
     */
    @PostMapping(path = "{shipmentId}/ShipmentPackages/{shipmentPackageSeqId}/ShipmentPackageContents", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postShipmentPackageContents(@PathVariable("shipmentId") String shipmentId, @PathVariable("shipmentPackageSeqId") String shipmentPackageSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchShipmentPackageContentDto.CreateShipmentPackageContentDto body) {
        try {
            ShipmentCommand.MergePatchShipment mergePatchShipment = new AbstractShipmentCommand.SimpleMergePatchShipment();
            mergePatchShipment.setShipmentId(shipmentId);
            mergePatchShipment.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchShipment.setVersion(version); }
            mergePatchShipment.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentPackageCommand.MergePatchShipmentPackage mergePatchShipmentPackage = new AbstractShipmentPackageCommand.SimpleMergePatchShipmentPackage();
            mergePatchShipmentPackage.setShipmentPackageSeqId(shipmentPackageSeqId);
            mergePatchShipment.getShipmentPackageCommands().add(mergePatchShipmentPackage);
            ShipmentPackageContentCommand.CreateShipmentPackageContent createShipmentPackageContent = body.toCreateShipmentPackageContent();
            mergePatchShipmentPackage.getShipmentPackageContentCommands().add(createShipmentPackageContent);
            mergePatchShipment.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentApplicationService.when(mergePatchShipment);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }



    //protected  ShipmentStateEventDtoConverter getShipmentStateEventDtoConverter() {
    //    return new ShipmentStateEventDtoConverter();
    //}

    protected TypeConverter getCriterionTypeConverter() {
        return new DefaultTypeConverter();
    }

    protected PropertyTypeResolver getPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return ShipmentResourceUtils.getFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getShipmentItemPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return ShipmentResourceUtils.getShipmentItemFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getShipmentPackagePropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return ShipmentResourceUtils.getShipmentPackageFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getShipmentPackageContentPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return ShipmentResourceUtils.getShipmentPackageContentFilterPropertyType(propertyName);
            }
        };
    }

 
    public static class ShipmentResourceUtils {

        public static void setNullIdOrThrowOnInconsistentIds(String shipmentId, org.dddml.ffvtraceability.domain.shipment.ShipmentCommand value) {
            String idObj = shipmentId;
            if (value.getShipmentId() == null) {
                value.setShipmentId(idObj);
            } else if (!value.getShipmentId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", shipmentId, value.getShipmentId());
            }
        }
    
        public static List<String> getQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, ShipmentMetadata.aliasMap);
        }

        public static List<String> getQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, ShipmentMetadata.aliasMap);
        }

        public static String getFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (ShipmentMetadata.aliasMap.containsKey(fieldName)) {
                return ShipmentMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getFilterPropertyType(String propertyName) {
            if (ShipmentMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = ShipmentMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getShipmentItemQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, ShipmentItemMetadata.aliasMap);
        }

        public static List<String> getShipmentItemQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, ShipmentItemMetadata.aliasMap);
        }

        public static String getShipmentItemFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (ShipmentItemMetadata.aliasMap.containsKey(fieldName)) {
                return ShipmentItemMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getShipmentItemFilterPropertyType(String propertyName) {
            if (ShipmentItemMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = ShipmentItemMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getShipmentItemQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getShipmentItemFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getShipmentItemFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getShipmentPackageQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, ShipmentPackageMetadata.aliasMap);
        }

        public static List<String> getShipmentPackageQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, ShipmentPackageMetadata.aliasMap);
        }

        public static String getShipmentPackageFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (ShipmentPackageMetadata.aliasMap.containsKey(fieldName)) {
                return ShipmentPackageMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getShipmentPackageFilterPropertyType(String propertyName) {
            if (ShipmentPackageMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = ShipmentPackageMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getShipmentPackageQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getShipmentPackageFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getShipmentPackageFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getShipmentPackageContentQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, ShipmentPackageContentMetadata.aliasMap);
        }

        public static List<String> getShipmentPackageContentQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, ShipmentPackageContentMetadata.aliasMap);
        }

        public static String getShipmentPackageContentFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (ShipmentPackageContentMetadata.aliasMap.containsKey(fieldName)) {
                return ShipmentPackageContentMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getShipmentPackageContentFilterPropertyType(String propertyName) {
            if (ShipmentPackageContentMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = ShipmentPackageContentMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getShipmentPackageContentQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getShipmentPackageContentFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getShipmentPackageContentFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static ShipmentStateDto[] toShipmentStateDtoArray(Iterable<String> ids) {
            List<ShipmentStateDto> states = new ArrayList<>();
            ids.forEach(i -> {
                ShipmentStateDto dto = new ShipmentStateDto();
                dto.setShipmentId(i);
                states.add(dto);
            });
            return states.toArray(new ShipmentStateDto[0]);
        }

    }

}

