// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import java.util.stream.*;
import jakarta.servlet.http.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.dddml.support.criterion.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.article.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;
import org.dddml.support.criterion.TypeConverter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RequestMapping(path = "Articles", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class ArticleResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());


    @Autowired
    private ArticleApplicationService articleApplicationService;


    /**
     * Retrieve.
     * Retrieve Articles
     */
    @GetMapping
    @Transactional(readOnly = true)
    public ArticleStateDto[] getAll( HttpServletRequest request,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "firstResult", defaultValue = "0") Integer firstResult,
                    @RequestParam(value = "maxResults", defaultValue = "2147483647") Integer maxResults,
                    @RequestParam(value = "filter", required = false) String filter) {
        try {
        if (firstResult < 0) { firstResult = 0; }
        if (maxResults == null || maxResults < 1) { maxResults = Integer.MAX_VALUE; }

            Iterable<ArticleState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> ArticleResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (ArticleMetadata.aliasMap.containsKey(n) ? ArticleMetadata.aliasMap.get(n) : n));
            states = articleApplicationService.get(
                c,
                ArticleResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);

            ArticleStateDto.DtoConverter dtoConverter = new ArticleStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toArticleStateDtoArray(states);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve in pages.
     * Retrieve Articles in pages.
     */
    @GetMapping("_page")
    @Transactional(readOnly = true)
    public Page<ArticleStateDto> getPage( HttpServletRequest request,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "page", defaultValue = "0") Integer page,
                    @RequestParam(value = "size", defaultValue = "20") Integer size,
                    @RequestParam(value = "filter", required = false) String filter) {
        try {
            Integer firstResult = (page == null ? 0 : page) * (size == null ? 20 : size);
            Integer maxResults = (size == null ? 20 : size);
            Iterable<ArticleState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> ArticleResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (ArticleMetadata.aliasMap.containsKey(n) ? ArticleMetadata.aliasMap.get(n) : n));
            states = articleApplicationService.get(
                c,
                ArticleResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);
            long count = articleApplicationService.getCount(c);

            ArticleStateDto.DtoConverter dtoConverter = new ArticleStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            Page.PageImpl<ArticleStateDto> statePage =  new Page.PageImpl<>(dtoConverter.toArticleStateDtoList(states), count);
            statePage.setSize(size);
            statePage.setNumber(page);
            return statePage;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves Article with the specified ID.
     */
    @GetMapping("{articleId}")
    @Transactional(readOnly = true)
    public ArticleStateDto get(@PathVariable("articleId") Long articleId, @RequestParam(value = "fields", required = false) String fields) {
        try {
            Long idObj = articleId;
            ArticleState state = articleApplicationService.get(idObj);
            if (state == null) { return null; }

            ArticleStateDto.DtoConverter dtoConverter = new ArticleStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toArticleStateDto(state);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("_count")
    @Transactional(readOnly = true)
    public long getCount( HttpServletRequest request,
                         @RequestParam(value = "filter", required = false) String filter) {
        try {
            long count = 0;
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap());
            }
            Criterion c = CriterionDto.toSubclass(criterion,
                getCriterionTypeConverter(), 
                getPropertyTypeResolver(), 
                n -> (ArticleMetadata.aliasMap.containsKey(n) ? ArticleMetadata.aliasMap.get(n) : n));
            count = articleApplicationService.getCount(c);
            return count;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    /**
     * Create.
     * Create Article
     */
    @PostMapping @ResponseStatus(HttpStatus.CREATED)
    public Long post(@RequestBody CreateOrMergePatchArticleDto.CreateArticleDto value,  HttpServletResponse response) {
        try {
            ArticleCommand.CreateArticle cmd = value;//.toCreateArticle();
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            Long idObj = articleApplicationService.createWithoutId(cmd);

            return idObj;
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    /**
     * Create or update.
     * Create or update Article
     */
    @PutMapping("{articleId}")
    public void put(@PathVariable("articleId") Long articleId, @RequestBody CreateOrMergePatchArticleDto value) {
        try {
            if (value.getVersion() != null) {
                value.setCommandType(Command.COMMAND_TYPE_MERGE_PATCH);
                ArticleCommand.MergePatchArticle cmd = (ArticleCommand.MergePatchArticle) value.toSubclass();
                ArticleResourceUtils.setNullIdOrThrowOnInconsistentIds(articleId, cmd);
                cmd.setRequesterId(SecurityContextUtil.getRequesterId());
                articleApplicationService.when(cmd);
                return;
            }
            throw DomainError.named("unsupportedOperation", "Unsupported HTTP PUT to create, aggregate Id %1$s", articleId);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    /**
     * Patch.
     * Patch Article
     */
    @PatchMapping("{articleId}")
    public void patch(@PathVariable("articleId") Long articleId, @RequestBody CreateOrMergePatchArticleDto.MergePatchArticleDto value) {
        try {

            ArticleCommand.MergePatchArticle cmd = value;//.toMergePatchArticle();
            ArticleResourceUtils.setNullIdOrThrowOnInconsistentIds(articleId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            articleApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    @PreAuthorize("hasAnyAuthority('ARTICLE_UPDATE-BODY')")
    @PutMapping("{articleId}/_commands/UpdateBody")
    public void updateBody(@PathVariable("articleId") Long articleId, @RequestBody ArticleCommands.UpdateBody content) {
        try {

            ArticleCommands.UpdateBody cmd = content;//.toUpdateBody();
            Long idObj = articleId;
            if (cmd.getArticleId() == null) {
                cmd.setArticleId(idObj);
            } else if (!cmd.getArticleId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", articleId, cmd.getArticleId());
            }
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            articleApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("_metadata/filteringFields")
    public List<PropertyMetadataDto> getMetadataFilteringFields() {
        try {

            List<PropertyMetadataDto> filtering = new ArrayList<>();
            ArticleMetadata.propertyTypeMap.forEach((key, value) -> {
                filtering.add(new PropertyMetadataDto(key, value, true));
            });
            return filtering;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{articleId}/_events/{version}")
    @Transactional(readOnly = true)
    public ArticleEvent getEvent(@PathVariable("articleId") Long articleId, @PathVariable("version") long version) {
        try {

            Long idObj = articleId;
            //ArticleStateEventDtoConverter dtoConverter = getArticleStateEventDtoConverter();
            return articleApplicationService.getEvent(idObj, version);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{articleId}/_historyStates/{version}")
    @Transactional(readOnly = true)
    public ArticleStateDto getHistoryState(@PathVariable("articleId") Long articleId, @PathVariable("version") long version, @RequestParam(value = "fields", required = false) String fields) {
        try {

            Long idObj = articleId;
            ArticleStateDto.DtoConverter dtoConverter = new ArticleStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toArticleStateDto(articleApplicationService.getHistoryState(idObj, version));

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves Comment with the specified CommentSeqId.
     */
    @GetMapping("{articleId}/Comments/{commentSeqId}")
    @Transactional(readOnly = true)
    public CommentStateDto getComment(@PathVariable("articleId") Long articleId, @PathVariable("commentSeqId") Long commentSeqId) {
        try {

            CommentState state = articleApplicationService.getComment(articleId, commentSeqId);
            if (state == null) { return null; }
            CommentStateDto.DtoConverter dtoConverter = new CommentStateDto.DtoConverter();
            CommentStateDto stateDto = dtoConverter.toCommentStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create or update.
     * Create or update Comment
     */
    @PutMapping(path = "{articleId}/Comments/{commentSeqId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putComment(@PathVariable("articleId") Long articleId, @PathVariable("commentSeqId") Long commentSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchCommentDto.MergePatchCommentDto body) {
        try {
            ArticleCommand.MergePatchArticle mergePatchArticle = new CreateOrMergePatchArticleDto.MergePatchArticleDto();
            mergePatchArticle.setArticleId(articleId);
            mergePatchArticle.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchArticle.setVersion(version); }
            mergePatchArticle.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            CommentCommand.MergePatchComment mergePatchComment = body;//.toMergePatchComment();
            mergePatchComment.setCommentSeqId(commentSeqId);
            mergePatchArticle.getCommentCommands().add(mergePatchComment);
            mergePatchArticle.setRequesterId(SecurityContextUtil.getRequesterId());
            articleApplicationService.when(mergePatchArticle);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Delete.
     * Delete Comment
     */
    @DeleteMapping("{articleId}/Comments/{commentSeqId}")
    public void deleteComment(@PathVariable("articleId") Long articleId, @PathVariable("commentSeqId") Long commentSeqId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        try {
            ArticleCommand.MergePatchArticle mergePatchArticle = new CreateOrMergePatchArticleDto.MergePatchArticleDto();
            mergePatchArticle.setArticleId(articleId);
            mergePatchArticle.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchArticle.setVersion(version); 
            } else {
                mergePatchArticle.setVersion(articleApplicationService.get(articleId).getVersion());
            }
            mergePatchArticle.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            CommentCommand.RemoveComment removeComment = new RemoveCommentDto();
            removeComment.setCommentSeqId(commentSeqId);
            mergePatchArticle.getCommentCommands().add(removeComment);
            mergePatchArticle.setRequesterId(SecurityContextUtil.getRequesterId());
            articleApplicationService.when(mergePatchArticle);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Comment List
     */
    @GetMapping("{articleId}/Comments")
    @Transactional(readOnly = true)
    public CommentStateDto[] getComments(@PathVariable("articleId") Long articleId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        try {
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> ArticleResourceUtils.getCommentFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (CommentMetadata.aliasMap.containsKey(n) ? CommentMetadata.aliasMap.get(n) : n));
            Iterable<CommentState> states = articleApplicationService.getComments(articleId, c,
                    ArticleResourceUtils.getCommentQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            CommentStateDto.DtoConverter dtoConverter = new CommentStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toCommentStateDtoArray(states);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Create.
     * Create Comment
     */
    @PostMapping(path = "{articleId}/Comments", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postComments(@PathVariable("articleId") Long articleId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchCommentDto.CreateCommentDto body) {
        try {
            ArticleCommand.MergePatchArticle mergePatchArticle = new AbstractArticleCommand.SimpleMergePatchArticle();
            mergePatchArticle.setArticleId(articleId);
            mergePatchArticle.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchArticle.setVersion(version); }
            mergePatchArticle.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            CommentCommand.CreateComment createComment = body.toCreateComment();
            mergePatchArticle.getCommentCommands().add(createComment);
            mergePatchArticle.setRequesterId(SecurityContextUtil.getRequesterId());
            articleApplicationService.when(mergePatchArticle);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }



    //protected  ArticleStateEventDtoConverter getArticleStateEventDtoConverter() {
    //    return new ArticleStateEventDtoConverter();
    //}

    protected TypeConverter getCriterionTypeConverter() {
        return new DefaultTypeConverter();
    }

    protected PropertyTypeResolver getPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return ArticleResourceUtils.getFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getCommentPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return ArticleResourceUtils.getCommentFilterPropertyType(propertyName);
            }
        };
    }

 
    public static class ArticleResourceUtils {

        public static void setNullIdOrThrowOnInconsistentIds(Long articleId, org.dddml.ffvtraceability.domain.article.ArticleCommand value) {
            Long idObj = articleId;
            if (value.getArticleId() == null) {
                value.setArticleId(idObj);
            } else if (!value.getArticleId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", articleId, value.getArticleId());
            }
        }
    
        public static List<String> getQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, ArticleMetadata.aliasMap);
        }

        public static List<String> getQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, ArticleMetadata.aliasMap);
        }

        public static String getFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (ArticleMetadata.aliasMap.containsKey(fieldName)) {
                return ArticleMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getFilterPropertyType(String propertyName) {
            if (ArticleMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = ArticleMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getCommentQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, CommentMetadata.aliasMap);
        }

        public static List<String> getCommentQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, CommentMetadata.aliasMap);
        }

        public static String getCommentFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (CommentMetadata.aliasMap.containsKey(fieldName)) {
                return CommentMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getCommentFilterPropertyType(String propertyName) {
            if (CommentMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = CommentMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getCommentQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getCommentFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getCommentFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static ArticleStateDto[] toArticleStateDtoArray(Iterable<Long> ids) {
            List<ArticleStateDto> states = new ArrayList<>();
            ids.forEach(i -> {
                ArticleStateDto dto = new ArticleStateDto();
                dto.setArticleId(i);
                states.add(dto);
            });
            return states.toArray(new ArticleStateDto[0]);
        }

    }

}

