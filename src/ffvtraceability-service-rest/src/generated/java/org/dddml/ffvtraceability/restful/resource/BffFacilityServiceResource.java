// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffFacilities", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffFacilityServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffFacilityApplicationService bffFacilityApplicationService;

    @GetMapping
    public Page<BffFacilityDto> getFacilities(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size
    ) {
        BffFacilityServiceCommands.GetFacilities getFacilities = new BffFacilityServiceCommands.GetFacilities();
        getFacilities.setPage(page);
        getFacilities.setSize(size);
        try {
        getFacilities.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffFacilityApplicationService.when(getFacilities);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{facilityId}")
    public BffFacilityDto getFacility(
        @PathVariable("facilityId") String facilityId
    ) {
        BffFacilityServiceCommands.GetFacility getFacility = new BffFacilityServiceCommands.GetFacility();
        getFacility.setFacilityId(facilityId);
        try {
        getFacility.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffFacilityApplicationService.when(getFacility);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{facilityId}/Locations/{locationSeqId}")
    public BffFacilityLocationDto getFacilityLocation(
        @PathVariable("facilityId") String facilityId,
        @PathVariable("locationSeqId") String locationSeqId
    ) {
        BffFacilityServiceCommands.GetFacilityLocation getFacilityLocation = new BffFacilityServiceCommands.GetFacilityLocation();
        getFacilityLocation.setFacilityId(facilityId);
        getFacilityLocation.setLocationSeqId(locationSeqId);
        try {
        getFacilityLocation.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffFacilityApplicationService.when(getFacilityLocation);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

}

