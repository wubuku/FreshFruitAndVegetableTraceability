// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffRawItemService", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffRawItemServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffRawItemApplicationService bffRawItemApplicationService;

    @PostMapping("GetRawItems")
    public BffRawItemDto[] getRawItems(@RequestBody BffRawItemServiceCommands.GetRawItems requestContent)
    {
        try {
        requestContent.setRequesterId(SecurityContextUtil.getRequesterId());
        return java.util.stream.StreamSupport.stream((bffRawItemApplicationService.when(requestContent)).spliterator(), false).collect(java.util.stream.Collectors.toList()).toArray(new BffRawItemDto[0]);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @PostMapping("CreateRawItem")
    public void createRawItem(@RequestBody BffRawItemServiceCommands.CreateRawItem requestContent)
    {
        try {
        requestContent.setRequesterId(SecurityContextUtil.getRequesterId());
        bffRawItemApplicationService.when(requestContent);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @PostMapping("UpdateRawItem")
    public void updateRawItem(@RequestBody BffRawItemServiceCommands.UpdateRawItem requestContent)
    {
        try {
        requestContent.setRequesterId(SecurityContextUtil.getRequesterId());
        bffRawItemApplicationService.when(requestContent);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

}

