// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "RawItems", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffRawItemServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffRawItemApplicationService bffRawItemApplicationService;

    @GetMapping
    public Page<BffRawItemDto> getRawItems(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size
    ) {
        BffRawItemServiceCommands.GetRawItems getRawItems = new BffRawItemServiceCommands.GetRawItems();
        getRawItems.setPage(page);
        getRawItems.setSize(size);
        try {
        getRawItems.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffRawItemApplicationService.when(getRawItems);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @PostMapping
    public void createRawItem(
        @RequestBody BffRawItemDto rawItem
    ) {
        BffRawItemServiceCommands.CreateRawItem createRawItem = new BffRawItemServiceCommands.CreateRawItem();
        createRawItem.setRawItem(rawItem);
        try {
        createRawItem.setRequesterId(SecurityContextUtil.getRequesterId());
        bffRawItemApplicationService.when(createRawItem);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @PutMapping("{productId}")
    public void updateRawItem(
        @PathVariable("productId") String productId,
        @RequestBody BffRawItemDto rawItem
    ) {
        BffRawItemServiceCommands.UpdateRawItem updateRawItem = new BffRawItemServiceCommands.UpdateRawItem();
        updateRawItem.setProductId(productId);
        updateRawItem.setRawItem(rawItem);
        try {
        updateRawItem.setRequesterId(SecurityContextUtil.getRequesterId());
        bffRawItemApplicationService.when(updateRawItem);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

}

