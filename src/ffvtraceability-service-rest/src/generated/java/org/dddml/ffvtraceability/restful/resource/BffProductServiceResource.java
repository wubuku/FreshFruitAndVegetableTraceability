// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffProducts", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffProductServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffProductApplicationService bffProductApplicationService;

    @GetMapping
    public Page<BffProductDto> getProducts(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "supplierId", required = false) String supplierId,
        @RequestParam(value = "active", required = false) String active
    ) {
        BffProductServiceCommands.GetProducts getProducts = new BffProductServiceCommands.GetProducts();
        getProducts.setPage(page);
        getProducts.setSize(size);
        getProducts.setSupplierId(supplierId);
        getProducts.setActive(active);
        
        getProducts.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffProductApplicationService.when(getProducts);
        
    }

    @GetMapping("{productId}")
    public BffProductDto getProduct(
        @PathVariable("productId") String productId
    ) {
        BffProductServiceCommands.GetProduct getProduct = new BffProductServiceCommands.GetProduct();
        getProduct.setProductId(productId);
        
        getProduct.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffProductApplicationService.when(getProduct);
        
    }

    @PostMapping
    public String createProduct(
        @RequestBody BffProductDto product
    ) {
        BffProductServiceCommands.CreateProduct createProduct = new BffProductServiceCommands.CreateProduct();
        createProduct.setProduct(product);
        
        createProduct.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffProductApplicationService.when(createProduct);
        
    }

    @PutMapping("{productId}")
    public void updateProduct(
        @PathVariable("productId") String productId,
        @RequestBody BffProductDto product
    ) {
        BffProductServiceCommands.UpdateProduct updateProduct = new BffProductServiceCommands.UpdateProduct();
        updateProduct.setProductId(productId);
        updateProduct.setProduct(product);
        
        updateProduct.setRequesterId(SecurityContextUtil.getRequesterId());
        bffProductApplicationService.when(updateProduct);
        
    }

    @PutMapping("{productId}/active")
    public void activateProduct(
        @PathVariable("productId") String productId,
        @RequestBody Boolean active
    ) {
        BffProductServiceCommands.ActivateProduct activateProduct = new BffProductServiceCommands.ActivateProduct();
        activateProduct.setProductId(productId);
        activateProduct.setActive(active);
        
        activateProduct.setRequesterId(SecurityContextUtil.getRequesterId());
        bffProductApplicationService.when(activateProduct);
        
    }

    @PostMapping("batchAddProducts")
    public void batchAddProducts(
        @RequestBody BffProductDto[] products
    ) {
        BffProductServiceCommands.BatchAddProducts batchAddProducts = new BffProductServiceCommands.BatchAddProducts();
        batchAddProducts.setProducts(products);
        
        batchAddProducts.setRequesterId(SecurityContextUtil.getRequesterId());
        bffProductApplicationService.when(batchAddProducts);
        
    }

    @PutMapping("batchActivateProducts")
    public void batchActivateProducts(
        @RequestBody String[] productIds
    ) {
        BffProductServiceCommands.BatchActivateProducts batchActivateProducts = new BffProductServiceCommands.BatchActivateProducts();
        batchActivateProducts.setProductIds(productIds);
        
        batchActivateProducts.setRequesterId(SecurityContextUtil.getRequesterId());
        bffProductApplicationService.when(batchActivateProducts);
        
    }

    @PutMapping("batchDeactivateProducts")
    public void batchDeactivateProducts(
        @RequestBody String[] productIds
    ) {
        BffProductServiceCommands.BatchDeactivateProducts batchDeactivateProducts = new BffProductServiceCommands.BatchDeactivateProducts();
        batchDeactivateProducts.setProductIds(productIds);
        
        batchDeactivateProducts.setRequesterId(SecurityContextUtil.getRequesterId());
        bffProductApplicationService.when(batchDeactivateProducts);
        
    }

}

