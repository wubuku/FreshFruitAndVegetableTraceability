// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import java.util.stream.*;
import jakarta.servlet.http.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.dddml.support.criterion.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.physicalinventory.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;
import org.dddml.support.criterion.TypeConverter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RequestMapping(path = "PhysicalInventories", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class PhysicalInventoryResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    private static CriterionDto deserializeCriterionDto(String filter) {
        return deserializeJsonArgument(filter, CriterionDto.class);
    }

    private static <T> T deserializeJsonArgument(String s, Class<T> aClass) {
        try {
            return new ObjectMapper().readValue(s, aClass);
        } catch (com.fasterxml.jackson.core.JsonProcessingException e) {
            throw new IllegalArgumentException(e);
        }
    }


    @Autowired
    private PhysicalInventoryApplicationService physicalInventoryApplicationService;


    /**
     * Retrieve.
     * Retrieve PhysicalInventories
     */
    @GetMapping
    @Transactional(readOnly = true)
    public PhysicalInventoryStateDto[] getAll( HttpServletRequest request,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "firstResult", defaultValue = "0") Integer firstResult,
                    @RequestParam(value = "maxResults", defaultValue = "2147483647") Integer maxResults,
                    @RequestParam(value = "filter", required = false) String filter) {
        
        if (firstResult < 0) { firstResult = 0; }
        if (maxResults == null || maxResults < 1) { maxResults = Integer.MAX_VALUE; }

            Iterable<PhysicalInventoryState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> PhysicalInventoryResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (PhysicalInventoryMetadata.aliasMap.containsKey(n) ? PhysicalInventoryMetadata.aliasMap.get(n) : n));
            states = physicalInventoryApplicationService.get(
                c,
                PhysicalInventoryResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);

            PhysicalInventoryStateDto.DtoConverter dtoConverter = new PhysicalInventoryStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toPhysicalInventoryStateDtoArray(states);

        
    }

    /**
     * Retrieve in pages.
     * Retrieve PhysicalInventories in pages.
     */
    @GetMapping("_page")
    @Transactional(readOnly = true)
    public Page<PhysicalInventoryStateDto> getPage( HttpServletRequest request,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "page", defaultValue = "0") Integer page,
                    @RequestParam(value = "size", defaultValue = "20") Integer size,
                    @RequestParam(value = "filter", required = false) String filter) {
        
            Integer firstResult = (page == null ? 0 : page) * (size == null ? 20 : size);
            Integer maxResults = (size == null ? 20 : size);
            Iterable<PhysicalInventoryState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> PhysicalInventoryResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (PhysicalInventoryMetadata.aliasMap.containsKey(n) ? PhysicalInventoryMetadata.aliasMap.get(n) : n));
            states = physicalInventoryApplicationService.get(
                c,
                PhysicalInventoryResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);
            long count = physicalInventoryApplicationService.getCount(c);

            PhysicalInventoryStateDto.DtoConverter dtoConverter = new PhysicalInventoryStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            Page.PageImpl<PhysicalInventoryStateDto> statePage =  new Page.PageImpl<>(dtoConverter.toPhysicalInventoryStateDtoList(states), count);
            statePage.setSize(size);
            statePage.setNumber(page);
            return statePage;

        
    }

    /**
     * Retrieve.
     * Retrieves PhysicalInventory with the specified ID.
     */
    @GetMapping("{physicalInventoryId}")
    @Transactional(readOnly = true)
    public PhysicalInventoryStateDto get(@PathVariable("physicalInventoryId") String physicalInventoryId, @RequestParam(value = "fields", required = false) String fields) {
        
            String idObj = physicalInventoryId;
            PhysicalInventoryState state = physicalInventoryApplicationService.get(idObj);
            if (state == null) { return null; }

            PhysicalInventoryStateDto.DtoConverter dtoConverter = new PhysicalInventoryStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toPhysicalInventoryStateDto(state);

        
    }

    @GetMapping("_count")
    @Transactional(readOnly = true)
    public long getCount( HttpServletRequest request,
                         @RequestParam(value = "filter", required = false) String filter) {
        
            long count = 0;
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap());
            }
            Criterion c = CriterionDto.toSubclass(criterion,
                getCriterionTypeConverter(), 
                getPropertyTypeResolver(), 
                n -> (PhysicalInventoryMetadata.aliasMap.containsKey(n) ? PhysicalInventoryMetadata.aliasMap.get(n) : n));
            count = physicalInventoryApplicationService.getCount(c);
            return count;

        
    }


    /**
     * Create.
     * Create PhysicalInventory
     */
    @PostMapping @ResponseBody @ResponseStatus(HttpStatus.CREATED)
    public String post(@RequestBody CreateOrMergePatchPhysicalInventoryDto.CreatePhysicalInventoryDto value,  HttpServletResponse response) {
        
            PhysicalInventoryCommand.CreatePhysicalInventory cmd = value;//.toCreatePhysicalInventory();
            if (cmd.getPhysicalInventoryId() == null) {
                throw DomainError.named("nullId", "Aggregate Id in cmd is null, aggregate name: %1$s.", "PhysicalInventory");
            }
            String idObj = cmd.getPhysicalInventoryId();
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            physicalInventoryApplicationService.when(cmd);

            return idObj;
        
    }


    /**
     * Create or update.
     * Create or update PhysicalInventory
     */
    @PutMapping("{physicalInventoryId}")
    public void put(@PathVariable("physicalInventoryId") String physicalInventoryId, @RequestBody CreateOrMergePatchPhysicalInventoryDto value) {
        
            if (value.getVersion() != null) {
                value.setCommandType(Command.COMMAND_TYPE_MERGE_PATCH);
                PhysicalInventoryCommand.MergePatchPhysicalInventory cmd = (PhysicalInventoryCommand.MergePatchPhysicalInventory) value.toSubclass();
                PhysicalInventoryResourceUtils.setNullIdOrThrowOnInconsistentIds(physicalInventoryId, cmd);
                cmd.setRequesterId(SecurityContextUtil.getRequesterId());
                physicalInventoryApplicationService.when(cmd);
                return;
            }

            value.setCommandType(Command.COMMAND_TYPE_CREATE);
            PhysicalInventoryCommand.CreatePhysicalInventory cmd = (PhysicalInventoryCommand.CreatePhysicalInventory) value.toSubclass();
            PhysicalInventoryResourceUtils.setNullIdOrThrowOnInconsistentIds(physicalInventoryId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            physicalInventoryApplicationService.when(cmd);

        
    }


    /**
     * Patch.
     * Patch PhysicalInventory
     */
    @PatchMapping("{physicalInventoryId}")
    public void patch(@PathVariable("physicalInventoryId") String physicalInventoryId, @RequestBody CreateOrMergePatchPhysicalInventoryDto.MergePatchPhysicalInventoryDto value) {
        

            PhysicalInventoryCommand.MergePatchPhysicalInventory cmd = value;//.toMergePatchPhysicalInventory();
            PhysicalInventoryResourceUtils.setNullIdOrThrowOnInconsistentIds(physicalInventoryId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            physicalInventoryApplicationService.when(cmd);

        
    }

    @GetMapping("_metadata/filteringFields")
    public List<PropertyMetadataDto> getMetadataFilteringFields() {
        

            List<PropertyMetadataDto> filtering = new ArrayList<>();
            PhysicalInventoryMetadata.propertyTypeMap.forEach((key, value) -> {
                filtering.add(new PropertyMetadataDto(key, value, true));
            });
            return filtering;

        
    }

    @GetMapping("{physicalInventoryId}/_events/{version}")
    @Transactional(readOnly = true)
    public PhysicalInventoryEvent getEvent(@PathVariable("physicalInventoryId") String physicalInventoryId, @PathVariable("version") long version) {
        

            String idObj = physicalInventoryId;
            //PhysicalInventoryStateEventDtoConverter dtoConverter = getPhysicalInventoryStateEventDtoConverter();
            return physicalInventoryApplicationService.getEvent(idObj, version);

        
    }

    @GetMapping("{physicalInventoryId}/_historyStates/{version}")
    @Transactional(readOnly = true)
    public PhysicalInventoryStateDto getHistoryState(@PathVariable("physicalInventoryId") String physicalInventoryId, @PathVariable("version") long version, @RequestParam(value = "fields", required = false) String fields) {
        

            String idObj = physicalInventoryId;
            PhysicalInventoryStateDto.DtoConverter dtoConverter = new PhysicalInventoryStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toPhysicalInventoryStateDto(physicalInventoryApplicationService.getHistoryState(idObj, version));

        
    }

    /**
     * Retrieve.
     * Retrieves InventoryItemVariance with the specified InventoryItemId.
     */
    @GetMapping("{physicalInventoryId}/InventoryItemVariances/{inventoryItemId}")
    @Transactional(readOnly = true)
    public InventoryItemVarianceStateDto getInventoryItemVariance(@PathVariable("physicalInventoryId") String physicalInventoryId, @PathVariable("inventoryItemId") String inventoryItemId) {
        

            InventoryItemVarianceState state = physicalInventoryApplicationService.getInventoryItemVariance(physicalInventoryId, inventoryItemId);
            if (state == null) { return null; }
            InventoryItemVarianceStateDto.DtoConverter dtoConverter = new InventoryItemVarianceStateDto.DtoConverter();
            InventoryItemVarianceStateDto stateDto = dtoConverter.toInventoryItemVarianceStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        
    }

    /**
     * Create or update.
     * Create or update InventoryItemVariance
     */
    @PutMapping(path = "{physicalInventoryId}/InventoryItemVariances/{inventoryItemId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putInventoryItemVariance(@PathVariable("physicalInventoryId") String physicalInventoryId, @PathVariable("inventoryItemId") String inventoryItemId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchInventoryItemVarianceDto.MergePatchInventoryItemVarianceDto body) {
        
            PhysicalInventoryCommand.MergePatchPhysicalInventory mergePatchPhysicalInventory = new CreateOrMergePatchPhysicalInventoryDto.MergePatchPhysicalInventoryDto();
            mergePatchPhysicalInventory.setPhysicalInventoryId(physicalInventoryId);
            mergePatchPhysicalInventory.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchPhysicalInventory.setVersion(version); }
            mergePatchPhysicalInventory.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            InventoryItemVarianceCommand.MergePatchInventoryItemVariance mergePatchInventoryItemVariance = body;//.toMergePatchInventoryItemVariance();
            mergePatchInventoryItemVariance.setInventoryItemId(inventoryItemId);
            mergePatchPhysicalInventory.getInventoryItemVarianceCommands().add(mergePatchInventoryItemVariance);
            mergePatchPhysicalInventory.setRequesterId(SecurityContextUtil.getRequesterId());
            physicalInventoryApplicationService.when(mergePatchPhysicalInventory);
        
    }

    /**
     * Delete.
     * Delete InventoryItemVariance
     */
    @DeleteMapping("{physicalInventoryId}/InventoryItemVariances/{inventoryItemId}")
    public void deleteInventoryItemVariance(@PathVariable("physicalInventoryId") String physicalInventoryId, @PathVariable("inventoryItemId") String inventoryItemId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        
            PhysicalInventoryCommand.MergePatchPhysicalInventory mergePatchPhysicalInventory = new CreateOrMergePatchPhysicalInventoryDto.MergePatchPhysicalInventoryDto();
            mergePatchPhysicalInventory.setPhysicalInventoryId(physicalInventoryId);
            mergePatchPhysicalInventory.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchPhysicalInventory.setVersion(version); 
            } else {
                mergePatchPhysicalInventory.setVersion(physicalInventoryApplicationService.get(physicalInventoryId).getVersion());
            }
            mergePatchPhysicalInventory.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            InventoryItemVarianceCommand.RemoveInventoryItemVariance removeInventoryItemVariance = new RemoveInventoryItemVarianceDto();
            removeInventoryItemVariance.setInventoryItemId(inventoryItemId);
            mergePatchPhysicalInventory.getInventoryItemVarianceCommands().add(removeInventoryItemVariance);
            mergePatchPhysicalInventory.setRequesterId(SecurityContextUtil.getRequesterId());
            physicalInventoryApplicationService.when(mergePatchPhysicalInventory);
        
    }

    /**
     * InventoryItemVariance List
     */
    @GetMapping("{physicalInventoryId}/InventoryItemVariances")
    @Transactional(readOnly = true)
    public InventoryItemVarianceStateDto[] getInventoryItemVariances(@PathVariable("physicalInventoryId") String physicalInventoryId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> PhysicalInventoryResourceUtils.getInventoryItemVarianceFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (InventoryItemVarianceMetadata.aliasMap.containsKey(n) ? InventoryItemVarianceMetadata.aliasMap.get(n) : n));
            Iterable<InventoryItemVarianceState> states = physicalInventoryApplicationService.getInventoryItemVariances(physicalInventoryId, c,
                    PhysicalInventoryResourceUtils.getInventoryItemVarianceQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            InventoryItemVarianceStateDto.DtoConverter dtoConverter = new InventoryItemVarianceStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toInventoryItemVarianceStateDtoArray(states);
        
    }

    /**
     * Create.
     * Create InventoryItemVariance
     */
    @PostMapping(path = "{physicalInventoryId}/InventoryItemVariances", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postInventoryItemVariance(@PathVariable("physicalInventoryId") String physicalInventoryId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchInventoryItemVarianceDto.CreateInventoryItemVarianceDto body) {
        
            PhysicalInventoryCommand.MergePatchPhysicalInventory mergePatchPhysicalInventory = new AbstractPhysicalInventoryCommand.SimpleMergePatchPhysicalInventory();
            mergePatchPhysicalInventory.setPhysicalInventoryId(physicalInventoryId);
            mergePatchPhysicalInventory.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchPhysicalInventory.setVersion(version); }
            mergePatchPhysicalInventory.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            InventoryItemVarianceCommand.CreateInventoryItemVariance createInventoryItemVariance = body.toCreateInventoryItemVariance();
            mergePatchPhysicalInventory.getInventoryItemVarianceCommands().add(createInventoryItemVariance);
            mergePatchPhysicalInventory.setRequesterId(SecurityContextUtil.getRequesterId());
            physicalInventoryApplicationService.when(mergePatchPhysicalInventory);
        
    }



    //protected  PhysicalInventoryStateEventDtoConverter getPhysicalInventoryStateEventDtoConverter() {
    //    return new PhysicalInventoryStateEventDtoConverter();
    //}

    protected TypeConverter getCriterionTypeConverter() {
        return new DefaultTypeConverter();
    }

    protected PropertyTypeResolver getPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return PhysicalInventoryResourceUtils.getFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getInventoryItemVariancePropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return PhysicalInventoryResourceUtils.getInventoryItemVarianceFilterPropertyType(propertyName);
            }
        };
    }

 
    public static class PhysicalInventoryResourceUtils {

        public static void setNullIdOrThrowOnInconsistentIds(String physicalInventoryId, org.dddml.ffvtraceability.domain.physicalinventory.PhysicalInventoryCommand value) {
            String idObj = physicalInventoryId;
            if (value.getPhysicalInventoryId() == null) {
                value.setPhysicalInventoryId(idObj);
            } else if (!value.getPhysicalInventoryId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", physicalInventoryId, value.getPhysicalInventoryId());
            }
        }
    
        public static List<String> getQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, PhysicalInventoryMetadata.aliasMap);
        }

        public static List<String> getQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, PhysicalInventoryMetadata.aliasMap);
        }

        public static String getFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (PhysicalInventoryMetadata.aliasMap.containsKey(fieldName)) {
                return PhysicalInventoryMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getFilterPropertyType(String propertyName) {
            if (PhysicalInventoryMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = PhysicalInventoryMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getInventoryItemVarianceQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, InventoryItemVarianceMetadata.aliasMap);
        }

        public static List<String> getInventoryItemVarianceQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, InventoryItemVarianceMetadata.aliasMap);
        }

        public static String getInventoryItemVarianceFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (InventoryItemVarianceMetadata.aliasMap.containsKey(fieldName)) {
                return InventoryItemVarianceMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getInventoryItemVarianceFilterPropertyType(String propertyName) {
            if (InventoryItemVarianceMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = InventoryItemVarianceMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getInventoryItemVarianceQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getInventoryItemVarianceFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getInventoryItemVarianceFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static PhysicalInventoryStateDto[] toPhysicalInventoryStateDtoArray(Iterable<String> ids) {
            List<PhysicalInventoryStateDto> states = new ArrayList<>();
            ids.forEach(i -> {
                PhysicalInventoryStateDto dto = new PhysicalInventoryStateDto();
                dto.setPhysicalInventoryId(i);
                states.add(dto);
            });
            return states.toArray(new PhysicalInventoryStateDto[0]);
        }

    }

}

