// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffSalesOrders", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffSalesOrderServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffSalesOrderApplicationService bffSalesOrderApplicationService;

    @GetMapping
    public Page<BffSalesOrderDto> getSalesOrders(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "orderIdOrItem", required = false) String orderIdOrItem,
        @RequestParam(value = "customerId", required = false) String customerId,
        @RequestParam(value = "orderDateFrom", required = false) OffsetDateTime orderDateFrom,
        @RequestParam(value = "orderDateTo", required = false) OffsetDateTime orderDateTo,
        @RequestParam(value = "includesProductDetails", required = false) Boolean includesProductDetails
    ) {
        BffSalesOrderServiceCommands.GetSalesOrders getSalesOrders = new BffSalesOrderServiceCommands.GetSalesOrders();
        getSalesOrders.setPage(page);
        getSalesOrders.setSize(size);
        getSalesOrders.setOrderIdOrItem(orderIdOrItem);
        getSalesOrders.setCustomerId(customerId);
        getSalesOrders.setOrderDateFrom(orderDateFrom);
        getSalesOrders.setOrderDateTo(orderDateTo);
        getSalesOrders.setIncludesProductDetails(includesProductDetails);
        
        getSalesOrders.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffSalesOrderApplicationService.when(getSalesOrders);
        
    }

    @GetMapping("{orderId}")
    public BffSalesOrderDto getSalesOrder(
        @PathVariable("orderId") String orderId,
        @RequestParam(value = "includesItemFulfillments", required = false) Boolean includesItemFulfillments,
        @RequestParam(value = "includesProductDetails", required = false) Boolean includesProductDetails
    ) {
        BffSalesOrderServiceCommands.GetSalesOrder getSalesOrder = new BffSalesOrderServiceCommands.GetSalesOrder();
        getSalesOrder.setOrderId(orderId);
        getSalesOrder.setIncludesItemFulfillments(includesItemFulfillments);
        getSalesOrder.setIncludesProductDetails(includesProductDetails);
        
        getSalesOrder.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffSalesOrderApplicationService.when(getSalesOrder);
        
    }

    @GetMapping("{orderId}/Items/{orderItemSeqId}")
    public BffSalesOrderItemDto getSalesOrderItem(
        @PathVariable("orderId") String orderId,
        @PathVariable("orderItemSeqId") String orderItemSeqId,
        @RequestParam(value = "includesFulfillments", required = false) Boolean includesFulfillments,
        @RequestParam(value = "includesProductDetails", required = false) Boolean includesProductDetails
    ) {
        BffSalesOrderServiceCommands.GetSalesOrderItem getSalesOrderItem = new BffSalesOrderServiceCommands.GetSalesOrderItem();
        getSalesOrderItem.setOrderId(orderId);
        getSalesOrderItem.setOrderItemSeqId(orderItemSeqId);
        getSalesOrderItem.setIncludesFulfillments(includesFulfillments);
        getSalesOrderItem.setIncludesProductDetails(includesProductDetails);
        
        getSalesOrderItem.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffSalesOrderApplicationService.when(getSalesOrderItem);
        
    }

    @GetMapping("{orderId}/Items/{orderItemSeqId}/OutstandingQuantity")
    public java.math.BigDecimal getSalesOrderItemOutstandingQuantity(
        @PathVariable("orderId") String orderId,
        @PathVariable("orderItemSeqId") String orderItemSeqId
    ) {
        BffSalesOrderServiceCommands.GetSalesOrderItemOutstandingQuantity getSalesOrderItemOutstandingQuantity = new BffSalesOrderServiceCommands.GetSalesOrderItemOutstandingQuantity();
        getSalesOrderItemOutstandingQuantity.setOrderId(orderId);
        getSalesOrderItemOutstandingQuantity.setOrderItemSeqId(orderItemSeqId);
        
        getSalesOrderItemOutstandingQuantity.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffSalesOrderApplicationService.when(getSalesOrderItemOutstandingQuantity);
        
    }

    @GetMapping("{orderId}/getOutstandingQuantityByProduct")
    public java.math.BigDecimal getSalesProductOutstandingQuantityByProductId(
        @PathVariable("orderId") String orderId,
        @RequestParam(value = "productId") String productId
    ) {
        BffSalesOrderServiceCommands.GetSalesProductOutstandingQuantityByProductId getSalesProductOutstandingQuantityByProductId = new BffSalesOrderServiceCommands.GetSalesProductOutstandingQuantityByProductId();
        getSalesProductOutstandingQuantityByProductId.setOrderId(orderId);
        getSalesProductOutstandingQuantityByProductId.setProductId(productId);
        
        getSalesProductOutstandingQuantityByProductId.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffSalesOrderApplicationService.when(getSalesProductOutstandingQuantityByProductId);
        
    }

    @PostMapping
    public String createSalesOrder(
        @RequestBody SalesOrderVo salesOrder
    ) {
        BffSalesOrderServiceCommands.CreateSalesOrder createSalesOrder = new BffSalesOrderServiceCommands.CreateSalesOrder();
        createSalesOrder.setSalesOrder(salesOrder);
        
        createSalesOrder.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffSalesOrderApplicationService.when(createSalesOrder);
        
    }

    @PutMapping("{orderId}")
    public void updateSalesOrder(
        @PathVariable("orderId") String orderId,
        @RequestBody UpdateSalesOrderVo salesOrder
    ) {
        BffSalesOrderServiceCommands.UpdateSalesOrder updateSalesOrder = new BffSalesOrderServiceCommands.UpdateSalesOrder();
        updateSalesOrder.setOrderId(orderId);
        updateSalesOrder.setSalesOrder(salesOrder);
        
        updateSalesOrder.setRequesterId(SecurityContextUtil.getRequesterId());
        bffSalesOrderApplicationService.when(updateSalesOrder);
        
    }

    @PostMapping("{orderId}/recalculateFulfillmentStatus")
    public String recalculateFulfillmentStatus(
        @RequestBody BffSalesOrderServiceCommands.RecalculateFulfillmentStatus requestBody,
        @PathVariable("orderId") String orderId
    ) {
        requestBody.setOrderId(orderId);
        
        requestBody.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffSalesOrderApplicationService.when(requestBody);
        
    }

    @PostMapping("{orderId}/Items")
    public String createSalesOrderItem(
        @PathVariable("orderId") String orderId,
        @RequestBody BffSalesOrderItemDto salesOrderItem
    ) {
        BffSalesOrderServiceCommands.CreateSalesOrderItem createSalesOrderItem = new BffSalesOrderServiceCommands.CreateSalesOrderItem();
        createSalesOrderItem.setOrderId(orderId);
        createSalesOrderItem.setSalesOrderItem(salesOrderItem);
        
        createSalesOrderItem.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffSalesOrderApplicationService.when(createSalesOrderItem);
        
    }

    @DeleteMapping("{orderId}/Items/{orderItemSeqId}")
    public void deleteSalesOrderItem(
        @PathVariable("orderId") String orderId,
        @PathVariable("orderItemSeqId") String orderItemSeqId
    ) {
        BffSalesOrderServiceCommands.DeleteSalesOrderItem deleteSalesOrderItem = new BffSalesOrderServiceCommands.DeleteSalesOrderItem();
        deleteSalesOrderItem.setOrderId(orderId);
        deleteSalesOrderItem.setOrderItemSeqId(orderItemSeqId);
        
        deleteSalesOrderItem.setRequesterId(SecurityContextUtil.getRequesterId());
        bffSalesOrderApplicationService.when(deleteSalesOrderItem);
        
    }

    @PutMapping("{orderId}/Items/{orderItemSeqId}")
    public void updateSalesOrderItem(
        @RequestBody BffSalesOrderServiceCommands.UpdateSalesOrderItem requestBody,
        @PathVariable("orderId") String orderId,
        @PathVariable("orderItemSeqId") String orderItemSeqId
    ) {
        requestBody.setOrderId(orderId);
        requestBody.setOrderItemSeqId(orderItemSeqId);
        
        requestBody.setRequesterId(SecurityContextUtil.getRequesterId());
        bffSalesOrderApplicationService.when(requestBody);
        
    }

}

