// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffInventoryItems", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffInventoryItemServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffInventoryItemApplicationService bffInventoryItemApplicationService;

    @GetMapping
    public Page<BffInventoryItemGroupDto> getInventoryItems(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "productTypeId") String productTypeId,
        @RequestParam(value = "supplierId", required = false) String supplierId,
        @RequestParam(value = "productId", required = false) String productId,
        @RequestParam(value = "facilityId", required = false) String facilityId
    ) {
        BffInventoryItemServiceCommands.GetInventoryItems getInventoryItems = new BffInventoryItemServiceCommands.GetInventoryItems();
        getInventoryItems.setPage(page);
        getInventoryItems.setSize(size);
        getInventoryItems.setProductTypeId(productTypeId);
        getInventoryItems.setSupplierId(supplierId);
        getInventoryItems.setProductId(productId);
        getInventoryItems.setFacilityId(facilityId);
        
        getInventoryItems.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getInventoryItems);
        
    }

    @GetMapping("{inventoryItemId}")
    public BffInventoryItemDto getInventoryItem(
        @PathVariable("inventoryItemId") String inventoryItemId
    ) {
        BffInventoryItemServiceCommands.GetInventoryItem getInventoryItem = new BffInventoryItemServiceCommands.GetInventoryItem();
        getInventoryItem.setInventoryItemId(inventoryItemId);
        
        getInventoryItem.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getInventoryItem);
        
    }

    @GetMapping("{inventoryItemId}/Items/{inventoryItemDetailSeqId}")
    public BffInventoryItemDetailDto getInventoryItemDetail(
        @PathVariable("inventoryItemId") String inventoryItemId,
        @PathVariable("inventoryItemDetailSeqId") String inventoryItemDetailSeqId
    ) {
        BffInventoryItemServiceCommands.GetInventoryItemDetail getInventoryItemDetail = new BffInventoryItemServiceCommands.GetInventoryItemDetail();
        getInventoryItemDetail.setInventoryItemId(inventoryItemId);
        getInventoryItemDetail.setInventoryItemDetailSeqId(inventoryItemDetailSeqId);
        
        getInventoryItemDetail.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getInventoryItemDetail);
        
    }

}

