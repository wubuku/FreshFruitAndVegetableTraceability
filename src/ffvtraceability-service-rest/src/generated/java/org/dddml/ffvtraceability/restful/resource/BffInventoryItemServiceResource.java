// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffInventoryItems", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffInventoryItemServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffInventoryItemApplicationService bffInventoryItemApplicationService;

    @GetMapping("RawItems")
    public Page<BffRawItemInventoryGroupDto> getRawItemInventories(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "productName", required = false) String productName,
        @RequestParam(value = "supplierId", required = false) String supplierId,
        @RequestParam(value = "productId", required = false) String productId,
        @RequestParam(value = "facilityId", required = false) String facilityId
    ) {
        BffInventoryItemServiceCommands.GetRawItemInventories getRawItemInventories = new BffInventoryItemServiceCommands.GetRawItemInventories();
        getRawItemInventories.setPage(page);
        getRawItemInventories.setSize(size);
        getRawItemInventories.setProductName(productName);
        getRawItemInventories.setSupplierId(supplierId);
        getRawItemInventories.setProductId(productId);
        getRawItemInventories.setFacilityId(facilityId);
        
        getRawItemInventories.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getRawItemInventories);
        
    }

    @GetMapping("RawItems/GroupByProductAndLot")
    public Page<BffInventoryItemDto> getRawInventoriesByProductAndLot(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "productId", required = false) String productId,
        @RequestParam(value = "lotId", required = false) String lotId
    ) {
        BffInventoryItemServiceCommands.GetRawInventoriesByProductAndLot getRawInventoriesByProductAndLot = new BffInventoryItemServiceCommands.GetRawInventoriesByProductAndLot();
        getRawInventoriesByProductAndLot.setPage(page);
        getRawInventoriesByProductAndLot.setSize(size);
        getRawInventoriesByProductAndLot.setProductId(productId);
        getRawInventoriesByProductAndLot.setLotId(lotId);
        
        getRawInventoriesByProductAndLot.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getRawInventoriesByProductAndLot);
        
    }

    @GetMapping("RawItems/{productId}/InventoryItems")
    public Page<BffRawItemInventoryItemDto> getRawItemInventoryItems(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @PathVariable("productId") String productId,
        @RequestParam(value = "supplierId") String supplierId,
        @RequestParam(value = "facilityId") String facilityId
    ) {
        BffInventoryItemServiceCommands.GetRawItemInventoryItems getRawItemInventoryItems = new BffInventoryItemServiceCommands.GetRawItemInventoryItems();
        getRawItemInventoryItems.setPage(page);
        getRawItemInventoryItems.setSize(size);
        getRawItemInventoryItems.setProductId(productId);
        getRawItemInventoryItems.setSupplierId(supplierId);
        getRawItemInventoryItems.setFacilityId(facilityId);
        
        getRawItemInventoryItems.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getRawItemInventoryItems);
        
    }

    @GetMapping("WIPs")
    public Page<BffWipInventoryGroupDto> getWipInventories(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "productTypeId") String productTypeId,
        @RequestParam(value = "productName", required = false) String productName,
        @RequestParam(value = "productId", required = false) String productId,
        @RequestParam(value = "facilityId", required = false) String facilityId
    ) {
        BffInventoryItemServiceCommands.GetWipInventories getWipInventories = new BffInventoryItemServiceCommands.GetWipInventories();
        getWipInventories.setPage(page);
        getWipInventories.setSize(size);
        getWipInventories.setProductTypeId(productTypeId);
        getWipInventories.setProductName(productName);
        getWipInventories.setProductId(productId);
        getWipInventories.setFacilityId(facilityId);
        
        getWipInventories.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getWipInventories);
        
    }

    @GetMapping("WIPs/GroupByProductAndLot")
    public Page<BffInventoryItemDto> getWipInventoriesByProductAndLot(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "productId", required = false) String productId,
        @RequestParam(value = "lotId", required = false) String lotId
    ) {
        BffInventoryItemServiceCommands.GetWipInventoriesByProductAndLot getWipInventoriesByProductAndLot = new BffInventoryItemServiceCommands.GetWipInventoriesByProductAndLot();
        getWipInventoriesByProductAndLot.setPage(page);
        getWipInventoriesByProductAndLot.setSize(size);
        getWipInventoriesByProductAndLot.setProductId(productId);
        getWipInventoriesByProductAndLot.setLotId(lotId);
        
        getWipInventoriesByProductAndLot.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getWipInventoriesByProductAndLot);
        
    }

}

