// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffInventoryItems", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffInventoryItemServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffInventoryItemApplicationService bffInventoryItemApplicationService;

    @GetMapping("Details")
    public Page<BffInventoryItemDetailDto> getRawItemInventoryDetails(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "productTypeId", required = false) String productTypeId,
        @RequestParam(value = "productId", required = false) String productId,
        @RequestParam(value = "facilityId", required = false) String facilityId
    ) {
        BffInventoryItemServiceCommands.GetRawItemInventoryDetails getRawItemInventoryDetails = new BffInventoryItemServiceCommands.GetRawItemInventoryDetails();
        getRawItemInventoryDetails.setPage(page);
        getRawItemInventoryDetails.setSize(size);
        getRawItemInventoryDetails.setProductTypeId(productTypeId);
        getRawItemInventoryDetails.setProductId(productId);
        getRawItemInventoryDetails.setFacilityId(facilityId);
        
        getRawItemInventoryDetails.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getRawItemInventoryDetails);
        
    }

    @GetMapping("{productId}/RawItemInventoriesByLotNo")
    public Page<BffInventoryByLotNoDto> getRawItemInventoriesByLotNo(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @PathVariable("productId") String productId,
        @RequestParam(value = "supplierId") String supplierId,
        @RequestParam(value = "facilityId") String facilityId
    ) {
        BffInventoryItemServiceCommands.GetRawItemInventoriesByLotNo getRawItemInventoriesByLotNo = new BffInventoryItemServiceCommands.GetRawItemInventoriesByLotNo();
        getRawItemInventoriesByLotNo.setPage(page);
        getRawItemInventoriesByLotNo.setSize(size);
        getRawItemInventoriesByLotNo.setProductId(productId);
        getRawItemInventoriesByLotNo.setSupplierId(supplierId);
        getRawItemInventoriesByLotNo.setFacilityId(facilityId);
        
        getRawItemInventoriesByLotNo.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getRawItemInventoriesByLotNo);
        
    }

    @GetMapping("RawItems")
    public Page<BffRawItemInventoryGroupDto> getRawItemInventories(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "productName", required = false) String productName,
        @RequestParam(value = "supplierId", required = false) String supplierId,
        @RequestParam(value = "productId", required = false) String productId,
        @RequestParam(value = "facilityId", required = false) String facilityId
    ) {
        BffInventoryItemServiceCommands.GetRawItemInventories getRawItemInventories = new BffInventoryItemServiceCommands.GetRawItemInventories();
        getRawItemInventories.setPage(page);
        getRawItemInventories.setSize(size);
        getRawItemInventories.setProductName(productName);
        getRawItemInventories.setSupplierId(supplierId);
        getRawItemInventories.setProductId(productId);
        getRawItemInventories.setFacilityId(facilityId);
        
        getRawItemInventories.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getRawItemInventories);
        
    }

    @GetMapping("RawItems/GroupByProductAndLot")
    public Page<BffInventoryItemDto> getRawInventoriesByProductAndLot(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "productId", required = false) String productId,
        @RequestParam(value = "lotId", required = false) String lotId
    ) {
        BffInventoryItemServiceCommands.GetRawInventoriesByProductAndLot getRawInventoriesByProductAndLot = new BffInventoryItemServiceCommands.GetRawInventoriesByProductAndLot();
        getRawInventoriesByProductAndLot.setPage(page);
        getRawInventoriesByProductAndLot.setSize(size);
        getRawInventoriesByProductAndLot.setProductId(productId);
        getRawInventoriesByProductAndLot.setLotId(lotId);
        
        getRawInventoriesByProductAndLot.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getRawInventoriesByProductAndLot);
        
    }

    @GetMapping("RawItems/{productId}/InventoryItems")
    public Page<BffRawItemInventoryItemDto> getRawItemInventoryItems(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @PathVariable("productId") String productId,
        @RequestParam(value = "supplierId") String supplierId,
        @RequestParam(value = "facilityId") String facilityId
    ) {
        BffInventoryItemServiceCommands.GetRawItemInventoryItems getRawItemInventoryItems = new BffInventoryItemServiceCommands.GetRawItemInventoryItems();
        getRawItemInventoryItems.setPage(page);
        getRawItemInventoryItems.setSize(size);
        getRawItemInventoryItems.setProductId(productId);
        getRawItemInventoryItems.setSupplierId(supplierId);
        getRawItemInventoryItems.setFacilityId(facilityId);
        
        getRawItemInventoryItems.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getRawItemInventoryItems);
        
    }

    @GetMapping("Products")
    public Page<BffProductInventoryGroupDto> getProductInventories(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "productTypeId") String productTypeId,
        @RequestParam(value = "productName", required = false) String productName,
        @RequestParam(value = "productId", required = false) String productId,
        @RequestParam(value = "facilityId", required = false) String facilityId
    ) {
        BffInventoryItemServiceCommands.GetProductInventories getProductInventories = new BffInventoryItemServiceCommands.GetProductInventories();
        getProductInventories.setPage(page);
        getProductInventories.setSize(size);
        getProductInventories.setProductTypeId(productTypeId);
        getProductInventories.setProductName(productName);
        getProductInventories.setProductId(productId);
        getProductInventories.setFacilityId(facilityId);
        
        getProductInventories.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getProductInventories);
        
    }

    @GetMapping("Products/GroupByProductAndLot")
    public Page<BffInventoryItemDto> getProductInventoriesByProductAndLot(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "productId", required = false) String productId,
        @RequestParam(value = "lotId", required = false) String lotId
    ) {
        BffInventoryItemServiceCommands.GetProductInventoriesByProductAndLot getProductInventoriesByProductAndLot = new BffInventoryItemServiceCommands.GetProductInventoriesByProductAndLot();
        getProductInventoriesByProductAndLot.setPage(page);
        getProductInventoriesByProductAndLot.setSize(size);
        getProductInventoriesByProductAndLot.setProductId(productId);
        getProductInventoriesByProductAndLot.setLotId(lotId);
        
        getProductInventoriesByProductAndLot.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffInventoryItemApplicationService.when(getProductInventoriesByProductAndLot);
        
    }

}

