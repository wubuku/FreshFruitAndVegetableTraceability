// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import java.util.stream.*;
import jakarta.servlet.http.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.dddml.support.criterion.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.attributeset.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;
import org.dddml.support.criterion.TypeConverter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RequestMapping(path = "AttributeSets", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class AttributeSetResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    private static CriterionDto deserializeCriterionDto(String filter) {
        return deserializeJsonArgument(filter, CriterionDto.class);
    }

    private static <T> T deserializeJsonArgument(String s, Class<T> aClass) {
        try {
            return new ObjectMapper().readValue(s, aClass);
        } catch (com.fasterxml.jackson.core.JsonProcessingException e) {
            throw new IllegalArgumentException(e);
        }
    }


    @Autowired
    private AttributeSetApplicationService attributeSetApplicationService;


    /**
     * Retrieve.
     * Retrieve AttributeSets
     */
    @GetMapping
    @Transactional(readOnly = true)
    public AttributeSetStateDto[] getAll( HttpServletRequest request,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "firstResult", defaultValue = "0") Integer firstResult,
                    @RequestParam(value = "maxResults", defaultValue = "2147483647") Integer maxResults,
                    @RequestParam(value = "filter", required = false) String filter) {
        
        if (firstResult < 0) { firstResult = 0; }
        if (maxResults == null || maxResults < 1) { maxResults = Integer.MAX_VALUE; }

            Iterable<AttributeSetState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> AttributeSetResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (AttributeSetMetadata.aliasMap.containsKey(n) ? AttributeSetMetadata.aliasMap.get(n) : n));
            states = attributeSetApplicationService.get(
                c,
                AttributeSetResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);

            AttributeSetStateDto.DtoConverter dtoConverter = new AttributeSetStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toAttributeSetStateDtoArray(states);

        
    }

    /**
     * Retrieve in pages.
     * Retrieve AttributeSets in pages.
     */
    @GetMapping("_page")
    @Transactional(readOnly = true)
    public Page<AttributeSetStateDto> getPage( HttpServletRequest request,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "page", defaultValue = "0") Integer page,
                    @RequestParam(value = "size", defaultValue = "20") Integer size,
                    @RequestParam(value = "filter", required = false) String filter) {
        
            Integer firstResult = (page == null ? 0 : page) * (size == null ? 20 : size);
            Integer maxResults = (size == null ? 20 : size);
            Iterable<AttributeSetState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> AttributeSetResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (AttributeSetMetadata.aliasMap.containsKey(n) ? AttributeSetMetadata.aliasMap.get(n) : n));
            states = attributeSetApplicationService.get(
                c,
                AttributeSetResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);
            long count = attributeSetApplicationService.getCount(c);

            AttributeSetStateDto.DtoConverter dtoConverter = new AttributeSetStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            Page.PageImpl<AttributeSetStateDto> statePage =  new Page.PageImpl<>(dtoConverter.toAttributeSetStateDtoList(states), count);
            statePage.setSize(size);
            statePage.setNumber(page);
            return statePage;

        
    }

    /**
     * Retrieve.
     * Retrieves AttributeSet with the specified ID.
     */
    @GetMapping("{attributeSetId}")
    @Transactional(readOnly = true)
    public AttributeSetStateDto get(@PathVariable("attributeSetId") String attributeSetId, @RequestParam(value = "fields", required = false) String fields) {
        
            String idObj = attributeSetId;
            AttributeSetState state = attributeSetApplicationService.get(idObj);
            if (state == null) { return null; }

            AttributeSetStateDto.DtoConverter dtoConverter = new AttributeSetStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toAttributeSetStateDto(state);

        
    }

    @GetMapping("_count")
    @Transactional(readOnly = true)
    public long getCount( HttpServletRequest request,
                         @RequestParam(value = "filter", required = false) String filter) {
        
            long count = 0;
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap());
            }
            Criterion c = CriterionDto.toSubclass(criterion,
                getCriterionTypeConverter(), 
                getPropertyTypeResolver(), 
                n -> (AttributeSetMetadata.aliasMap.containsKey(n) ? AttributeSetMetadata.aliasMap.get(n) : n));
            count = attributeSetApplicationService.getCount(c);
            return count;

        
    }


    /**
     * Create.
     * Create AttributeSet
     */
    @PostMapping @ResponseBody @ResponseStatus(HttpStatus.CREATED)
    public String post(@RequestBody CreateOrMergePatchAttributeSetDto.CreateAttributeSetDto value,  HttpServletResponse response) {
        
            AttributeSetCommand.CreateAttributeSet cmd = value;//.toCreateAttributeSet();
            if (cmd.getAttributeSetId() == null) {
                throw DomainError.named("nullId", "Aggregate Id in cmd is null, aggregate name: %1$s.", "AttributeSet");
            }
            String idObj = cmd.getAttributeSetId();
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            attributeSetApplicationService.when(cmd);

            return idObj;
        
    }


    /**
     * Create or update.
     * Create or update AttributeSet
     */
    @PutMapping("{attributeSetId}")
    public void put(@PathVariable("attributeSetId") String attributeSetId, @RequestBody CreateOrMergePatchAttributeSetDto value) {
        
            if (value.getVersion() != null) {
                value.setCommandType(Command.COMMAND_TYPE_MERGE_PATCH);
                AttributeSetCommand.MergePatchAttributeSet cmd = (AttributeSetCommand.MergePatchAttributeSet) value.toSubclass();
                AttributeSetResourceUtils.setNullIdOrThrowOnInconsistentIds(attributeSetId, cmd);
                cmd.setRequesterId(SecurityContextUtil.getRequesterId());
                attributeSetApplicationService.when(cmd);
                return;
            }

            value.setCommandType(Command.COMMAND_TYPE_CREATE);
            AttributeSetCommand.CreateAttributeSet cmd = (AttributeSetCommand.CreateAttributeSet) value.toSubclass();
            AttributeSetResourceUtils.setNullIdOrThrowOnInconsistentIds(attributeSetId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            attributeSetApplicationService.when(cmd);

        
    }


    /**
     * Patch.
     * Patch AttributeSet
     */
    @PatchMapping("{attributeSetId}")
    public void patch(@PathVariable("attributeSetId") String attributeSetId, @RequestBody CreateOrMergePatchAttributeSetDto.MergePatchAttributeSetDto value) {
        

            AttributeSetCommand.MergePatchAttributeSet cmd = value;//.toMergePatchAttributeSet();
            AttributeSetResourceUtils.setNullIdOrThrowOnInconsistentIds(attributeSetId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            attributeSetApplicationService.when(cmd);

        
    }

    @GetMapping("_metadata/filteringFields")
    public List<PropertyMetadataDto> getMetadataFilteringFields() {
        

            List<PropertyMetadataDto> filtering = new ArrayList<>();
            AttributeSetMetadata.propertyTypeMap.forEach((key, value) -> {
                filtering.add(new PropertyMetadataDto(key, value, true));
            });
            return filtering;

        
    }

    @GetMapping("{attributeSetId}/_events/{version}")
    @Transactional(readOnly = true)
    public AttributeSetEvent getEvent(@PathVariable("attributeSetId") String attributeSetId, @PathVariable("version") long version) {
        

            String idObj = attributeSetId;
            //AttributeSetStateEventDtoConverter dtoConverter = getAttributeSetStateEventDtoConverter();
            return attributeSetApplicationService.getEvent(idObj, version);

        
    }

    @GetMapping("{attributeSetId}/_historyStates/{version}")
    @Transactional(readOnly = true)
    public AttributeSetStateDto getHistoryState(@PathVariable("attributeSetId") String attributeSetId, @PathVariable("version") long version, @RequestParam(value = "fields", required = false) String fields) {
        

            String idObj = attributeSetId;
            AttributeSetStateDto.DtoConverter dtoConverter = new AttributeSetStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toAttributeSetStateDto(attributeSetApplicationService.getHistoryState(idObj, version));

        
    }

    /**
     * Retrieve.
     * Retrieves AttributeUse with the specified AttributeId.
     */
    @GetMapping("{attributeSetId}/AttributeUses/{attributeId}")
    @Transactional(readOnly = true)
    public AttributeUseStateDto getAttributeUse(@PathVariable("attributeSetId") String attributeSetId, @PathVariable("attributeId") String attributeId) {
        

            AttributeUseState state = attributeSetApplicationService.getAttributeUse(attributeSetId, attributeId);
            if (state == null) { return null; }
            AttributeUseStateDto.DtoConverter dtoConverter = new AttributeUseStateDto.DtoConverter();
            AttributeUseStateDto stateDto = dtoConverter.toAttributeUseStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        
    }

    /**
     * Create or update.
     * Create or update AttributeUse
     */
    @PutMapping(path = "{attributeSetId}/AttributeUses/{attributeId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putAttributeUse(@PathVariable("attributeSetId") String attributeSetId, @PathVariable("attributeId") String attributeId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchAttributeUseDto.MergePatchAttributeUseDto body) {
        
            AttributeSetCommand.MergePatchAttributeSet mergePatchAttributeSet = new CreateOrMergePatchAttributeSetDto.MergePatchAttributeSetDto();
            mergePatchAttributeSet.setAttributeSetId(attributeSetId);
            mergePatchAttributeSet.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchAttributeSet.setVersion(version); }
            mergePatchAttributeSet.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            AttributeUseCommand.MergePatchAttributeUse mergePatchAttributeUse = body;//.toMergePatchAttributeUse();
            mergePatchAttributeUse.setAttributeId(attributeId);
            mergePatchAttributeSet.getAttributeUseCommands().add(mergePatchAttributeUse);
            mergePatchAttributeSet.setRequesterId(SecurityContextUtil.getRequesterId());
            attributeSetApplicationService.when(mergePatchAttributeSet);
        
    }

    /**
     * Delete.
     * Delete AttributeUse
     */
    @DeleteMapping("{attributeSetId}/AttributeUses/{attributeId}")
    public void deleteAttributeUse(@PathVariable("attributeSetId") String attributeSetId, @PathVariable("attributeId") String attributeId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        
            AttributeSetCommand.MergePatchAttributeSet mergePatchAttributeSet = new CreateOrMergePatchAttributeSetDto.MergePatchAttributeSetDto();
            mergePatchAttributeSet.setAttributeSetId(attributeSetId);
            mergePatchAttributeSet.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchAttributeSet.setVersion(version); 
            } else {
                mergePatchAttributeSet.setVersion(attributeSetApplicationService.get(attributeSetId).getVersion());
            }
            mergePatchAttributeSet.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            AttributeUseCommand.RemoveAttributeUse removeAttributeUse = new RemoveAttributeUseDto();
            removeAttributeUse.setAttributeId(attributeId);
            mergePatchAttributeSet.getAttributeUseCommands().add(removeAttributeUse);
            mergePatchAttributeSet.setRequesterId(SecurityContextUtil.getRequesterId());
            attributeSetApplicationService.when(mergePatchAttributeSet);
        
    }

    /**
     * AttributeUse List
     */
    @GetMapping("{attributeSetId}/AttributeUses")
    @Transactional(readOnly = true)
    public AttributeUseStateDto[] getAttributeUses(@PathVariable("attributeSetId") String attributeSetId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> AttributeSetResourceUtils.getAttributeUseFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (AttributeUseMetadata.aliasMap.containsKey(n) ? AttributeUseMetadata.aliasMap.get(n) : n));
            Iterable<AttributeUseState> states = attributeSetApplicationService.getAttributeUses(attributeSetId, c,
                    AttributeSetResourceUtils.getAttributeUseQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            AttributeUseStateDto.DtoConverter dtoConverter = new AttributeUseStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toAttributeUseStateDtoArray(states);
        
    }

    /**
     * Create.
     * Create AttributeUse
     */
    @PostMapping(path = "{attributeSetId}/AttributeUses", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postAttributeUse(@PathVariable("attributeSetId") String attributeSetId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchAttributeUseDto.CreateAttributeUseDto body) {
        
            AttributeSetCommand.MergePatchAttributeSet mergePatchAttributeSet = new AbstractAttributeSetCommand.SimpleMergePatchAttributeSet();
            mergePatchAttributeSet.setAttributeSetId(attributeSetId);
            mergePatchAttributeSet.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchAttributeSet.setVersion(version); }
            mergePatchAttributeSet.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            AttributeUseCommand.CreateAttributeUse createAttributeUse = body.toCreateAttributeUse();
            mergePatchAttributeSet.getAttributeUseCommands().add(createAttributeUse);
            mergePatchAttributeSet.setRequesterId(SecurityContextUtil.getRequesterId());
            attributeSetApplicationService.when(mergePatchAttributeSet);
        
    }



    //protected  AttributeSetStateEventDtoConverter getAttributeSetStateEventDtoConverter() {
    //    return new AttributeSetStateEventDtoConverter();
    //}

    protected TypeConverter getCriterionTypeConverter() {
        return new DefaultTypeConverter();
    }

    protected PropertyTypeResolver getPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return AttributeSetResourceUtils.getFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getAttributeUsePropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return AttributeSetResourceUtils.getAttributeUseFilterPropertyType(propertyName);
            }
        };
    }

 
    public static class AttributeSetResourceUtils {

        public static void setNullIdOrThrowOnInconsistentIds(String attributeSetId, org.dddml.ffvtraceability.domain.attributeset.AttributeSetCommand value) {
            String idObj = attributeSetId;
            if (value.getAttributeSetId() == null) {
                value.setAttributeSetId(idObj);
            } else if (!value.getAttributeSetId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", attributeSetId, value.getAttributeSetId());
            }
        }
    
        public static List<String> getQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, AttributeSetMetadata.aliasMap);
        }

        public static List<String> getQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, AttributeSetMetadata.aliasMap);
        }

        public static String getFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (AttributeSetMetadata.aliasMap.containsKey(fieldName)) {
                return AttributeSetMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getFilterPropertyType(String propertyName) {
            if (AttributeSetMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = AttributeSetMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getAttributeUseQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, AttributeUseMetadata.aliasMap);
        }

        public static List<String> getAttributeUseQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, AttributeUseMetadata.aliasMap);
        }

        public static String getAttributeUseFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (AttributeUseMetadata.aliasMap.containsKey(fieldName)) {
                return AttributeUseMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getAttributeUseFilterPropertyType(String propertyName) {
            if (AttributeUseMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = AttributeUseMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getAttributeUseQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getAttributeUseFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getAttributeUseFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static AttributeSetStateDto[] toAttributeSetStateDtoArray(Iterable<String> ids) {
            List<AttributeSetStateDto> states = new ArrayList<>();
            ids.forEach(i -> {
                AttributeSetStateDto dto = new AttributeSetStateDto();
                dto.setAttributeSetId(i);
                states.add(dto);
            });
            return states.toArray(new AttributeSetStateDto[0]);
        }

    }

}

