// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffGeo", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffGeoServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffGeoApplicationService bffGeoApplicationService;

    @GetMapping("NorthAmericanStatesAndProvinces")
    public BffGeoDto[] getAllNorthAmericanStatesAndProvinces(
    ) {
        BffGeoServiceCommands.GetAllNorthAmericanStatesAndProvinces getAllNorthAmericanStatesAndProvinces = new BffGeoServiceCommands.GetAllNorthAmericanStatesAndProvinces();
        
        getAllNorthAmericanStatesAndProvinces.setRequesterId(SecurityContextUtil.getRequesterId());
        return java.util.stream.StreamSupport.stream((bffGeoApplicationService.when(getAllNorthAmericanStatesAndProvinces)).spliterator(), false).collect(java.util.stream.Collectors.toList()).toArray(new BffGeoDto[0]);
        
    }

    @GetMapping("Countries")
    public BffGeoDto[] getCountries(
    ) {
        BffGeoServiceCommands.GetCountries getCountries = new BffGeoServiceCommands.GetCountries();
        
        getCountries.setRequesterId(SecurityContextUtil.getRequesterId());
        return java.util.stream.StreamSupport.stream((bffGeoApplicationService.when(getCountries)).spliterator(), false).collect(java.util.stream.Collectors.toList()).toArray(new BffGeoDto[0]);
        
    }

    @GetMapping("StatesAndProvinces")
    public BffGeoDto[] getStatesAndProvinces(
        @RequestParam(value = "countryId") String countryId
    ) {
        BffGeoServiceCommands.GetStatesAndProvinces getStatesAndProvinces = new BffGeoServiceCommands.GetStatesAndProvinces();
        getStatesAndProvinces.setCountryId(countryId);
        
        getStatesAndProvinces.setRequesterId(SecurityContextUtil.getRequesterId());
        return java.util.stream.StreamSupport.stream((bffGeoApplicationService.when(getStatesAndProvinces)).spliterator(), false).collect(java.util.stream.Collectors.toList()).toArray(new BffGeoDto[0]);
        
    }

}

