// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffLots", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffLotServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffLotApplicationService bffLotApplicationService;

    @GetMapping
    public Page<BffLotDto> getLots(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "productId", required = false) String productId,
        @RequestParam(value = "supplierId", required = false) String supplierId,
        @RequestParam(value = "active", required = false) String active,
        @RequestParam(value = "keyword", required = false) String keyword
    ) {
        BffLotServiceCommands.GetLots getLots = new BffLotServiceCommands.GetLots();
        getLots.setPage(page);
        getLots.setSize(size);
        getLots.setProductId(productId);
        getLots.setSupplierId(supplierId);
        getLots.setActive(active);
        getLots.setKeyword(keyword);
        
        getLots.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffLotApplicationService.when(getLots);
        
    }

    @GetMapping("{lotId}")
    public BffLotDto getLot(
        @PathVariable("lotId") String lotId
    ) {
        BffLotServiceCommands.GetLot getLot = new BffLotServiceCommands.GetLot();
        getLot.setLotId(lotId);
        
        getLot.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffLotApplicationService.when(getLot);
        
    }

    @PostMapping
    public String createLot(
        @RequestBody @Valid BffLotDto lot
    ) {
        BffLotServiceCommands.CreateLot createLot = new BffLotServiceCommands.CreateLot();
        createLot.setLot(lot);
        
        createLot.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffLotApplicationService.when(createLot);
        
    }

    @PutMapping("{lotId}")
    public void updateLot(
        @PathVariable("lotId") String lotId,
        @RequestBody @Valid BffLotDto lot
    ) {
        BffLotServiceCommands.UpdateLot updateLot = new BffLotServiceCommands.UpdateLot();
        updateLot.setLotId(lotId);
        updateLot.setLot(lot);
        
        updateLot.setRequesterId(SecurityContextUtil.getRequesterId());
        bffLotApplicationService.when(updateLot);
        
    }

    @PutMapping("{lotId}/active")
    public void activateLot(
        @PathVariable("lotId") String lotId,
        @RequestBody Boolean active
    ) {
        BffLotServiceCommands.ActivateLot activateLot = new BffLotServiceCommands.ActivateLot();
        activateLot.setLotId(lotId);
        activateLot.setActive(active);
        
        activateLot.setRequesterId(SecurityContextUtil.getRequesterId());
        bffLotApplicationService.when(activateLot);
        
    }

    @PostMapping("batchAddLots")
    public void batchAddLots(
        @RequestBody @Valid BffLotDto[] lots
    ) {
        BffLotServiceCommands.BatchAddLots batchAddLots = new BffLotServiceCommands.BatchAddLots();
        batchAddLots.setLots(lots);
        
        batchAddLots.setRequesterId(SecurityContextUtil.getRequesterId());
        bffLotApplicationService.when(batchAddLots);
        
    }

    @GetMapping("getPrimaryTlc")
    public BffLotDto getPrimaryTlc(
        @RequestParam(value = "gtin") String gtin,
        @RequestParam(value = "gs1Batch") String gs1Batch
    ) {
        BffLotServiceCommands.GetPrimaryTlc getPrimaryTlc = new BffLotServiceCommands.GetPrimaryTlc();
        getPrimaryTlc.setGtin(gtin);
        getPrimaryTlc.setGs1Batch(gs1Batch);
        
        getPrimaryTlc.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffLotApplicationService.when(getPrimaryTlc);
        
    }

    @GetMapping("getAllPrimaryTlcs")
    public Page<BffLotDto> getAllPrimaryTlcs(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "gtin", required = false) String gtin,
        @RequestParam(value = "gs1Batch", required = false) String gs1Batch
    ) {
        BffLotServiceCommands.GetAllPrimaryTlcs getAllPrimaryTlcs = new BffLotServiceCommands.GetAllPrimaryTlcs();
        getAllPrimaryTlcs.setPage(page);
        getAllPrimaryTlcs.setSize(size);
        getAllPrimaryTlcs.setGtin(gtin);
        getAllPrimaryTlcs.setGs1Batch(gs1Batch);
        
        getAllPrimaryTlcs.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffLotApplicationService.when(getAllPrimaryTlcs);
        
    }

    @PostMapping("createPrimaryTlc")
    public String createPrimaryTlc(
        @RequestBody @Valid BffLotDto primaryTlc
    ) {
        BffLotServiceCommands.CreatePrimaryTlc createPrimaryTlc = new BffLotServiceCommands.CreatePrimaryTlc();
        createPrimaryTlc.setPrimaryTlc(primaryTlc);
        
        createPrimaryTlc.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffLotApplicationService.when(createPrimaryTlc);
        
    }

    @PostMapping("{lotId}/convertToPrimaryTlc")
    public void convertToPrimaryTlc(
        @PathVariable("lotId") String lotId,
        @RequestBody @Valid BffLotDto primaryTlc
    ) {
        BffLotServiceCommands.ConvertToPrimaryTlc convertToPrimaryTlc = new BffLotServiceCommands.ConvertToPrimaryTlc();
        convertToPrimaryTlc.setLotId(lotId);
        convertToPrimaryTlc.setPrimaryTlc(primaryTlc);
        
        convertToPrimaryTlc.setRequesterId(SecurityContextUtil.getRequesterId());
        bffLotApplicationService.when(convertToPrimaryTlc);
        
    }

}

