// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffLots", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffLotServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffLotApplicationService bffLotApplicationService;

    @GetMapping
    public Page<BffLotDto> getLots(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "active", required = false) String active,
        @RequestParam(value = "keyword", required = false) String keyword
    ) {
        BffLotServiceCommands.GetLots getLots = new BffLotServiceCommands.GetLots();
        getLots.setPage(page);
        getLots.setSize(size);
        getLots.setActive(active);
        getLots.setKeyword(keyword);
        try {
        getLots.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffLotApplicationService.when(getLots);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{lotId}")
    public BffLotDto getLot(
        @PathVariable("lotId") String lotId
    ) {
        BffLotServiceCommands.GetLot getLot = new BffLotServiceCommands.GetLot();
        getLot.setLotId(lotId);
        try {
        getLot.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffLotApplicationService.when(getLot);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @PostMapping
    public String createLot(
        @RequestBody @Valid BffLotDto lot
    ) {
        BffLotServiceCommands.CreateLot createLot = new BffLotServiceCommands.CreateLot();
        createLot.setLot(lot);
        try {
        createLot.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffLotApplicationService.when(createLot);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @PutMapping("{lotId}")
    public void updateLot(
        @PathVariable("lotId") String lotId,
        @RequestBody @Valid BffLotDto lot
    ) {
        BffLotServiceCommands.UpdateLot updateLot = new BffLotServiceCommands.UpdateLot();
        updateLot.setLotId(lotId);
        updateLot.setLot(lot);
        try {
        updateLot.setRequesterId(SecurityContextUtil.getRequesterId());
        bffLotApplicationService.when(updateLot);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @PutMapping("{lotId}/active")
    public void activateLot(
        @PathVariable("lotId") String lotId,
        @RequestBody Boolean active
    ) {
        BffLotServiceCommands.ActivateLot activateLot = new BffLotServiceCommands.ActivateLot();
        activateLot.setLotId(lotId);
        activateLot.setActive(active);
        try {
        activateLot.setRequesterId(SecurityContextUtil.getRequesterId());
        bffLotApplicationService.when(activateLot);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

}

