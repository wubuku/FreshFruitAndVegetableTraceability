// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import java.util.stream.*;
import jakarta.servlet.http.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.dddml.support.criterion.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.partyrole.*;
import org.dddml.ffvtraceability.domain.order.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.shipmentreceipt.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;
import org.dddml.support.criterion.TypeConverter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RequestMapping(path = "ShipmentReceipts", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class ShipmentReceiptResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    private static CriterionDto deserializeCriterionDto(String filter) {
        return deserializeJsonArgument(filter, CriterionDto.class);
    }

    private static <T> T deserializeJsonArgument(String s, Class<T> aClass) {
        try {
            return new ObjectMapper().readValue(s, aClass);
        } catch (com.fasterxml.jackson.core.JsonProcessingException e) {
            throw new IllegalArgumentException(e);
        }
    }


    @Autowired
    private ShipmentReceiptApplicationService shipmentReceiptApplicationService;


    /**
     * Retrieve.
     * Retrieve ShipmentReceipts
     */
    @GetMapping
    @Transactional(readOnly = true)
    public ShipmentReceiptStateDto[] getAll( HttpServletRequest request,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "firstResult", defaultValue = "0") Integer firstResult,
                    @RequestParam(value = "maxResults", defaultValue = "2147483647") Integer maxResults,
                    @RequestParam(value = "filter", required = false) String filter) {
        
        if (firstResult < 0) { firstResult = 0; }
        if (maxResults == null || maxResults < 1) { maxResults = Integer.MAX_VALUE; }

            Iterable<ShipmentReceiptState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> ShipmentReceiptResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (ShipmentReceiptMetadata.aliasMap.containsKey(n) ? ShipmentReceiptMetadata.aliasMap.get(n) : n));
            states = shipmentReceiptApplicationService.get(
                c,
                ShipmentReceiptResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);

            ShipmentReceiptStateDto.DtoConverter dtoConverter = new ShipmentReceiptStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toShipmentReceiptStateDtoArray(states);

        
    }

    /**
     * Retrieve in pages.
     * Retrieve ShipmentReceipts in pages.
     */
    @GetMapping("_page")
    @Transactional(readOnly = true)
    public Page<ShipmentReceiptStateDto> getPage( HttpServletRequest request,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "page", defaultValue = "0") Integer page,
                    @RequestParam(value = "size", defaultValue = "20") Integer size,
                    @RequestParam(value = "filter", required = false) String filter) {
        
            Integer firstResult = (page == null ? 0 : page) * (size == null ? 20 : size);
            Integer maxResults = (size == null ? 20 : size);
            Iterable<ShipmentReceiptState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> ShipmentReceiptResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (ShipmentReceiptMetadata.aliasMap.containsKey(n) ? ShipmentReceiptMetadata.aliasMap.get(n) : n));
            states = shipmentReceiptApplicationService.get(
                c,
                ShipmentReceiptResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);
            long count = shipmentReceiptApplicationService.getCount(c);

            ShipmentReceiptStateDto.DtoConverter dtoConverter = new ShipmentReceiptStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            Page.PageImpl<ShipmentReceiptStateDto> statePage =  new Page.PageImpl<>(dtoConverter.toShipmentReceiptStateDtoList(states), count);
            statePage.setSize(size);
            statePage.setNumber(page);
            return statePage;

        
    }

    /**
     * Retrieve.
     * Retrieves ShipmentReceipt with the specified ID.
     */
    @GetMapping("{receiptId}")
    @Transactional(readOnly = true)
    public ShipmentReceiptStateDto get(@PathVariable("receiptId") String receiptId, @RequestParam(value = "fields", required = false) String fields) {
        
            String idObj = receiptId;
            ShipmentReceiptState state = shipmentReceiptApplicationService.get(idObj);
            if (state == null) { return null; }

            ShipmentReceiptStateDto.DtoConverter dtoConverter = new ShipmentReceiptStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toShipmentReceiptStateDto(state);

        
    }

    @GetMapping("_count")
    @Transactional(readOnly = true)
    public long getCount( HttpServletRequest request,
                         @RequestParam(value = "filter", required = false) String filter) {
        
            long count = 0;
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap());
            }
            Criterion c = CriterionDto.toSubclass(criterion,
                getCriterionTypeConverter(), 
                getPropertyTypeResolver(), 
                n -> (ShipmentReceiptMetadata.aliasMap.containsKey(n) ? ShipmentReceiptMetadata.aliasMap.get(n) : n));
            count = shipmentReceiptApplicationService.getCount(c);
            return count;

        
    }


    /**
     * Create.
     * Create ShipmentReceipt
     */
    @PostMapping @ResponseBody @ResponseStatus(HttpStatus.CREATED)
    public String post(@RequestBody CreateOrMergePatchShipmentReceiptDto.CreateShipmentReceiptDto value,  HttpServletResponse response) {
        
            ShipmentReceiptCommand.CreateShipmentReceipt cmd = value;//.toCreateShipmentReceipt();
            if (cmd.getReceiptId() == null) {
                throw DomainError.named("nullId", "Aggregate Id in cmd is null, aggregate name: %1$s.", "ShipmentReceipt");
            }
            String idObj = cmd.getReceiptId();
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentReceiptApplicationService.when(cmd);

            return idObj;
        
    }


    /**
     * Create or update.
     * Create or update ShipmentReceipt
     */
    @PutMapping("{receiptId}")
    public void put(@PathVariable("receiptId") String receiptId, @RequestBody CreateOrMergePatchShipmentReceiptDto value) {
        
            if (value.getVersion() != null) {
                value.setCommandType(Command.COMMAND_TYPE_MERGE_PATCH);
                ShipmentReceiptCommand.MergePatchShipmentReceipt cmd = (ShipmentReceiptCommand.MergePatchShipmentReceipt) value.toSubclass();
                ShipmentReceiptResourceUtils.setNullIdOrThrowOnInconsistentIds(receiptId, cmd);
                cmd.setRequesterId(SecurityContextUtil.getRequesterId());
                shipmentReceiptApplicationService.when(cmd);
                return;
            }

            value.setCommandType(Command.COMMAND_TYPE_CREATE);
            ShipmentReceiptCommand.CreateShipmentReceipt cmd = (ShipmentReceiptCommand.CreateShipmentReceipt) value.toSubclass();
            ShipmentReceiptResourceUtils.setNullIdOrThrowOnInconsistentIds(receiptId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentReceiptApplicationService.when(cmd);

        
    }


    /**
     * Patch.
     * Patch ShipmentReceipt
     */
    @PatchMapping("{receiptId}")
    public void patch(@PathVariable("receiptId") String receiptId, @RequestBody CreateOrMergePatchShipmentReceiptDto.MergePatchShipmentReceiptDto value) {
        

            ShipmentReceiptCommand.MergePatchShipmentReceipt cmd = value;//.toMergePatchShipmentReceipt();
            ShipmentReceiptResourceUtils.setNullIdOrThrowOnInconsistentIds(receiptId, cmd);
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentReceiptApplicationService.when(cmd);

        
    }

    /**
     * Delete.
     * Delete ShipmentReceipt
     */
    @DeleteMapping("{receiptId}")
    public void delete(@PathVariable("receiptId") String receiptId,
                       @NotNull @RequestParam(value = "commandId", required = false) String commandId,
                       @NotNull @RequestParam(value = "version", required = false) @Min(value = -1) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        

            ShipmentReceiptCommand.DeleteShipmentReceipt deleteCmd = new DeleteShipmentReceiptDto();

            deleteCmd.setCommandId(commandId);
            deleteCmd.setRequesterId(requesterId);
            deleteCmd.setVersion(version);
            ShipmentReceiptResourceUtils.setNullIdOrThrowOnInconsistentIds(receiptId, deleteCmd);
            deleteCmd.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentReceiptApplicationService.when(deleteCmd);

        
    }

    @GetMapping("_metadata/filteringFields")
    public List<PropertyMetadataDto> getMetadataFilteringFields() {
        

            List<PropertyMetadataDto> filtering = new ArrayList<>();
            ShipmentReceiptMetadata.propertyTypeMap.forEach((key, value) -> {
                filtering.add(new PropertyMetadataDto(key, value, true));
            });
            return filtering;

        
    }

    @GetMapping("{receiptId}/_events/{version}")
    @Transactional(readOnly = true)
    public ShipmentReceiptEvent getEvent(@PathVariable("receiptId") String receiptId, @PathVariable("version") long version) {
        

            String idObj = receiptId;
            //ShipmentReceiptStateEventDtoConverter dtoConverter = getShipmentReceiptStateEventDtoConverter();
            return shipmentReceiptApplicationService.getEvent(idObj, version);

        
    }

    @GetMapping("{receiptId}/_historyStates/{version}")
    @Transactional(readOnly = true)
    public ShipmentReceiptStateDto getHistoryState(@PathVariable("receiptId") String receiptId, @PathVariable("version") long version, @RequestParam(value = "fields", required = false) String fields) {
        

            String idObj = receiptId;
            ShipmentReceiptStateDto.DtoConverter dtoConverter = new ShipmentReceiptStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toShipmentReceiptStateDto(shipmentReceiptApplicationService.getHistoryState(idObj, version));

        
    }

    /**
     * Retrieve.
     * Retrieves ShipmentReceiptRole with the specified PartyRoleId.
     */
    @GetMapping("{receiptId}/ShipmentReceiptRoles/{partyRoleId}")
    @Transactional(readOnly = true)
    public ShipmentReceiptRoleStateDto getShipmentReceiptRole(@PathVariable("receiptId") String receiptId, @PathVariable("partyRoleId") String partyRoleId) {
        

            ShipmentReceiptRoleState state = shipmentReceiptApplicationService.getShipmentReceiptRole(receiptId, deserializeJsonArgument(partyRoleId, PartyRoleId.class));
            if (state == null) { return null; }
            ShipmentReceiptRoleStateDto.DtoConverter dtoConverter = new ShipmentReceiptRoleStateDto.DtoConverter();
            ShipmentReceiptRoleStateDto stateDto = dtoConverter.toShipmentReceiptRoleStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        
    }

    /**
     * Create or update.
     * Create or update ShipmentReceiptRole
     */
    @PutMapping(path = "{receiptId}/ShipmentReceiptRoles/{partyRoleId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putShipmentReceiptRole(@PathVariable("receiptId") String receiptId, @PathVariable("partyRoleId") String partyRoleId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchShipmentReceiptRoleDto.MergePatchShipmentReceiptRoleDto body) {
        
            ShipmentReceiptCommand.MergePatchShipmentReceipt mergePatchShipmentReceipt = new CreateOrMergePatchShipmentReceiptDto.MergePatchShipmentReceiptDto();
            mergePatchShipmentReceipt.setReceiptId(receiptId);
            mergePatchShipmentReceipt.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchShipmentReceipt.setVersion(version); }
            mergePatchShipmentReceipt.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentReceiptRoleCommand.MergePatchShipmentReceiptRole mergePatchShipmentReceiptRole = body;//.toMergePatchShipmentReceiptRole();
            mergePatchShipmentReceiptRole.setPartyRoleId(deserializeJsonArgument(partyRoleId, PartyRoleId.class));
            mergePatchShipmentReceipt.getShipmentReceiptRoleCommands().add(mergePatchShipmentReceiptRole);
            mergePatchShipmentReceipt.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentReceiptApplicationService.when(mergePatchShipmentReceipt);
        
    }

    /**
     * Delete.
     * Delete ShipmentReceiptRole
     */
    @DeleteMapping("{receiptId}/ShipmentReceiptRoles/{partyRoleId}")
    public void deleteShipmentReceiptRole(@PathVariable("receiptId") String receiptId, @PathVariable("partyRoleId") String partyRoleId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        
            ShipmentReceiptCommand.MergePatchShipmentReceipt mergePatchShipmentReceipt = new CreateOrMergePatchShipmentReceiptDto.MergePatchShipmentReceiptDto();
            mergePatchShipmentReceipt.setReceiptId(receiptId);
            mergePatchShipmentReceipt.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchShipmentReceipt.setVersion(version); 
            } else {
                mergePatchShipmentReceipt.setVersion(shipmentReceiptApplicationService.get(receiptId).getVersion());
            }
            mergePatchShipmentReceipt.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentReceiptRoleCommand.RemoveShipmentReceiptRole removeShipmentReceiptRole = new RemoveShipmentReceiptRoleDto();
            removeShipmentReceiptRole.setPartyRoleId(deserializeJsonArgument(partyRoleId, PartyRoleId.class));
            mergePatchShipmentReceipt.getShipmentReceiptRoleCommands().add(removeShipmentReceiptRole);
            mergePatchShipmentReceipt.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentReceiptApplicationService.when(mergePatchShipmentReceipt);
        
    }

    /**
     * ShipmentReceiptRole List
     */
    @GetMapping("{receiptId}/ShipmentReceiptRoles")
    @Transactional(readOnly = true)
    public ShipmentReceiptRoleStateDto[] getShipmentReceiptRoles(@PathVariable("receiptId") String receiptId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> ShipmentReceiptResourceUtils.getShipmentReceiptRoleFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (ShipmentReceiptRoleMetadata.aliasMap.containsKey(n) ? ShipmentReceiptRoleMetadata.aliasMap.get(n) : n));
            Iterable<ShipmentReceiptRoleState> states = shipmentReceiptApplicationService.getShipmentReceiptRoles(receiptId, c,
                    ShipmentReceiptResourceUtils.getShipmentReceiptRoleQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            ShipmentReceiptRoleStateDto.DtoConverter dtoConverter = new ShipmentReceiptRoleStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toShipmentReceiptRoleStateDtoArray(states);
        
    }

    /**
     * Create.
     * Create ShipmentReceiptRole
     */
    @PostMapping(path = "{receiptId}/ShipmentReceiptRoles", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postShipmentReceiptRole(@PathVariable("receiptId") String receiptId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchShipmentReceiptRoleDto.CreateShipmentReceiptRoleDto body) {
        
            ShipmentReceiptCommand.MergePatchShipmentReceipt mergePatchShipmentReceipt = new AbstractShipmentReceiptCommand.SimpleMergePatchShipmentReceipt();
            mergePatchShipmentReceipt.setReceiptId(receiptId);
            mergePatchShipmentReceipt.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchShipmentReceipt.setVersion(version); }
            mergePatchShipmentReceipt.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentReceiptRoleCommand.CreateShipmentReceiptRole createShipmentReceiptRole = body.toCreateShipmentReceiptRole();
            mergePatchShipmentReceipt.getShipmentReceiptRoleCommands().add(createShipmentReceiptRole);
            mergePatchShipmentReceipt.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentReceiptApplicationService.when(mergePatchShipmentReceipt);
        
    }

    /**
     * Retrieve.
     * Retrieves ShipmentReceiptOrderAllocation with the specified OrderItemId.
     */
    @GetMapping("{receiptId}/ShipmentReceiptOrderAllocations/{orderItemId}")
    @Transactional(readOnly = true)
    public ShipmentReceiptOrderAllocationStateDto getShipmentReceiptOrderAllocation(@PathVariable("receiptId") String receiptId, @PathVariable("orderItemId") String orderItemId) {
        

            ShipmentReceiptOrderAllocationState state = shipmentReceiptApplicationService.getShipmentReceiptOrderAllocation(receiptId, deserializeJsonArgument(orderItemId, OrderItemId.class));
            if (state == null) { return null; }
            ShipmentReceiptOrderAllocationStateDto.DtoConverter dtoConverter = new ShipmentReceiptOrderAllocationStateDto.DtoConverter();
            ShipmentReceiptOrderAllocationStateDto stateDto = dtoConverter.toShipmentReceiptOrderAllocationStateDto(state);
            dtoConverter.setAllFieldsReturned(true);
            return stateDto;

        
    }

    /**
     * Create or update.
     * Create or update ShipmentReceiptOrderAllocation
     */
    @PutMapping(path = "{receiptId}/ShipmentReceiptOrderAllocations/{orderItemId}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void putShipmentReceiptOrderAllocation(@PathVariable("receiptId") String receiptId, @PathVariable("orderItemId") String orderItemId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchShipmentReceiptOrderAllocationDto.MergePatchShipmentReceiptOrderAllocationDto body) {
        
            ShipmentReceiptCommand.MergePatchShipmentReceipt mergePatchShipmentReceipt = new CreateOrMergePatchShipmentReceiptDto.MergePatchShipmentReceiptDto();
            mergePatchShipmentReceipt.setReceiptId(receiptId);
            mergePatchShipmentReceipt.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchShipmentReceipt.setVersion(version); }
            mergePatchShipmentReceipt.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentReceiptOrderAllocationCommand.MergePatchShipmentReceiptOrderAllocation mergePatchShipmentReceiptOrderAllocation = body;//.toMergePatchShipmentReceiptOrderAllocation();
            mergePatchShipmentReceiptOrderAllocation.setOrderItemId(deserializeJsonArgument(orderItemId, OrderItemId.class));
            mergePatchShipmentReceipt.getShipmentReceiptOrderAllocationCommands().add(mergePatchShipmentReceiptOrderAllocation);
            mergePatchShipmentReceipt.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentReceiptApplicationService.when(mergePatchShipmentReceipt);
        
    }

    /**
     * Delete.
     * Delete ShipmentReceiptOrderAllocation
     */
    @DeleteMapping("{receiptId}/ShipmentReceiptOrderAllocations/{orderItemId}")
    public void deleteShipmentReceiptOrderAllocation(@PathVariable("receiptId") String receiptId, @PathVariable("orderItemId") String orderItemId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId) {
        
            ShipmentReceiptCommand.MergePatchShipmentReceipt mergePatchShipmentReceipt = new CreateOrMergePatchShipmentReceiptDto.MergePatchShipmentReceiptDto();
            mergePatchShipmentReceipt.setReceiptId(receiptId);
            mergePatchShipmentReceipt.setCommandId(commandId);// != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { 
                mergePatchShipmentReceipt.setVersion(version); 
            } else {
                mergePatchShipmentReceipt.setVersion(shipmentReceiptApplicationService.get(receiptId).getVersion());
            }
            mergePatchShipmentReceipt.setRequesterId(requesterId);// != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentReceiptOrderAllocationCommand.RemoveShipmentReceiptOrderAllocation removeShipmentReceiptOrderAllocation = new RemoveShipmentReceiptOrderAllocationDto();
            removeShipmentReceiptOrderAllocation.setOrderItemId(deserializeJsonArgument(orderItemId, OrderItemId.class));
            mergePatchShipmentReceipt.getShipmentReceiptOrderAllocationCommands().add(removeShipmentReceiptOrderAllocation);
            mergePatchShipmentReceipt.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentReceiptApplicationService.when(mergePatchShipmentReceipt);
        
    }

    /**
     * ShipmentReceiptOrderAllocation List
     */
    @GetMapping("{receiptId}/ShipmentReceiptOrderAllocations")
    @Transactional(readOnly = true)
    public ShipmentReceiptOrderAllocationStateDto[] getShipmentReceiptOrderAllocations(@PathVariable("receiptId") String receiptId,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "filter", required = false) String filter,
                     HttpServletRequest request) {
        
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = deserializeCriterionDto(filter);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> ShipmentReceiptResourceUtils.getShipmentReceiptOrderAllocationFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (ShipmentReceiptOrderAllocationMetadata.aliasMap.containsKey(n) ? ShipmentReceiptOrderAllocationMetadata.aliasMap.get(n) : n));
            Iterable<ShipmentReceiptOrderAllocationState> states = shipmentReceiptApplicationService.getShipmentReceiptOrderAllocations(receiptId, c,
                    ShipmentReceiptResourceUtils.getShipmentReceiptOrderAllocationQuerySorts(request.getParameterMap()));
            if (states == null) { return null; }
            ShipmentReceiptOrderAllocationStateDto.DtoConverter dtoConverter = new ShipmentReceiptOrderAllocationStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toShipmentReceiptOrderAllocationStateDtoArray(states);
        
    }

    /**
     * Create.
     * Create ShipmentReceiptOrderAllocation
     */
    @PostMapping(path = "{receiptId}/ShipmentReceiptOrderAllocations", consumes = MediaType.APPLICATION_JSON_VALUE)
    public void postShipmentReceiptOrderAllocation(@PathVariable("receiptId") String receiptId,
                       @RequestParam(value = "commandId", required = false) String commandId,
                       @RequestParam(value = "version", required = false) Long version,
                       @RequestParam(value = "requesterId", required = false) String requesterId,
                       @RequestBody CreateOrMergePatchShipmentReceiptOrderAllocationDto.CreateShipmentReceiptOrderAllocationDto body) {
        
            ShipmentReceiptCommand.MergePatchShipmentReceipt mergePatchShipmentReceipt = new AbstractShipmentReceiptCommand.SimpleMergePatchShipmentReceipt();
            mergePatchShipmentReceipt.setReceiptId(receiptId);
            mergePatchShipmentReceipt.setCommandId(commandId != null && !commandId.isEmpty() ? commandId : body.getCommandId());
            if (version != null) { mergePatchShipmentReceipt.setVersion(version); }
            mergePatchShipmentReceipt.setRequesterId(requesterId != null && !requesterId.isEmpty() ? requesterId : body.getRequesterId());
            ShipmentReceiptOrderAllocationCommand.CreateShipmentReceiptOrderAllocation createShipmentReceiptOrderAllocation = body.toCreateShipmentReceiptOrderAllocation();
            mergePatchShipmentReceipt.getShipmentReceiptOrderAllocationCommands().add(createShipmentReceiptOrderAllocation);
            mergePatchShipmentReceipt.setRequesterId(SecurityContextUtil.getRequesterId());
            shipmentReceiptApplicationService.when(mergePatchShipmentReceipt);
        
    }



    //protected  ShipmentReceiptStateEventDtoConverter getShipmentReceiptStateEventDtoConverter() {
    //    return new ShipmentReceiptStateEventDtoConverter();
    //}

    protected TypeConverter getCriterionTypeConverter() {
        return new DefaultTypeConverter();
    }

    protected PropertyTypeResolver getPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return ShipmentReceiptResourceUtils.getFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getShipmentReceiptRolePropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return ShipmentReceiptResourceUtils.getShipmentReceiptRoleFilterPropertyType(propertyName);
            }
        };
    }

    protected PropertyTypeResolver getShipmentReceiptOrderAllocationPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return ShipmentReceiptResourceUtils.getShipmentReceiptOrderAllocationFilterPropertyType(propertyName);
            }
        };
    }

 
    public static class ShipmentReceiptResourceUtils {

        public static void setNullIdOrThrowOnInconsistentIds(String receiptId, org.dddml.ffvtraceability.domain.shipmentreceipt.ShipmentReceiptCommand value) {
            String idObj = receiptId;
            if (value.getReceiptId() == null) {
                value.setReceiptId(idObj);
            } else if (!value.getReceiptId().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", receiptId, value.getReceiptId());
            }
        }
    
        public static List<String> getQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, ShipmentReceiptMetadata.aliasMap);
        }

        public static List<String> getQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, ShipmentReceiptMetadata.aliasMap);
        }

        public static String getFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (ShipmentReceiptMetadata.aliasMap.containsKey(fieldName)) {
                return ShipmentReceiptMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getFilterPropertyType(String propertyName) {
            if (ShipmentReceiptMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = ShipmentReceiptMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getShipmentReceiptRoleQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, ShipmentReceiptRoleMetadata.aliasMap);
        }

        public static List<String> getShipmentReceiptRoleQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, ShipmentReceiptRoleMetadata.aliasMap);
        }

        public static String getShipmentReceiptRoleFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (ShipmentReceiptRoleMetadata.aliasMap.containsKey(fieldName)) {
                return ShipmentReceiptRoleMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getShipmentReceiptRoleFilterPropertyType(String propertyName) {
            if (ShipmentReceiptRoleMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = ShipmentReceiptRoleMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getShipmentReceiptRoleQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getShipmentReceiptRoleFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getShipmentReceiptRoleFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static List<String> getShipmentReceiptOrderAllocationQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, ShipmentReceiptOrderAllocationMetadata.aliasMap);
        }

        public static List<String> getShipmentReceiptOrderAllocationQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, ShipmentReceiptOrderAllocationMetadata.aliasMap);
        }

        public static String getShipmentReceiptOrderAllocationFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (ShipmentReceiptOrderAllocationMetadata.aliasMap.containsKey(fieldName)) {
                return ShipmentReceiptOrderAllocationMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getShipmentReceiptOrderAllocationFilterPropertyType(String propertyName) {
            if (ShipmentReceiptOrderAllocationMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = ShipmentReceiptOrderAllocationMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getShipmentReceiptOrderAllocationQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getShipmentReceiptOrderAllocationFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getShipmentReceiptOrderAllocationFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static ShipmentReceiptStateDto[] toShipmentReceiptStateDtoArray(Iterable<String> ids) {
            List<ShipmentReceiptStateDto> states = new ArrayList<>();
            ids.forEach(i -> {
                ShipmentReceiptStateDto dto = new ShipmentReceiptStateDto();
                dto.setReceiptId(i);
                states.add(dto);
            });
            return states.toArray(new ShipmentReceiptStateDto[0]);
        }

    }

}

