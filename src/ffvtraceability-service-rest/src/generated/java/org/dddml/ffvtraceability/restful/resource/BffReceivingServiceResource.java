// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffReceipts", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffReceivingServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffReceivingApplicationService bffReceivingApplicationService;

    @GetMapping
    public Page<BffReceivingDocumentDto> getReceivingDocuments(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size
    ) {
        BffReceivingServiceCommands.GetReceivingDocuments getReceivingDocuments = new BffReceivingServiceCommands.GetReceivingDocuments();
        getReceivingDocuments.setPage(page);
        getReceivingDocuments.setSize(size);
        try {
        getReceivingDocuments.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffReceivingApplicationService.when(getReceivingDocuments);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{documentId}")
    public BffReceivingDocumentDto getReceivingDocument(
        @PathVariable("documentId") String documentId
    ) {
        BffReceivingServiceCommands.GetReceivingDocument getReceivingDocument = new BffReceivingServiceCommands.GetReceivingDocument();
        getReceivingDocument.setDocumentId(documentId);
        try {
        getReceivingDocument.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffReceivingApplicationService.when(getReceivingDocument);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{documentId}/Items/{receiptId}")
    public BffReceivingItemDto getReceivingItem(
        @PathVariable("documentId") String documentId,
        @PathVariable("receiptId") String receiptId
    ) {
        BffReceivingServiceCommands.GetReceivingItem getReceivingItem = new BffReceivingServiceCommands.GetReceivingItem();
        getReceivingItem.setDocumentId(documentId);
        getReceivingItem.setReceiptId(receiptId);
        try {
        getReceivingItem.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffReceivingApplicationService.when(getReceivingItem);
        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

}

