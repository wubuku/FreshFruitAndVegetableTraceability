// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffReceipts", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffReceivingServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffReceivingApplicationService bffReceivingApplicationService;

    @GetMapping
    public Page<BffReceivingDocumentDto> getReceivingDocuments(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "documentIdOrItem", required = false) String documentIdOrItem,
        @RequestParam(value = "facilityId", required = false) String facilityId,
        @RequestParam(value = "supplierId", required = false) String supplierId,
        @RequestParam(value = "receivedAtFrom", required = false) OffsetDateTime receivedAtFrom,
        @RequestParam(value = "receivedAtTo", required = false) OffsetDateTime receivedAtTo,
        @RequestParam(value = "derivesQaInspectionStatus", required = false) Boolean derivesQaInspectionStatus
    ) {
        BffReceivingServiceCommands.GetReceivingDocuments getReceivingDocuments = new BffReceivingServiceCommands.GetReceivingDocuments();
        getReceivingDocuments.setPage(page);
        getReceivingDocuments.setSize(size);
        getReceivingDocuments.setDocumentIdOrItem(documentIdOrItem);
        getReceivingDocuments.setFacilityId(facilityId);
        getReceivingDocuments.setSupplierId(supplierId);
        getReceivingDocuments.setReceivedAtFrom(receivedAtFrom);
        getReceivingDocuments.setReceivedAtTo(receivedAtTo);
        getReceivingDocuments.setDerivesQaInspectionStatus(derivesQaInspectionStatus);
        
        getReceivingDocuments.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffReceivingApplicationService.when(getReceivingDocuments);
        
    }

    @GetMapping("{documentId}")
    public BffReceivingDocumentDto getReceivingDocument(
        @PathVariable("documentId") String documentId,
        @RequestParam(value = "derivesQaInspectionStatus", required = false) Boolean derivesQaInspectionStatus,
        @RequestParam(value = "includesOutstandingOrderQuantity", required = false) Boolean includesOutstandingOrderQuantity,
        @RequestParam(value = "includesOriginFacility", required = false) Boolean includesOriginFacility,
        @RequestParam(value = "includesDestinationFacility", required = false) Boolean includesDestinationFacility
    ) {
        BffReceivingServiceCommands.GetReceivingDocument getReceivingDocument = new BffReceivingServiceCommands.GetReceivingDocument();
        getReceivingDocument.setDocumentId(documentId);
        getReceivingDocument.setDerivesQaInspectionStatus(derivesQaInspectionStatus);
        getReceivingDocument.setIncludesOutstandingOrderQuantity(includesOutstandingOrderQuantity);
        getReceivingDocument.setIncludesOriginFacility(includesOriginFacility);
        getReceivingDocument.setIncludesDestinationFacility(includesDestinationFacility);
        
        getReceivingDocument.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffReceivingApplicationService.when(getReceivingDocument);
        
    }

    @GetMapping("{documentId}/Items/{receiptId}")
    public BffReceivingItemDto getReceivingItem(
        @PathVariable("documentId") String documentId,
        @PathVariable("receiptId") String receiptId
    ) {
        BffReceivingServiceCommands.GetReceivingItem getReceivingItem = new BffReceivingServiceCommands.GetReceivingItem();
        getReceivingItem.setDocumentId(documentId);
        getReceivingItem.setReceiptId(receiptId);
        
        getReceivingItem.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffReceivingApplicationService.when(getReceivingItem);
        
    }

    @PostMapping
    public String createReceivingDocument(
        @RequestBody BffReceivingDocumentDto receivingDocument
    ) {
        BffReceivingServiceCommands.CreateReceivingDocument createReceivingDocument = new BffReceivingServiceCommands.CreateReceivingDocument();
        createReceivingDocument.setReceivingDocument(receivingDocument);
        
        createReceivingDocument.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffReceivingApplicationService.when(createReceivingDocument);
        
    }

    @PutMapping("{documentId}")
    public void updateReceivingDocument(
        @PathVariable("documentId") String documentId,
        @RequestBody BffReceivingDocumentDto receivingDocument
    ) {
        BffReceivingServiceCommands.UpdateReceivingDocument updateReceivingDocument = new BffReceivingServiceCommands.UpdateReceivingDocument();
        updateReceivingDocument.setDocumentId(documentId);
        updateReceivingDocument.setReceivingDocument(receivingDocument);
        
        updateReceivingDocument.setRequesterId(SecurityContextUtil.getRequesterId());
        bffReceivingApplicationService.when(updateReceivingDocument);
        
    }

    @PutMapping("{documentId}/PrimaryOrderId")
    public void updateReceivingPrimaryOrderId(
        @PathVariable("documentId") String documentId,
        @RequestBody String primaryOrderId
    ) {
        BffReceivingServiceCommands.UpdateReceivingPrimaryOrderId updateReceivingPrimaryOrderId = new BffReceivingServiceCommands.UpdateReceivingPrimaryOrderId();
        updateReceivingPrimaryOrderId.setDocumentId(documentId);
        updateReceivingPrimaryOrderId.setPrimaryOrderId(primaryOrderId);
        
        updateReceivingPrimaryOrderId.setRequesterId(SecurityContextUtil.getRequesterId());
        bffReceivingApplicationService.when(updateReceivingPrimaryOrderId);
        
    }

    @PostMapping("{documentId}/SubmitReceivingDocument")
    public void submitReceivingDocument(
        @PathVariable("documentId") String documentId,
        @RequestBody BffReceivingServiceCommands.SubmitReceivingDocument requestBody
    ) {
        requestBody.setDocumentId(documentId);
        
        requestBody.setRequesterId(SecurityContextUtil.getRequesterId());
        bffReceivingApplicationService.when(requestBody);
        
    }

    @PostMapping("{documentId}/ConfirmQaInspections")
    public void confirmQaInspections(
        @PathVariable("documentId") String documentId,
        @RequestBody BffReceivingServiceCommands.ConfirmQaInspections requestBody
    ) {
        requestBody.setDocumentId(documentId);
        
        requestBody.setRequesterId(SecurityContextUtil.getRequesterId());
        bffReceivingApplicationService.when(requestBody);
        
    }

    @PutMapping("{documentId}/ReferenceDocuments")
    public void updateReceivingReferenceDocuments(
        @PathVariable("documentId") String documentId,
        @RequestBody BffDocumentDto[] referenceDocuments
    ) {
        BffReceivingServiceCommands.UpdateReceivingReferenceDocuments updateReceivingReferenceDocuments = new BffReceivingServiceCommands.UpdateReceivingReferenceDocuments();
        updateReceivingReferenceDocuments.setDocumentId(documentId);
        updateReceivingReferenceDocuments.setReferenceDocuments(referenceDocuments);
        
        updateReceivingReferenceDocuments.setRequesterId(SecurityContextUtil.getRequesterId());
        bffReceivingApplicationService.when(updateReceivingReferenceDocuments);
        
    }

    @PostMapping("{documentId}/Items")
    public String createReceivingItem(
        @PathVariable("documentId") String documentId,
        @RequestBody BffReceivingItemDto receivingItem
    ) {
        BffReceivingServiceCommands.CreateReceivingItem createReceivingItem = new BffReceivingServiceCommands.CreateReceivingItem();
        createReceivingItem.setDocumentId(documentId);
        createReceivingItem.setReceivingItem(receivingItem);
        
        createReceivingItem.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffReceivingApplicationService.when(createReceivingItem);
        
    }

    @DeleteMapping("{documentId}/Items/{receiptId}")
    public void deleteReceivingItem(
        @PathVariable("documentId") String documentId,
        @PathVariable("receiptId") String receiptId
    ) {
        BffReceivingServiceCommands.DeleteReceivingItem deleteReceivingItem = new BffReceivingServiceCommands.DeleteReceivingItem();
        deleteReceivingItem.setDocumentId(documentId);
        deleteReceivingItem.setReceiptId(receiptId);
        
        deleteReceivingItem.setRequesterId(SecurityContextUtil.getRequesterId());
        bffReceivingApplicationService.when(deleteReceivingItem);
        
    }

    @PutMapping("{documentId}/Items/{receiptId}")
    public void updateReceivingItem(
        @PathVariable("documentId") String documentId,
        @PathVariable("receiptId") String receiptId,
        @RequestBody BffReceivingServiceCommands.UpdateReceivingItem requestBody
    ) {
        requestBody.setDocumentId(documentId);
        requestBody.setReceiptId(receiptId);
        
        requestBody.setRequesterId(SecurityContextUtil.getRequesterId());
        bffReceivingApplicationService.when(requestBody);
        
    }

    @PostMapping("{documentId}/synchronizeCteReceivingEvents")
    public void synchronizeCteReceivingEvents(
        @PathVariable("documentId") String documentId,
        @RequestBody BffReceivingServiceCommands.SynchronizeCteReceivingEvents requestBody
    ) {
        requestBody.setDocumentId(documentId);
        
        requestBody.setRequesterId(SecurityContextUtil.getRequesterId());
        bffReceivingApplicationService.when(requestBody);
        
    }

}

