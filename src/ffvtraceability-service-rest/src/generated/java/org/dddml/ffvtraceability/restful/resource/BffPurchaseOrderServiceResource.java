// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.restful.resource;

import java.util.*;
import jakarta.servlet.http.*;
import jakarta.validation.*;
import jakarta.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import org.dddml.support.criterion.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import static org.dddml.ffvtraceability.domain.meta.M.*;
import org.dddml.ffvtraceability.domain.service.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.*;

@RequestMapping(path = "BffPurchaseOrders", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class BffPurchaseOrderServiceResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private BffPurchaseOrderApplicationService bffPurchaseOrderApplicationService;

    @GetMapping
    public Page<BffPurchaseOrderDto> getPurchaseOrders(
        @RequestParam(value = "page", defaultValue = "0") Integer page,
        @RequestParam(value = "size", defaultValue = "20") Integer size,
        @RequestParam(value = "orderIdOrItem", required = false) String orderIdOrItem,
        @RequestParam(value = "supplierId", required = false) String supplierId,
        @RequestParam(value = "orderDateFrom", required = false) OffsetDateTime orderDateFrom,
        @RequestParam(value = "orderDateTo", required = false) OffsetDateTime orderDateTo,
        @RequestParam(value = "includesProductDetails", required = false) Boolean includesProductDetails
    ) {
        BffPurchaseOrderServiceCommands.GetPurchaseOrders getPurchaseOrders = new BffPurchaseOrderServiceCommands.GetPurchaseOrders();
        getPurchaseOrders.setPage(page);
        getPurchaseOrders.setSize(size);
        getPurchaseOrders.setOrderIdOrItem(orderIdOrItem);
        getPurchaseOrders.setSupplierId(supplierId);
        getPurchaseOrders.setOrderDateFrom(orderDateFrom);
        getPurchaseOrders.setOrderDateTo(orderDateTo);
        getPurchaseOrders.setIncludesProductDetails(includesProductDetails);
        
        getPurchaseOrders.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffPurchaseOrderApplicationService.when(getPurchaseOrders);
        
    }

    @GetMapping("{orderId}")
    public BffPurchaseOrderDto getPurchaseOrder(
        @PathVariable("orderId") String orderId,
        @RequestParam(value = "includesItemFulfillments", required = false) Boolean includesItemFulfillments,
        @RequestParam(value = "includesProductDetails", required = false) Boolean includesProductDetails
    ) {
        BffPurchaseOrderServiceCommands.GetPurchaseOrder getPurchaseOrder = new BffPurchaseOrderServiceCommands.GetPurchaseOrder();
        getPurchaseOrder.setOrderId(orderId);
        getPurchaseOrder.setIncludesItemFulfillments(includesItemFulfillments);
        getPurchaseOrder.setIncludesProductDetails(includesProductDetails);
        
        getPurchaseOrder.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffPurchaseOrderApplicationService.when(getPurchaseOrder);
        
    }

    @GetMapping("{orderId}/Items/{orderItemSeqId}")
    public BffPurchaseOrderItemDto getPurchaseOrderItem(
        @PathVariable("orderId") String orderId,
        @PathVariable("orderItemSeqId") String orderItemSeqId,
        @RequestParam(value = "includesFulfillments", required = false) Boolean includesFulfillments,
        @RequestParam(value = "includesProductDetails", required = false) Boolean includesProductDetails
    ) {
        BffPurchaseOrderServiceCommands.GetPurchaseOrderItem getPurchaseOrderItem = new BffPurchaseOrderServiceCommands.GetPurchaseOrderItem();
        getPurchaseOrderItem.setOrderId(orderId);
        getPurchaseOrderItem.setOrderItemSeqId(orderItemSeqId);
        getPurchaseOrderItem.setIncludesFulfillments(includesFulfillments);
        getPurchaseOrderItem.setIncludesProductDetails(includesProductDetails);
        
        getPurchaseOrderItem.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffPurchaseOrderApplicationService.when(getPurchaseOrderItem);
        
    }

    @GetMapping("{orderId}/Items/{orderItemSeqId}/OutstandingQuantity")
    public java.math.BigDecimal getPurchaseOrderItemOutstandingQuantity(
        @PathVariable("orderId") String orderId,
        @PathVariable("orderItemSeqId") String orderItemSeqId
    ) {
        BffPurchaseOrderServiceCommands.GetPurchaseOrderItemOutstandingQuantity getPurchaseOrderItemOutstandingQuantity = new BffPurchaseOrderServiceCommands.GetPurchaseOrderItemOutstandingQuantity();
        getPurchaseOrderItemOutstandingQuantity.setOrderId(orderId);
        getPurchaseOrderItemOutstandingQuantity.setOrderItemSeqId(orderItemSeqId);
        
        getPurchaseOrderItemOutstandingQuantity.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffPurchaseOrderApplicationService.when(getPurchaseOrderItemOutstandingQuantity);
        
    }

    @GetMapping("{orderId}/getOutstandingQuantityByProduct")
    public java.math.BigDecimal getPurchaseOrderProductOutstandingQuantityByProductId(
        @PathVariable("orderId") String orderId,
        @RequestParam(value = "productId") String productId
    ) {
        BffPurchaseOrderServiceCommands.GetPurchaseOrderProductOutstandingQuantityByProductId getPurchaseOrderProductOutstandingQuantityByProductId = new BffPurchaseOrderServiceCommands.GetPurchaseOrderProductOutstandingQuantityByProductId();
        getPurchaseOrderProductOutstandingQuantityByProductId.setOrderId(orderId);
        getPurchaseOrderProductOutstandingQuantityByProductId.setProductId(productId);
        
        getPurchaseOrderProductOutstandingQuantityByProductId.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffPurchaseOrderApplicationService.when(getPurchaseOrderProductOutstandingQuantityByProductId);
        
    }

    @PostMapping
    public String createPurchaseOrder(
        @RequestBody BffPurchaseOrderDto purchaseOrder
    ) {
        BffPurchaseOrderServiceCommands.CreatePurchaseOrder createPurchaseOrder = new BffPurchaseOrderServiceCommands.CreatePurchaseOrder();
        createPurchaseOrder.setPurchaseOrder(purchaseOrder);
        
        createPurchaseOrder.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffPurchaseOrderApplicationService.when(createPurchaseOrder);
        
    }

    @PutMapping("{orderId}")
    public void updatePurchaseOrder(
        @PathVariable("orderId") String orderId,
        @RequestBody BffPurchaseOrderDto purchaseOrder
    ) {
        BffPurchaseOrderServiceCommands.UpdatePurchaseOrder updatePurchaseOrder = new BffPurchaseOrderServiceCommands.UpdatePurchaseOrder();
        updatePurchaseOrder.setOrderId(orderId);
        updatePurchaseOrder.setPurchaseOrder(purchaseOrder);
        
        updatePurchaseOrder.setRequesterId(SecurityContextUtil.getRequesterId());
        bffPurchaseOrderApplicationService.when(updatePurchaseOrder);
        
    }

    @PostMapping("{orderId}/recalculateFulfillmentStatus")
    public String recalculateFulfillmentStatus(
        @RequestBody BffPurchaseOrderServiceCommands.RecalculateFulfillmentStatus requestBody,
        @PathVariable("orderId") String orderId
    ) {
        requestBody.setOrderId(orderId);
        
        requestBody.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffPurchaseOrderApplicationService.when(requestBody);
        
    }

    @PostMapping("{orderId}/Items")
    public String createPurchaseOrderItem(
        @PathVariable("orderId") String orderId,
        @RequestBody BffPurchaseOrderItemDto purchaseOrderItem
    ) {
        BffPurchaseOrderServiceCommands.CreatePurchaseOrderItem createPurchaseOrderItem = new BffPurchaseOrderServiceCommands.CreatePurchaseOrderItem();
        createPurchaseOrderItem.setOrderId(orderId);
        createPurchaseOrderItem.setPurchaseOrderItem(purchaseOrderItem);
        
        createPurchaseOrderItem.setRequesterId(SecurityContextUtil.getRequesterId());
        return bffPurchaseOrderApplicationService.when(createPurchaseOrderItem);
        
    }

    @DeleteMapping("{orderId}/Items/{orderItemSeqId}")
    public void deletePurchaseOrderItem(
        @PathVariable("orderId") String orderId,
        @PathVariable("orderItemSeqId") String orderItemSeqId
    ) {
        BffPurchaseOrderServiceCommands.DeletePurchaseOrderItem deletePurchaseOrderItem = new BffPurchaseOrderServiceCommands.DeletePurchaseOrderItem();
        deletePurchaseOrderItem.setOrderId(orderId);
        deletePurchaseOrderItem.setOrderItemSeqId(orderItemSeqId);
        
        deletePurchaseOrderItem.setRequesterId(SecurityContextUtil.getRequesterId());
        bffPurchaseOrderApplicationService.when(deletePurchaseOrderItem);
        
    }

    @PutMapping("{orderId}/Items/{orderItemSeqId}")
    public void updatePurchaseOrderItem(
        @RequestBody BffPurchaseOrderServiceCommands.UpdatePurchaseOrderItem requestBody,
        @PathVariable("orderId") String orderId,
        @PathVariable("orderItemSeqId") String orderItemSeqId
    ) {
        requestBody.setOrderId(orderId);
        requestBody.setOrderItemSeqId(orderItemSeqId);
        
        requestBody.setRequesterId(SecurityContextUtil.getRequesterId());
        bffPurchaseOrderApplicationService.when(requestBody);
        
    }

}

