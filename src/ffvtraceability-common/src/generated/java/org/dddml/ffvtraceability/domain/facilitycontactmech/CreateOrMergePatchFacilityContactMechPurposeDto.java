// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facilitycontactmech;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchFacilityContactMechPurposeDto extends AbstractFacilityContactMechPurposeCommandDto implements FacilityContactMechPurposeCommand.CreateOrMergePatchFacilityContactMechPurpose {

    /**
     * Thru Date
     */
    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate()
    {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate)
    {
        this.thruDate = thruDate;
    }


    private Boolean isPropertyThruDateRemoved;

    public Boolean getIsPropertyThruDateRemoved()
    {
        return this.isPropertyThruDateRemoved;
    }

    public void setIsPropertyThruDateRemoved(Boolean removed)
    {
        this.isPropertyThruDateRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchFacilityContactMechPurpose command)
    {
        ((AbstractFacilityContactMechPurposeCommandDto) this).copyTo(command);
        command.setThruDate(this.getThruDate());
    }

    public FacilityContactMechPurposeCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractFacilityContactMechPurposeCommand.SimpleCreateFacilityContactMechPurpose command = new AbstractFacilityContactMechPurposeCommand.SimpleCreateFacilityContactMechPurpose();
            copyTo((AbstractFacilityContactMechPurposeCommand.AbstractCreateFacilityContactMechPurpose) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractFacilityContactMechPurposeCommand.SimpleMergePatchFacilityContactMechPurpose command = new AbstractFacilityContactMechPurposeCommand.SimpleMergePatchFacilityContactMechPurpose();
            copyTo((AbstractFacilityContactMechPurposeCommand.SimpleMergePatchFacilityContactMechPurpose) command);
            return command;
        } 
        else if (COMMAND_TYPE_REMOVE.equals(getCommandType())) {
            AbstractFacilityContactMechPurposeCommand.SimpleRemoveFacilityContactMechPurpose command = new AbstractFacilityContactMechPurposeCommand.SimpleRemoveFacilityContactMechPurpose();
            ((AbstractFacilityContactMechPurposeCommandDto) this).copyTo(command);
            return command;
        }
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public FacilityContactMechPurposeCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateFacilityContactMechPurposeDto command = new CreateFacilityContactMechPurposeDto();
            copyTo((CreateFacilityContactMechPurpose) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchFacilityContactMechPurposeDto command = new MergePatchFacilityContactMechPurposeDto();
            copyTo((MergePatchFacilityContactMechPurpose) command);
            return command;
        } 
        else if (COMMAND_TYPE_REMOVE.equals(getCommandType())) {
            RemoveFacilityContactMechPurposeDto command = new RemoveFacilityContactMechPurposeDto();
            ((AbstractFacilityContactMechPurposeCommandDto) this).copyTo(command);
            return command;
        }
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateFacilityContactMechPurpose command)
    {
        copyTo((CreateOrMergePatchFacilityContactMechPurpose) command);
    }

    public void copyTo(MergePatchFacilityContactMechPurpose command)
    {
        copyTo((CreateOrMergePatchFacilityContactMechPurpose) command);
        command.setIsPropertyThruDateRemoved(this.getIsPropertyThruDateRemoved());
    }

    public static class CreateFacilityContactMechPurposeDto extends CreateOrMergePatchFacilityContactMechPurposeDto implements FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose
    {
        public CreateFacilityContactMechPurposeDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose toCreateFacilityContactMechPurpose()
        {
            return (FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose) toCommand();
        }

    }

    public static class MergePatchFacilityContactMechPurposeDto extends CreateOrMergePatchFacilityContactMechPurposeDto implements FacilityContactMechPurposeCommand.MergePatchFacilityContactMechPurpose
    {
        public MergePatchFacilityContactMechPurposeDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public FacilityContactMechPurposeCommand.MergePatchFacilityContactMechPurpose toMergePatchFacilityContactMechPurpose()
        {
            return (FacilityContactMechPurposeCommand.MergePatchFacilityContactMechPurpose) toCommand();
        }

    }

}

