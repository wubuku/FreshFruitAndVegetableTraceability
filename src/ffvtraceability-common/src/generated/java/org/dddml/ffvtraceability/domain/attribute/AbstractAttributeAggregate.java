// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attribute;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractAttributeAggregate extends AbstractAggregate implements AttributeAggregate {
    private AttributeState.MutableAttributeState state;

    protected List<Event> changes = new ArrayList<Event>();

    public AbstractAttributeAggregate(AttributeState state) {
        this.state = (AttributeState.MutableAttributeState)state;
    }

    public AttributeState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(AttributeCommand.CreateAttribute c) {
        if (c.getVersion() == null) { c.setVersion(AttributeState.VERSION_NULL); }
        AttributeEvent e = map(c);
        apply(e);
    }

    public void mergePatch(AttributeCommand.MergePatchAttribute c) {
        AttributeEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        AttributeCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof AttributeEvent) {
            AttributeEvent ee = (AttributeEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected AttributeEvent map(AttributeCommand.CreateAttribute c) {
        AttributeEventId stateEventId = new AttributeEventId(c.getAttributeId(), c.getVersion());
        AttributeEvent.AttributeStateCreated e = newAttributeStateCreated(stateEventId);
        e.setAttributeType(c.getAttributeType());
        e.setAttributeName(c.getAttributeName());
        e.setDescription(c.getDescription());
        e.setIsMandatory(c.getIsMandatory());
        e.setAttributeLength(c.getAttributeLength());
        e.setIsEnumeration(c.getIsEnumeration());
        e.setScale(c.getScale());
        e.setTruncatedTo(c.getTruncatedTo());
        e.setActive(c.getActive());
        ((AbstractAttributeEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (AttributeValueCommand.CreateAttributeValue innerCommand : c.getCreateAttributeValueCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            AttributeValueEvent.AttributeValueStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addAttributeValueEvent(innerEvent);
        }

        return e;
    }

    protected AttributeEvent map(AttributeCommand.MergePatchAttribute c) {
        AttributeEventId stateEventId = new AttributeEventId(c.getAttributeId(), c.getVersion());
        AttributeEvent.AttributeStateMergePatched e = newAttributeStateMergePatched(stateEventId);
        e.setAttributeType(c.getAttributeType());
        e.setAttributeName(c.getAttributeName());
        e.setDescription(c.getDescription());
        e.setIsMandatory(c.getIsMandatory());
        e.setAttributeLength(c.getAttributeLength());
        e.setIsEnumeration(c.getIsEnumeration());
        e.setScale(c.getScale());
        e.setTruncatedTo(c.getTruncatedTo());
        e.setActive(c.getActive());
        e.setIsPropertyAttributeTypeRemoved(c.getIsPropertyAttributeTypeRemoved());
        e.setIsPropertyAttributeNameRemoved(c.getIsPropertyAttributeNameRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyIsMandatoryRemoved(c.getIsPropertyIsMandatoryRemoved());
        e.setIsPropertyAttributeLengthRemoved(c.getIsPropertyAttributeLengthRemoved());
        e.setIsPropertyIsEnumerationRemoved(c.getIsPropertyIsEnumerationRemoved());
        e.setIsPropertyScaleRemoved(c.getIsPropertyScaleRemoved());
        e.setIsPropertyTruncatedToRemoved(c.getIsPropertyTruncatedToRemoved());
        e.setIsPropertyActiveRemoved(c.getIsPropertyActiveRemoved());
        ((AbstractAttributeEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (AttributeValueCommand innerCommand : c.getAttributeValueCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            AttributeValueEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addAttributeValueEvent(innerEvent);
        }

        return e;
    }


    protected AttributeValueEvent map(AttributeValueCommand c, AttributeCommand outerCommand, Long version, AttributeState outerState) {
        AttributeValueCommand.CreateAttributeValue create = (c.getCommandType().equals(CommandType.CREATE)) ? ((AttributeValueCommand.CreateAttributeValue)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        AttributeValueCommand.MergePatchAttributeValue merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((AttributeValueCommand.MergePatchAttributeValue)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        throw new UnsupportedOperationException("Unsupported command type: " + c.getCommandType() + " for " + c.getClass().getName());
    }

    protected AttributeValueEvent.AttributeValueStateCreated mapCreate(AttributeValueCommand.CreateAttributeValue c, AttributeCommand outerCommand, Long version, AttributeState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        AttributeValueEventId stateEventId = new AttributeValueEventId(outerState.getAttributeId(), c.getValue(), version);
        AttributeValueEvent.AttributeValueStateCreated e = newAttributeValueStateCreated(stateEventId);
        AttributeValueState s = ((EntityStateCollection.MutableEntityStateCollection<String, AttributeValueState>)outerState.getAttributeValues()).getOrAddDefault(c.getValue());

        e.setAttributeValueName(c.getAttributeValueName());
        e.setDescription(c.getDescription());
        e.setIsDefault(c.getIsDefault());
        e.setActive(c.getActive());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected AttributeValueEvent.AttributeValueStateMergePatched mapMergePatch(AttributeValueCommand.MergePatchAttributeValue c, AttributeCommand outerCommand, Long version, AttributeState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        AttributeValueEventId stateEventId = new AttributeValueEventId(outerState.getAttributeId(), c.getValue(), version);
        AttributeValueEvent.AttributeValueStateMergePatched e = newAttributeValueStateMergePatched(stateEventId);
        AttributeValueState s = ((EntityStateCollection.MutableEntityStateCollection<String, AttributeValueState>)outerState.getAttributeValues()).getOrAddDefault(c.getValue());

        e.setAttributeValueName(c.getAttributeValueName());
        e.setDescription(c.getDescription());
        e.setIsDefault(c.getIsDefault());
        e.setActive(c.getActive());
        e.setIsPropertyAttributeValueNameRemoved(c.getIsPropertyAttributeValueNameRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyIsDefaultRemoved(c.getIsPropertyIsDefaultRemoved());
        e.setIsPropertyActiveRemoved(c.getIsPropertyActiveRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected void throwOnInconsistentCommands(AttributeCommand command, AttributeValueCommand innerCommand) {
        AbstractAttributeCommand properties = command instanceof AbstractAttributeCommand ? (AbstractAttributeCommand) command : null;
        AbstractAttributeValueCommand innerProperties = innerCommand instanceof AbstractAttributeValueCommand ? (AbstractAttributeValueCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerAttributeIdName = "AttributeId";
        String outerAttributeIdValue = properties.getAttributeId();
        String innerAttributeIdName = "AttributeId";
        String innerAttributeIdValue = innerProperties.getAttributeId();
        if (innerAttributeIdValue == null) {
            innerProperties.setAttributeId(outerAttributeIdValue);
        }
        else if (innerAttributeIdValue != outerAttributeIdValue 
            && (innerAttributeIdValue == null || innerAttributeIdValue != null && !innerAttributeIdValue.equals(outerAttributeIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerAttributeIdName, outerAttributeIdValue, innerAttributeIdName, innerAttributeIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////


    ////////////////////////

    protected AttributeEvent.AttributeStateCreated newAttributeStateCreated(Long version, String commandId, String requesterId) {
        AttributeEventId stateEventId = new AttributeEventId(this.state.getAttributeId(), version);
        AttributeEvent.AttributeStateCreated e = newAttributeStateCreated(stateEventId);
        ((AbstractAttributeEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected AttributeEvent.AttributeStateMergePatched newAttributeStateMergePatched(Long version, String commandId, String requesterId) {
        AttributeEventId stateEventId = new AttributeEventId(this.state.getAttributeId(), version);
        AttributeEvent.AttributeStateMergePatched e = newAttributeStateMergePatched(stateEventId);
        ((AbstractAttributeEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected AttributeEvent.AttributeStateCreated newAttributeStateCreated(AttributeEventId stateEventId) {
        return new AbstractAttributeEvent.SimpleAttributeStateCreated(stateEventId);
    }

    protected AttributeEvent.AttributeStateMergePatched newAttributeStateMergePatched(AttributeEventId stateEventId) {
        return new AbstractAttributeEvent.SimpleAttributeStateMergePatched(stateEventId);
    }

    protected AttributeValueEvent.AttributeValueStateCreated newAttributeValueStateCreated(AttributeValueEventId stateEventId) {
        return new AbstractAttributeValueEvent.SimpleAttributeValueStateCreated(stateEventId);
    }

    protected AttributeValueEvent.AttributeValueStateMergePatched newAttributeValueStateMergePatched(AttributeValueEventId stateEventId) {
        return new AbstractAttributeValueEvent.SimpleAttributeValueStateMergePatched(stateEventId);
    }


    public static class SimpleAttributeAggregate extends AbstractAttributeAggregate {
        public SimpleAttributeAggregate(AttributeState state) {
            super(state);
        }

    }

}

