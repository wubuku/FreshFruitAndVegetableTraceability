// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facilitycontactmech;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractFacilityContactMechAggregate extends AbstractAggregate implements FacilityContactMechAggregate {
    private FacilityContactMechState.MutableFacilityContactMechState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractFacilityContactMechAggregate(FacilityContactMechState state) {
        this.state = (FacilityContactMechState.MutableFacilityContactMechState)state;
    }

    public FacilityContactMechState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(FacilityContactMechCommand.CreateFacilityContactMech c) {
        if (c.getVersion() == null) { c.setVersion(FacilityContactMechState.VERSION_NULL); }
        FacilityContactMechEvent e = map(c);
        apply(e);
    }

    public void mergePatch(FacilityContactMechCommand.MergePatchFacilityContactMech c) {
        FacilityContactMechEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        FacilityContactMechCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected FacilityContactMechEvent map(FacilityContactMechCommand.CreateFacilityContactMech c) {
        FacilityContactMechEventId stateEventId = new FacilityContactMechEventId(c.getFacilityContactMechId(), c.getVersion());
        FacilityContactMechEvent.FacilityContactMechStateCreated e = newFacilityContactMechStateCreated(stateEventId);
        e.setThruDate(c.getThruDate());
        e.setExtension(c.getExtension());
        e.setComments(c.getComments());
        ((AbstractFacilityContactMechEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose innerCommand : c.getCreateFacilityContactMechPurposeCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addFacilityContactMechPurposeEvent(innerEvent);
        }

        return e;
    }

    protected FacilityContactMechEvent map(FacilityContactMechCommand.MergePatchFacilityContactMech c) {
        FacilityContactMechEventId stateEventId = new FacilityContactMechEventId(c.getFacilityContactMechId(), c.getVersion());
        FacilityContactMechEvent.FacilityContactMechStateMergePatched e = newFacilityContactMechStateMergePatched(stateEventId);
        e.setThruDate(c.getThruDate());
        e.setExtension(c.getExtension());
        e.setComments(c.getComments());
        e.setIsPropertyThruDateRemoved(c.getIsPropertyThruDateRemoved());
        e.setIsPropertyExtensionRemoved(c.getIsPropertyExtensionRemoved());
        e.setIsPropertyCommentsRemoved(c.getIsPropertyCommentsRemoved());
        ((AbstractFacilityContactMechEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (FacilityContactMechPurposeCommand innerCommand : c.getFacilityContactMechPurposeCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            FacilityContactMechPurposeEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addFacilityContactMechPurposeEvent(innerEvent);
        }

        return e;
    }


    protected FacilityContactMechPurposeEvent map(FacilityContactMechPurposeCommand c, FacilityContactMechCommand outerCommand, Long version, FacilityContactMechState outerState) {
        FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose create = (c.getCommandType().equals(CommandType.CREATE)) ? ((FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        FacilityContactMechPurposeCommand.MergePatchFacilityContactMechPurpose merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((FacilityContactMechPurposeCommand.MergePatchFacilityContactMechPurpose)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        throw new UnsupportedOperationException();
    }

    protected FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated mapCreate(FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose c, FacilityContactMechCommand outerCommand, Long version, FacilityContactMechState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        FacilityContactMechPurposeEventId stateEventId = new FacilityContactMechPurposeEventId(outerState.getFacilityContactMechId(), c.getContactMechPurposeTypeId(), version);
        FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated e = newFacilityContactMechPurposeStateCreated(stateEventId);
        FacilityContactMechPurposeState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, FacilityContactMechPurposeState>)outerState.getFacilityContactMechPurposes()).getOrAddDefault(c.getContactMechPurposeTypeId());

        e.setThruDate(c.getThruDate());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateMergePatched mapMergePatch(FacilityContactMechPurposeCommand.MergePatchFacilityContactMechPurpose c, FacilityContactMechCommand outerCommand, Long version, FacilityContactMechState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        FacilityContactMechPurposeEventId stateEventId = new FacilityContactMechPurposeEventId(outerState.getFacilityContactMechId(), c.getContactMechPurposeTypeId(), version);
        FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateMergePatched e = newFacilityContactMechPurposeStateMergePatched(stateEventId);
        FacilityContactMechPurposeState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, FacilityContactMechPurposeState>)outerState.getFacilityContactMechPurposes()).getOrAddDefault(c.getContactMechPurposeTypeId());

        e.setThruDate(c.getThruDate());
        e.setIsPropertyThruDateRemoved(c.getIsPropertyThruDateRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected void throwOnInconsistentCommands(FacilityContactMechCommand command, FacilityContactMechPurposeCommand innerCommand) {
        AbstractFacilityContactMechCommand properties = command instanceof AbstractFacilityContactMechCommand ? (AbstractFacilityContactMechCommand) command : null;
        AbstractFacilityContactMechPurposeCommand innerProperties = innerCommand instanceof AbstractFacilityContactMechPurposeCommand ? (AbstractFacilityContactMechPurposeCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerFacilityContactMechIdName = "FacilityContactMechId";
        FacilityContactMechId outerFacilityContactMechIdValue = properties.getFacilityContactMechId();
        String innerFacilityContactMechIdName = "FacilityContactMechId";
        FacilityContactMechId innerFacilityContactMechIdValue = innerProperties.getFacilityContactMechId();
        if (innerFacilityContactMechIdValue == null) {
            innerProperties.setFacilityContactMechId(outerFacilityContactMechIdValue);
        }
        else if (innerFacilityContactMechIdValue != outerFacilityContactMechIdValue 
            && (innerFacilityContactMechIdValue == null || innerFacilityContactMechIdValue != null && !innerFacilityContactMechIdValue.equals(outerFacilityContactMechIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerFacilityContactMechIdName, outerFacilityContactMechIdValue, innerFacilityContactMechIdName, innerFacilityContactMechIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////


    ////////////////////////

    protected FacilityContactMechEvent.FacilityContactMechStateCreated newFacilityContactMechStateCreated(Long version, String commandId, String requesterId) {
        FacilityContactMechEventId stateEventId = new FacilityContactMechEventId(this.state.getFacilityContactMechId(), version);
        FacilityContactMechEvent.FacilityContactMechStateCreated e = newFacilityContactMechStateCreated(stateEventId);
        ((AbstractFacilityContactMechEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FacilityContactMechEvent.FacilityContactMechStateMergePatched newFacilityContactMechStateMergePatched(Long version, String commandId, String requesterId) {
        FacilityContactMechEventId stateEventId = new FacilityContactMechEventId(this.state.getFacilityContactMechId(), version);
        FacilityContactMechEvent.FacilityContactMechStateMergePatched e = newFacilityContactMechStateMergePatched(stateEventId);
        ((AbstractFacilityContactMechEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FacilityContactMechEvent.FacilityContactMechStateCreated newFacilityContactMechStateCreated(FacilityContactMechEventId stateEventId) {
        return new AbstractFacilityContactMechEvent.SimpleFacilityContactMechStateCreated(stateEventId);
    }

    protected FacilityContactMechEvent.FacilityContactMechStateMergePatched newFacilityContactMechStateMergePatched(FacilityContactMechEventId stateEventId) {
        return new AbstractFacilityContactMechEvent.SimpleFacilityContactMechStateMergePatched(stateEventId);
    }

    protected FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated newFacilityContactMechPurposeStateCreated(FacilityContactMechPurposeEventId stateEventId) {
        return new AbstractFacilityContactMechPurposeEvent.SimpleFacilityContactMechPurposeStateCreated(stateEventId);
    }

    protected FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateMergePatched newFacilityContactMechPurposeStateMergePatched(FacilityContactMechPurposeEventId stateEventId) {
        return new AbstractFacilityContactMechPurposeEvent.SimpleFacilityContactMechPurposeStateMergePatched(stateEventId);
    }


    public static class SimpleFacilityContactMechAggregate extends AbstractFacilityContactMechAggregate {
        public SimpleFacilityContactMechAggregate(FacilityContactMechState state) {
            super(state);
        }

    }

}

