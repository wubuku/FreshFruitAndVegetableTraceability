// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.document;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface DocumentCommand extends Command {

    String getDocumentId();

    void setDocumentId(String documentId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(DocumentState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((DocumentCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (state.getDeleted() != null && state.getDeleted()) {
            throw DomainError.named("zombie", "Can't do anything to deleted aggregate.");
        }
        if (isCreationCommand((DocumentCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(DocumentCommand c) {
        if ((c instanceof DocumentCommand.CreateDocument) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(DocumentState.VERSION_NULL)))
            return true;
        if ((c instanceof DocumentCommand.MergePatchDocument))
            return false;
        if ((c instanceof DocumentCommand.DeleteDocument))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(DocumentState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchDocument extends DocumentCommand
    {

        String getDocumentTypeId();

        void setDocumentTypeId(String documentTypeId);

        String getComments();

        void setComments(String comments);

        String getDocumentLocation();

        void setDocumentLocation(String documentLocation);

        String getDocumentText();

        void setDocumentText(String documentText);

    }

    interface CreateDocument extends CreateOrMergePatchDocument
    {
    }

    interface MergePatchDocument extends CreateOrMergePatchDocument
    {
        Boolean getIsPropertyDocumentTypeIdRemoved();

        void setIsPropertyDocumentTypeIdRemoved(Boolean removed);

        Boolean getIsPropertyCommentsRemoved();

        void setIsPropertyCommentsRemoved(Boolean removed);

        Boolean getIsPropertyDocumentLocationRemoved();

        void setIsPropertyDocumentLocationRemoved(Boolean removed);

        Boolean getIsPropertyDocumentTextRemoved();

        void setIsPropertyDocumentTextRemoved(Boolean removed);


    }

    interface DeleteDocument extends DocumentCommand
    {

        String getDocumentTypeId();

        void setDocumentTypeId(String documentTypeId);
    }

}

