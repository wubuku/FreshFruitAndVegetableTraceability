// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.article;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchCommentDto extends AbstractCommentCommandDto implements CommentCommand.CreateOrMergePatchComment {

    /**
     * Commenter
     */
    private String commenter;

    public String getCommenter()
    {
        return this.commenter;
    }

    public void setCommenter(String commenter)
    {
        this.commenter = commenter;
    }

    /**
     * Body
     */
    private String body;

    public String getBody()
    {
        return this.body;
    }

    public void setBody(String body)
    {
        this.body = body;
    }

    /**
     * Active
     */
    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }


    private Boolean isPropertyCommenterRemoved;

    public Boolean getIsPropertyCommenterRemoved()
    {
        return this.isPropertyCommenterRemoved;
    }

    public void setIsPropertyCommenterRemoved(Boolean removed)
    {
        this.isPropertyCommenterRemoved = removed;
    }

    private Boolean isPropertyBodyRemoved;

    public Boolean getIsPropertyBodyRemoved()
    {
        return this.isPropertyBodyRemoved;
    }

    public void setIsPropertyBodyRemoved(Boolean removed)
    {
        this.isPropertyBodyRemoved = removed;
    }

    private Boolean isPropertyActiveRemoved;

    public Boolean getIsPropertyActiveRemoved()
    {
        return this.isPropertyActiveRemoved;
    }

    public void setIsPropertyActiveRemoved(Boolean removed)
    {
        this.isPropertyActiveRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchComment command)
    {
        ((AbstractCommentCommandDto) this).copyTo(command);
        command.setCommenter(this.getCommenter());
        command.setBody(this.getBody());
        command.setActive(this.getActive());
    }

    public CommentCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractCommentCommand.SimpleCreateComment command = new AbstractCommentCommand.SimpleCreateComment();
            copyTo((AbstractCommentCommand.AbstractCreateComment) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractCommentCommand.SimpleMergePatchComment command = new AbstractCommentCommand.SimpleMergePatchComment();
            copyTo((AbstractCommentCommand.SimpleMergePatchComment) command);
            return command;
        } 
        else if (COMMAND_TYPE_REMOVE.equals(getCommandType())) {
            AbstractCommentCommand.SimpleRemoveComment command = new AbstractCommentCommand.SimpleRemoveComment();
            ((AbstractCommentCommandDto) this).copyTo(command);
            return command;
        }
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public CommentCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateCommentDto command = new CreateCommentDto();
            copyTo((CreateComment) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchCommentDto command = new MergePatchCommentDto();
            copyTo((MergePatchComment) command);
            return command;
        } 
        else if (COMMAND_TYPE_REMOVE.equals(getCommandType())) {
            RemoveCommentDto command = new RemoveCommentDto();
            ((AbstractCommentCommandDto) this).copyTo(command);
            return command;
        }
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateComment command)
    {
        copyTo((CreateOrMergePatchComment) command);
    }

    public void copyTo(MergePatchComment command)
    {
        copyTo((CreateOrMergePatchComment) command);
        command.setIsPropertyCommenterRemoved(this.getIsPropertyCommenterRemoved());
        command.setIsPropertyBodyRemoved(this.getIsPropertyBodyRemoved());
        command.setIsPropertyActiveRemoved(this.getIsPropertyActiveRemoved());
    }

    public static class CreateCommentDto extends CreateOrMergePatchCommentDto implements CommentCommand.CreateComment
    {
        public CreateCommentDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public CommentCommand.CreateComment toCreateComment()
        {
            return (CommentCommand.CreateComment) toCommand();
        }

    }

    public static class MergePatchCommentDto extends CreateOrMergePatchCommentDto implements CommentCommand.MergePatchComment
    {
        public MergePatchCommentDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public CommentCommand.MergePatchComment toMergePatchComment()
        {
            return (CommentCommand.MergePatchComment) toCommand();
        }

    }

}

