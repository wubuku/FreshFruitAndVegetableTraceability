// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchPartyContactMechPurposeDto extends AbstractPartyContactMechPurposeCommandDto implements PartyContactMechPurposeCommand.CreateOrMergePatchPartyContactMechPurpose {

    /**
     * Thru Date
     */
    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate()
    {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate)
    {
        this.thruDate = thruDate;
    }


    private Boolean isPropertyThruDateRemoved;

    public Boolean getIsPropertyThruDateRemoved()
    {
        return this.isPropertyThruDateRemoved;
    }

    public void setIsPropertyThruDateRemoved(Boolean removed)
    {
        this.isPropertyThruDateRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchPartyContactMechPurpose command)
    {
        ((AbstractPartyContactMechPurposeCommandDto) this).copyTo(command);
        command.setThruDate(this.getThruDate());
    }

    public PartyContactMechPurposeCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractPartyContactMechPurposeCommand.SimpleCreatePartyContactMechPurpose command = new AbstractPartyContactMechPurposeCommand.SimpleCreatePartyContactMechPurpose();
            copyTo((AbstractPartyContactMechPurposeCommand.AbstractCreatePartyContactMechPurpose) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractPartyContactMechPurposeCommand.SimpleMergePatchPartyContactMechPurpose command = new AbstractPartyContactMechPurposeCommand.SimpleMergePatchPartyContactMechPurpose();
            copyTo((AbstractPartyContactMechPurposeCommand.SimpleMergePatchPartyContactMechPurpose) command);
            return command;
        } 
        else if (COMMAND_TYPE_REMOVE.equals(getCommandType())) {
            AbstractPartyContactMechPurposeCommand.SimpleRemovePartyContactMechPurpose command = new AbstractPartyContactMechPurposeCommand.SimpleRemovePartyContactMechPurpose();
            ((AbstractPartyContactMechPurposeCommandDto) this).copyTo(command);
            return command;
        }
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public PartyContactMechPurposeCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreatePartyContactMechPurposeDto command = new CreatePartyContactMechPurposeDto();
            copyTo((CreatePartyContactMechPurpose) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchPartyContactMechPurposeDto command = new MergePatchPartyContactMechPurposeDto();
            copyTo((MergePatchPartyContactMechPurpose) command);
            return command;
        } 
        else if (COMMAND_TYPE_REMOVE.equals(getCommandType())) {
            RemovePartyContactMechPurposeDto command = new RemovePartyContactMechPurposeDto();
            ((AbstractPartyContactMechPurposeCommandDto) this).copyTo(command);
            return command;
        }
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreatePartyContactMechPurpose command)
    {
        copyTo((CreateOrMergePatchPartyContactMechPurpose) command);
    }

    public void copyTo(MergePatchPartyContactMechPurpose command)
    {
        copyTo((CreateOrMergePatchPartyContactMechPurpose) command);
        command.setIsPropertyThruDateRemoved(this.getIsPropertyThruDateRemoved());
    }

    public static class CreatePartyContactMechPurposeDto extends CreateOrMergePatchPartyContactMechPurposeDto implements PartyContactMechPurposeCommand.CreatePartyContactMechPurpose
    {
        public CreatePartyContactMechPurposeDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public PartyContactMechPurposeCommand.CreatePartyContactMechPurpose toCreatePartyContactMechPurpose()
        {
            return (PartyContactMechPurposeCommand.CreatePartyContactMechPurpose) toCommand();
        }

    }

    public static class MergePatchPartyContactMechPurposeDto extends CreateOrMergePatchPartyContactMechPurposeDto implements PartyContactMechPurposeCommand.MergePatchPartyContactMechPurpose
    {
        public MergePatchPartyContactMechPurposeDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public PartyContactMechPurposeCommand.MergePatchPartyContactMechPurpose toMergePatchPartyContactMechPurpose()
        {
            return (PartyContactMechPurposeCommand.MergePatchPartyContactMechPurpose) toCommand();
        }

    }

}

