// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.order;

import java.util.*;
import java.math.*;
import org.dddml.ffvtraceability.domain.partyrole.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.order.OrderRoleEvent.*;

public abstract class AbstractOrderRoleState implements OrderRoleState.SqlOrderRoleState {

    private OrderRoleId orderRoleId = new OrderRoleId();

    public OrderRoleId getOrderRoleId() {
        return this.orderRoleId;
    }

    public void setOrderRoleId(OrderRoleId orderRoleId) {
        this.orderRoleId = orderRoleId;
    }

    private transient OrderHeaderState orderHeaderState;

    public OrderHeaderState getOrderHeaderState() {
        return orderHeaderState;
    }

    public void setOrderHeaderState(OrderHeaderState s) {
        orderHeaderState = s;
    }
    
    private OrderHeaderState protectedOrderHeaderState;

    protected OrderHeaderState getProtectedOrderHeaderState() {
        return protectedOrderHeaderState;
    }

    protected void setProtectedOrderHeaderState(OrderHeaderState protectedOrderHeaderState) {
        this.protectedOrderHeaderState = protectedOrderHeaderState;
    }

    public String getOrderId() {
        return this.getOrderRoleId().getOrderId();
    }
        
    public void setOrderId(String orderId) {
        this.getOrderRoleId().setOrderId(orderId);
    }

    public PartyRoleId getPartyRoleId() {
        return this.getOrderRoleId().getPartyRoleId();
    }
        
    public void setPartyRoleId(PartyRoleId partyRoleId) {
        this.getOrderRoleId().setPartyRoleId(partyRoleId);
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractOrderRoleState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getPartyRoleId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof OrderRoleState) {
            return Objects.equals(this.getPartyRoleId(), ((OrderRoleState)obj).getPartyRoleId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof OrderRoleStateCreated) {
            when((OrderRoleStateCreated) e);
        } else if (e instanceof OrderRoleStateMergePatched) {
            when((OrderRoleStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(OrderRoleStateCreated e) {
        throwOnWrongEvent(e);


        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(OrderRoleState s) {
        if (s == this) {
            return;
        }
    }

    public void when(OrderRoleStateMergePatched e) {
        throwOnWrongEvent(e);


        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(OrderRoleEvent event) {
        String stateEntityIdOrderId = this.getOrderRoleId().getOrderId();
        String eventEntityIdOrderId = ((OrderRoleEvent.SqlOrderRoleEvent)event).getOrderRoleEventId().getOrderId();
        if (!stateEntityIdOrderId.equals(eventEntityIdOrderId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id OrderId %1$s in state but entity id OrderId %2$s in event", stateEntityIdOrderId, eventEntityIdOrderId);
        }

        PartyRoleId stateEntityIdPartyRoleId = this.getOrderRoleId().getPartyRoleId();
        PartyRoleId eventEntityIdPartyRoleId = ((OrderRoleEvent.SqlOrderRoleEvent)event).getOrderRoleEventId().getPartyRoleId();
        if (!stateEntityIdPartyRoleId.equals(eventEntityIdPartyRoleId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id PartyRoleId %1$s in state but entity id PartyRoleId %2$s in event", stateEntityIdPartyRoleId, eventEntityIdPartyRoleId);
        }


        if (getForReapplying()) { return; }
        OrderRoleStateEvent stateEvent = event instanceof OrderRoleStateEvent ? (OrderRoleStateEvent)event : null;
        if (stateEvent == null) { return; }

        Long stateVersion = this.getVersion();
        Long stateEventStateVersion = stateEvent.getVersion();
        //if (stateEventStateVersion == null) {
        stateEventStateVersion = stateVersion == null ? OrderRoleState.VERSION_NULL : stateVersion;
        stateEvent.setVersion(stateEventStateVersion);
        //}
        //if (!(stateVersion == null && stateEventStateVersion.equals(OrderRoleState.VERSION_NULL)) && !stateEventStateVersion.equals(stateVersion))
        //{
        //    throw DomainError.named("concurrencyConflict", "Conflict between stateVersion (%1$s) and stateEventStateVersion (%2$s)", stateVersion, stateEventStateVersion);
        //}

    }


    public static class SimpleOrderRoleState extends AbstractOrderRoleState {

        public SimpleOrderRoleState() {
        }

        public static SimpleOrderRoleState newForReapplying() {
            SimpleOrderRoleState s = new SimpleOrderRoleState();
            s.initializeForReapplying();
            return s;
        }

    }



}

