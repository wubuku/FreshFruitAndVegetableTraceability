// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.physicalinventory;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;


public class PhysicalInventoryStateDto {

    private String physicalInventoryId;

    public String getPhysicalInventoryId()
    {
        return this.physicalInventoryId;
    }

    public void setPhysicalInventoryId(String physicalInventoryId)
    {
        this.physicalInventoryId = physicalInventoryId;
    }

    private OffsetDateTime physicalInventoryDate;

    public OffsetDateTime getPhysicalInventoryDate()
    {
        return this.physicalInventoryDate;
    }

    public void setPhysicalInventoryDate(OffsetDateTime physicalInventoryDate)
    {
        this.physicalInventoryDate = physicalInventoryDate;
    }

    private String partyId;

    public String getPartyId()
    {
        return this.partyId;
    }

    public void setPartyId(String partyId)
    {
        this.partyId = partyId;
    }

    private String generalComments;

    public String getGeneralComments()
    {
        return this.generalComments;
    }

    public void setGeneralComments(String generalComments)
    {
        this.generalComments = generalComments;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt)
    {
        this.updatedAt = updatedAt;
    }

    private InventoryItemVarianceStateDto[] inventoryItemVariances;

    public InventoryItemVarianceStateDto[] getInventoryItemVariances()
    {
        return this.inventoryItemVariances;
    }    

    public void setInventoryItemVariances(InventoryItemVarianceStateDto[] inventoryItemVariances)
    {
        this.inventoryItemVariances = inventoryItemVariances;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{"InventoryItemVariances"});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public PhysicalInventoryStateDto[] toPhysicalInventoryStateDtoArray(Iterable<PhysicalInventoryState> states) {
            return toPhysicalInventoryStateDtoList(states).toArray(new PhysicalInventoryStateDto[0]);
        }

        public List<PhysicalInventoryStateDto> toPhysicalInventoryStateDtoList(Iterable<PhysicalInventoryState> states) {
            ArrayList<PhysicalInventoryStateDto> stateDtos = new ArrayList();
            for (PhysicalInventoryState s : states) {
                PhysicalInventoryStateDto dto = toPhysicalInventoryStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public PhysicalInventoryStateDto toPhysicalInventoryStateDto(PhysicalInventoryState state)
        {
            if(state == null) {
                return null;
            }
            PhysicalInventoryStateDto dto = new PhysicalInventoryStateDto();
            if (returnedFieldsContains("PhysicalInventoryId")) {
                dto.setPhysicalInventoryId(state.getPhysicalInventoryId());
            }
            if (returnedFieldsContains("PhysicalInventoryDate")) {
                dto.setPhysicalInventoryDate(state.getPhysicalInventoryDate());
            }
            if (returnedFieldsContains("PartyId")) {
                dto.setPartyId(state.getPartyId());
            }
            if (returnedFieldsContains("GeneralComments")) {
                dto.setGeneralComments(state.getGeneralComments());
            }
            if (returnedFieldsContains("Version")) {
                dto.setVersion(state.getVersion());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            if (returnedFieldsContains("InventoryItemVariances")) {
                ArrayList<InventoryItemVarianceStateDto> arrayList = new ArrayList();
                if (state.getInventoryItemVariances() != null) {
                    InventoryItemVarianceStateDto.DtoConverter conv = new InventoryItemVarianceStateDto.DtoConverter();
                    String returnFS = CollectionUtils.mapGetValueIgnoringCase(getReturnedFields(), "InventoryItemVariances");
                    if(returnFS != null) { conv.setReturnedFieldsString(returnFS); } else { conv.setAllFieldsReturned(this.getAllFieldsReturned()); }
                    for (InventoryItemVarianceState s : state.getInventoryItemVariances()) {
                        arrayList.add(conv.toInventoryItemVarianceStateDto(s));
                    }
                }
                dto.setInventoryItemVariances(arrayList.toArray(new InventoryItemVarianceStateDto[0]));
            }
            return dto;
        }

    }
}

