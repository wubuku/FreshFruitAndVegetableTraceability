// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.workeffortgoodstandard;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractWorkEffortGoodStandardAggregate extends AbstractAggregate implements WorkEffortGoodStandardAggregate {
    private WorkEffortGoodStandardState.MutableWorkEffortGoodStandardState state;

    protected List<Event> changes = new ArrayList<Event>();

    public AbstractWorkEffortGoodStandardAggregate(WorkEffortGoodStandardState state) {
        this.state = (WorkEffortGoodStandardState.MutableWorkEffortGoodStandardState)state;
    }

    public WorkEffortGoodStandardState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(WorkEffortGoodStandardCommand.CreateWorkEffortGoodStandard c) {
        if (c.getVersion() == null) { c.setVersion(WorkEffortGoodStandardState.VERSION_NULL); }
        WorkEffortGoodStandardEvent e = map(c);
        apply(e);
    }

    public void mergePatch(WorkEffortGoodStandardCommand.MergePatchWorkEffortGoodStandard c) {
        WorkEffortGoodStandardEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        WorkEffortGoodStandardCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof WorkEffortGoodStandardEvent) {
            WorkEffortGoodStandardEvent ee = (WorkEffortGoodStandardEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected WorkEffortGoodStandardEvent map(WorkEffortGoodStandardCommand.CreateWorkEffortGoodStandard c) {
        WorkEffortGoodStandardEventId stateEventId = new WorkEffortGoodStandardEventId(c.getWorkEffortGoodStandardId(), c.getVersion());
        WorkEffortGoodStandardEvent.WorkEffortGoodStandardStateCreated e = newWorkEffortGoodStandardStateCreated(stateEventId);
        e.setThruDate(c.getThruDate());
        e.setStatusId(c.getStatusId());
        e.setEstimatedQuantity(c.getEstimatedQuantity());
        e.setEstimatedCost(c.getEstimatedCost());
        ((AbstractWorkEffortGoodStandardEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortGoodStandardEvent map(WorkEffortGoodStandardCommand.MergePatchWorkEffortGoodStandard c) {
        WorkEffortGoodStandardEventId stateEventId = new WorkEffortGoodStandardEventId(c.getWorkEffortGoodStandardId(), c.getVersion());
        WorkEffortGoodStandardEvent.WorkEffortGoodStandardStateMergePatched e = newWorkEffortGoodStandardStateMergePatched(stateEventId);
        e.setThruDate(c.getThruDate());
        e.setStatusId(c.getStatusId());
        e.setEstimatedQuantity(c.getEstimatedQuantity());
        e.setEstimatedCost(c.getEstimatedCost());
        e.setIsPropertyThruDateRemoved(c.getIsPropertyThruDateRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyEstimatedQuantityRemoved(c.getIsPropertyEstimatedQuantityRemoved());
        e.setIsPropertyEstimatedCostRemoved(c.getIsPropertyEstimatedCostRemoved());
        ((AbstractWorkEffortGoodStandardEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected WorkEffortGoodStandardEvent.WorkEffortGoodStandardStateCreated newWorkEffortGoodStandardStateCreated(Long version, String commandId, String requesterId) {
        WorkEffortGoodStandardEventId stateEventId = new WorkEffortGoodStandardEventId(this.state.getWorkEffortGoodStandardId(), version);
        WorkEffortGoodStandardEvent.WorkEffortGoodStandardStateCreated e = newWorkEffortGoodStandardStateCreated(stateEventId);
        ((AbstractWorkEffortGoodStandardEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortGoodStandardEvent.WorkEffortGoodStandardStateMergePatched newWorkEffortGoodStandardStateMergePatched(Long version, String commandId, String requesterId) {
        WorkEffortGoodStandardEventId stateEventId = new WorkEffortGoodStandardEventId(this.state.getWorkEffortGoodStandardId(), version);
        WorkEffortGoodStandardEvent.WorkEffortGoodStandardStateMergePatched e = newWorkEffortGoodStandardStateMergePatched(stateEventId);
        ((AbstractWorkEffortGoodStandardEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortGoodStandardEvent.WorkEffortGoodStandardStateCreated newWorkEffortGoodStandardStateCreated(WorkEffortGoodStandardEventId stateEventId) {
        return new AbstractWorkEffortGoodStandardEvent.SimpleWorkEffortGoodStandardStateCreated(stateEventId);
    }

    protected WorkEffortGoodStandardEvent.WorkEffortGoodStandardStateMergePatched newWorkEffortGoodStandardStateMergePatched(WorkEffortGoodStandardEventId stateEventId) {
        return new AbstractWorkEffortGoodStandardEvent.SimpleWorkEffortGoodStandardStateMergePatched(stateEventId);
    }


    public static class SimpleWorkEffortGoodStandardAggregate extends AbstractWorkEffortGoodStandardAggregate {
        public SimpleWorkEffortGoodStandardAggregate(WorkEffortGoodStandardState state) {
            super(state);
        }

    }

}

