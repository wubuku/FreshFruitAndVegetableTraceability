// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.article;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.article.CommentEvent.*;

public abstract class AbstractCommentState implements CommentState.SqlCommentState {

    private ArticleCommentId articleCommentId = new ArticleCommentId();

    public ArticleCommentId getArticleCommentId() {
        return this.articleCommentId;
    }

    public void setArticleCommentId(ArticleCommentId articleCommentId) {
        this.articleCommentId = articleCommentId;
    }

    private transient ArticleState articleState;

    public ArticleState getArticleState() {
        return articleState;
    }

    public void setArticleState(ArticleState s) {
        articleState = s;
    }
    
    private ArticleState protectedArticleState;

    protected ArticleState getProtectedArticleState() {
        return protectedArticleState;
    }

    protected void setProtectedArticleState(ArticleState protectedArticleState) {
        this.protectedArticleState = protectedArticleState;
    }

    public Long getArticleId() {
        return this.getArticleCommentId().getArticleId();
    }
        
    public void setArticleId(Long articleId) {
        this.getArticleCommentId().setArticleId(articleId);
    }

    public Long getCommentSeqId() {
        return this.getArticleCommentId().getCommentSeqId();
    }
        
    public void setCommentSeqId(Long commentSeqId) {
        this.getArticleCommentId().setCommentSeqId(commentSeqId);
    }

    private String commenter;

    public String getCommenter() {
        return this.commenter;
    }

    public void setCommenter(String commenter) {
        this.commenter = commenter;
    }

    private String body;

    public String getBody() {
        return this.body;
    }

    public void setBody(String body) {
        this.body = body;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractCommentState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getCommentSeqId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof CommentState) {
            return Objects.equals(this.getCommentSeqId(), ((CommentState)obj).getCommentSeqId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof CommentStateCreated) {
            when((CommentStateCreated) e);
        } else if (e instanceof CommentStateMergePatched) {
            when((CommentStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(CommentStateCreated e) {
        throwOnWrongEvent(e);

        this.setCommenter(e.getCommenter());
        this.setBody(e.getBody());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(CommentState s) {
        if (s == this) {
            return;
        }
        this.setCommenter(s.getCommenter());
        this.setBody(s.getBody());
    }

    public void when(CommentStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getCommenter() == null) {
            if (e.getIsPropertyCommenterRemoved() != null && e.getIsPropertyCommenterRemoved()) {
                this.setCommenter(null);
            }
        } else {
            this.setCommenter(e.getCommenter());
        }
        if (e.getBody() == null) {
            if (e.getIsPropertyBodyRemoved() != null && e.getIsPropertyBodyRemoved()) {
                this.setBody(null);
            }
        } else {
            this.setBody(e.getBody());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(CommentEvent event) {
        Long stateEntityIdArticleId = this.getArticleCommentId().getArticleId();
        Long eventEntityIdArticleId = ((CommentEvent.SqlCommentEvent)event).getCommentEventId().getArticleId();
        if (!stateEntityIdArticleId.equals(eventEntityIdArticleId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id ArticleId %1$s in state but entity id ArticleId %2$s in event", stateEntityIdArticleId, eventEntityIdArticleId);
        }

        Long stateEntityIdCommentSeqId = this.getArticleCommentId().getCommentSeqId();
        Long eventEntityIdCommentSeqId = ((CommentEvent.SqlCommentEvent)event).getCommentEventId().getCommentSeqId();
        if (!stateEntityIdCommentSeqId.equals(eventEntityIdCommentSeqId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id CommentSeqId %1$s in state but entity id CommentSeqId %2$s in event", stateEntityIdCommentSeqId, eventEntityIdCommentSeqId);
        }


        if (getForReapplying()) { return; }
        CommentStateEvent stateEvent = event instanceof CommentStateEvent ? (CommentStateEvent)event : null;
        if (stateEvent == null) { return; }

        Long stateVersion = this.getVersion();
        Long stateEventStateVersion = stateEvent.getVersion();
        //if (stateEventStateVersion == null) {
        stateEventStateVersion = stateVersion == null ? CommentState.VERSION_NULL : stateVersion;
        stateEvent.setVersion(stateEventStateVersion);
        //}
        //if (!(stateVersion == null && stateEventStateVersion.equals(CommentState.VERSION_NULL)) && !stateEventStateVersion.equals(stateVersion))
        //{
        //    throw DomainError.named("concurrencyConflict", "Conflict between stateVersion (%1$s) and stateEventStateVersion (%2$s)", stateVersion, stateEventStateVersion);
        //}

    }


    public static class SimpleCommentState extends AbstractCommentState {

        public SimpleCommentState() {
        }

        public static SimpleCommentState newForReapplying() {
            SimpleCommentState s = new SimpleCommentState();
            s.initializeForReapplying();
            return s;
        }

    }



}

