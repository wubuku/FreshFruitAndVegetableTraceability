// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.productassoc;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;


public class ProductAssocStateDto {

    private ProductAssocId productAssocId;

    public ProductAssocId getProductAssocId()
    {
        return this.productAssocId;
    }

    public void setProductAssocId(ProductAssocId productAssocId)
    {
        this.productAssocId = productAssocId;
    }

    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate()
    {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate)
    {
        this.thruDate = thruDate;
    }

    private Long sequenceNum;

    public Long getSequenceNum()
    {
        return this.sequenceNum;
    }

    public void setSequenceNum(Long sequenceNum)
    {
        this.sequenceNum = sequenceNum;
    }

    private String reason;

    public String getReason()
    {
        return this.reason;
    }

    public void setReason(String reason)
    {
        this.reason = reason;
    }

    private java.math.BigDecimal quantity;

    public java.math.BigDecimal getQuantity()
    {
        return this.quantity;
    }

    public void setQuantity(java.math.BigDecimal quantity)
    {
        this.quantity = quantity;
    }

    private java.math.BigDecimal scrapFactor;

    public java.math.BigDecimal getScrapFactor()
    {
        return this.scrapFactor;
    }

    public void setScrapFactor(java.math.BigDecimal scrapFactor)
    {
        this.scrapFactor = scrapFactor;
    }

    private String instruction;

    public String getInstruction()
    {
        return this.instruction;
    }

    public void setInstruction(String instruction)
    {
        this.instruction = instruction;
    }

    private String routingWorkEffortId;

    public String getRoutingWorkEffortId()
    {
        return this.routingWorkEffortId;
    }

    public void setRoutingWorkEffortId(String routingWorkEffortId)
    {
        this.routingWorkEffortId = routingWorkEffortId;
    }

    private String estimateCalcMethod;

    public String getEstimateCalcMethod()
    {
        return this.estimateCalcMethod;
    }

    public void setEstimateCalcMethod(String estimateCalcMethod)
    {
        this.estimateCalcMethod = estimateCalcMethod;
    }

    private String recurrenceInfoId;

    public String getRecurrenceInfoId()
    {
        return this.recurrenceInfoId;
    }

    public void setRecurrenceInfoId(String recurrenceInfoId)
    {
        this.recurrenceInfoId = recurrenceInfoId;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt)
    {
        this.updatedAt = updatedAt;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public ProductAssocStateDto[] toProductAssocStateDtoArray(Iterable<ProductAssocState> states) {
            return toProductAssocStateDtoList(states).toArray(new ProductAssocStateDto[0]);
        }

        public List<ProductAssocStateDto> toProductAssocStateDtoList(Iterable<ProductAssocState> states) {
            ArrayList<ProductAssocStateDto> stateDtos = new ArrayList();
            for (ProductAssocState s : states) {
                ProductAssocStateDto dto = toProductAssocStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public ProductAssocStateDto toProductAssocStateDto(ProductAssocState state)
        {
            if(state == null) {
                return null;
            }
            ProductAssocStateDto dto = new ProductAssocStateDto();
            if (returnedFieldsContains("ProductAssocId")) {
                dto.setProductAssocId(state.getProductAssocId());
            }
            if (returnedFieldsContains("ThruDate")) {
                dto.setThruDate(state.getThruDate());
            }
            if (returnedFieldsContains("SequenceNum")) {
                dto.setSequenceNum(state.getSequenceNum());
            }
            if (returnedFieldsContains("Reason")) {
                dto.setReason(state.getReason());
            }
            if (returnedFieldsContains("Quantity")) {
                dto.setQuantity(state.getQuantity());
            }
            if (returnedFieldsContains("ScrapFactor")) {
                dto.setScrapFactor(state.getScrapFactor());
            }
            if (returnedFieldsContains("Instruction")) {
                dto.setInstruction(state.getInstruction());
            }
            if (returnedFieldsContains("RoutingWorkEffortId")) {
                dto.setRoutingWorkEffortId(state.getRoutingWorkEffortId());
            }
            if (returnedFieldsContains("EstimateCalcMethod")) {
                dto.setEstimateCalcMethod(state.getEstimateCalcMethod());
            }
            if (returnedFieldsContains("RecurrenceInfoId")) {
                dto.setRecurrenceInfoId(state.getRecurrenceInfoId());
            }
            if (returnedFieldsContains("Version")) {
                dto.setVersion(state.getVersion());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            return dto;
        }

    }
}

