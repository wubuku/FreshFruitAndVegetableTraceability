// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.meta;

import java.util.*;

import org.dddml.ffvtraceability.specialization.*;


public class M {

  // /////////////////////////////////////////
  public static class BoundedContextMetadata {

    public static final String NAME_REQUESTER_ID                = "requesterId";
    public static final String DISCRIMINATOR_COMMAND_TYPE       = "commandType";
    public static final String DISCRIMINATOR_EVENT_TYPE         = "eventType";
    public static final String DISCRIMINATOR_COMMAND_ID         = "commandId";

    public static final String HTTP_SERVICE_ORDERS_QUERY_NAME           = "sort";
    public static final String HTTP_SERVICE_FIRST_RESULT_QUERY_NAME     = "firstResult";
    public static final String HTTP_SERVICE_MAX_RESULTS_QUERY_NAME      = "maxResults";
    public static final String HTTP_SERVICE_RETURNED_FIELDS_QUERY_NAME  = "fields";
    public static final String HTTP_SERVICE_FILTER_QUERY_NAME           = "filter";

    public static final Map<String, String> TYPE_NAME_TO_AGGREGATE_NAME_MAP;

    public static final Map<String, Class<?>> CLASS_MAP;

    static {
        Map<String, String> typeToAggMap = new HashMap<>();

        typeToAggMap.put("ShippingEvent", "ShippingEvent");
        typeToAggMap.put("ReceivingEvent", "ReceivingEvent");
        typeToAggMap.put("TransformationEvent", "TransformationEvent");
        typeToAggMap.put("Gs1ApplicationIdentifier", "Gs1ApplicationIdentifier");
        typeToAggMap.put("AttributeSetInstance", "AttributeSetInstance");
        typeToAggMap.put("StatusItem", "StatusItem");
        typeToAggMap.put("UomType", "UomType");
        typeToAggMap.put("Article", "Article");
        typeToAggMap.put("Comment", "Article");
        typeToAggMap.put("SupplierProduct", "SupplierProduct");
        typeToAggMap.put("Document", "Document");
        typeToAggMap.put("DocumentAssociation", "DocumentAssociation");
        TYPE_NAME_TO_AGGREGATE_NAME_MAP = typeToAggMap;

        Map<String, Class<?>> clsMap = new HashMap<>();
        clsMap.put("bool", Boolean.class);
        clsMap.put("Boolean", Boolean.class);
        clsMap.put("bool?", Boolean.class);
        clsMap.put("DateTime", java.util.Date.class);
        clsMap.put("Date", java.util.Date.class);
        clsMap.put("java.util.Date", java.util.Date.class);
        clsMap.put("DateTime?", java.util.Date.class);
        clsMap.put("decimal", java.math.BigDecimal.class);
        clsMap.put("BigDecimal", java.math.BigDecimal.class);
        clsMap.put("java.math.BigDecimal", java.math.BigDecimal.class);
        clsMap.put("decimal?", java.math.BigDecimal.class);
        clsMap.put("int", Integer.class);
        clsMap.put("Integer", Integer.class);
        clsMap.put("int?", Integer.class);
        clsMap.put("long", Long.class);
        clsMap.put("Long", Long.class);
        clsMap.put("long?", Long.class);
        clsMap.put("string", String.class);
        clsMap.put("String", String.class);
        clsMap.put("U8", Integer.class);
        clsMap.put("U16", Integer.class);
        clsMap.put("U32", Long.class);
        clsMap.put("U64", java.math.BigInteger.class);
        clsMap.put("BigInteger", java.math.BigInteger.class);
        clsMap.put("java.math.BigInteger", java.math.BigInteger.class);
        clsMap.put("U128", java.math.BigInteger.class);
        clsMap.put("U256", java.math.BigInteger.class);
        clsMap.put("u8", Integer.class);
        clsMap.put("u16", Integer.class);
        clsMap.put("u32", Long.class);
        clsMap.put("u64", java.math.BigInteger.class);
        clsMap.put("u128", java.math.BigInteger.class);
        clsMap.put("u256", java.math.BigInteger.class);
        clsMap.put("AsciiString", String.class);
        clsMap.put("OffsetDateTime", java.time.OffsetDateTime.class);
        clsMap.put("java.time.OffsetDateTime", java.time.OffsetDateTime.class);
        clsMap.put("boolean", Boolean.class);
        clsMap.put("integer", Integer.class);
        clsMap.put("blob", java.sql.Blob.class);
        clsMap.put("java.sql.Blob", java.sql.Blob.class);
        clsMap.put("byte-array", byte[].class);
        clsMap.put("byte[]", byte[].class);
        clsMap.put("object", Object.class);
        clsMap.put("Object", Object.class);
        clsMap.put("date-time", java.time.OffsetDateTime.class);
        clsMap.put("date", java.sql.Date.class);
        clsMap.put("java.sql.Date", java.sql.Date.class);
        clsMap.put("time", java.sql.Time.class);
        clsMap.put("java.sql.Time", java.sql.Time.class);
        clsMap.put("currency-amount", java.math.BigDecimal.class);
        clsMap.put("currency-precise", java.math.BigDecimal.class);
        clsMap.put("fixed-point", java.math.BigDecimal.class);
        clsMap.put("floating-point", Double.class);
        clsMap.put("Double", Double.class);
        clsMap.put("numeric", Long.class);
        clsMap.put("id-long", String.class);
        clsMap.put("id-vlong", String.class);
        clsMap.put("indicator", String.class);
        clsMap.put("very-short", String.class);
        clsMap.put("short-varchar", String.class);
        clsMap.put("long-varchar", String.class);
        clsMap.put("very-long", String.class);
        clsMap.put("comment", String.class);
        clsMap.put("description", String.class);
        clsMap.put("name", String.class);
        clsMap.put("credit-card-number", String.class);
        clsMap.put("credit-card-date", String.class);
        clsMap.put("email", String.class);
        clsMap.put("url", String.class);
        clsMap.put("id-long-ne", String.class);
        clsMap.put("id-vlong-ne", String.class);
        clsMap.put("tel-number", String.class);
        clsMap.put("GTIN", String.class);
        clsMap.put("SSCC", String.class);
        clsMap.put("FFRN", String.class);
        clsMap.put("GLN", String.class);
        clsMap.put("GGN", String.class);
        clsMap.put("KdeDate", String.class);
        clsMap.put("KdeBatch", String.class);
        clsMap.put("KdeSerialNumber", String.class);
        clsMap.put("KdeQuantity", java.math.BigDecimal.class);
        clsMap.put("KdeUom", String.class);
        clsMap.put("KdeProductName", String.class);
        clsMap.put("KdePackagingSize", String.class);
        clsMap.put("KdePackagingStyle", String.class);
        clsMap.put("KdeBusinessName", String.class);
        clsMap.put("KdePhoneNumber", String.class);
        clsMap.put("KdePhysicalLocationAddress", String.class);
        clsMap.put("KdeCity", String.class);
        clsMap.put("KdeState", String.class);
        clsMap.put("KdeZipCode", String.class);
        clsMap.put("KdeUrl", String.class);
        clsMap.put("KdeDocumentType", String.class);
        clsMap.put("KdeDocumentNumber", String.class);
        clsMap.put("CteEventId", Long.class);
        clsMap.put("StringList", java.util.List.class);
        clsMap.put("java.util.List<String>", java.util.List.class);
        clsMap.put("java.util.List", java.util.List.class);
        clsMap.put("ObjectList", java.util.List.class);
        clsMap.put("java.util.List<Object>", java.util.List.class);
        clsMap.put("HashHex", String.class);
        clsMap.put("ConsistentEqualityMap", org.dddml.ffvtraceability.domain.ConsistentEqualityMap.class);
        clsMap.put("org.dddml.ffvtraceability.domain.ConsistentEqualityMap", org.dddml.ffvtraceability.domain.ConsistentEqualityMap.class);
        clsMap.put("id", String.class);
        clsMap.put("id-ne", String.class);
        clsMap.put("java.sql.Timestamp", java.sql.Timestamp.class);
        CLASS_MAP = clsMap;
    }

    private BoundedContextMetadata() {
    }
  }


  // /////////////////////////////////////////////////////////  
  public static class ShippingEventMetadata {

    private ShippingEventMetadata() {
    }

    public static final String PROPERTY_NAME_VERSION      = "version";
    public static final String PROPERTY_NAME_ACTIVE       = "active";
    public static final String PROPERTY_NAME_DELETED      = "deleted";
    public static final String PROPERTY_NAME_CREATED_BY   = "createdBy";
    public static final String PROPERTY_NAME_CREATED_AT   = "createdAt";
    public static final String PROPERTY_NAME_UPDATED_BY   = "updatedBy";
    public static final String PROPERTY_NAME_UPDATED_AT   = "updatedAt";

    public static final Class ID_CLASS = Long.class;

    public static final String[] propertyNames = new String[] {
            "eventId",
            "shipDate",
            "version",
            "createdBy",
            "createdAt",
            "updatedBy",
            "updatedAt",
            "active",
            "deleted",
            "traceabilityLotCode.caseGtin",
            "traceabilityLotCode.caseBatch",
            "traceabilityLotCode.palletSscc",
            "traceabilityLotCode.packDate",
            "traceabilityLotCode.harvestDate",
            "traceabilityLotCode.bestIfUsedByDate",
            "traceabilityLotCode.serialNumber",
            "quantityAndUom.quantity",
            "quantityAndUom.uom",
            "productDescription.productName",
            "productDescription.packagingSize",
            "productDescription.packagingStyle",
            "shipToLocation.businessName",
            "shipToLocation.phoneNumber",
            "shipToLocation.physicalLocationAddress",
            "shipToLocation.city",
            "shipToLocation.state",
            "shipToLocation.zipCode",
            "shipFromLocation.businessName",
            "shipFromLocation.phoneNumber",
            "shipFromLocation.physicalLocationAddress",
            "shipFromLocation.city",
            "shipFromLocation.state",
            "shipFromLocation.zipCode",
            "tlcSourceOrTlcSourceReference.tlcSourceBusinessName",
            "tlcSourceOrTlcSourceReference.tlcSourcePhoneNumber",
            "tlcSourceOrTlcSourceReference.tlcSourcePhysicalLocationAddress",
            "tlcSourceOrTlcSourceReference.tlcSourceCity",
            "tlcSourceOrTlcSourceReference.tlcSourceState",
            "tlcSourceOrTlcSourceReference.tlcSourceZipCode",
            "tlcSourceOrTlcSourceReference.tlcSourceReferenceWebSite",
            "tlcSourceOrTlcSourceReference.tlcSourceReferenceFdaFfrn",
            "tlcSourceOrTlcSourceReference.tlcSourceReferenceGln",
            "tlcSourceOrTlcSourceReference.tlcSourceReferenceGgn",
            "referenceDocument.documentType",
            "referenceDocument.documentNumber",
    };

    public static final String[] propertyTypes = new String[] {
            "Long",
            "String",
            "Long",
            "String",
            "OffsetDateTime",
            "String",
            "OffsetDateTime",
            "Boolean",
            "Boolean",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "BigDecimal",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
    };

    public static final Map<String, String> propertyTypeMap;

    public static final Map<String, String> aliasMap;

    static {
        propertyTypeMap = new HashMap<String, String>();
        initPropertyTypeMap();
        aliasMap = new HashMap<String, String>();
        initAliasMap();
    }

    private static void initAliasMap() {
        aliasMap.put("eventId", "eventId");
        aliasMap.put("EventId", "eventId");
        aliasMap.put("shipDate", "shipDate");
        aliasMap.put("ShipDate", "shipDate");
        aliasMap.put("version", "version");
        aliasMap.put("Version", "version");
        aliasMap.put("createdBy", "createdBy");
        aliasMap.put("CreatedBy", "createdBy");
        aliasMap.put("createdAt", "createdAt");
        aliasMap.put("CreatedAt", "createdAt");
        aliasMap.put("updatedBy", "updatedBy");
        aliasMap.put("UpdatedBy", "updatedBy");
        aliasMap.put("updatedAt", "updatedAt");
        aliasMap.put("UpdatedAt", "updatedAt");
        aliasMap.put("active", "active");
        aliasMap.put("Active", "active");
        aliasMap.put("deleted", "deleted");
        aliasMap.put("Deleted", "deleted");
        aliasMap.put("traceabilityLotCode.caseGtin", "traceabilityLotCode.caseGtin");
        aliasMap.put("TraceabilityLotCode.CaseGtin", "traceabilityLotCode.caseGtin");
        aliasMap.put("traceabilityLotCode.caseBatch", "traceabilityLotCode.caseBatch");
        aliasMap.put("TraceabilityLotCode.CaseBatch", "traceabilityLotCode.caseBatch");
        aliasMap.put("traceabilityLotCode.palletSscc", "traceabilityLotCode.palletSscc");
        aliasMap.put("TraceabilityLotCode.PalletSscc", "traceabilityLotCode.palletSscc");
        aliasMap.put("traceabilityLotCode.packDate", "traceabilityLotCode.packDate");
        aliasMap.put("TraceabilityLotCode.PackDate", "traceabilityLotCode.packDate");
        aliasMap.put("traceabilityLotCode.harvestDate", "traceabilityLotCode.harvestDate");
        aliasMap.put("TraceabilityLotCode.HarvestDate", "traceabilityLotCode.harvestDate");
        aliasMap.put("traceabilityLotCode.bestIfUsedByDate", "traceabilityLotCode.bestIfUsedByDate");
        aliasMap.put("TraceabilityLotCode.BestIfUsedByDate", "traceabilityLotCode.bestIfUsedByDate");
        aliasMap.put("traceabilityLotCode.serialNumber", "traceabilityLotCode.serialNumber");
        aliasMap.put("TraceabilityLotCode.SerialNumber", "traceabilityLotCode.serialNumber");
        aliasMap.put("quantityAndUom.quantity", "quantityAndUom.quantity");
        aliasMap.put("QuantityAndUom.Quantity", "quantityAndUom.quantity");
        aliasMap.put("quantityAndUom.uom", "quantityAndUom.uom");
        aliasMap.put("QuantityAndUom.Uom", "quantityAndUom.uom");
        aliasMap.put("productDescription.productName", "productDescription.productName");
        aliasMap.put("ProductDescription.ProductName", "productDescription.productName");
        aliasMap.put("productDescription.packagingSize", "productDescription.packagingSize");
        aliasMap.put("ProductDescription.PackagingSize", "productDescription.packagingSize");
        aliasMap.put("productDescription.packagingStyle", "productDescription.packagingStyle");
        aliasMap.put("ProductDescription.PackagingStyle", "productDescription.packagingStyle");
        aliasMap.put("shipToLocation.businessName", "shipToLocation.businessName");
        aliasMap.put("ShipToLocation.BusinessName", "shipToLocation.businessName");
        aliasMap.put("shipToLocation.phoneNumber", "shipToLocation.phoneNumber");
        aliasMap.put("ShipToLocation.PhoneNumber", "shipToLocation.phoneNumber");
        aliasMap.put("shipToLocation.physicalLocationAddress", "shipToLocation.physicalLocationAddress");
        aliasMap.put("ShipToLocation.PhysicalLocationAddress", "shipToLocation.physicalLocationAddress");
        aliasMap.put("shipToLocation.city", "shipToLocation.city");
        aliasMap.put("ShipToLocation.City", "shipToLocation.city");
        aliasMap.put("shipToLocation.state", "shipToLocation.state");
        aliasMap.put("ShipToLocation.State", "shipToLocation.state");
        aliasMap.put("shipToLocation.zipCode", "shipToLocation.zipCode");
        aliasMap.put("ShipToLocation.ZipCode", "shipToLocation.zipCode");
        aliasMap.put("shipFromLocation.businessName", "shipFromLocation.businessName");
        aliasMap.put("ShipFromLocation.BusinessName", "shipFromLocation.businessName");
        aliasMap.put("shipFromLocation.phoneNumber", "shipFromLocation.phoneNumber");
        aliasMap.put("ShipFromLocation.PhoneNumber", "shipFromLocation.phoneNumber");
        aliasMap.put("shipFromLocation.physicalLocationAddress", "shipFromLocation.physicalLocationAddress");
        aliasMap.put("ShipFromLocation.PhysicalLocationAddress", "shipFromLocation.physicalLocationAddress");
        aliasMap.put("shipFromLocation.city", "shipFromLocation.city");
        aliasMap.put("ShipFromLocation.City", "shipFromLocation.city");
        aliasMap.put("shipFromLocation.state", "shipFromLocation.state");
        aliasMap.put("ShipFromLocation.State", "shipFromLocation.state");
        aliasMap.put("shipFromLocation.zipCode", "shipFromLocation.zipCode");
        aliasMap.put("ShipFromLocation.ZipCode", "shipFromLocation.zipCode");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceBusinessName", "tlcSourceOrTlcSourceReference.tlcSourceBusinessName");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceBusinessName", "tlcSourceOrTlcSourceReference.tlcSourceBusinessName");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSource.businessName", "tlcSourceOrTlcSourceReference.tlcSourceBusinessName");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSource.BusinessName", "tlcSourceOrTlcSourceReference.tlcSourceBusinessName");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourcePhoneNumber", "tlcSourceOrTlcSourceReference.tlcSourcePhoneNumber");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourcePhoneNumber", "tlcSourceOrTlcSourceReference.tlcSourcePhoneNumber");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSource.phoneNumber", "tlcSourceOrTlcSourceReference.tlcSourcePhoneNumber");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSource.PhoneNumber", "tlcSourceOrTlcSourceReference.tlcSourcePhoneNumber");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourcePhysicalLocationAddress", "tlcSourceOrTlcSourceReference.tlcSourcePhysicalLocationAddress");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourcePhysicalLocationAddress", "tlcSourceOrTlcSourceReference.tlcSourcePhysicalLocationAddress");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSource.physicalLocationAddress", "tlcSourceOrTlcSourceReference.tlcSourcePhysicalLocationAddress");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSource.PhysicalLocationAddress", "tlcSourceOrTlcSourceReference.tlcSourcePhysicalLocationAddress");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceCity", "tlcSourceOrTlcSourceReference.tlcSourceCity");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceCity", "tlcSourceOrTlcSourceReference.tlcSourceCity");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSource.city", "tlcSourceOrTlcSourceReference.tlcSourceCity");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSource.City", "tlcSourceOrTlcSourceReference.tlcSourceCity");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceState", "tlcSourceOrTlcSourceReference.tlcSourceState");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceState", "tlcSourceOrTlcSourceReference.tlcSourceState");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSource.state", "tlcSourceOrTlcSourceReference.tlcSourceState");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSource.State", "tlcSourceOrTlcSourceReference.tlcSourceState");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceZipCode", "tlcSourceOrTlcSourceReference.tlcSourceZipCode");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceZipCode", "tlcSourceOrTlcSourceReference.tlcSourceZipCode");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSource.zipCode", "tlcSourceOrTlcSourceReference.tlcSourceZipCode");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSource.ZipCode", "tlcSourceOrTlcSourceReference.tlcSourceZipCode");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReferenceWebSite", "tlcSourceOrTlcSourceReference.tlcSourceReferenceWebSite");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReferenceWebSite", "tlcSourceOrTlcSourceReference.tlcSourceReferenceWebSite");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReference.webSite", "tlcSourceOrTlcSourceReference.tlcSourceReferenceWebSite");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReference.WebSite", "tlcSourceOrTlcSourceReference.tlcSourceReferenceWebSite");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReferenceFdaFfrn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceFdaFfrn");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReferenceFdaFfrn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceFdaFfrn");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReference.fdaFfrn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceFdaFfrn");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReference.FdaFfrn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceFdaFfrn");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReferenceGln", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGln");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReferenceGln", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGln");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReference.gln", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGln");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReference.Gln", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGln");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReferenceGgn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGgn");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReferenceGgn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGgn");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReference.ggn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGgn");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReference.Ggn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGgn");
        aliasMap.put("referenceDocument.documentType", "referenceDocument.documentType");
        aliasMap.put("ReferenceDocument.DocumentType", "referenceDocument.documentType");
        aliasMap.put("referenceDocument.documentNumber", "referenceDocument.documentNumber");
        aliasMap.put("ReferenceDocument.DocumentNumber", "referenceDocument.documentNumber");
    }

    private static void initPropertyTypeMap() {
        for (int i = 0; i < propertyNames.length; i++ ) {
            propertyTypeMap.put(propertyNames[i], propertyTypes[i]);
        }
    }

  }


  // /////////////////////////////////////////////////////////  
  public static class ReceivingEventMetadata {

    private ReceivingEventMetadata() {
    }

    public static final String PROPERTY_NAME_VERSION      = "version";
    public static final String PROPERTY_NAME_ACTIVE       = "active";
    public static final String PROPERTY_NAME_DELETED      = "deleted";
    public static final String PROPERTY_NAME_CREATED_BY   = "createdBy";
    public static final String PROPERTY_NAME_CREATED_AT   = "createdAt";
    public static final String PROPERTY_NAME_UPDATED_BY   = "updatedBy";
    public static final String PROPERTY_NAME_UPDATED_AT   = "updatedAt";

    public static final Class ID_CLASS = Long.class;

    public static final String[] propertyNames = new String[] {
            "eventId",
            "receiveDate",
            "version",
            "createdBy",
            "createdAt",
            "updatedBy",
            "updatedAt",
            "active",
            "deleted",
            "traceabilityLotCode.caseGtin",
            "traceabilityLotCode.caseBatch",
            "traceabilityLotCode.palletSscc",
            "traceabilityLotCode.packDate",
            "traceabilityLotCode.harvestDate",
            "traceabilityLotCode.bestIfUsedByDate",
            "traceabilityLotCode.serialNumber",
            "quantityAndUom.quantity",
            "quantityAndUom.uom",
            "productDescription.productName",
            "productDescription.packagingSize",
            "productDescription.packagingStyle",
            "shipToLocation.businessName",
            "shipToLocation.phoneNumber",
            "shipToLocation.physicalLocationAddress",
            "shipToLocation.city",
            "shipToLocation.state",
            "shipToLocation.zipCode",
            "shipFromLocation.businessName",
            "shipFromLocation.phoneNumber",
            "shipFromLocation.physicalLocationAddress",
            "shipFromLocation.city",
            "shipFromLocation.state",
            "shipFromLocation.zipCode",
            "tlcSourceOrTlcSourceReference.tlcSourceBusinessName",
            "tlcSourceOrTlcSourceReference.tlcSourcePhoneNumber",
            "tlcSourceOrTlcSourceReference.tlcSourcePhysicalLocationAddress",
            "tlcSourceOrTlcSourceReference.tlcSourceCity",
            "tlcSourceOrTlcSourceReference.tlcSourceState",
            "tlcSourceOrTlcSourceReference.tlcSourceZipCode",
            "tlcSourceOrTlcSourceReference.tlcSourceReferenceWebSite",
            "tlcSourceOrTlcSourceReference.tlcSourceReferenceFdaFfrn",
            "tlcSourceOrTlcSourceReference.tlcSourceReferenceGln",
            "tlcSourceOrTlcSourceReference.tlcSourceReferenceGgn",
            "referenceDocument.documentType",
            "referenceDocument.documentNumber",
    };

    public static final String[] propertyTypes = new String[] {
            "Long",
            "String",
            "Long",
            "String",
            "OffsetDateTime",
            "String",
            "OffsetDateTime",
            "Boolean",
            "Boolean",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "BigDecimal",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
    };

    public static final Map<String, String> propertyTypeMap;

    public static final Map<String, String> aliasMap;

    static {
        propertyTypeMap = new HashMap<String, String>();
        initPropertyTypeMap();
        aliasMap = new HashMap<String, String>();
        initAliasMap();
    }

    private static void initAliasMap() {
        aliasMap.put("eventId", "eventId");
        aliasMap.put("EventId", "eventId");
        aliasMap.put("receiveDate", "receiveDate");
        aliasMap.put("ReceiveDate", "receiveDate");
        aliasMap.put("version", "version");
        aliasMap.put("Version", "version");
        aliasMap.put("createdBy", "createdBy");
        aliasMap.put("CreatedBy", "createdBy");
        aliasMap.put("createdAt", "createdAt");
        aliasMap.put("CreatedAt", "createdAt");
        aliasMap.put("updatedBy", "updatedBy");
        aliasMap.put("UpdatedBy", "updatedBy");
        aliasMap.put("updatedAt", "updatedAt");
        aliasMap.put("UpdatedAt", "updatedAt");
        aliasMap.put("active", "active");
        aliasMap.put("Active", "active");
        aliasMap.put("deleted", "deleted");
        aliasMap.put("Deleted", "deleted");
        aliasMap.put("traceabilityLotCode.caseGtin", "traceabilityLotCode.caseGtin");
        aliasMap.put("TraceabilityLotCode.CaseGtin", "traceabilityLotCode.caseGtin");
        aliasMap.put("traceabilityLotCode.caseBatch", "traceabilityLotCode.caseBatch");
        aliasMap.put("TraceabilityLotCode.CaseBatch", "traceabilityLotCode.caseBatch");
        aliasMap.put("traceabilityLotCode.palletSscc", "traceabilityLotCode.palletSscc");
        aliasMap.put("TraceabilityLotCode.PalletSscc", "traceabilityLotCode.palletSscc");
        aliasMap.put("traceabilityLotCode.packDate", "traceabilityLotCode.packDate");
        aliasMap.put("TraceabilityLotCode.PackDate", "traceabilityLotCode.packDate");
        aliasMap.put("traceabilityLotCode.harvestDate", "traceabilityLotCode.harvestDate");
        aliasMap.put("TraceabilityLotCode.HarvestDate", "traceabilityLotCode.harvestDate");
        aliasMap.put("traceabilityLotCode.bestIfUsedByDate", "traceabilityLotCode.bestIfUsedByDate");
        aliasMap.put("TraceabilityLotCode.BestIfUsedByDate", "traceabilityLotCode.bestIfUsedByDate");
        aliasMap.put("traceabilityLotCode.serialNumber", "traceabilityLotCode.serialNumber");
        aliasMap.put("TraceabilityLotCode.SerialNumber", "traceabilityLotCode.serialNumber");
        aliasMap.put("quantityAndUom.quantity", "quantityAndUom.quantity");
        aliasMap.put("QuantityAndUom.Quantity", "quantityAndUom.quantity");
        aliasMap.put("quantityAndUom.uom", "quantityAndUom.uom");
        aliasMap.put("QuantityAndUom.Uom", "quantityAndUom.uom");
        aliasMap.put("productDescription.productName", "productDescription.productName");
        aliasMap.put("ProductDescription.ProductName", "productDescription.productName");
        aliasMap.put("productDescription.packagingSize", "productDescription.packagingSize");
        aliasMap.put("ProductDescription.PackagingSize", "productDescription.packagingSize");
        aliasMap.put("productDescription.packagingStyle", "productDescription.packagingStyle");
        aliasMap.put("ProductDescription.PackagingStyle", "productDescription.packagingStyle");
        aliasMap.put("shipToLocation.businessName", "shipToLocation.businessName");
        aliasMap.put("ShipToLocation.BusinessName", "shipToLocation.businessName");
        aliasMap.put("shipToLocation.phoneNumber", "shipToLocation.phoneNumber");
        aliasMap.put("ShipToLocation.PhoneNumber", "shipToLocation.phoneNumber");
        aliasMap.put("shipToLocation.physicalLocationAddress", "shipToLocation.physicalLocationAddress");
        aliasMap.put("ShipToLocation.PhysicalLocationAddress", "shipToLocation.physicalLocationAddress");
        aliasMap.put("shipToLocation.city", "shipToLocation.city");
        aliasMap.put("ShipToLocation.City", "shipToLocation.city");
        aliasMap.put("shipToLocation.state", "shipToLocation.state");
        aliasMap.put("ShipToLocation.State", "shipToLocation.state");
        aliasMap.put("shipToLocation.zipCode", "shipToLocation.zipCode");
        aliasMap.put("ShipToLocation.ZipCode", "shipToLocation.zipCode");
        aliasMap.put("shipFromLocation.businessName", "shipFromLocation.businessName");
        aliasMap.put("ShipFromLocation.BusinessName", "shipFromLocation.businessName");
        aliasMap.put("shipFromLocation.phoneNumber", "shipFromLocation.phoneNumber");
        aliasMap.put("ShipFromLocation.PhoneNumber", "shipFromLocation.phoneNumber");
        aliasMap.put("shipFromLocation.physicalLocationAddress", "shipFromLocation.physicalLocationAddress");
        aliasMap.put("ShipFromLocation.PhysicalLocationAddress", "shipFromLocation.physicalLocationAddress");
        aliasMap.put("shipFromLocation.city", "shipFromLocation.city");
        aliasMap.put("ShipFromLocation.City", "shipFromLocation.city");
        aliasMap.put("shipFromLocation.state", "shipFromLocation.state");
        aliasMap.put("ShipFromLocation.State", "shipFromLocation.state");
        aliasMap.put("shipFromLocation.zipCode", "shipFromLocation.zipCode");
        aliasMap.put("ShipFromLocation.ZipCode", "shipFromLocation.zipCode");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceBusinessName", "tlcSourceOrTlcSourceReference.tlcSourceBusinessName");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceBusinessName", "tlcSourceOrTlcSourceReference.tlcSourceBusinessName");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSource.businessName", "tlcSourceOrTlcSourceReference.tlcSourceBusinessName");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSource.BusinessName", "tlcSourceOrTlcSourceReference.tlcSourceBusinessName");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourcePhoneNumber", "tlcSourceOrTlcSourceReference.tlcSourcePhoneNumber");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourcePhoneNumber", "tlcSourceOrTlcSourceReference.tlcSourcePhoneNumber");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSource.phoneNumber", "tlcSourceOrTlcSourceReference.tlcSourcePhoneNumber");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSource.PhoneNumber", "tlcSourceOrTlcSourceReference.tlcSourcePhoneNumber");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourcePhysicalLocationAddress", "tlcSourceOrTlcSourceReference.tlcSourcePhysicalLocationAddress");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourcePhysicalLocationAddress", "tlcSourceOrTlcSourceReference.tlcSourcePhysicalLocationAddress");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSource.physicalLocationAddress", "tlcSourceOrTlcSourceReference.tlcSourcePhysicalLocationAddress");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSource.PhysicalLocationAddress", "tlcSourceOrTlcSourceReference.tlcSourcePhysicalLocationAddress");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceCity", "tlcSourceOrTlcSourceReference.tlcSourceCity");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceCity", "tlcSourceOrTlcSourceReference.tlcSourceCity");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSource.city", "tlcSourceOrTlcSourceReference.tlcSourceCity");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSource.City", "tlcSourceOrTlcSourceReference.tlcSourceCity");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceState", "tlcSourceOrTlcSourceReference.tlcSourceState");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceState", "tlcSourceOrTlcSourceReference.tlcSourceState");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSource.state", "tlcSourceOrTlcSourceReference.tlcSourceState");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSource.State", "tlcSourceOrTlcSourceReference.tlcSourceState");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceZipCode", "tlcSourceOrTlcSourceReference.tlcSourceZipCode");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceZipCode", "tlcSourceOrTlcSourceReference.tlcSourceZipCode");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSource.zipCode", "tlcSourceOrTlcSourceReference.tlcSourceZipCode");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSource.ZipCode", "tlcSourceOrTlcSourceReference.tlcSourceZipCode");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReferenceWebSite", "tlcSourceOrTlcSourceReference.tlcSourceReferenceWebSite");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReferenceWebSite", "tlcSourceOrTlcSourceReference.tlcSourceReferenceWebSite");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReference.webSite", "tlcSourceOrTlcSourceReference.tlcSourceReferenceWebSite");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReference.WebSite", "tlcSourceOrTlcSourceReference.tlcSourceReferenceWebSite");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReferenceFdaFfrn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceFdaFfrn");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReferenceFdaFfrn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceFdaFfrn");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReference.fdaFfrn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceFdaFfrn");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReference.FdaFfrn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceFdaFfrn");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReferenceGln", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGln");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReferenceGln", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGln");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReference.gln", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGln");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReference.Gln", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGln");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReferenceGgn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGgn");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReferenceGgn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGgn");
        aliasMap.put("tlcSourceOrTlcSourceReference.tlcSourceReference.ggn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGgn");
        aliasMap.put("TlcSourceOrTlcSourceReference.TlcSourceReference.Ggn", "tlcSourceOrTlcSourceReference.tlcSourceReferenceGgn");
        aliasMap.put("referenceDocument.documentType", "referenceDocument.documentType");
        aliasMap.put("ReferenceDocument.DocumentType", "referenceDocument.documentType");
        aliasMap.put("referenceDocument.documentNumber", "referenceDocument.documentNumber");
        aliasMap.put("ReferenceDocument.DocumentNumber", "referenceDocument.documentNumber");
    }

    private static void initPropertyTypeMap() {
        for (int i = 0; i < propertyNames.length; i++ ) {
            propertyTypeMap.put(propertyNames[i], propertyTypes[i]);
        }
    }

  }


  // /////////////////////////////////////////////////////////  
  public static class TransformationEventMetadata {

    private TransformationEventMetadata() {
    }

    public static final String PROPERTY_NAME_VERSION      = "version";
    public static final String PROPERTY_NAME_ACTIVE       = "active";
    public static final String PROPERTY_NAME_DELETED      = "deleted";
    public static final String PROPERTY_NAME_CREATED_BY   = "createdBy";
    public static final String PROPERTY_NAME_CREATED_AT   = "createdAt";
    public static final String PROPERTY_NAME_UPDATED_BY   = "updatedBy";
    public static final String PROPERTY_NAME_UPDATED_AT   = "updatedAt";

    public static final Class ID_CLASS = Long.class;

    public static final String[] propertyNames = new String[] {
            "eventId",
            "dateTransformed",
            "version",
            "createdBy",
            "createdAt",
            "updatedBy",
            "updatedAt",
            "active",
            "deleted",
            "foodUsedTlc.caseGtin",
            "foodUsedTlc.caseBatch",
            "foodUsedTlc.palletSscc",
            "foodUsedTlc.packDate",
            "foodUsedTlc.harvestDate",
            "foodUsedTlc.bestIfUsedByDate",
            "foodUsedTlc.serialNumber",
            "foodUsedProductDescription.productName",
            "foodUsedProductDescription.packagingSize",
            "foodUsedProductDescription.packagingStyle",
            "foodUsedQuantityAndUom.quantity",
            "foodUsedQuantityAndUom.uom",
            "foodProducedNewTlc.caseGtin",
            "foodProducedNewTlc.caseBatch",
            "foodProducedNewTlc.palletSscc",
            "foodProducedNewTlc.packDate",
            "foodProducedNewTlc.harvestDate",
            "foodProducedNewTlc.bestIfUsedByDate",
            "foodProducedNewTlc.serialNumber",
            "foodProducedProductDescription.productName",
            "foodProducedProductDescription.packagingSize",
            "foodProducedProductDescription.packagingStyle",
            "foodProducedQuantityAndUom.quantity",
            "foodProducedQuantityAndUom.uom",
            "transformationLocation.businessName",
            "transformationLocation.phoneNumber",
            "transformationLocation.physicalLocationAddress",
            "transformationLocation.city",
            "transformationLocation.state",
            "transformationLocation.zipCode",
            "referenceDocument.documentType",
            "referenceDocument.documentNumber",
    };

    public static final String[] propertyTypes = new String[] {
            "Long",
            "String",
            "Long",
            "String",
            "OffsetDateTime",
            "String",
            "OffsetDateTime",
            "Boolean",
            "Boolean",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "BigDecimal",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "BigDecimal",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
    };

    public static final Map<String, String> propertyTypeMap;

    public static final Map<String, String> aliasMap;

    static {
        propertyTypeMap = new HashMap<String, String>();
        initPropertyTypeMap();
        aliasMap = new HashMap<String, String>();
        initAliasMap();
    }

    private static void initAliasMap() {
        aliasMap.put("eventId", "eventId");
        aliasMap.put("EventId", "eventId");
        aliasMap.put("dateTransformed", "dateTransformed");
        aliasMap.put("DateTransformed", "dateTransformed");
        aliasMap.put("version", "version");
        aliasMap.put("Version", "version");
        aliasMap.put("createdBy", "createdBy");
        aliasMap.put("CreatedBy", "createdBy");
        aliasMap.put("createdAt", "createdAt");
        aliasMap.put("CreatedAt", "createdAt");
        aliasMap.put("updatedBy", "updatedBy");
        aliasMap.put("UpdatedBy", "updatedBy");
        aliasMap.put("updatedAt", "updatedAt");
        aliasMap.put("UpdatedAt", "updatedAt");
        aliasMap.put("active", "active");
        aliasMap.put("Active", "active");
        aliasMap.put("deleted", "deleted");
        aliasMap.put("Deleted", "deleted");
        aliasMap.put("foodUsedTlc.caseGtin", "foodUsedTlc.caseGtin");
        aliasMap.put("FoodUsedTlc.CaseGtin", "foodUsedTlc.caseGtin");
        aliasMap.put("foodUsedTlc.caseBatch", "foodUsedTlc.caseBatch");
        aliasMap.put("FoodUsedTlc.CaseBatch", "foodUsedTlc.caseBatch");
        aliasMap.put("foodUsedTlc.palletSscc", "foodUsedTlc.palletSscc");
        aliasMap.put("FoodUsedTlc.PalletSscc", "foodUsedTlc.palletSscc");
        aliasMap.put("foodUsedTlc.packDate", "foodUsedTlc.packDate");
        aliasMap.put("FoodUsedTlc.PackDate", "foodUsedTlc.packDate");
        aliasMap.put("foodUsedTlc.harvestDate", "foodUsedTlc.harvestDate");
        aliasMap.put("FoodUsedTlc.HarvestDate", "foodUsedTlc.harvestDate");
        aliasMap.put("foodUsedTlc.bestIfUsedByDate", "foodUsedTlc.bestIfUsedByDate");
        aliasMap.put("FoodUsedTlc.BestIfUsedByDate", "foodUsedTlc.bestIfUsedByDate");
        aliasMap.put("foodUsedTlc.serialNumber", "foodUsedTlc.serialNumber");
        aliasMap.put("FoodUsedTlc.SerialNumber", "foodUsedTlc.serialNumber");
        aliasMap.put("foodUsedProductDescription.productName", "foodUsedProductDescription.productName");
        aliasMap.put("FoodUsedProductDescription.ProductName", "foodUsedProductDescription.productName");
        aliasMap.put("foodUsedProductDescription.packagingSize", "foodUsedProductDescription.packagingSize");
        aliasMap.put("FoodUsedProductDescription.PackagingSize", "foodUsedProductDescription.packagingSize");
        aliasMap.put("foodUsedProductDescription.packagingStyle", "foodUsedProductDescription.packagingStyle");
        aliasMap.put("FoodUsedProductDescription.PackagingStyle", "foodUsedProductDescription.packagingStyle");
        aliasMap.put("foodUsedQuantityAndUom.quantity", "foodUsedQuantityAndUom.quantity");
        aliasMap.put("FoodUsedQuantityAndUom.Quantity", "foodUsedQuantityAndUom.quantity");
        aliasMap.put("foodUsedQuantityAndUom.uom", "foodUsedQuantityAndUom.uom");
        aliasMap.put("FoodUsedQuantityAndUom.Uom", "foodUsedQuantityAndUom.uom");
        aliasMap.put("foodProducedNewTlc.caseGtin", "foodProducedNewTlc.caseGtin");
        aliasMap.put("FoodProducedNewTlc.CaseGtin", "foodProducedNewTlc.caseGtin");
        aliasMap.put("foodProducedNewTlc.caseBatch", "foodProducedNewTlc.caseBatch");
        aliasMap.put("FoodProducedNewTlc.CaseBatch", "foodProducedNewTlc.caseBatch");
        aliasMap.put("foodProducedNewTlc.palletSscc", "foodProducedNewTlc.palletSscc");
        aliasMap.put("FoodProducedNewTlc.PalletSscc", "foodProducedNewTlc.palletSscc");
        aliasMap.put("foodProducedNewTlc.packDate", "foodProducedNewTlc.packDate");
        aliasMap.put("FoodProducedNewTlc.PackDate", "foodProducedNewTlc.packDate");
        aliasMap.put("foodProducedNewTlc.harvestDate", "foodProducedNewTlc.harvestDate");
        aliasMap.put("FoodProducedNewTlc.HarvestDate", "foodProducedNewTlc.harvestDate");
        aliasMap.put("foodProducedNewTlc.bestIfUsedByDate", "foodProducedNewTlc.bestIfUsedByDate");
        aliasMap.put("FoodProducedNewTlc.BestIfUsedByDate", "foodProducedNewTlc.bestIfUsedByDate");
        aliasMap.put("foodProducedNewTlc.serialNumber", "foodProducedNewTlc.serialNumber");
        aliasMap.put("FoodProducedNewTlc.SerialNumber", "foodProducedNewTlc.serialNumber");
        aliasMap.put("foodProducedProductDescription.productName", "foodProducedProductDescription.productName");
        aliasMap.put("FoodProducedProductDescription.ProductName", "foodProducedProductDescription.productName");
        aliasMap.put("foodProducedProductDescription.packagingSize", "foodProducedProductDescription.packagingSize");
        aliasMap.put("FoodProducedProductDescription.PackagingSize", "foodProducedProductDescription.packagingSize");
        aliasMap.put("foodProducedProductDescription.packagingStyle", "foodProducedProductDescription.packagingStyle");
        aliasMap.put("FoodProducedProductDescription.PackagingStyle", "foodProducedProductDescription.packagingStyle");
        aliasMap.put("foodProducedQuantityAndUom.quantity", "foodProducedQuantityAndUom.quantity");
        aliasMap.put("FoodProducedQuantityAndUom.Quantity", "foodProducedQuantityAndUom.quantity");
        aliasMap.put("foodProducedQuantityAndUom.uom", "foodProducedQuantityAndUom.uom");
        aliasMap.put("FoodProducedQuantityAndUom.Uom", "foodProducedQuantityAndUom.uom");
        aliasMap.put("transformationLocation.businessName", "transformationLocation.businessName");
        aliasMap.put("TransformationLocation.BusinessName", "transformationLocation.businessName");
        aliasMap.put("transformationLocation.phoneNumber", "transformationLocation.phoneNumber");
        aliasMap.put("TransformationLocation.PhoneNumber", "transformationLocation.phoneNumber");
        aliasMap.put("transformationLocation.physicalLocationAddress", "transformationLocation.physicalLocationAddress");
        aliasMap.put("TransformationLocation.PhysicalLocationAddress", "transformationLocation.physicalLocationAddress");
        aliasMap.put("transformationLocation.city", "transformationLocation.city");
        aliasMap.put("TransformationLocation.City", "transformationLocation.city");
        aliasMap.put("transformationLocation.state", "transformationLocation.state");
        aliasMap.put("TransformationLocation.State", "transformationLocation.state");
        aliasMap.put("transformationLocation.zipCode", "transformationLocation.zipCode");
        aliasMap.put("TransformationLocation.ZipCode", "transformationLocation.zipCode");
        aliasMap.put("referenceDocument.documentType", "referenceDocument.documentType");
        aliasMap.put("ReferenceDocument.DocumentType", "referenceDocument.documentType");
        aliasMap.put("referenceDocument.documentNumber", "referenceDocument.documentNumber");
        aliasMap.put("ReferenceDocument.DocumentNumber", "referenceDocument.documentNumber");
    }

    private static void initPropertyTypeMap() {
        for (int i = 0; i < propertyNames.length; i++ ) {
            propertyTypeMap.put(propertyNames[i], propertyTypes[i]);
        }
    }

  }


  // /////////////////////////////////////////////////////////  
  public static class Gs1ApplicationIdentifierMetadata {

    private Gs1ApplicationIdentifierMetadata() {
    }

    public static final String PROPERTY_NAME_VERSION      = "version";
    public static final String PROPERTY_NAME_ACTIVE       = "active";
    public static final String PROPERTY_NAME_DELETED      = "deleted";
    public static final String PROPERTY_NAME_CREATED_BY   = "createdBy";
    public static final String PROPERTY_NAME_CREATED_AT   = "createdAt";
    public static final String PROPERTY_NAME_UPDATED_BY   = "updatedBy";
    public static final String PROPERTY_NAME_UPDATED_AT   = "updatedAt";

    public static final Class ID_CLASS = String.class;

    public static final String[] propertyNames = new String[] {
            "applicationIdentifier",
            "formatString",
            "label",
            "description",
            "fnc1required",
            "regex",
            "note",
            "title",
            "separatorRequired",
            "gs1DigitalLinkPrimaryKey",
            "gs1DigitalLinkQualifiers",
            "excludes",
            "requires",
            "start",
            "end",
            "version",
            "createdBy",
            "createdAt",
            "updatedBy",
            "updatedAt",
            "active",
            "deleted",
    };

    public static final String[] propertyTypes = new String[] {
            "String",
            "String",
            "String",
            "String",
            "Boolean",
            "String",
            "String",
            "String",
            "Boolean",
            "Boolean",
            "java.util.List<Object>",
            "java.util.List<Object>",
            "java.util.List<Object>",
            "String",
            "String",
            "Long",
            "String",
            "OffsetDateTime",
            "String",
            "OffsetDateTime",
            "Boolean",
            "Boolean",
    };

    public static final Map<String, String> propertyTypeMap;

    public static final Map<String, String> aliasMap;

    static {
        propertyTypeMap = new HashMap<String, String>();
        initPropertyTypeMap();
        aliasMap = new HashMap<String, String>();
        initAliasMap();
    }

    private static void initAliasMap() {
        aliasMap.put("applicationIdentifier", "applicationIdentifier");
        aliasMap.put("ApplicationIdentifier", "applicationIdentifier");
        aliasMap.put("formatString", "formatString");
        aliasMap.put("FormatString", "formatString");
        aliasMap.put("label", "label");
        aliasMap.put("Label", "label");
        aliasMap.put("description", "description");
        aliasMap.put("Description", "description");
        aliasMap.put("fnc1required", "fnc1required");
        aliasMap.put("Fnc1required", "fnc1required");
        aliasMap.put("regex", "regex");
        aliasMap.put("Regex", "regex");
        aliasMap.put("note", "note");
        aliasMap.put("Note", "note");
        aliasMap.put("title", "title");
        aliasMap.put("Title", "title");
        aliasMap.put("separatorRequired", "separatorRequired");
        aliasMap.put("SeparatorRequired", "separatorRequired");
        aliasMap.put("gs1DigitalLinkPrimaryKey", "gs1DigitalLinkPrimaryKey");
        aliasMap.put("Gs1DigitalLinkPrimaryKey", "gs1DigitalLinkPrimaryKey");
        aliasMap.put("gs1DigitalLinkQualifiers", "gs1DigitalLinkQualifiers");
        aliasMap.put("Gs1DigitalLinkQualifiers", "gs1DigitalLinkQualifiers");
        aliasMap.put("excludes", "excludes");
        aliasMap.put("Excludes", "excludes");
        aliasMap.put("requires", "requires");
        aliasMap.put("Requires", "requires");
        aliasMap.put("start", "start");
        aliasMap.put("Start", "start");
        aliasMap.put("end", "end");
        aliasMap.put("End", "end");
        aliasMap.put("version", "version");
        aliasMap.put("Version", "version");
        aliasMap.put("createdBy", "createdBy");
        aliasMap.put("CreatedBy", "createdBy");
        aliasMap.put("createdAt", "createdAt");
        aliasMap.put("CreatedAt", "createdAt");
        aliasMap.put("updatedBy", "updatedBy");
        aliasMap.put("UpdatedBy", "updatedBy");
        aliasMap.put("updatedAt", "updatedAt");
        aliasMap.put("UpdatedAt", "updatedAt");
        aliasMap.put("active", "active");
        aliasMap.put("Active", "active");
        aliasMap.put("deleted", "deleted");
        aliasMap.put("Deleted", "deleted");
    }

    private static void initPropertyTypeMap() {
        for (int i = 0; i < propertyNames.length; i++ ) {
            propertyTypeMap.put(propertyNames[i], propertyTypes[i]);
        }
    }

  }


  // /////////////////////////////////////////////////////////  
  public static class AttributeSetInstanceMetadata {

    private AttributeSetInstanceMetadata() {
    }

    public static final String PROPERTY_NAME_VERSION      = "version";
    public static final String PROPERTY_NAME_ACTIVE       = "active";
    public static final String PROPERTY_NAME_DELETED      = "deleted";
    public static final String PROPERTY_NAME_CREATED_BY   = "createdBy";
    public static final String PROPERTY_NAME_CREATED_AT   = "createdAt";
    public static final String PROPERTY_NAME_UPDATED_BY   = "updatedBy";
    public static final String PROPERTY_NAME_UPDATED_AT   = "updatedAt";

    public static final Class ID_CLASS = String.class;

    public static final String[] propertyNames = new String[] {
            "attributeSetInstanceId",
            "properties",
            "version",
            "createdBy",
            "createdAt",
            "updatedBy",
            "updatedAt",
            "active",
            "deleted",
    };

    public static final String[] propertyTypes = new String[] {
            "String",
            "org.dddml.ffvtraceability.domain.ConsistentEqualityMap",
            "Long",
            "String",
            "OffsetDateTime",
            "String",
            "OffsetDateTime",
            "Boolean",
            "Boolean",
    };

    public static final Map<String, String> propertyTypeMap;

    public static final Map<String, String> aliasMap;

    static {
        propertyTypeMap = new HashMap<String, String>();
        initPropertyTypeMap();
        aliasMap = new HashMap<String, String>();
        initAliasMap();
    }

    private static void initAliasMap() {
        aliasMap.put("attributeSetInstanceId", "attributeSetInstanceId");
        aliasMap.put("AttributeSetInstanceId", "attributeSetInstanceId");
        aliasMap.put("properties", "properties");
        aliasMap.put("Properties", "properties");
        aliasMap.put("version", "version");
        aliasMap.put("Version", "version");
        aliasMap.put("createdBy", "createdBy");
        aliasMap.put("CreatedBy", "createdBy");
        aliasMap.put("createdAt", "createdAt");
        aliasMap.put("CreatedAt", "createdAt");
        aliasMap.put("updatedBy", "updatedBy");
        aliasMap.put("UpdatedBy", "updatedBy");
        aliasMap.put("updatedAt", "updatedAt");
        aliasMap.put("UpdatedAt", "updatedAt");
        aliasMap.put("active", "active");
        aliasMap.put("Active", "active");
        aliasMap.put("deleted", "deleted");
        aliasMap.put("Deleted", "deleted");
    }

    private static void initPropertyTypeMap() {
        for (int i = 0; i < propertyNames.length; i++ ) {
            propertyTypeMap.put(propertyNames[i], propertyTypes[i]);
        }
    }

  }


  // /////////////////////////////////////////////////////////  
  public static class StatusItemMetadata {

    private StatusItemMetadata() {
    }

    public static final String PROPERTY_NAME_VERSION      = "version";
    public static final String PROPERTY_NAME_ACTIVE       = "active";
    public static final String PROPERTY_NAME_DELETED      = "deleted";
    public static final String PROPERTY_NAME_CREATED_BY   = "createdBy";
    public static final String PROPERTY_NAME_CREATED_AT   = "createdAt";
    public static final String PROPERTY_NAME_UPDATED_BY   = "updatedBy";
    public static final String PROPERTY_NAME_UPDATED_AT   = "updatedAt";

    public static final Class ID_CLASS = String.class;

    public static final String[] propertyNames = new String[] {
            "statusId",
            "statusTypeId",
            "statusCode",
            "sequenceId",
            "description",
            "version",
            "createdBy",
            "createdAt",
            "updatedBy",
            "updatedAt",
            "active",
            "deleted",
    };

    public static final String[] propertyTypes = new String[] {
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "OffsetDateTime",
            "String",
            "OffsetDateTime",
            "Boolean",
            "Boolean",
    };

    public static final Map<String, String> propertyTypeMap;

    public static final Map<String, String> aliasMap;

    static {
        propertyTypeMap = new HashMap<String, String>();
        initPropertyTypeMap();
        aliasMap = new HashMap<String, String>();
        initAliasMap();
    }

    private static void initAliasMap() {
        aliasMap.put("statusId", "statusId");
        aliasMap.put("StatusId", "statusId");
        aliasMap.put("statusTypeId", "statusTypeId");
        aliasMap.put("StatusTypeId", "statusTypeId");
        aliasMap.put("statusCode", "statusCode");
        aliasMap.put("StatusCode", "statusCode");
        aliasMap.put("sequenceId", "sequenceId");
        aliasMap.put("SequenceId", "sequenceId");
        aliasMap.put("description", "description");
        aliasMap.put("Description", "description");
        aliasMap.put("version", "version");
        aliasMap.put("Version", "version");
        aliasMap.put("createdBy", "createdBy");
        aliasMap.put("CreatedBy", "createdBy");
        aliasMap.put("createdAt", "createdAt");
        aliasMap.put("CreatedAt", "createdAt");
        aliasMap.put("updatedBy", "updatedBy");
        aliasMap.put("UpdatedBy", "updatedBy");
        aliasMap.put("updatedAt", "updatedAt");
        aliasMap.put("UpdatedAt", "updatedAt");
        aliasMap.put("active", "active");
        aliasMap.put("Active", "active");
        aliasMap.put("deleted", "deleted");
        aliasMap.put("Deleted", "deleted");
    }

    private static void initPropertyTypeMap() {
        for (int i = 0; i < propertyNames.length; i++ ) {
            propertyTypeMap.put(propertyNames[i], propertyTypes[i]);
        }
    }

  }


  // /////////////////////////////////////////////////////////  
  public static class UomTypeMetadata {

    private UomTypeMetadata() {
    }

    public static final String PROPERTY_NAME_VERSION      = "version";
    public static final String PROPERTY_NAME_ACTIVE       = "active";
    public static final String PROPERTY_NAME_DELETED      = "deleted";
    public static final String PROPERTY_NAME_CREATED_BY   = "createdBy";
    public static final String PROPERTY_NAME_CREATED_AT   = "createdAt";
    public static final String PROPERTY_NAME_UPDATED_BY   = "updatedBy";
    public static final String PROPERTY_NAME_UPDATED_AT   = "updatedAt";

    public static final Class ID_CLASS = String.class;

    public static final String[] propertyNames = new String[] {
            "uomTypeId",
            "parentTypeId",
            "hasTable",
            "description",
            "version",
            "createdBy",
            "createdAt",
            "updatedBy",
            "updatedAt",
            "active",
            "deleted",
    };

    public static final String[] propertyTypes = new String[] {
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "OffsetDateTime",
            "String",
            "OffsetDateTime",
            "Boolean",
            "Boolean",
    };

    public static final Map<String, String> propertyTypeMap;

    public static final Map<String, String> aliasMap;

    static {
        propertyTypeMap = new HashMap<String, String>();
        initPropertyTypeMap();
        aliasMap = new HashMap<String, String>();
        initAliasMap();
    }

    private static void initAliasMap() {
        aliasMap.put("uomTypeId", "uomTypeId");
        aliasMap.put("UomTypeId", "uomTypeId");
        aliasMap.put("parentTypeId", "parentTypeId");
        aliasMap.put("ParentTypeId", "parentTypeId");
        aliasMap.put("hasTable", "hasTable");
        aliasMap.put("HasTable", "hasTable");
        aliasMap.put("description", "description");
        aliasMap.put("Description", "description");
        aliasMap.put("version", "version");
        aliasMap.put("Version", "version");
        aliasMap.put("createdBy", "createdBy");
        aliasMap.put("CreatedBy", "createdBy");
        aliasMap.put("createdAt", "createdAt");
        aliasMap.put("CreatedAt", "createdAt");
        aliasMap.put("updatedBy", "updatedBy");
        aliasMap.put("UpdatedBy", "updatedBy");
        aliasMap.put("updatedAt", "updatedAt");
        aliasMap.put("UpdatedAt", "updatedAt");
        aliasMap.put("active", "active");
        aliasMap.put("Active", "active");
        aliasMap.put("deleted", "deleted");
        aliasMap.put("Deleted", "deleted");
    }

    private static void initPropertyTypeMap() {
        for (int i = 0; i < propertyNames.length; i++ ) {
            propertyTypeMap.put(propertyNames[i], propertyTypes[i]);
        }
    }

  }


  // /////////////////////////////////////////////////////////  
  public static class ArticleMetadata {

    private ArticleMetadata() {
    }

    public static final String PROPERTY_NAME_VERSION      = "version";
    public static final String PROPERTY_NAME_ACTIVE       = "active";
    public static final String PROPERTY_NAME_DELETED      = "deleted";
    public static final String PROPERTY_NAME_CREATED_BY   = "createdBy";
    public static final String PROPERTY_NAME_CREATED_AT   = "createdAt";
    public static final String PROPERTY_NAME_UPDATED_BY   = "updatedBy";
    public static final String PROPERTY_NAME_UPDATED_AT   = "updatedAt";

    public static final Class ID_CLASS = Long.class;

    public static final String[] propertyNames = new String[] {
            "articleId",
            "title",
            "body",
            "author",
            "version",
            "createdBy",
            "createdAt",
            "updatedBy",
            "updatedAt",
            "active",
            "deleted",
    };

    public static final String[] propertyTypes = new String[] {
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "OffsetDateTime",
            "String",
            "OffsetDateTime",
            "Boolean",
            "Boolean",
    };

    public static final Map<String, String> propertyTypeMap;

    public static final Map<String, String> aliasMap;

    static {
        propertyTypeMap = new HashMap<String, String>();
        initPropertyTypeMap();
        aliasMap = new HashMap<String, String>();
        initAliasMap();
    }

    private static void initAliasMap() {
        aliasMap.put("articleId", "articleId");
        aliasMap.put("ArticleId", "articleId");
        aliasMap.put("title", "title");
        aliasMap.put("Title", "title");
        aliasMap.put("body", "body");
        aliasMap.put("Body", "body");
        aliasMap.put("author", "author");
        aliasMap.put("Author", "author");
        aliasMap.put("version", "version");
        aliasMap.put("Version", "version");
        aliasMap.put("createdBy", "createdBy");
        aliasMap.put("CreatedBy", "createdBy");
        aliasMap.put("createdAt", "createdAt");
        aliasMap.put("CreatedAt", "createdAt");
        aliasMap.put("updatedBy", "updatedBy");
        aliasMap.put("UpdatedBy", "updatedBy");
        aliasMap.put("updatedAt", "updatedAt");
        aliasMap.put("UpdatedAt", "updatedAt");
        aliasMap.put("active", "active");
        aliasMap.put("Active", "active");
        aliasMap.put("deleted", "deleted");
        aliasMap.put("Deleted", "deleted");
    }

    private static void initPropertyTypeMap() {
        for (int i = 0; i < propertyNames.length; i++ ) {
            propertyTypeMap.put(propertyNames[i], propertyTypes[i]);
        }
    }

  }


  // /////////////////////////////////////////////////////////  
  public static class CommentMetadata {

    private CommentMetadata() {
    }

    public static final String PROPERTY_NAME_VERSION      = "version";
    public static final String PROPERTY_NAME_ACTIVE       = "active";
    public static final String PROPERTY_NAME_DELETED      = "deleted";
    public static final String PROPERTY_NAME_CREATED_BY   = "createdBy";
    public static final String PROPERTY_NAME_CREATED_AT   = "createdAt";
    public static final String PROPERTY_NAME_UPDATED_BY   = "updatedBy";
    public static final String PROPERTY_NAME_UPDATED_AT   = "updatedAt";

    public static final String[] propertyNames = new String[] {
            "commentSeqId",
            "commenter",
            "body",
            "version",
            "createdBy",
            "createdAt",
            "updatedBy",
            "updatedAt",
            "active",
            "deleted",
            "articleId",
            "articleCommentId.articleId",
            "articleCommentId.commentSeqId",
    };

    public static final String[] propertyTypes = new String[] {
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "OffsetDateTime",
            "String",
            "OffsetDateTime",
            "Boolean",
            "Boolean",
            "Long",
            "Long",
            "Long",
    };

    public static final Map<String, String> propertyTypeMap;

    public static final Map<String, String> aliasMap;

    static {
        propertyTypeMap = new HashMap<String, String>();
        initPropertyTypeMap();
        aliasMap = new HashMap<String, String>();
        initAliasMap();
    }

    private static void initAliasMap() {
        aliasMap.put("commentSeqId", "articleCommentId.commentSeqId");
        aliasMap.put("CommentSeqId", "articleCommentId.commentSeqId");
        aliasMap.put("commenter", "commenter");
        aliasMap.put("Commenter", "commenter");
        aliasMap.put("body", "body");
        aliasMap.put("Body", "body");
        aliasMap.put("version", "version");
        aliasMap.put("Version", "version");
        aliasMap.put("createdBy", "createdBy");
        aliasMap.put("CreatedBy", "createdBy");
        aliasMap.put("createdAt", "createdAt");
        aliasMap.put("CreatedAt", "createdAt");
        aliasMap.put("updatedBy", "updatedBy");
        aliasMap.put("UpdatedBy", "updatedBy");
        aliasMap.put("updatedAt", "updatedAt");
        aliasMap.put("UpdatedAt", "updatedAt");
        aliasMap.put("active", "active");
        aliasMap.put("Active", "active");
        aliasMap.put("deleted", "deleted");
        aliasMap.put("Deleted", "deleted");
        aliasMap.put("articleId", "articleCommentId.articleId");
        aliasMap.put("ArticleId", "articleCommentId.articleId");
        aliasMap.put("articleCommentId.articleId", "articleCommentId.articleId");
        aliasMap.put("ArticleCommentId.ArticleId", "articleCommentId.articleId");
        aliasMap.put("articleCommentId.commentSeqId", "articleCommentId.commentSeqId");
        aliasMap.put("ArticleCommentId.CommentSeqId", "articleCommentId.commentSeqId");
    }

    private static void initPropertyTypeMap() {
        for (int i = 0; i < propertyNames.length; i++ ) {
            propertyTypeMap.put(propertyNames[i], propertyTypes[i]);
        }
    }

  }


  // /////////////////////////////////////////////////////////  
  public static class SupplierProductMetadata {

    private SupplierProductMetadata() {
    }

    public static final String PROPERTY_NAME_VERSION      = "version";
    public static final String PROPERTY_NAME_ACTIVE       = "active";
    public static final String PROPERTY_NAME_DELETED      = "deleted";
    public static final String PROPERTY_NAME_CREATED_BY   = "createdBy";
    public static final String PROPERTY_NAME_CREATED_AT   = "createdAt";
    public static final String PROPERTY_NAME_UPDATED_BY   = "updatedBy";
    public static final String PROPERTY_NAME_UPDATED_AT   = "updatedAt";

    public static final String URL_ID_FIELD_SEPARATOR = ",";

    public static final TextFormatter<org.dddml.ffvtraceability.domain.supplierproduct.SupplierProductAssocId> URL_ID_TEXT_FORMATTER =
                    new AbstractValueObjectTextFormatter<org.dddml.ffvtraceability.domain.supplierproduct.SupplierProductAssocId>(org.dddml.ffvtraceability.domain.supplierproduct.SupplierProductAssocId.class, URL_ID_FIELD_SEPARATOR) {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    };

    public static final Class ID_CLASS = org.dddml.ffvtraceability.domain.supplierproduct.SupplierProductAssocId.class;

    public static final String[] propertyNames = new String[] {
            "availableThruDate",
            "supplierPrefOrderId",
            "supplierRatingTypeId",
            "standardLeadTimeDays",
            "orderQtyIncrements",
            "unitsIncluded",
            "quantityUomId",
            "agreementId",
            "agreementItemSeqId",
            "lastPrice",
            "shippingPrice",
            "supplierProductId",
            "supplierProductName",
            "canDropShip",
            "comments",
            "taxInPrice",
            "taxAmount",
            "taxPercentage",
            "limitQuantityPerCustomer",
            "limitQuantityPerOrder",
            "productPriceTypeId",
            "shipmentMethodTypeId",
            "version",
            "createdBy",
            "createdAt",
            "updatedBy",
            "updatedAt",
            "active",
            "deleted",
            "supplierProductTenantizedId.tenantId",
            "supplierProductTenantizedId.supplierProductAssocIdProductId",
            "supplierProductTenantizedId.supplierProductAssocIdPartyId",
            "supplierProductTenantizedId.supplierProductAssocIdCurrencyUomId",
            "supplierProductTenantizedId.supplierProductAssocIdMinimumOrderQuantity",
            "supplierProductTenantizedId.supplierProductAssocIdAvailableFromDate",
    };

    public static final String[] propertyTypes = new String[] {
            "OffsetDateTime",
            "String",
            "String",
            "java.math.BigDecimal",
            "java.math.BigDecimal",
            "java.math.BigDecimal",
            "String",
            "String",
            "String",
            "java.math.BigDecimal",
            "java.math.BigDecimal",
            "String",
            "String",
            "String",
            "String",
            "String",
            "java.math.BigDecimal",
            "java.math.BigDecimal",
            "java.math.BigDecimal",
            "java.math.BigDecimal",
            "String",
            "String",
            "Long",
            "String",
            "OffsetDateTime",
            "String",
            "OffsetDateTime",
            "Boolean",
            "Boolean",
            "String",
            "String",
            "String",
            "String",
            "java.math.BigDecimal",
            "OffsetDateTime",
    };

    public static final Map<String, String> propertyTypeMap;

    public static final Map<String, String> aliasMap;

    static {
        propertyTypeMap = new HashMap<String, String>();
        initPropertyTypeMap();
        aliasMap = new HashMap<String, String>();
        initAliasMap();
    }

    private static void initAliasMap() {
        aliasMap.put("availableThruDate", "availableThruDate");
        aliasMap.put("AvailableThruDate", "availableThruDate");
        aliasMap.put("supplierPrefOrderId", "supplierPrefOrderId");
        aliasMap.put("SupplierPrefOrderId", "supplierPrefOrderId");
        aliasMap.put("supplierRatingTypeId", "supplierRatingTypeId");
        aliasMap.put("SupplierRatingTypeId", "supplierRatingTypeId");
        aliasMap.put("standardLeadTimeDays", "standardLeadTimeDays");
        aliasMap.put("StandardLeadTimeDays", "standardLeadTimeDays");
        aliasMap.put("orderQtyIncrements", "orderQtyIncrements");
        aliasMap.put("OrderQtyIncrements", "orderQtyIncrements");
        aliasMap.put("unitsIncluded", "unitsIncluded");
        aliasMap.put("UnitsIncluded", "unitsIncluded");
        aliasMap.put("quantityUomId", "quantityUomId");
        aliasMap.put("QuantityUomId", "quantityUomId");
        aliasMap.put("agreementId", "agreementId");
        aliasMap.put("AgreementId", "agreementId");
        aliasMap.put("agreementItemSeqId", "agreementItemSeqId");
        aliasMap.put("AgreementItemSeqId", "agreementItemSeqId");
        aliasMap.put("lastPrice", "lastPrice");
        aliasMap.put("LastPrice", "lastPrice");
        aliasMap.put("shippingPrice", "shippingPrice");
        aliasMap.put("ShippingPrice", "shippingPrice");
        aliasMap.put("supplierProductId", "supplierProductId");
        aliasMap.put("SupplierProductId", "supplierProductId");
        aliasMap.put("supplierProductName", "supplierProductName");
        aliasMap.put("SupplierProductName", "supplierProductName");
        aliasMap.put("canDropShip", "canDropShip");
        aliasMap.put("CanDropShip", "canDropShip");
        aliasMap.put("comments", "comments");
        aliasMap.put("Comments", "comments");
        aliasMap.put("taxInPrice", "taxInPrice");
        aliasMap.put("TaxInPrice", "taxInPrice");
        aliasMap.put("taxAmount", "taxAmount");
        aliasMap.put("TaxAmount", "taxAmount");
        aliasMap.put("taxPercentage", "taxPercentage");
        aliasMap.put("TaxPercentage", "taxPercentage");
        aliasMap.put("limitQuantityPerCustomer", "limitQuantityPerCustomer");
        aliasMap.put("LimitQuantityPerCustomer", "limitQuantityPerCustomer");
        aliasMap.put("limitQuantityPerOrder", "limitQuantityPerOrder");
        aliasMap.put("LimitQuantityPerOrder", "limitQuantityPerOrder");
        aliasMap.put("productPriceTypeId", "productPriceTypeId");
        aliasMap.put("ProductPriceTypeId", "productPriceTypeId");
        aliasMap.put("shipmentMethodTypeId", "shipmentMethodTypeId");
        aliasMap.put("ShipmentMethodTypeId", "shipmentMethodTypeId");
        aliasMap.put("version", "version");
        aliasMap.put("Version", "version");
        aliasMap.put("createdBy", "createdBy");
        aliasMap.put("CreatedBy", "createdBy");
        aliasMap.put("createdAt", "createdAt");
        aliasMap.put("CreatedAt", "createdAt");
        aliasMap.put("updatedBy", "updatedBy");
        aliasMap.put("UpdatedBy", "updatedBy");
        aliasMap.put("updatedAt", "updatedAt");
        aliasMap.put("UpdatedAt", "updatedAt");
        aliasMap.put("active", "active");
        aliasMap.put("Active", "active");
        aliasMap.put("deleted", "deleted");
        aliasMap.put("Deleted", "deleted");
        aliasMap.put("supplierProductTenantizedId.tenantId", "supplierProductTenantizedId.tenantId");
        aliasMap.put("SupplierProductTenantizedId.TenantId", "supplierProductTenantizedId.tenantId");
        aliasMap.put("tenantId", "supplierProductTenantizedId.tenantId");
        aliasMap.put("TenantId", "supplierProductTenantizedId.tenantId");
        aliasMap.put("supplierProductTenantizedId.supplierProductAssocIdProductId", "supplierProductTenantizedId.supplierProductAssocIdProductId");
        aliasMap.put("SupplierProductTenantizedId.SupplierProductAssocIdProductId", "supplierProductTenantizedId.supplierProductAssocIdProductId");
        aliasMap.put("supplierProductAssocId.productId", "supplierProductTenantizedId.supplierProductAssocIdProductId");
        aliasMap.put("SupplierProductAssocId.ProductId", "supplierProductTenantizedId.supplierProductAssocIdProductId");
        aliasMap.put("supplierProductTenantizedId.supplierProductAssocIdPartyId", "supplierProductTenantizedId.supplierProductAssocIdPartyId");
        aliasMap.put("SupplierProductTenantizedId.SupplierProductAssocIdPartyId", "supplierProductTenantizedId.supplierProductAssocIdPartyId");
        aliasMap.put("supplierProductAssocId.partyId", "supplierProductTenantizedId.supplierProductAssocIdPartyId");
        aliasMap.put("SupplierProductAssocId.PartyId", "supplierProductTenantizedId.supplierProductAssocIdPartyId");
        aliasMap.put("supplierProductTenantizedId.supplierProductAssocIdCurrencyUomId", "supplierProductTenantizedId.supplierProductAssocIdCurrencyUomId");
        aliasMap.put("SupplierProductTenantizedId.SupplierProductAssocIdCurrencyUomId", "supplierProductTenantizedId.supplierProductAssocIdCurrencyUomId");
        aliasMap.put("supplierProductAssocId.currencyUomId", "supplierProductTenantizedId.supplierProductAssocIdCurrencyUomId");
        aliasMap.put("SupplierProductAssocId.CurrencyUomId", "supplierProductTenantizedId.supplierProductAssocIdCurrencyUomId");
        aliasMap.put("supplierProductTenantizedId.supplierProductAssocIdMinimumOrderQuantity", "supplierProductTenantizedId.supplierProductAssocIdMinimumOrderQuantity");
        aliasMap.put("SupplierProductTenantizedId.SupplierProductAssocIdMinimumOrderQuantity", "supplierProductTenantizedId.supplierProductAssocIdMinimumOrderQuantity");
        aliasMap.put("supplierProductAssocId.minimumOrderQuantity", "supplierProductTenantizedId.supplierProductAssocIdMinimumOrderQuantity");
        aliasMap.put("SupplierProductAssocId.MinimumOrderQuantity", "supplierProductTenantizedId.supplierProductAssocIdMinimumOrderQuantity");
        aliasMap.put("supplierProductTenantizedId.supplierProductAssocIdAvailableFromDate", "supplierProductTenantizedId.supplierProductAssocIdAvailableFromDate");
        aliasMap.put("SupplierProductTenantizedId.SupplierProductAssocIdAvailableFromDate", "supplierProductTenantizedId.supplierProductAssocIdAvailableFromDate");
        aliasMap.put("supplierProductAssocId.availableFromDate", "supplierProductTenantizedId.supplierProductAssocIdAvailableFromDate");
        aliasMap.put("SupplierProductAssocId.AvailableFromDate", "supplierProductTenantizedId.supplierProductAssocIdAvailableFromDate");
    }

    private static void initPropertyTypeMap() {
        for (int i = 0; i < propertyNames.length; i++ ) {
            propertyTypeMap.put(propertyNames[i], propertyTypes[i]);
        }
    }

  }


  // /////////////////////////////////////////////////////////  
  public static class DocumentMetadata {

    private DocumentMetadata() {
    }

    public static final String PROPERTY_NAME_VERSION      = "version";
    public static final String PROPERTY_NAME_ACTIVE       = "active";
    public static final String PROPERTY_NAME_DELETED      = "deleted";
    public static final String PROPERTY_NAME_CREATED_BY   = "createdBy";
    public static final String PROPERTY_NAME_CREATED_AT   = "createdAt";
    public static final String PROPERTY_NAME_UPDATED_BY   = "updatedBy";
    public static final String PROPERTY_NAME_UPDATED_AT   = "updatedAt";

    public static final Class ID_CLASS = String.class;

    public static final String[] propertyNames = new String[] {
            "documentId",
            "documentTypeId",
            "comments",
            "documentLocation",
            "documentText",
            "version",
            "createdBy",
            "createdAt",
            "updatedBy",
            "updatedAt",
            "active",
            "deleted",
    };

    public static final String[] propertyTypes = new String[] {
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "OffsetDateTime",
            "String",
            "OffsetDateTime",
            "Boolean",
            "Boolean",
    };

    public static final Map<String, String> propertyTypeMap;

    public static final Map<String, String> aliasMap;

    static {
        propertyTypeMap = new HashMap<String, String>();
        initPropertyTypeMap();
        aliasMap = new HashMap<String, String>();
        initAliasMap();
    }

    private static void initAliasMap() {
        aliasMap.put("documentId", "documentId");
        aliasMap.put("DocumentId", "documentId");
        aliasMap.put("documentTypeId", "documentTypeId");
        aliasMap.put("DocumentTypeId", "documentTypeId");
        aliasMap.put("comments", "comments");
        aliasMap.put("Comments", "comments");
        aliasMap.put("documentLocation", "documentLocation");
        aliasMap.put("DocumentLocation", "documentLocation");
        aliasMap.put("documentText", "documentText");
        aliasMap.put("DocumentText", "documentText");
        aliasMap.put("version", "version");
        aliasMap.put("Version", "version");
        aliasMap.put("createdBy", "createdBy");
        aliasMap.put("CreatedBy", "createdBy");
        aliasMap.put("createdAt", "createdAt");
        aliasMap.put("CreatedAt", "createdAt");
        aliasMap.put("updatedBy", "updatedBy");
        aliasMap.put("UpdatedBy", "updatedBy");
        aliasMap.put("updatedAt", "updatedAt");
        aliasMap.put("UpdatedAt", "updatedAt");
        aliasMap.put("active", "active");
        aliasMap.put("Active", "active");
        aliasMap.put("deleted", "deleted");
        aliasMap.put("Deleted", "deleted");
    }

    private static void initPropertyTypeMap() {
        for (int i = 0; i < propertyNames.length; i++ ) {
            propertyTypeMap.put(propertyNames[i], propertyTypes[i]);
        }
    }

  }


  // /////////////////////////////////////////////////////////  
  public static class DocumentAssociationMetadata {

    private DocumentAssociationMetadata() {
    }

    public static final String PROPERTY_NAME_VERSION      = "version";
    public static final String PROPERTY_NAME_ACTIVE       = "active";
    public static final String PROPERTY_NAME_DELETED      = "deleted";
    public static final String PROPERTY_NAME_CREATED_BY   = "createdBy";
    public static final String PROPERTY_NAME_CREATED_AT   = "createdAt";
    public static final String PROPERTY_NAME_UPDATED_BY   = "updatedBy";
    public static final String PROPERTY_NAME_UPDATED_AT   = "updatedAt";

    public static final String URL_ID_FIELD_SEPARATOR = ",";

    public static final TextFormatter<org.dddml.ffvtraceability.domain.DocumentAssociationId> URL_ID_TEXT_FORMATTER =
                    new AbstractValueObjectTextFormatter<org.dddml.ffvtraceability.domain.DocumentAssociationId>(org.dddml.ffvtraceability.domain.DocumentAssociationId.class, URL_ID_FIELD_SEPARATOR) {
                        @Override
                        protected Class<?> getClassByTypeName(String type) {
                            return BoundedContextMetadata.CLASS_MAP.get(type);
                        }
                    };

    public static final Class ID_CLASS = org.dddml.ffvtraceability.domain.DocumentAssociationId.class;

    public static final String[] propertyNames = new String[] {
            "documentId",
            "documentIdTo",
            "documentAssocTypeId",
            "fromDate",
            "thruDate",
            "version",
            "createdBy",
            "createdAt",
            "updatedBy",
            "updatedAt",
            "active",
            "deleted",
            "documentAssociationId.documentId",
            "documentAssociationId.documentIdTo",
            "documentAssociationId.documentAssocTypeId",
            "documentAssociationId.fromDate",
    };

    public static final String[] propertyTypes = new String[] {
            "String",
            "String",
            "String",
            "OffsetDateTime",
            "OffsetDateTime",
            "Long",
            "String",
            "OffsetDateTime",
            "String",
            "OffsetDateTime",
            "Boolean",
            "Boolean",
            "String",
            "String",
            "String",
            "OffsetDateTime",
    };

    public static final Map<String, String> propertyTypeMap;

    public static final Map<String, String> aliasMap;

    static {
        propertyTypeMap = new HashMap<String, String>();
        initPropertyTypeMap();
        aliasMap = new HashMap<String, String>();
        initAliasMap();
    }

    private static void initAliasMap() {
        aliasMap.put("documentId", "documentId");
        aliasMap.put("DocumentId", "documentId");
        aliasMap.put("documentIdTo", "documentIdTo");
        aliasMap.put("DocumentIdTo", "documentIdTo");
        aliasMap.put("documentAssocTypeId", "documentAssocTypeId");
        aliasMap.put("DocumentAssocTypeId", "documentAssocTypeId");
        aliasMap.put("fromDate", "fromDate");
        aliasMap.put("FromDate", "fromDate");
        aliasMap.put("thruDate", "thruDate");
        aliasMap.put("ThruDate", "thruDate");
        aliasMap.put("version", "version");
        aliasMap.put("Version", "version");
        aliasMap.put("createdBy", "createdBy");
        aliasMap.put("CreatedBy", "createdBy");
        aliasMap.put("createdAt", "createdAt");
        aliasMap.put("CreatedAt", "createdAt");
        aliasMap.put("updatedBy", "updatedBy");
        aliasMap.put("UpdatedBy", "updatedBy");
        aliasMap.put("updatedAt", "updatedAt");
        aliasMap.put("UpdatedAt", "updatedAt");
        aliasMap.put("active", "active");
        aliasMap.put("Active", "active");
        aliasMap.put("deleted", "deleted");
        aliasMap.put("Deleted", "deleted");
        aliasMap.put("documentAssociationId.documentId", "documentAssociationId.documentId");
        aliasMap.put("DocumentAssociationId.DocumentId", "documentAssociationId.documentId");
        aliasMap.put("documentAssociationId.documentIdTo", "documentAssociationId.documentIdTo");
        aliasMap.put("DocumentAssociationId.DocumentIdTo", "documentAssociationId.documentIdTo");
        aliasMap.put("documentAssociationId.documentAssocTypeId", "documentAssociationId.documentAssocTypeId");
        aliasMap.put("DocumentAssociationId.DocumentAssocTypeId", "documentAssociationId.documentAssocTypeId");
        aliasMap.put("documentAssociationId.fromDate", "documentAssociationId.fromDate");
        aliasMap.put("DocumentAssociationId.FromDate", "documentAssociationId.fromDate");
    }

    private static void initPropertyTypeMap() {
        for (int i = 0; i < propertyNames.length; i++ ) {
            propertyTypeMap.put(propertyNames[i], propertyTypes[i]);
        }
    }

  }

}


