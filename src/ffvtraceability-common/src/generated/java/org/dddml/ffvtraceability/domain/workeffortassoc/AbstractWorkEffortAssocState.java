// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.workeffortassoc;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.workeffortassoc.WorkEffortAssocEvent.*;

public abstract class AbstractWorkEffortAssocState implements WorkEffortAssocState.SqlWorkEffortAssocState {

    private WorkEffortAssocId workEffortAssocId;

    public WorkEffortAssocId getWorkEffortAssocId() {
        return this.workEffortAssocId;
    }

    public void setWorkEffortAssocId(WorkEffortAssocId workEffortAssocId) {
        this.workEffortAssocId = workEffortAssocId;
    }

    private Long sequenceNum;

    public Long getSequenceNum() {
        return this.sequenceNum;
    }

    public void setSequenceNum(Long sequenceNum) {
        this.sequenceNum = sequenceNum;
    }

    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate() {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate) {
        this.thruDate = thruDate;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractWorkEffortAssocState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setWorkEffortAssocId(((WorkEffortAssocEvent.SqlWorkEffortAssocEvent) events.get(0)).getWorkEffortAssocEventId().getWorkEffortAssocId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? WorkEffortAssocState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractWorkEffortAssocState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getWorkEffortAssocId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof WorkEffortAssocState) {
            return Objects.equals(this.getWorkEffortAssocId(), ((WorkEffortAssocState)obj).getWorkEffortAssocId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof WorkEffortAssocStateCreated) {
            when((WorkEffortAssocStateCreated) e);
        } else if (e instanceof WorkEffortAssocStateMergePatched) {
            when((WorkEffortAssocStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(WorkEffortAssocStateCreated e) {
        throwOnWrongEvent(e);

        this.setSequenceNum(e.getSequenceNum());
        this.setThruDate(e.getThruDate());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(WorkEffortAssocState s) {
        if (s == this) {
            return;
        }
        this.setSequenceNum(s.getSequenceNum());
        this.setThruDate(s.getThruDate());
    }

    public void when(WorkEffortAssocStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getSequenceNum() == null) {
            if (e.getIsPropertySequenceNumRemoved() != null && e.getIsPropertySequenceNumRemoved()) {
                this.setSequenceNum(null);
            }
        } else {
            this.setSequenceNum(e.getSequenceNum());
        }
        if (e.getThruDate() == null) {
            if (e.getIsPropertyThruDateRemoved() != null && e.getIsPropertyThruDateRemoved()) {
                this.setThruDate(null);
            }
        } else {
            this.setThruDate(e.getThruDate());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(WorkEffortAssocEvent event) {
        WorkEffortAssocId stateEntityId = this.getWorkEffortAssocId(); // Aggregate Id
        WorkEffortAssocId eventEntityId = ((WorkEffortAssocEvent.SqlWorkEffortAssocEvent)event).getWorkEffortAssocEventId().getWorkEffortAssocId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((WorkEffortAssocEvent.SqlWorkEffortAssocEvent)event).getWorkEffortAssocEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getWorkEffortAssocEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleWorkEffortAssocState extends AbstractWorkEffortAssocState {

        public SimpleWorkEffortAssocState() {
        }

        public SimpleWorkEffortAssocState(List<Event> events) {
            super(events);
        }

        public static SimpleWorkEffortAssocState newForReapplying() {
            SimpleWorkEffortAssocState s = new SimpleWorkEffortAssocState();
            s.initializeForReapplying();
            return s;
        }

    }



}

