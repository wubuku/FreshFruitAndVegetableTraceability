// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;


public class PartyContactMechBaseStateDto {

    private PartyContactMechBaseId partyContactMechBaseId;

    public PartyContactMechBaseId getPartyContactMechBaseId()
    {
        return this.partyContactMechBaseId;
    }

    public void setPartyContactMechBaseId(PartyContactMechBaseId partyContactMechBaseId)
    {
        this.partyContactMechBaseId = partyContactMechBaseId;
    }

    private OffsetDateTime activeFromDate;

    public OffsetDateTime getActiveFromDate()
    {
        return this.activeFromDate;
    }

    public void setActiveFromDate(OffsetDateTime activeFromDate)
    {
        this.activeFromDate = activeFromDate;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt)
    {
        this.updatedAt = updatedAt;
    }

    private PartyContactMechStateDto[] contactMechanisms;

    public PartyContactMechStateDto[] getContactMechanisms()
    {
        return this.contactMechanisms;
    }    

    public void setContactMechanisms(PartyContactMechStateDto[] contactMechanisms)
    {
        this.contactMechanisms = contactMechanisms;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{"ContactMechanisms"});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public PartyContactMechBaseStateDto[] toPartyContactMechBaseStateDtoArray(Iterable<PartyContactMechBaseState> states) {
            return toPartyContactMechBaseStateDtoList(states).toArray(new PartyContactMechBaseStateDto[0]);
        }

        public List<PartyContactMechBaseStateDto> toPartyContactMechBaseStateDtoList(Iterable<PartyContactMechBaseState> states) {
            ArrayList<PartyContactMechBaseStateDto> stateDtos = new ArrayList();
            for (PartyContactMechBaseState s : states) {
                PartyContactMechBaseStateDto dto = toPartyContactMechBaseStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public PartyContactMechBaseStateDto toPartyContactMechBaseStateDto(PartyContactMechBaseState state)
        {
            if(state == null) {
                return null;
            }
            PartyContactMechBaseStateDto dto = new PartyContactMechBaseStateDto();
            if (returnedFieldsContains("PartyContactMechBaseId")) {
                dto.setPartyContactMechBaseId(state.getPartyContactMechBaseId());
            }
            if (returnedFieldsContains("ActiveFromDate")) {
                dto.setActiveFromDate(state.getActiveFromDate());
            }
            if (returnedFieldsContains("Version")) {
                dto.setVersion(state.getVersion());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            if (returnedFieldsContains("ContactMechanisms")) {
                ArrayList<PartyContactMechStateDto> arrayList = new ArrayList();
                if (state.getContactMechanisms() != null) {
                    PartyContactMechStateDto.DtoConverter conv = new PartyContactMechStateDto.DtoConverter();
                    String returnFS = CollectionUtils.mapGetValueIgnoringCase(getReturnedFields(), "ContactMechanisms");
                    if(returnFS != null) { conv.setReturnedFieldsString(returnFS); } else { conv.setAllFieldsReturned(this.getAllFieldsReturned()); }
                    for (PartyContactMechState s : state.getContactMechanisms()) {
                        arrayList.add(conv.toPartyContactMechStateDto(s));
                    }
                }
                dto.setContactMechanisms(arrayList.toArray(new PartyContactMechStateDto[0]));
            }
            return dto;
        }

    }
}

