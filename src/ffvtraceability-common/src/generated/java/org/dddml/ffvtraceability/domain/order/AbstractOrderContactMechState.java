// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.order;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.order.OrderContactMechEvent.*;

public abstract class AbstractOrderContactMechState implements OrderContactMechState.SqlOrderContactMechState {

    private OrderContactMechId orderContactMechId = new OrderContactMechId();

    public OrderContactMechId getOrderContactMechId() {
        return this.orderContactMechId;
    }

    public void setOrderContactMechId(OrderContactMechId orderContactMechId) {
        this.orderContactMechId = orderContactMechId;
    }

    private transient OrderHeaderState orderHeaderState;

    public OrderHeaderState getOrderHeaderState() {
        return orderHeaderState;
    }

    public void setOrderHeaderState(OrderHeaderState s) {
        orderHeaderState = s;
    }
    
    private OrderHeaderState protectedOrderHeaderState;

    protected OrderHeaderState getProtectedOrderHeaderState() {
        return protectedOrderHeaderState;
    }

    protected void setProtectedOrderHeaderState(OrderHeaderState protectedOrderHeaderState) {
        this.protectedOrderHeaderState = protectedOrderHeaderState;
    }

    public String getOrderId() {
        return this.getOrderContactMechId().getOrderId();
    }
        
    public void setOrderId(String orderId) {
        this.getOrderContactMechId().setOrderId(orderId);
    }

    public String getContactMechPurposeTypeId() {
        return this.getOrderContactMechId().getContactMechPurposeTypeId();
    }
        
    public void setContactMechPurposeTypeId(String contactMechPurposeTypeId) {
        this.getOrderContactMechId().setContactMechPurposeTypeId(contactMechPurposeTypeId);
    }

    private String contactMechId;

    public String getContactMechId() {
        return this.contactMechId;
    }

    public void setContactMechId(String contactMechId) {
        this.contactMechId = contactMechId;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractOrderContactMechState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getContactMechPurposeTypeId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof OrderContactMechState) {
            return Objects.equals(this.getContactMechPurposeTypeId(), ((OrderContactMechState)obj).getContactMechPurposeTypeId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof OrderContactMechStateCreated) {
            when((OrderContactMechStateCreated) e);
        } else if (e instanceof OrderContactMechStateMergePatched) {
            when((OrderContactMechStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(OrderContactMechStateCreated e) {
        throwOnWrongEvent(e);

        this.setContactMechId(e.getContactMechId());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(OrderContactMechState s) {
        if (s == this) {
            return;
        }
        this.setContactMechId(s.getContactMechId());
    }

    public void when(OrderContactMechStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getContactMechId() == null) {
            if (e.getIsPropertyContactMechIdRemoved() != null && e.getIsPropertyContactMechIdRemoved()) {
                this.setContactMechId(null);
            }
        } else {
            this.setContactMechId(e.getContactMechId());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(OrderContactMechEvent event) {
        String stateEntityIdOrderId = this.getOrderContactMechId().getOrderId();
        String eventEntityIdOrderId = ((OrderContactMechEvent.SqlOrderContactMechEvent)event).getOrderContactMechEventId().getOrderId();
        if (!stateEntityIdOrderId.equals(eventEntityIdOrderId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id OrderId %1$s in state but entity id OrderId %2$s in event", stateEntityIdOrderId, eventEntityIdOrderId);
        }

        String stateEntityIdContactMechPurposeTypeId = this.getOrderContactMechId().getContactMechPurposeTypeId();
        String eventEntityIdContactMechPurposeTypeId = ((OrderContactMechEvent.SqlOrderContactMechEvent)event).getOrderContactMechEventId().getContactMechPurposeTypeId();
        if (!stateEntityIdContactMechPurposeTypeId.equals(eventEntityIdContactMechPurposeTypeId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id ContactMechPurposeTypeId %1$s in state but entity id ContactMechPurposeTypeId %2$s in event", stateEntityIdContactMechPurposeTypeId, eventEntityIdContactMechPurposeTypeId);
        }


        if (getForReapplying()) { return; }
        OrderContactMechStateEvent stateEvent = event instanceof OrderContactMechStateEvent ? (OrderContactMechStateEvent)event : null;
        if (stateEvent == null) { return; }

        Long stateVersion = this.getVersion();
        Long stateEventStateVersion = stateEvent.getVersion();
        //if (stateEventStateVersion == null) {
        stateEventStateVersion = stateVersion == null ? OrderContactMechState.VERSION_NULL : stateVersion;
        stateEvent.setVersion(stateEventStateVersion);
        //}
        //if (!(stateVersion == null && stateEventStateVersion.equals(OrderContactMechState.VERSION_NULL)) && !stateEventStateVersion.equals(stateVersion))
        //{
        //    throw DomainError.named("concurrencyConflict", "Conflict between stateVersion (%1$s) and stateEventStateVersion (%2$s)", stateVersion, stateEventStateVersion);
        //}

    }


    public static class SimpleOrderContactMechState extends AbstractOrderContactMechState {

        public SimpleOrderContactMechState() {
        }

        public static SimpleOrderContactMechState newForReapplying() {
            SimpleOrderContactMechState s = new SimpleOrderContactMechState();
            s.initializeForReapplying();
            return s;
        }

    }



}

