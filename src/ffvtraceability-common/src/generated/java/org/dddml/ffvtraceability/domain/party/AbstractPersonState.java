// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.party;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.party.PersonEvent.*;

public abstract class AbstractPersonState extends AbstractPartyState implements PersonState.SqlPersonState, Saveable {

    private String salutation;

    public String getSalutation() {
        return this.salutation;
    }

    public void setSalutation(String salutation) {
        this.salutation = salutation;
    }

    private String firstName;

    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    private String middleName;

    public String getMiddleName() {
        return this.middleName;
    }

    public void setMiddleName(String middleName) {
        this.middleName = middleName;
    }

    private String lastName;

    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    private String personalTitle;

    public String getPersonalTitle() {
        return this.personalTitle;
    }

    public void setPersonalTitle(String personalTitle) {
        this.personalTitle = personalTitle;
    }

    private String nickname;

    public String getNickname() {
        return this.nickname;
    }

    public void setNickname(String nickname) {
        this.nickname = nickname;
    }

    private String gender;

    public String getGender() {
        return this.gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    private java.sql.Date birthDate;

    public java.sql.Date getBirthDate() {
        return this.birthDate;
    }

    public void setBirthDate(java.sql.Date birthDate) {
        this.birthDate = birthDate;
    }

    private java.sql.Date deceasedDate;

    public java.sql.Date getDeceasedDate() {
        return this.deceasedDate;
    }

    public void setDeceasedDate(java.sql.Date deceasedDate) {
        this.deceasedDate = deceasedDate;
    }

    private String socialSecurityNumber;

    public String getSocialSecurityNumber() {
        return this.socialSecurityNumber;
    }

    public void setSocialSecurityNumber(String socialSecurityNumber) {
        this.socialSecurityNumber = socialSecurityNumber;
    }

    private String passportNumber;

    public String getPassportNumber() {
        return this.passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

    private java.sql.Date passportExpireDate;

    public java.sql.Date getPassportExpireDate() {
        return this.passportExpireDate;
    }

    public void setPassportExpireDate(java.sql.Date passportExpireDate) {
        this.passportExpireDate = passportExpireDate;
    }

    private String existingCustomer;

    public String getExistingCustomer() {
        return this.existingCustomer;
    }

    public void setExistingCustomer(String existingCustomer) {
        this.existingCustomer = existingCustomer;
    }

    public AbstractPersonState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setPartyId(((PartyEvent.SqlPartyEvent) events.get(0)).getPartyEventId().getPartyId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? PartyState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractPersonState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        super.setForReapplying(true);

        initializeProperties();
    }
    
    protected void initializeProperties() {
        super.initializeProperties();
    }

    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof PersonStateCreated) {
            when((PersonStateCreated) e);
        } else if (e instanceof PersonStateMergePatched) {
            when((PersonStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(PersonStateCreated e) {
        throwOnWrongEvent(e);

        this.setPartyTypeId(e.getPartyTypeId());
        this.setPrimaryRoleTypeId(e.getPrimaryRoleTypeId());
        this.setExternalId(e.getExternalId());
        this.setPreferredCurrencyUomId(e.getPreferredCurrencyUomId());
        this.setDescription(e.getDescription());
        this.setStatusId(e.getStatusId());
        this.setSalutation(e.getSalutation());
        this.setFirstName(e.getFirstName());
        this.setMiddleName(e.getMiddleName());
        this.setLastName(e.getLastName());
        this.setPersonalTitle(e.getPersonalTitle());
        this.setNickname(e.getNickname());
        this.setGender(e.getGender());
        this.setBirthDate(e.getBirthDate());
        this.setDeceasedDate(e.getDeceasedDate());
        this.setSocialSecurityNumber(e.getSocialSecurityNumber());
        this.setPassportNumber(e.getPassportNumber());
        this.setPassportExpireDate(e.getPassportExpireDate());
        this.setExistingCustomer(e.getExistingCustomer());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

        for (PartyIdentificationEvent.PartyIdentificationStateCreated innerEvent : e.getPartyIdentificationEvents()) {
            PartyIdentificationState innerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(((PartyIdentificationEvent.SqlPartyIdentificationEvent)innerEvent).getPartyIdentificationEventId().getPartyIdentificationTypeId());
            ((PartyIdentificationState.SqlPartyIdentificationState)innerState).mutate(innerEvent);
        }
    }

    @Override
    public void merge(PartyState s) {
        merge((PersonState)s);
    }

    public void merge(PersonState s) {
        if (s == this) {
            return;
        }
        this.setPartyTypeId(s.getPartyTypeId());
        this.setPrimaryRoleTypeId(s.getPrimaryRoleTypeId());
        this.setExternalId(s.getExternalId());
        this.setPreferredCurrencyUomId(s.getPreferredCurrencyUomId());
        this.setDescription(s.getDescription());
        this.setStatusId(s.getStatusId());
        this.setSalutation(s.getSalutation());
        this.setFirstName(s.getFirstName());
        this.setMiddleName(s.getMiddleName());
        this.setLastName(s.getLastName());
        this.setPersonalTitle(s.getPersonalTitle());
        this.setNickname(s.getNickname());
        this.setGender(s.getGender());
        this.setBirthDate(s.getBirthDate());
        this.setDeceasedDate(s.getDeceasedDate());
        this.setSocialSecurityNumber(s.getSocialSecurityNumber());
        this.setPassportNumber(s.getPassportNumber());
        this.setPassportExpireDate(s.getPassportExpireDate());
        this.setExistingCustomer(s.getExistingCustomer());

        if (s.getPartyIdentifications() != null) {
            Iterable<PartyIdentificationState> iterable;
            if (s.getPartyIdentifications().isLazy()) {
                iterable = s.getPartyIdentifications().getLoadedStates();
            } else {
                iterable = s.getPartyIdentifications();
            }
            if (iterable != null) {
                for (PartyIdentificationState ss : iterable) {
                    PartyIdentificationState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(ss.getPartyIdentificationTypeId());
                    ((AbstractPartyIdentificationState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getPartyIdentifications() != null) {
            if (s.getPartyIdentifications() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getPartyIdentifications()).getRemovedStates() != null) {
                    for (PartyIdentificationState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, PartyIdentificationState>)s.getPartyIdentifications()).getRemovedStates()) {
                        PartyIdentificationState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(ss.getPartyIdentificationTypeId());
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getPartyIdentifications()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getPartyIdentifications().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getPartyIdentifications().stream().map(i -> i.getPartyIdentificationTypeId()).collect(java.util.stream.Collectors.toList()));
                    s.getPartyIdentifications().forEach(i -> removedStateIds.remove(i.getPartyIdentificationTypeId()));
                    for (String i : removedStateIds) {
                        PartyIdentificationState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(i);
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getPartyIdentifications()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(PersonStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getPartyTypeId() == null) {
            if (e.getIsPropertyPartyTypeIdRemoved() != null && e.getIsPropertyPartyTypeIdRemoved()) {
                this.setPartyTypeId(null);
            }
        } else {
            this.setPartyTypeId(e.getPartyTypeId());
        }
        if (e.getPrimaryRoleTypeId() == null) {
            if (e.getIsPropertyPrimaryRoleTypeIdRemoved() != null && e.getIsPropertyPrimaryRoleTypeIdRemoved()) {
                this.setPrimaryRoleTypeId(null);
            }
        } else {
            this.setPrimaryRoleTypeId(e.getPrimaryRoleTypeId());
        }
        if (e.getExternalId() == null) {
            if (e.getIsPropertyExternalIdRemoved() != null && e.getIsPropertyExternalIdRemoved()) {
                this.setExternalId(null);
            }
        } else {
            this.setExternalId(e.getExternalId());
        }
        if (e.getPreferredCurrencyUomId() == null) {
            if (e.getIsPropertyPreferredCurrencyUomIdRemoved() != null && e.getIsPropertyPreferredCurrencyUomIdRemoved()) {
                this.setPreferredCurrencyUomId(null);
            }
        } else {
            this.setPreferredCurrencyUomId(e.getPreferredCurrencyUomId());
        }
        if (e.getDescription() == null) {
            if (e.getIsPropertyDescriptionRemoved() != null && e.getIsPropertyDescriptionRemoved()) {
                this.setDescription(null);
            }
        } else {
            this.setDescription(e.getDescription());
        }
        if (e.getStatusId() == null) {
            if (e.getIsPropertyStatusIdRemoved() != null && e.getIsPropertyStatusIdRemoved()) {
                this.setStatusId(null);
            }
        } else {
            this.setStatusId(e.getStatusId());
        }
        if (e.getSalutation() == null) {
            if (e.getIsPropertySalutationRemoved() != null && e.getIsPropertySalutationRemoved()) {
                this.setSalutation(null);
            }
        } else {
            this.setSalutation(e.getSalutation());
        }
        if (e.getFirstName() == null) {
            if (e.getIsPropertyFirstNameRemoved() != null && e.getIsPropertyFirstNameRemoved()) {
                this.setFirstName(null);
            }
        } else {
            this.setFirstName(e.getFirstName());
        }
        if (e.getMiddleName() == null) {
            if (e.getIsPropertyMiddleNameRemoved() != null && e.getIsPropertyMiddleNameRemoved()) {
                this.setMiddleName(null);
            }
        } else {
            this.setMiddleName(e.getMiddleName());
        }
        if (e.getLastName() == null) {
            if (e.getIsPropertyLastNameRemoved() != null && e.getIsPropertyLastNameRemoved()) {
                this.setLastName(null);
            }
        } else {
            this.setLastName(e.getLastName());
        }
        if (e.getPersonalTitle() == null) {
            if (e.getIsPropertyPersonalTitleRemoved() != null && e.getIsPropertyPersonalTitleRemoved()) {
                this.setPersonalTitle(null);
            }
        } else {
            this.setPersonalTitle(e.getPersonalTitle());
        }
        if (e.getNickname() == null) {
            if (e.getIsPropertyNicknameRemoved() != null && e.getIsPropertyNicknameRemoved()) {
                this.setNickname(null);
            }
        } else {
            this.setNickname(e.getNickname());
        }
        if (e.getGender() == null) {
            if (e.getIsPropertyGenderRemoved() != null && e.getIsPropertyGenderRemoved()) {
                this.setGender(null);
            }
        } else {
            this.setGender(e.getGender());
        }
        if (e.getBirthDate() == null) {
            if (e.getIsPropertyBirthDateRemoved() != null && e.getIsPropertyBirthDateRemoved()) {
                this.setBirthDate(null);
            }
        } else {
            this.setBirthDate(e.getBirthDate());
        }
        if (e.getDeceasedDate() == null) {
            if (e.getIsPropertyDeceasedDateRemoved() != null && e.getIsPropertyDeceasedDateRemoved()) {
                this.setDeceasedDate(null);
            }
        } else {
            this.setDeceasedDate(e.getDeceasedDate());
        }
        if (e.getSocialSecurityNumber() == null) {
            if (e.getIsPropertySocialSecurityNumberRemoved() != null && e.getIsPropertySocialSecurityNumberRemoved()) {
                this.setSocialSecurityNumber(null);
            }
        } else {
            this.setSocialSecurityNumber(e.getSocialSecurityNumber());
        }
        if (e.getPassportNumber() == null) {
            if (e.getIsPropertyPassportNumberRemoved() != null && e.getIsPropertyPassportNumberRemoved()) {
                this.setPassportNumber(null);
            }
        } else {
            this.setPassportNumber(e.getPassportNumber());
        }
        if (e.getPassportExpireDate() == null) {
            if (e.getIsPropertyPassportExpireDateRemoved() != null && e.getIsPropertyPassportExpireDateRemoved()) {
                this.setPassportExpireDate(null);
            }
        } else {
            this.setPassportExpireDate(e.getPassportExpireDate());
        }
        if (e.getExistingCustomer() == null) {
            if (e.getIsPropertyExistingCustomerRemoved() != null && e.getIsPropertyExistingCustomerRemoved()) {
                this.setExistingCustomer(null);
            }
        } else {
            this.setExistingCustomer(e.getExistingCustomer());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (PartyIdentificationEvent innerEvent : e.getPartyIdentificationEvents()) {
            PartyIdentificationState innerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(((PartyIdentificationEvent.SqlPartyIdentificationEvent)innerEvent).getPartyIdentificationEventId().getPartyIdentificationTypeId());
            ((PartyIdentificationState.SqlPartyIdentificationState)innerState).mutate(innerEvent);
        }
    }

    public void save() {
       super.save();
    }


    public static class SimplePersonState extends AbstractPersonState {

        public SimplePersonState() {
        }

        public SimplePersonState(List<Event> events) {
            super(events);
        }

        public static SimplePersonState newForReapplying() {
            SimplePersonState s = new SimplePersonState();
            s.initializeForReapplying();
            return s;
        }

    }



}

