// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.order;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.partyrole.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractOrderAggregate extends AbstractAggregate implements OrderAggregate {
    private OrderHeaderState.MutableOrderHeaderState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractOrderAggregate(OrderHeaderState state) {
        this.state = (OrderHeaderState.MutableOrderHeaderState)state;
    }

    public OrderHeaderState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(OrderCommand.CreateOrder c) {
        if (c.getVersion() == null) { c.setVersion(OrderHeaderState.VERSION_NULL); }
        OrderEvent e = map(c);
        apply(e);
    }

    public void mergePatch(OrderCommand.MergePatchOrder c) {
        OrderEvent e = map(c);
        apply(e);
    }

    public void delete(OrderCommand.DeleteOrder c) {
        OrderEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        OrderCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected OrderEvent map(OrderCommand.CreateOrder c) {
        OrderEventId stateEventId = new OrderEventId(c.getOrderId(), c.getVersion());
        OrderEvent.OrderStateCreated e = newOrderStateCreated(stateEventId);
        e.setOrderTypeId(c.getOrderTypeId());
        e.setOrderName(c.getOrderName());
        e.setExternalId(c.getExternalId());
        e.setSalesChannelEnumId(c.getSalesChannelEnumId());
        e.setOrderDate(c.getOrderDate());
        e.setPriority(c.getPriority());
        e.setEntryDate(c.getEntryDate());
        e.setPickSheetPrintedDate(c.getPickSheetPrintedDate());
        e.setVisitId(c.getVisitId());
        e.setStatusId(c.getStatusId());
        e.setFirstAttemptOrderId(c.getFirstAttemptOrderId());
        e.setCurrencyUomId(c.getCurrencyUomId());
        e.setSyncStatusId(c.getSyncStatusId());
        e.setBillingAccountId(c.getBillingAccountId());
        e.setOriginFacilityId(c.getOriginFacilityId());
        e.setWebSiteId(c.getWebSiteId());
        e.setProductStoreId(c.getProductStoreId());
        e.setTerminalId(c.getTerminalId());
        e.setTransactionId(c.getTransactionId());
        e.setAutoOrderShoppingListId(c.getAutoOrderShoppingListId());
        e.setNeedsInventoryIssuance(c.getNeedsInventoryIssuance());
        e.setIsRushOrder(c.getIsRushOrder());
        e.setInternalCode(c.getInternalCode());
        e.setRemainingSubTotal(c.getRemainingSubTotal());
        e.setGrandTotal(c.getGrandTotal());
        e.setIsViewed(c.getIsViewed());
        e.setInvoicePerShipment(c.getInvoicePerShipment());
        e.setMemo(c.getMemo());
        ((AbstractOrderEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (OrderRoleCommand.CreateOrderRole innerCommand : c.getCreateOrderRoleCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            OrderRoleEvent.OrderRoleStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addOrderRoleEvent(innerEvent);
        }

        for (OrderContactMechCommand.CreateOrderContactMech innerCommand : c.getCreateOrderContactMechCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            OrderContactMechEvent.OrderContactMechStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addOrderContactMechEvent(innerEvent);
        }

        for (OrderItemCommand.CreateOrderItem innerCommand : c.getCreateOrderItemCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            OrderItemEvent.OrderItemStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addOrderItemEvent(innerEvent);
        }

        for (OrderAdjustmentCommand.CreateOrderAdjustment innerCommand : c.getCreateOrderAdjustmentCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            OrderAdjustmentEvent.OrderAdjustmentStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addOrderAdjustmentEvent(innerEvent);
        }

        for (OrderShipGroupCommand.CreateOrderShipGroup innerCommand : c.getCreateOrderShipGroupCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            OrderShipGroupEvent.OrderShipGroupStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addOrderShipGroupEvent(innerEvent);
        }

        return e;
    }

    protected OrderEvent map(OrderCommand.MergePatchOrder c) {
        OrderEventId stateEventId = new OrderEventId(c.getOrderId(), c.getVersion());
        OrderEvent.OrderStateMergePatched e = newOrderStateMergePatched(stateEventId);
        e.setOrderTypeId(c.getOrderTypeId());
        e.setOrderName(c.getOrderName());
        e.setExternalId(c.getExternalId());
        e.setSalesChannelEnumId(c.getSalesChannelEnumId());
        e.setOrderDate(c.getOrderDate());
        e.setPriority(c.getPriority());
        e.setEntryDate(c.getEntryDate());
        e.setPickSheetPrintedDate(c.getPickSheetPrintedDate());
        e.setVisitId(c.getVisitId());
        e.setStatusId(c.getStatusId());
        e.setFirstAttemptOrderId(c.getFirstAttemptOrderId());
        e.setCurrencyUomId(c.getCurrencyUomId());
        e.setSyncStatusId(c.getSyncStatusId());
        e.setBillingAccountId(c.getBillingAccountId());
        e.setOriginFacilityId(c.getOriginFacilityId());
        e.setWebSiteId(c.getWebSiteId());
        e.setProductStoreId(c.getProductStoreId());
        e.setTerminalId(c.getTerminalId());
        e.setTransactionId(c.getTransactionId());
        e.setAutoOrderShoppingListId(c.getAutoOrderShoppingListId());
        e.setNeedsInventoryIssuance(c.getNeedsInventoryIssuance());
        e.setIsRushOrder(c.getIsRushOrder());
        e.setInternalCode(c.getInternalCode());
        e.setRemainingSubTotal(c.getRemainingSubTotal());
        e.setGrandTotal(c.getGrandTotal());
        e.setIsViewed(c.getIsViewed());
        e.setInvoicePerShipment(c.getInvoicePerShipment());
        e.setMemo(c.getMemo());
        e.setIsPropertyOrderTypeIdRemoved(c.getIsPropertyOrderTypeIdRemoved());
        e.setIsPropertyOrderNameRemoved(c.getIsPropertyOrderNameRemoved());
        e.setIsPropertyExternalIdRemoved(c.getIsPropertyExternalIdRemoved());
        e.setIsPropertySalesChannelEnumIdRemoved(c.getIsPropertySalesChannelEnumIdRemoved());
        e.setIsPropertyOrderDateRemoved(c.getIsPropertyOrderDateRemoved());
        e.setIsPropertyPriorityRemoved(c.getIsPropertyPriorityRemoved());
        e.setIsPropertyEntryDateRemoved(c.getIsPropertyEntryDateRemoved());
        e.setIsPropertyPickSheetPrintedDateRemoved(c.getIsPropertyPickSheetPrintedDateRemoved());
        e.setIsPropertyVisitIdRemoved(c.getIsPropertyVisitIdRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyFirstAttemptOrderIdRemoved(c.getIsPropertyFirstAttemptOrderIdRemoved());
        e.setIsPropertyCurrencyUomIdRemoved(c.getIsPropertyCurrencyUomIdRemoved());
        e.setIsPropertySyncStatusIdRemoved(c.getIsPropertySyncStatusIdRemoved());
        e.setIsPropertyBillingAccountIdRemoved(c.getIsPropertyBillingAccountIdRemoved());
        e.setIsPropertyOriginFacilityIdRemoved(c.getIsPropertyOriginFacilityIdRemoved());
        e.setIsPropertyWebSiteIdRemoved(c.getIsPropertyWebSiteIdRemoved());
        e.setIsPropertyProductStoreIdRemoved(c.getIsPropertyProductStoreIdRemoved());
        e.setIsPropertyTerminalIdRemoved(c.getIsPropertyTerminalIdRemoved());
        e.setIsPropertyTransactionIdRemoved(c.getIsPropertyTransactionIdRemoved());
        e.setIsPropertyAutoOrderShoppingListIdRemoved(c.getIsPropertyAutoOrderShoppingListIdRemoved());
        e.setIsPropertyNeedsInventoryIssuanceRemoved(c.getIsPropertyNeedsInventoryIssuanceRemoved());
        e.setIsPropertyIsRushOrderRemoved(c.getIsPropertyIsRushOrderRemoved());
        e.setIsPropertyInternalCodeRemoved(c.getIsPropertyInternalCodeRemoved());
        e.setIsPropertyRemainingSubTotalRemoved(c.getIsPropertyRemainingSubTotalRemoved());
        e.setIsPropertyGrandTotalRemoved(c.getIsPropertyGrandTotalRemoved());
        e.setIsPropertyIsViewedRemoved(c.getIsPropertyIsViewedRemoved());
        e.setIsPropertyInvoicePerShipmentRemoved(c.getIsPropertyInvoicePerShipmentRemoved());
        e.setIsPropertyMemoRemoved(c.getIsPropertyMemoRemoved());
        ((AbstractOrderEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (OrderRoleCommand innerCommand : c.getOrderRoleCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            OrderRoleEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addOrderRoleEvent(innerEvent);
        }

        for (OrderContactMechCommand innerCommand : c.getOrderContactMechCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            OrderContactMechEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addOrderContactMechEvent(innerEvent);
        }

        for (OrderItemCommand innerCommand : c.getOrderItemCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            OrderItemEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addOrderItemEvent(innerEvent);
        }

        for (OrderAdjustmentCommand innerCommand : c.getOrderAdjustmentCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            OrderAdjustmentEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addOrderAdjustmentEvent(innerEvent);
        }

        for (OrderShipGroupCommand innerCommand : c.getOrderShipGroupCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            OrderShipGroupEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addOrderShipGroupEvent(innerEvent);
        }

        return e;
    }

    protected OrderEvent map(OrderCommand.DeleteOrder c) {
        OrderEventId stateEventId = new OrderEventId(c.getOrderId(), c.getVersion());
        OrderEvent.OrderStateDeleted e = newOrderStateDeleted(stateEventId);
        ((AbstractOrderEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    protected OrderRoleEvent map(OrderRoleCommand c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        OrderRoleCommand.CreateOrderRole create = (c.getCommandType().equals(CommandType.CREATE)) ? ((OrderRoleCommand.CreateOrderRole)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        OrderRoleCommand.MergePatchOrderRole merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((OrderRoleCommand.MergePatchOrderRole)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        OrderRoleCommand.RemoveOrderRole remove = (c.getCommandType().equals(CommandType.REMOVE)) ? ((OrderRoleCommand.RemoveOrderRole)c) : null;
        if (remove != null) {
            return mapRemove(remove, outerCommand, version, outerState);
        }
        throw new UnsupportedOperationException();
    }

    protected OrderRoleEvent.OrderRoleStateCreated mapCreate(OrderRoleCommand.CreateOrderRole c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderRoleEventId stateEventId = new OrderRoleEventId(outerState.getOrderId(), c.getPartyRoleId(), version);
        OrderRoleEvent.OrderRoleStateCreated e = newOrderRoleStateCreated(stateEventId);
        OrderRoleState s = ((EntityStateCollection.ModifiableEntityStateCollection<PartyRoleId, OrderRoleState>)outerState.getOrderRoles()).getOrAddDefault(c.getPartyRoleId());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected OrderRoleEvent.OrderRoleStateMergePatched mapMergePatch(OrderRoleCommand.MergePatchOrderRole c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderRoleEventId stateEventId = new OrderRoleEventId(outerState.getOrderId(), c.getPartyRoleId(), version);
        OrderRoleEvent.OrderRoleStateMergePatched e = newOrderRoleStateMergePatched(stateEventId);
        OrderRoleState s = ((EntityStateCollection.ModifiableEntityStateCollection<PartyRoleId, OrderRoleState>)outerState.getOrderRoles()).getOrAddDefault(c.getPartyRoleId());


        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected OrderRoleEvent.OrderRoleStateRemoved mapRemove(OrderRoleCommand.RemoveOrderRole c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderRoleEventId stateEventId = new OrderRoleEventId(outerState.getOrderId(), c.getPartyRoleId(), version);
        OrderRoleEvent.OrderRoleStateRemoved e = newOrderRoleStateRemoved(stateEventId);

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IRemove... ////////////////////////////


    protected OrderContactMechEvent map(OrderContactMechCommand c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        OrderContactMechCommand.CreateOrderContactMech create = (c.getCommandType().equals(CommandType.CREATE)) ? ((OrderContactMechCommand.CreateOrderContactMech)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        OrderContactMechCommand.MergePatchOrderContactMech merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((OrderContactMechCommand.MergePatchOrderContactMech)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        OrderContactMechCommand.RemoveOrderContactMech remove = (c.getCommandType().equals(CommandType.REMOVE)) ? ((OrderContactMechCommand.RemoveOrderContactMech)c) : null;
        if (remove != null) {
            return mapRemove(remove, outerCommand, version, outerState);
        }
        throw new UnsupportedOperationException();
    }

    protected OrderContactMechEvent.OrderContactMechStateCreated mapCreate(OrderContactMechCommand.CreateOrderContactMech c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderContactMechEventId stateEventId = new OrderContactMechEventId(outerState.getOrderId(), c.getContactMechPurposeTypeId(), version);
        OrderContactMechEvent.OrderContactMechStateCreated e = newOrderContactMechStateCreated(stateEventId);
        OrderContactMechState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderContactMechState>)outerState.getOrderContactMechanisms()).getOrAddDefault(c.getContactMechPurposeTypeId());

        e.setContactMechId(c.getContactMechId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected OrderContactMechEvent.OrderContactMechStateMergePatched mapMergePatch(OrderContactMechCommand.MergePatchOrderContactMech c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderContactMechEventId stateEventId = new OrderContactMechEventId(outerState.getOrderId(), c.getContactMechPurposeTypeId(), version);
        OrderContactMechEvent.OrderContactMechStateMergePatched e = newOrderContactMechStateMergePatched(stateEventId);
        OrderContactMechState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderContactMechState>)outerState.getOrderContactMechanisms()).getOrAddDefault(c.getContactMechPurposeTypeId());

        e.setContactMechId(c.getContactMechId());
        e.setIsPropertyContactMechIdRemoved(c.getIsPropertyContactMechIdRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected OrderContactMechEvent.OrderContactMechStateRemoved mapRemove(OrderContactMechCommand.RemoveOrderContactMech c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderContactMechEventId stateEventId = new OrderContactMechEventId(outerState.getOrderId(), c.getContactMechPurposeTypeId(), version);
        OrderContactMechEvent.OrderContactMechStateRemoved e = newOrderContactMechStateRemoved(stateEventId);

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IRemove... ////////////////////////////


    protected OrderItemEvent map(OrderItemCommand c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        OrderItemCommand.CreateOrderItem create = (c.getCommandType().equals(CommandType.CREATE)) ? ((OrderItemCommand.CreateOrderItem)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        OrderItemCommand.MergePatchOrderItem merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((OrderItemCommand.MergePatchOrderItem)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        OrderItemCommand.RemoveOrderItem remove = (c.getCommandType().equals(CommandType.REMOVE)) ? ((OrderItemCommand.RemoveOrderItem)c) : null;
        if (remove != null) {
            return mapRemove(remove, outerCommand, version, outerState);
        }
        throw new UnsupportedOperationException();
    }

    protected OrderItemEvent.OrderItemStateCreated mapCreate(OrderItemCommand.CreateOrderItem c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderItemEventId stateEventId = new OrderItemEventId(outerState.getOrderId(), c.getOrderItemSeqId(), version);
        OrderItemEvent.OrderItemStateCreated e = newOrderItemStateCreated(stateEventId);
        OrderItemState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderItemState>)outerState.getOrderItems()).getOrAddDefault(c.getOrderItemSeqId());

        e.setExternalId(c.getExternalId());
        e.setOrderItemTypeId(c.getOrderItemTypeId());
        e.setOrderItemGroupSeqId(c.getOrderItemGroupSeqId());
        e.setIsItemGroupPrimary(c.getIsItemGroupPrimary());
        e.setFromInventoryItemId(c.getFromInventoryItemId());
        e.setBudgetId(c.getBudgetId());
        e.setBudgetItemSeqId(c.getBudgetItemSeqId());
        e.setProductId(c.getProductId());
        e.setSupplierProductId(c.getSupplierProductId());
        e.setProductFeatureId(c.getProductFeatureId());
        e.setProdCatalogId(c.getProdCatalogId());
        e.setProductCategoryId(c.getProductCategoryId());
        e.setIsPromo(c.getIsPromo());
        e.setQuoteId(c.getQuoteId());
        e.setQuoteItemSeqId(c.getQuoteItemSeqId());
        e.setShoppingListId(c.getShoppingListId());
        e.setShoppingListItemSeqId(c.getShoppingListItemSeqId());
        e.setSubscriptionId(c.getSubscriptionId());
        e.setDeploymentId(c.getDeploymentId());
        e.setQuantity(c.getQuantity());
        e.setCancelQuantity(c.getCancelQuantity());
        e.setSelectedAmount(c.getSelectedAmount());
        e.setUnitPrice(c.getUnitPrice());
        e.setUnitListPrice(c.getUnitListPrice());
        e.setUnitAverageCost(c.getUnitAverageCost());
        e.setUnitRecurringPrice(c.getUnitRecurringPrice());
        e.setIsModifiedPrice(c.getIsModifiedPrice());
        e.setRecurringFreqUomId(c.getRecurringFreqUomId());
        e.setItemDescription(c.getItemDescription());
        e.setComments(c.getComments());
        e.setCorrespondingPoId(c.getCorrespondingPoId());
        e.setStatusId(c.getStatusId());
        e.setSyncStatusId(c.getSyncStatusId());
        e.setEstimatedShipDate(c.getEstimatedShipDate());
        e.setEstimatedDeliveryDate(c.getEstimatedDeliveryDate());
        e.setAutoCancelDate(c.getAutoCancelDate());
        e.setShipBeforeDate(c.getShipBeforeDate());
        e.setShipAfterDate(c.getShipAfterDate());
        e.setCancelBackOrderDate(c.getCancelBackOrderDate());
        e.setOverrideGlAccountId(c.getOverrideGlAccountId());
        e.setSalesOpportunityId(c.getSalesOpportunityId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected OrderItemEvent.OrderItemStateMergePatched mapMergePatch(OrderItemCommand.MergePatchOrderItem c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderItemEventId stateEventId = new OrderItemEventId(outerState.getOrderId(), c.getOrderItemSeqId(), version);
        OrderItemEvent.OrderItemStateMergePatched e = newOrderItemStateMergePatched(stateEventId);
        OrderItemState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderItemState>)outerState.getOrderItems()).getOrAddDefault(c.getOrderItemSeqId());

        e.setExternalId(c.getExternalId());
        e.setOrderItemTypeId(c.getOrderItemTypeId());
        e.setOrderItemGroupSeqId(c.getOrderItemGroupSeqId());
        e.setIsItemGroupPrimary(c.getIsItemGroupPrimary());
        e.setFromInventoryItemId(c.getFromInventoryItemId());
        e.setBudgetId(c.getBudgetId());
        e.setBudgetItemSeqId(c.getBudgetItemSeqId());
        e.setProductId(c.getProductId());
        e.setSupplierProductId(c.getSupplierProductId());
        e.setProductFeatureId(c.getProductFeatureId());
        e.setProdCatalogId(c.getProdCatalogId());
        e.setProductCategoryId(c.getProductCategoryId());
        e.setIsPromo(c.getIsPromo());
        e.setQuoteId(c.getQuoteId());
        e.setQuoteItemSeqId(c.getQuoteItemSeqId());
        e.setShoppingListId(c.getShoppingListId());
        e.setShoppingListItemSeqId(c.getShoppingListItemSeqId());
        e.setSubscriptionId(c.getSubscriptionId());
        e.setDeploymentId(c.getDeploymentId());
        e.setQuantity(c.getQuantity());
        e.setCancelQuantity(c.getCancelQuantity());
        e.setSelectedAmount(c.getSelectedAmount());
        e.setUnitPrice(c.getUnitPrice());
        e.setUnitListPrice(c.getUnitListPrice());
        e.setUnitAverageCost(c.getUnitAverageCost());
        e.setUnitRecurringPrice(c.getUnitRecurringPrice());
        e.setIsModifiedPrice(c.getIsModifiedPrice());
        e.setRecurringFreqUomId(c.getRecurringFreqUomId());
        e.setItemDescription(c.getItemDescription());
        e.setComments(c.getComments());
        e.setCorrespondingPoId(c.getCorrespondingPoId());
        e.setStatusId(c.getStatusId());
        e.setSyncStatusId(c.getSyncStatusId());
        e.setEstimatedShipDate(c.getEstimatedShipDate());
        e.setEstimatedDeliveryDate(c.getEstimatedDeliveryDate());
        e.setAutoCancelDate(c.getAutoCancelDate());
        e.setShipBeforeDate(c.getShipBeforeDate());
        e.setShipAfterDate(c.getShipAfterDate());
        e.setCancelBackOrderDate(c.getCancelBackOrderDate());
        e.setOverrideGlAccountId(c.getOverrideGlAccountId());
        e.setSalesOpportunityId(c.getSalesOpportunityId());
        e.setIsPropertyExternalIdRemoved(c.getIsPropertyExternalIdRemoved());
        e.setIsPropertyOrderItemTypeIdRemoved(c.getIsPropertyOrderItemTypeIdRemoved());
        e.setIsPropertyOrderItemGroupSeqIdRemoved(c.getIsPropertyOrderItemGroupSeqIdRemoved());
        e.setIsPropertyIsItemGroupPrimaryRemoved(c.getIsPropertyIsItemGroupPrimaryRemoved());
        e.setIsPropertyFromInventoryItemIdRemoved(c.getIsPropertyFromInventoryItemIdRemoved());
        e.setIsPropertyBudgetIdRemoved(c.getIsPropertyBudgetIdRemoved());
        e.setIsPropertyBudgetItemSeqIdRemoved(c.getIsPropertyBudgetItemSeqIdRemoved());
        e.setIsPropertyProductIdRemoved(c.getIsPropertyProductIdRemoved());
        e.setIsPropertySupplierProductIdRemoved(c.getIsPropertySupplierProductIdRemoved());
        e.setIsPropertyProductFeatureIdRemoved(c.getIsPropertyProductFeatureIdRemoved());
        e.setIsPropertyProdCatalogIdRemoved(c.getIsPropertyProdCatalogIdRemoved());
        e.setIsPropertyProductCategoryIdRemoved(c.getIsPropertyProductCategoryIdRemoved());
        e.setIsPropertyIsPromoRemoved(c.getIsPropertyIsPromoRemoved());
        e.setIsPropertyQuoteIdRemoved(c.getIsPropertyQuoteIdRemoved());
        e.setIsPropertyQuoteItemSeqIdRemoved(c.getIsPropertyQuoteItemSeqIdRemoved());
        e.setIsPropertyShoppingListIdRemoved(c.getIsPropertyShoppingListIdRemoved());
        e.setIsPropertyShoppingListItemSeqIdRemoved(c.getIsPropertyShoppingListItemSeqIdRemoved());
        e.setIsPropertySubscriptionIdRemoved(c.getIsPropertySubscriptionIdRemoved());
        e.setIsPropertyDeploymentIdRemoved(c.getIsPropertyDeploymentIdRemoved());
        e.setIsPropertyQuantityRemoved(c.getIsPropertyQuantityRemoved());
        e.setIsPropertyCancelQuantityRemoved(c.getIsPropertyCancelQuantityRemoved());
        e.setIsPropertySelectedAmountRemoved(c.getIsPropertySelectedAmountRemoved());
        e.setIsPropertyUnitPriceRemoved(c.getIsPropertyUnitPriceRemoved());
        e.setIsPropertyUnitListPriceRemoved(c.getIsPropertyUnitListPriceRemoved());
        e.setIsPropertyUnitAverageCostRemoved(c.getIsPropertyUnitAverageCostRemoved());
        e.setIsPropertyUnitRecurringPriceRemoved(c.getIsPropertyUnitRecurringPriceRemoved());
        e.setIsPropertyIsModifiedPriceRemoved(c.getIsPropertyIsModifiedPriceRemoved());
        e.setIsPropertyRecurringFreqUomIdRemoved(c.getIsPropertyRecurringFreqUomIdRemoved());
        e.setIsPropertyItemDescriptionRemoved(c.getIsPropertyItemDescriptionRemoved());
        e.setIsPropertyCommentsRemoved(c.getIsPropertyCommentsRemoved());
        e.setIsPropertyCorrespondingPoIdRemoved(c.getIsPropertyCorrespondingPoIdRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertySyncStatusIdRemoved(c.getIsPropertySyncStatusIdRemoved());
        e.setIsPropertyEstimatedShipDateRemoved(c.getIsPropertyEstimatedShipDateRemoved());
        e.setIsPropertyEstimatedDeliveryDateRemoved(c.getIsPropertyEstimatedDeliveryDateRemoved());
        e.setIsPropertyAutoCancelDateRemoved(c.getIsPropertyAutoCancelDateRemoved());
        e.setIsPropertyShipBeforeDateRemoved(c.getIsPropertyShipBeforeDateRemoved());
        e.setIsPropertyShipAfterDateRemoved(c.getIsPropertyShipAfterDateRemoved());
        e.setIsPropertyCancelBackOrderDateRemoved(c.getIsPropertyCancelBackOrderDateRemoved());
        e.setIsPropertyOverrideGlAccountIdRemoved(c.getIsPropertyOverrideGlAccountIdRemoved());
        e.setIsPropertySalesOpportunityIdRemoved(c.getIsPropertySalesOpportunityIdRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected OrderItemEvent.OrderItemStateRemoved mapRemove(OrderItemCommand.RemoveOrderItem c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderItemEventId stateEventId = new OrderItemEventId(outerState.getOrderId(), c.getOrderItemSeqId(), version);
        OrderItemEvent.OrderItemStateRemoved e = newOrderItemStateRemoved(stateEventId);

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IRemove... ////////////////////////////


    protected OrderAdjustmentEvent map(OrderAdjustmentCommand c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        OrderAdjustmentCommand.CreateOrderAdjustment create = (c.getCommandType().equals(CommandType.CREATE)) ? ((OrderAdjustmentCommand.CreateOrderAdjustment)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        OrderAdjustmentCommand.MergePatchOrderAdjustment merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((OrderAdjustmentCommand.MergePatchOrderAdjustment)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        OrderAdjustmentCommand.RemoveOrderAdjustment remove = (c.getCommandType().equals(CommandType.REMOVE)) ? ((OrderAdjustmentCommand.RemoveOrderAdjustment)c) : null;
        if (remove != null) {
            return mapRemove(remove, outerCommand, version, outerState);
        }
        throw new UnsupportedOperationException();
    }

    protected OrderAdjustmentEvent.OrderAdjustmentStateCreated mapCreate(OrderAdjustmentCommand.CreateOrderAdjustment c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderAdjustmentEventId stateEventId = new OrderAdjustmentEventId(outerState.getOrderId(), c.getOrderAdjustmentId(), version);
        OrderAdjustmentEvent.OrderAdjustmentStateCreated e = newOrderAdjustmentStateCreated(stateEventId);
        OrderAdjustmentState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderAdjustmentState>)outerState.getOrderAdjustments()).getOrAddDefault(c.getOrderAdjustmentId());

        e.setOrderAdjustmentTypeId(c.getOrderAdjustmentTypeId());
        e.setOrderItemSeqId(c.getOrderItemSeqId());
        e.setShipGroupSeqId(c.getShipGroupSeqId());
        e.setComments(c.getComments());
        e.setDescription(c.getDescription());
        e.setAmount(c.getAmount());
        e.setCurrencyUomId(c.getCurrencyUomId());
        e.setRecurringAmount(c.getRecurringAmount());
        e.setAmountAlreadyIncluded(c.getAmountAlreadyIncluded());
        e.setProductPromoId(c.getProductPromoId());
        e.setProductPromoRuleId(c.getProductPromoRuleId());
        e.setProductPromoActionSeqId(c.getProductPromoActionSeqId());
        e.setProductFeatureId(c.getProductFeatureId());
        e.setCorrespondingProductId(c.getCorrespondingProductId());
        e.setTaxAuthorityRateSeqId(c.getTaxAuthorityRateSeqId());
        e.setSourceReferenceId(c.getSourceReferenceId());
        e.setSourcePercentage(c.getSourcePercentage());
        e.setCustomerReferenceId(c.getCustomerReferenceId());
        e.setPrimaryGeoId(c.getPrimaryGeoId());
        e.setSecondaryGeoId(c.getSecondaryGeoId());
        e.setExemptAmount(c.getExemptAmount());
        e.setTaxAuthGeoId(c.getTaxAuthGeoId());
        e.setTaxAuthPartyId(c.getTaxAuthPartyId());
        e.setOverrideGlAccountId(c.getOverrideGlAccountId());
        e.setIncludeInTax(c.getIncludeInTax());
        e.setIncludeInShipping(c.getIncludeInShipping());
        e.setIsManual(c.getIsManual());
        e.setOriginalAdjustmentId(c.getOriginalAdjustmentId());
        e.setOldAmountPerQuantity(c.getOldAmountPerQuantity());
        e.setOldPercentage(c.getOldPercentage());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected OrderAdjustmentEvent.OrderAdjustmentStateMergePatched mapMergePatch(OrderAdjustmentCommand.MergePatchOrderAdjustment c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderAdjustmentEventId stateEventId = new OrderAdjustmentEventId(outerState.getOrderId(), c.getOrderAdjustmentId(), version);
        OrderAdjustmentEvent.OrderAdjustmentStateMergePatched e = newOrderAdjustmentStateMergePatched(stateEventId);
        OrderAdjustmentState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderAdjustmentState>)outerState.getOrderAdjustments()).getOrAddDefault(c.getOrderAdjustmentId());

        e.setOrderAdjustmentTypeId(c.getOrderAdjustmentTypeId());
        e.setOrderItemSeqId(c.getOrderItemSeqId());
        e.setShipGroupSeqId(c.getShipGroupSeqId());
        e.setComments(c.getComments());
        e.setDescription(c.getDescription());
        e.setAmount(c.getAmount());
        e.setCurrencyUomId(c.getCurrencyUomId());
        e.setRecurringAmount(c.getRecurringAmount());
        e.setAmountAlreadyIncluded(c.getAmountAlreadyIncluded());
        e.setProductPromoId(c.getProductPromoId());
        e.setProductPromoRuleId(c.getProductPromoRuleId());
        e.setProductPromoActionSeqId(c.getProductPromoActionSeqId());
        e.setProductFeatureId(c.getProductFeatureId());
        e.setCorrespondingProductId(c.getCorrespondingProductId());
        e.setTaxAuthorityRateSeqId(c.getTaxAuthorityRateSeqId());
        e.setSourceReferenceId(c.getSourceReferenceId());
        e.setSourcePercentage(c.getSourcePercentage());
        e.setCustomerReferenceId(c.getCustomerReferenceId());
        e.setPrimaryGeoId(c.getPrimaryGeoId());
        e.setSecondaryGeoId(c.getSecondaryGeoId());
        e.setExemptAmount(c.getExemptAmount());
        e.setTaxAuthGeoId(c.getTaxAuthGeoId());
        e.setTaxAuthPartyId(c.getTaxAuthPartyId());
        e.setOverrideGlAccountId(c.getOverrideGlAccountId());
        e.setIncludeInTax(c.getIncludeInTax());
        e.setIncludeInShipping(c.getIncludeInShipping());
        e.setIsManual(c.getIsManual());
        e.setOriginalAdjustmentId(c.getOriginalAdjustmentId());
        e.setOldAmountPerQuantity(c.getOldAmountPerQuantity());
        e.setOldPercentage(c.getOldPercentage());
        e.setIsPropertyOrderAdjustmentTypeIdRemoved(c.getIsPropertyOrderAdjustmentTypeIdRemoved());
        e.setIsPropertyOrderItemSeqIdRemoved(c.getIsPropertyOrderItemSeqIdRemoved());
        e.setIsPropertyShipGroupSeqIdRemoved(c.getIsPropertyShipGroupSeqIdRemoved());
        e.setIsPropertyCommentsRemoved(c.getIsPropertyCommentsRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyAmountRemoved(c.getIsPropertyAmountRemoved());
        e.setIsPropertyCurrencyUomIdRemoved(c.getIsPropertyCurrencyUomIdRemoved());
        e.setIsPropertyRecurringAmountRemoved(c.getIsPropertyRecurringAmountRemoved());
        e.setIsPropertyAmountAlreadyIncludedRemoved(c.getIsPropertyAmountAlreadyIncludedRemoved());
        e.setIsPropertyProductPromoIdRemoved(c.getIsPropertyProductPromoIdRemoved());
        e.setIsPropertyProductPromoRuleIdRemoved(c.getIsPropertyProductPromoRuleIdRemoved());
        e.setIsPropertyProductPromoActionSeqIdRemoved(c.getIsPropertyProductPromoActionSeqIdRemoved());
        e.setIsPropertyProductFeatureIdRemoved(c.getIsPropertyProductFeatureIdRemoved());
        e.setIsPropertyCorrespondingProductIdRemoved(c.getIsPropertyCorrespondingProductIdRemoved());
        e.setIsPropertyTaxAuthorityRateSeqIdRemoved(c.getIsPropertyTaxAuthorityRateSeqIdRemoved());
        e.setIsPropertySourceReferenceIdRemoved(c.getIsPropertySourceReferenceIdRemoved());
        e.setIsPropertySourcePercentageRemoved(c.getIsPropertySourcePercentageRemoved());
        e.setIsPropertyCustomerReferenceIdRemoved(c.getIsPropertyCustomerReferenceIdRemoved());
        e.setIsPropertyPrimaryGeoIdRemoved(c.getIsPropertyPrimaryGeoIdRemoved());
        e.setIsPropertySecondaryGeoIdRemoved(c.getIsPropertySecondaryGeoIdRemoved());
        e.setIsPropertyExemptAmountRemoved(c.getIsPropertyExemptAmountRemoved());
        e.setIsPropertyTaxAuthGeoIdRemoved(c.getIsPropertyTaxAuthGeoIdRemoved());
        e.setIsPropertyTaxAuthPartyIdRemoved(c.getIsPropertyTaxAuthPartyIdRemoved());
        e.setIsPropertyOverrideGlAccountIdRemoved(c.getIsPropertyOverrideGlAccountIdRemoved());
        e.setIsPropertyIncludeInTaxRemoved(c.getIsPropertyIncludeInTaxRemoved());
        e.setIsPropertyIncludeInShippingRemoved(c.getIsPropertyIncludeInShippingRemoved());
        e.setIsPropertyIsManualRemoved(c.getIsPropertyIsManualRemoved());
        e.setIsPropertyOriginalAdjustmentIdRemoved(c.getIsPropertyOriginalAdjustmentIdRemoved());
        e.setIsPropertyOldAmountPerQuantityRemoved(c.getIsPropertyOldAmountPerQuantityRemoved());
        e.setIsPropertyOldPercentageRemoved(c.getIsPropertyOldPercentageRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected OrderAdjustmentEvent.OrderAdjustmentStateRemoved mapRemove(OrderAdjustmentCommand.RemoveOrderAdjustment c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderAdjustmentEventId stateEventId = new OrderAdjustmentEventId(outerState.getOrderId(), c.getOrderAdjustmentId(), version);
        OrderAdjustmentEvent.OrderAdjustmentStateRemoved e = newOrderAdjustmentStateRemoved(stateEventId);

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IRemove... ////////////////////////////


    protected OrderShipGroupEvent map(OrderShipGroupCommand c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        OrderShipGroupCommand.CreateOrderShipGroup create = (c.getCommandType().equals(CommandType.CREATE)) ? ((OrderShipGroupCommand.CreateOrderShipGroup)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        OrderShipGroupCommand.MergePatchOrderShipGroup merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((OrderShipGroupCommand.MergePatchOrderShipGroup)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        OrderShipGroupCommand.RemoveOrderShipGroup remove = (c.getCommandType().equals(CommandType.REMOVE)) ? ((OrderShipGroupCommand.RemoveOrderShipGroup)c) : null;
        if (remove != null) {
            return mapRemove(remove, outerCommand, version, outerState);
        }
        throw new UnsupportedOperationException();
    }

    protected OrderShipGroupEvent.OrderShipGroupStateCreated mapCreate(OrderShipGroupCommand.CreateOrderShipGroup c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderShipGroupEventId stateEventId = new OrderShipGroupEventId(outerState.getOrderId(), c.getShipGroupSeqId(), version);
        OrderShipGroupEvent.OrderShipGroupStateCreated e = newOrderShipGroupStateCreated(stateEventId);
        OrderShipGroupState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderShipGroupState>)outerState.getOrderShipGroups()).getOrAddDefault(c.getShipGroupSeqId());

        e.setShipmentMethodTypeId(c.getShipmentMethodTypeId());
        e.setSupplierPartyId(c.getSupplierPartyId());
        e.setVendorPartyId(c.getVendorPartyId());
        e.setCarrierPartyId(c.getCarrierPartyId());
        e.setCarrierRoleTypeId(c.getCarrierRoleTypeId());
        e.setFacilityId(c.getFacilityId());
        e.setContactMechId(c.getContactMechId());
        e.setTelecomContactMechId(c.getTelecomContactMechId());
        e.setTrackingNumber(c.getTrackingNumber());
        e.setShippingInstructions(c.getShippingInstructions());
        e.setMaySplit(c.getMaySplit());
        e.setGiftMessage(c.getGiftMessage());
        e.setIsGift(c.getIsGift());
        e.setShipAfterDate(c.getShipAfterDate());
        e.setShipByDate(c.getShipByDate());
        e.setEstimatedShipDate(c.getEstimatedShipDate());
        e.setEstimatedDeliveryDate(c.getEstimatedDeliveryDate());
        e.setSupplierCurrencyUomId(c.getSupplierCurrencyUomId());
        e.setSupplierPayableAmount(c.getSupplierPayableAmount());
        e.setSupplierSyncStatusId(c.getSupplierSyncStatusId());
        e.setSupplierSyncCode(c.getSupplierSyncCode());
        e.setSupplierSyncMessage(c.getSupplierSyncMessage());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));


        for (OrderItemShipGroupAssociationCommand.CreateOrderItemShipGroupAssociation innerCommand : c.getCreateOrderItemShipGroupAssociationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);

            OrderItemShipGroupAssociationEvent.OrderItemShipGroupAssociationStateCreated innerEvent = mapCreate(innerCommand, c, version, s);
            e.addOrderItemShipGroupAssociationEvent(innerEvent);
        }

        return e;

    }// END map(ICreate... ////////////////////////////

    protected OrderShipGroupEvent.OrderShipGroupStateMergePatched mapMergePatch(OrderShipGroupCommand.MergePatchOrderShipGroup c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderShipGroupEventId stateEventId = new OrderShipGroupEventId(outerState.getOrderId(), c.getShipGroupSeqId(), version);
        OrderShipGroupEvent.OrderShipGroupStateMergePatched e = newOrderShipGroupStateMergePatched(stateEventId);
        OrderShipGroupState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderShipGroupState>)outerState.getOrderShipGroups()).getOrAddDefault(c.getShipGroupSeqId());

        e.setShipmentMethodTypeId(c.getShipmentMethodTypeId());
        e.setSupplierPartyId(c.getSupplierPartyId());
        e.setVendorPartyId(c.getVendorPartyId());
        e.setCarrierPartyId(c.getCarrierPartyId());
        e.setCarrierRoleTypeId(c.getCarrierRoleTypeId());
        e.setFacilityId(c.getFacilityId());
        e.setContactMechId(c.getContactMechId());
        e.setTelecomContactMechId(c.getTelecomContactMechId());
        e.setTrackingNumber(c.getTrackingNumber());
        e.setShippingInstructions(c.getShippingInstructions());
        e.setMaySplit(c.getMaySplit());
        e.setGiftMessage(c.getGiftMessage());
        e.setIsGift(c.getIsGift());
        e.setShipAfterDate(c.getShipAfterDate());
        e.setShipByDate(c.getShipByDate());
        e.setEstimatedShipDate(c.getEstimatedShipDate());
        e.setEstimatedDeliveryDate(c.getEstimatedDeliveryDate());
        e.setSupplierCurrencyUomId(c.getSupplierCurrencyUomId());
        e.setSupplierPayableAmount(c.getSupplierPayableAmount());
        e.setSupplierSyncStatusId(c.getSupplierSyncStatusId());
        e.setSupplierSyncCode(c.getSupplierSyncCode());
        e.setSupplierSyncMessage(c.getSupplierSyncMessage());
        e.setIsPropertyShipmentMethodTypeIdRemoved(c.getIsPropertyShipmentMethodTypeIdRemoved());
        e.setIsPropertySupplierPartyIdRemoved(c.getIsPropertySupplierPartyIdRemoved());
        e.setIsPropertyVendorPartyIdRemoved(c.getIsPropertyVendorPartyIdRemoved());
        e.setIsPropertyCarrierPartyIdRemoved(c.getIsPropertyCarrierPartyIdRemoved());
        e.setIsPropertyCarrierRoleTypeIdRemoved(c.getIsPropertyCarrierRoleTypeIdRemoved());
        e.setIsPropertyFacilityIdRemoved(c.getIsPropertyFacilityIdRemoved());
        e.setIsPropertyContactMechIdRemoved(c.getIsPropertyContactMechIdRemoved());
        e.setIsPropertyTelecomContactMechIdRemoved(c.getIsPropertyTelecomContactMechIdRemoved());
        e.setIsPropertyTrackingNumberRemoved(c.getIsPropertyTrackingNumberRemoved());
        e.setIsPropertyShippingInstructionsRemoved(c.getIsPropertyShippingInstructionsRemoved());
        e.setIsPropertyMaySplitRemoved(c.getIsPropertyMaySplitRemoved());
        e.setIsPropertyGiftMessageRemoved(c.getIsPropertyGiftMessageRemoved());
        e.setIsPropertyIsGiftRemoved(c.getIsPropertyIsGiftRemoved());
        e.setIsPropertyShipAfterDateRemoved(c.getIsPropertyShipAfterDateRemoved());
        e.setIsPropertyShipByDateRemoved(c.getIsPropertyShipByDateRemoved());
        e.setIsPropertyEstimatedShipDateRemoved(c.getIsPropertyEstimatedShipDateRemoved());
        e.setIsPropertyEstimatedDeliveryDateRemoved(c.getIsPropertyEstimatedDeliveryDateRemoved());
        e.setIsPropertySupplierCurrencyUomIdRemoved(c.getIsPropertySupplierCurrencyUomIdRemoved());
        e.setIsPropertySupplierPayableAmountRemoved(c.getIsPropertySupplierPayableAmountRemoved());
        e.setIsPropertySupplierSyncStatusIdRemoved(c.getIsPropertySupplierSyncStatusIdRemoved());
        e.setIsPropertySupplierSyncCodeRemoved(c.getIsPropertySupplierSyncCodeRemoved());
        e.setIsPropertySupplierSyncMessageRemoved(c.getIsPropertySupplierSyncMessageRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));


        for (OrderItemShipGroupAssociationCommand innerCommand : c.getOrderItemShipGroupAssociationCommands()) {
                    throwOnInconsistentCommands(c, innerCommand);

            OrderItemShipGroupAssociationEvent innerEvent = map(innerCommand, c, version, s);
            e.addOrderItemShipGroupAssociationEvent(innerEvent);
        }

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected OrderShipGroupEvent.OrderShipGroupStateRemoved mapRemove(OrderShipGroupCommand.RemoveOrderShipGroup c, OrderCommand outerCommand, Long version, OrderHeaderState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderShipGroupEventId stateEventId = new OrderShipGroupEventId(outerState.getOrderId(), c.getShipGroupSeqId(), version);
        OrderShipGroupEvent.OrderShipGroupStateRemoved e = newOrderShipGroupStateRemoved(stateEventId);

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IRemove... ////////////////////////////


    protected OrderItemShipGroupAssociationEvent map(OrderItemShipGroupAssociationCommand c, OrderShipGroupCommand outerCommand, Long version, OrderShipGroupState outerState) {
        OrderItemShipGroupAssociationCommand.CreateOrderItemShipGroupAssociation create = (c.getCommandType().equals(CommandType.CREATE)) ? ((OrderItemShipGroupAssociationCommand.CreateOrderItemShipGroupAssociation)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        OrderItemShipGroupAssociationCommand.MergePatchOrderItemShipGroupAssociation merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((OrderItemShipGroupAssociationCommand.MergePatchOrderItemShipGroupAssociation)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        OrderItemShipGroupAssociationCommand.RemoveOrderItemShipGroupAssociation remove = (c.getCommandType().equals(CommandType.REMOVE)) ? ((OrderItemShipGroupAssociationCommand.RemoveOrderItemShipGroupAssociation)c) : null;
        if (remove != null) {
            return mapRemove(remove, outerCommand, version, outerState);
        }
        throw new UnsupportedOperationException();
    }

    protected OrderItemShipGroupAssociationEvent.OrderItemShipGroupAssociationStateCreated mapCreate(OrderItemShipGroupAssociationCommand.CreateOrderItemShipGroupAssociation c, OrderShipGroupCommand outerCommand, Long version, OrderShipGroupState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderItemShipGroupAssociationEventId stateEventId = new OrderItemShipGroupAssociationEventId(outerState.getOrderId(), outerState.getShipGroupSeqId(), c.getOrderItemSeqId(), version);
        OrderItemShipGroupAssociationEvent.OrderItemShipGroupAssociationStateCreated e = newOrderItemShipGroupAssociationStateCreated(stateEventId);
        OrderItemShipGroupAssociationState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderItemShipGroupAssociationState>)outerState.getOrderItemShipGroupAssociations()).getOrAddDefault(c.getOrderItemSeqId());

        e.setQuantity(c.getQuantity());
        e.setCancelQuantity(c.getCancelQuantity());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected OrderItemShipGroupAssociationEvent.OrderItemShipGroupAssociationStateMergePatched mapMergePatch(OrderItemShipGroupAssociationCommand.MergePatchOrderItemShipGroupAssociation c, OrderShipGroupCommand outerCommand, Long version, OrderShipGroupState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderItemShipGroupAssociationEventId stateEventId = new OrderItemShipGroupAssociationEventId(outerState.getOrderId(), outerState.getShipGroupSeqId(), c.getOrderItemSeqId(), version);
        OrderItemShipGroupAssociationEvent.OrderItemShipGroupAssociationStateMergePatched e = newOrderItemShipGroupAssociationStateMergePatched(stateEventId);
        OrderItemShipGroupAssociationState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, OrderItemShipGroupAssociationState>)outerState.getOrderItemShipGroupAssociations()).getOrAddDefault(c.getOrderItemSeqId());

        e.setQuantity(c.getQuantity());
        e.setCancelQuantity(c.getCancelQuantity());
        e.setIsPropertyQuantityRemoved(c.getIsPropertyQuantityRemoved());
        e.setIsPropertyCancelQuantityRemoved(c.getIsPropertyCancelQuantityRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected OrderItemShipGroupAssociationEvent.OrderItemShipGroupAssociationStateRemoved mapRemove(OrderItemShipGroupAssociationCommand.RemoveOrderItemShipGroupAssociation c, OrderShipGroupCommand outerCommand, Long version, OrderShipGroupState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        OrderItemShipGroupAssociationEventId stateEventId = new OrderItemShipGroupAssociationEventId(outerState.getOrderId(), outerState.getShipGroupSeqId(), c.getOrderItemSeqId(), version);
        OrderItemShipGroupAssociationEvent.OrderItemShipGroupAssociationStateRemoved e = newOrderItemShipGroupAssociationStateRemoved(stateEventId);

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IRemove... ////////////////////////////

    protected void throwOnInconsistentCommands(OrderCommand command, OrderRoleCommand innerCommand) {
        AbstractOrderCommand properties = command instanceof AbstractOrderCommand ? (AbstractOrderCommand) command : null;
        AbstractOrderRoleCommand innerProperties = innerCommand instanceof AbstractOrderRoleCommand ? (AbstractOrderRoleCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerOrderIdName = "OrderId";
        String outerOrderIdValue = properties.getOrderId();
        String innerOrderIdName = "OrderId";
        String innerOrderIdValue = innerProperties.getOrderId();
        if (innerOrderIdValue == null) {
            innerProperties.setOrderId(outerOrderIdValue);
        }
        else if (innerOrderIdValue != outerOrderIdValue 
            && (innerOrderIdValue == null || innerOrderIdValue != null && !innerOrderIdValue.equals(outerOrderIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerOrderIdName, outerOrderIdValue, innerOrderIdName, innerOrderIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////

    protected void throwOnInconsistentCommands(OrderCommand command, OrderContactMechCommand innerCommand) {
        AbstractOrderCommand properties = command instanceof AbstractOrderCommand ? (AbstractOrderCommand) command : null;
        AbstractOrderContactMechCommand innerProperties = innerCommand instanceof AbstractOrderContactMechCommand ? (AbstractOrderContactMechCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerOrderIdName = "OrderId";
        String outerOrderIdValue = properties.getOrderId();
        String innerOrderIdName = "OrderId";
        String innerOrderIdValue = innerProperties.getOrderId();
        if (innerOrderIdValue == null) {
            innerProperties.setOrderId(outerOrderIdValue);
        }
        else if (innerOrderIdValue != outerOrderIdValue 
            && (innerOrderIdValue == null || innerOrderIdValue != null && !innerOrderIdValue.equals(outerOrderIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerOrderIdName, outerOrderIdValue, innerOrderIdName, innerOrderIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////

    protected void throwOnInconsistentCommands(OrderCommand command, OrderItemCommand innerCommand) {
        AbstractOrderCommand properties = command instanceof AbstractOrderCommand ? (AbstractOrderCommand) command : null;
        AbstractOrderItemCommand innerProperties = innerCommand instanceof AbstractOrderItemCommand ? (AbstractOrderItemCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerOrderIdName = "OrderId";
        String outerOrderIdValue = properties.getOrderId();
        String innerOrderIdName = "OrderId";
        String innerOrderIdValue = innerProperties.getOrderId();
        if (innerOrderIdValue == null) {
            innerProperties.setOrderId(outerOrderIdValue);
        }
        else if (innerOrderIdValue != outerOrderIdValue 
            && (innerOrderIdValue == null || innerOrderIdValue != null && !innerOrderIdValue.equals(outerOrderIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerOrderIdName, outerOrderIdValue, innerOrderIdName, innerOrderIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////

    protected void throwOnInconsistentCommands(OrderCommand command, OrderAdjustmentCommand innerCommand) {
        AbstractOrderCommand properties = command instanceof AbstractOrderCommand ? (AbstractOrderCommand) command : null;
        AbstractOrderAdjustmentCommand innerProperties = innerCommand instanceof AbstractOrderAdjustmentCommand ? (AbstractOrderAdjustmentCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerOrderIdName = "OrderId";
        String outerOrderIdValue = properties.getOrderId();
        String innerOrderIdName = "OrderId";
        String innerOrderIdValue = innerProperties.getOrderId();
        if (innerOrderIdValue == null) {
            innerProperties.setOrderId(outerOrderIdValue);
        }
        else if (innerOrderIdValue != outerOrderIdValue 
            && (innerOrderIdValue == null || innerOrderIdValue != null && !innerOrderIdValue.equals(outerOrderIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerOrderIdName, outerOrderIdValue, innerOrderIdName, innerOrderIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////

    protected void throwOnInconsistentCommands(OrderCommand command, OrderShipGroupCommand innerCommand) {
        AbstractOrderCommand properties = command instanceof AbstractOrderCommand ? (AbstractOrderCommand) command : null;
        AbstractOrderShipGroupCommand innerProperties = innerCommand instanceof AbstractOrderShipGroupCommand ? (AbstractOrderShipGroupCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerOrderIdName = "OrderId";
        String outerOrderIdValue = properties.getOrderId();
        String innerOrderIdName = "OrderId";
        String innerOrderIdValue = innerProperties.getOrderId();
        if (innerOrderIdValue == null) {
            innerProperties.setOrderId(outerOrderIdValue);
        }
        else if (innerOrderIdValue != outerOrderIdValue 
            && (innerOrderIdValue == null || innerOrderIdValue != null && !innerOrderIdValue.equals(outerOrderIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerOrderIdName, outerOrderIdValue, innerOrderIdName, innerOrderIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////

    protected void throwOnInconsistentCommands(OrderShipGroupCommand command, OrderItemShipGroupAssociationCommand innerCommand) {
        AbstractOrderShipGroupCommand properties = command instanceof AbstractOrderShipGroupCommand ? (AbstractOrderShipGroupCommand) command : null;
        AbstractOrderItemShipGroupAssociationCommand innerProperties = innerCommand instanceof AbstractOrderItemShipGroupAssociationCommand ? (AbstractOrderItemShipGroupAssociationCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerOrderIdName = "OrderId";
        String outerOrderIdValue = properties.getOrderId();
        String innerOrderIdName = "OrderId";
        String innerOrderIdValue = innerProperties.getOrderId();
        if (innerOrderIdValue == null) {
            innerProperties.setOrderId(outerOrderIdValue);
        }
        else if (innerOrderIdValue != outerOrderIdValue 
            && (innerOrderIdValue == null || innerOrderIdValue != null && !innerOrderIdValue.equals(outerOrderIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerOrderIdName, outerOrderIdValue, innerOrderIdName, innerOrderIdValue);
        }
        String outerShipGroupSeqIdName = "ShipGroupSeqId";
        String outerShipGroupSeqIdValue = properties.getShipGroupSeqId();
        String innerOrderShipGroupShipGroupSeqIdName = "OrderShipGroupShipGroupSeqId";
        String innerOrderShipGroupShipGroupSeqIdValue = innerProperties.getOrderShipGroupShipGroupSeqId();
        if (innerOrderShipGroupShipGroupSeqIdValue == null) {
            innerProperties.setOrderShipGroupShipGroupSeqId(outerShipGroupSeqIdValue);
        }
        else if (innerOrderShipGroupShipGroupSeqIdValue != outerShipGroupSeqIdValue 
            && (innerOrderShipGroupShipGroupSeqIdValue == null || innerOrderShipGroupShipGroupSeqIdValue != null && !innerOrderShipGroupShipGroupSeqIdValue.equals(outerShipGroupSeqIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerShipGroupSeqIdName, outerShipGroupSeqIdValue, innerOrderShipGroupShipGroupSeqIdName, innerOrderShipGroupShipGroupSeqIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////


    ////////////////////////

    protected OrderEvent.OrderStateCreated newOrderStateCreated(Long version, String commandId, String requesterId) {
        OrderEventId stateEventId = new OrderEventId(this.state.getOrderId(), version);
        OrderEvent.OrderStateCreated e = newOrderStateCreated(stateEventId);
        ((AbstractOrderEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected OrderEvent.OrderStateMergePatched newOrderStateMergePatched(Long version, String commandId, String requesterId) {
        OrderEventId stateEventId = new OrderEventId(this.state.getOrderId(), version);
        OrderEvent.OrderStateMergePatched e = newOrderStateMergePatched(stateEventId);
        ((AbstractOrderEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected OrderEvent.OrderStateDeleted newOrderStateDeleted(Long version, String commandId, String requesterId) {
        OrderEventId stateEventId = new OrderEventId(this.state.getOrderId(), version);
        OrderEvent.OrderStateDeleted e = newOrderStateDeleted(stateEventId);
        ((AbstractOrderEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected OrderEvent.OrderStateCreated newOrderStateCreated(OrderEventId stateEventId) {
        return new AbstractOrderEvent.SimpleOrderStateCreated(stateEventId);
    }

    protected OrderEvent.OrderStateMergePatched newOrderStateMergePatched(OrderEventId stateEventId) {
        return new AbstractOrderEvent.SimpleOrderStateMergePatched(stateEventId);
    }

    protected OrderEvent.OrderStateDeleted newOrderStateDeleted(OrderEventId stateEventId) {
        return new AbstractOrderEvent.SimpleOrderStateDeleted(stateEventId);
    }

    protected OrderRoleEvent.OrderRoleStateCreated newOrderRoleStateCreated(OrderRoleEventId stateEventId) {
        return new AbstractOrderRoleEvent.SimpleOrderRoleStateCreated(stateEventId);
    }

    protected OrderRoleEvent.OrderRoleStateMergePatched newOrderRoleStateMergePatched(OrderRoleEventId stateEventId) {
        return new AbstractOrderRoleEvent.SimpleOrderRoleStateMergePatched(stateEventId);
    }

    protected OrderRoleEvent.OrderRoleStateRemoved newOrderRoleStateRemoved(OrderRoleEventId stateEventId) {
        return new AbstractOrderRoleEvent.SimpleOrderRoleStateRemoved(stateEventId);
    }

    protected OrderContactMechEvent.OrderContactMechStateCreated newOrderContactMechStateCreated(OrderContactMechEventId stateEventId) {
        return new AbstractOrderContactMechEvent.SimpleOrderContactMechStateCreated(stateEventId);
    }

    protected OrderContactMechEvent.OrderContactMechStateMergePatched newOrderContactMechStateMergePatched(OrderContactMechEventId stateEventId) {
        return new AbstractOrderContactMechEvent.SimpleOrderContactMechStateMergePatched(stateEventId);
    }

    protected OrderContactMechEvent.OrderContactMechStateRemoved newOrderContactMechStateRemoved(OrderContactMechEventId stateEventId) {
        return new AbstractOrderContactMechEvent.SimpleOrderContactMechStateRemoved(stateEventId);
    }

    protected OrderItemEvent.OrderItemStateCreated newOrderItemStateCreated(OrderItemEventId stateEventId) {
        return new AbstractOrderItemEvent.SimpleOrderItemStateCreated(stateEventId);
    }

    protected OrderItemEvent.OrderItemStateMergePatched newOrderItemStateMergePatched(OrderItemEventId stateEventId) {
        return new AbstractOrderItemEvent.SimpleOrderItemStateMergePatched(stateEventId);
    }

    protected OrderItemEvent.OrderItemStateRemoved newOrderItemStateRemoved(OrderItemEventId stateEventId) {
        return new AbstractOrderItemEvent.SimpleOrderItemStateRemoved(stateEventId);
    }

    protected OrderAdjustmentEvent.OrderAdjustmentStateCreated newOrderAdjustmentStateCreated(OrderAdjustmentEventId stateEventId) {
        return new AbstractOrderAdjustmentEvent.SimpleOrderAdjustmentStateCreated(stateEventId);
    }

    protected OrderAdjustmentEvent.OrderAdjustmentStateMergePatched newOrderAdjustmentStateMergePatched(OrderAdjustmentEventId stateEventId) {
        return new AbstractOrderAdjustmentEvent.SimpleOrderAdjustmentStateMergePatched(stateEventId);
    }

    protected OrderAdjustmentEvent.OrderAdjustmentStateRemoved newOrderAdjustmentStateRemoved(OrderAdjustmentEventId stateEventId) {
        return new AbstractOrderAdjustmentEvent.SimpleOrderAdjustmentStateRemoved(stateEventId);
    }

    protected OrderShipGroupEvent.OrderShipGroupStateCreated newOrderShipGroupStateCreated(OrderShipGroupEventId stateEventId) {
        return new AbstractOrderShipGroupEvent.SimpleOrderShipGroupStateCreated(stateEventId);
    }

    protected OrderShipGroupEvent.OrderShipGroupStateMergePatched newOrderShipGroupStateMergePatched(OrderShipGroupEventId stateEventId) {
        return new AbstractOrderShipGroupEvent.SimpleOrderShipGroupStateMergePatched(stateEventId);
    }

    protected OrderShipGroupEvent.OrderShipGroupStateRemoved newOrderShipGroupStateRemoved(OrderShipGroupEventId stateEventId) {
        return new AbstractOrderShipGroupEvent.SimpleOrderShipGroupStateRemoved(stateEventId);
    }

    protected OrderItemShipGroupAssociationEvent.OrderItemShipGroupAssociationStateCreated newOrderItemShipGroupAssociationStateCreated(OrderItemShipGroupAssociationEventId stateEventId) {
        return new AbstractOrderItemShipGroupAssociationEvent.SimpleOrderItemShipGroupAssociationStateCreated(stateEventId);
    }

    protected OrderItemShipGroupAssociationEvent.OrderItemShipGroupAssociationStateMergePatched newOrderItemShipGroupAssociationStateMergePatched(OrderItemShipGroupAssociationEventId stateEventId) {
        return new AbstractOrderItemShipGroupAssociationEvent.SimpleOrderItemShipGroupAssociationStateMergePatched(stateEventId);
    }

    protected OrderItemShipGroupAssociationEvent.OrderItemShipGroupAssociationStateRemoved newOrderItemShipGroupAssociationStateRemoved(OrderItemShipGroupAssociationEventId stateEventId) {
        return new AbstractOrderItemShipGroupAssociationEvent.SimpleOrderItemShipGroupAssociationStateRemoved(stateEventId);
    }


    public static class SimpleOrderAggregate extends AbstractOrderAggregate {
        public SimpleOrderAggregate(OrderHeaderState state) {
            super(state);
        }

    }

}

