// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractPartyContactMechAggregate extends AbstractAggregate implements PartyContactMechAggregate {
    private PartyContactMechState.MutablePartyContactMechState state;

    protected List<Event> changes = new ArrayList<Event>();

    public AbstractPartyContactMechAggregate(PartyContactMechState state) {
        this.state = (PartyContactMechState.MutablePartyContactMechState)state;
    }

    public PartyContactMechState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(PartyContactMechCommand.CreatePartyContactMech c) {
        if (c.getVersion() == null) { c.setVersion(PartyContactMechState.VERSION_NULL); }
        PartyContactMechEvent e = map(c);
        apply(e);
    }

    public void mergePatch(PartyContactMechCommand.MergePatchPartyContactMech c) {
        PartyContactMechEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        PartyContactMechCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof PartyContactMechEvent) {
            PartyContactMechEvent ee = (PartyContactMechEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected PartyContactMechEvent map(PartyContactMechCommand.CreatePartyContactMech c) {
        PartyContactMechEventId stateEventId = new PartyContactMechEventId(c.getPartyContactMechId(), c.getVersion());
        PartyContactMechEvent.PartyContactMechStateCreated e = newPartyContactMechStateCreated(stateEventId);
        e.setThruDate(c.getThruDate());
        e.setRoleTypeId(c.getRoleTypeId());
        e.setAllowSolicitation(c.getAllowSolicitation());
        e.setExtension(c.getExtension());
        e.setVerified(c.getVerified());
        e.setComments(c.getComments());
        e.setYearsWithContactMech(c.getYearsWithContactMech());
        e.setMonthsWithContactMech(c.getMonthsWithContactMech());
        ((AbstractPartyContactMechEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyContactMechPurposeCommand.CreatePartyContactMechPurpose innerCommand : c.getCreatePartyContactMechPurposeCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addPartyContactMechPurposeEvent(innerEvent);
        }

        return e;
    }

    protected PartyContactMechEvent map(PartyContactMechCommand.MergePatchPartyContactMech c) {
        PartyContactMechEventId stateEventId = new PartyContactMechEventId(c.getPartyContactMechId(), c.getVersion());
        PartyContactMechEvent.PartyContactMechStateMergePatched e = newPartyContactMechStateMergePatched(stateEventId);
        e.setThruDate(c.getThruDate());
        e.setRoleTypeId(c.getRoleTypeId());
        e.setAllowSolicitation(c.getAllowSolicitation());
        e.setExtension(c.getExtension());
        e.setVerified(c.getVerified());
        e.setComments(c.getComments());
        e.setYearsWithContactMech(c.getYearsWithContactMech());
        e.setMonthsWithContactMech(c.getMonthsWithContactMech());
        e.setIsPropertyThruDateRemoved(c.getIsPropertyThruDateRemoved());
        e.setIsPropertyRoleTypeIdRemoved(c.getIsPropertyRoleTypeIdRemoved());
        e.setIsPropertyAllowSolicitationRemoved(c.getIsPropertyAllowSolicitationRemoved());
        e.setIsPropertyExtensionRemoved(c.getIsPropertyExtensionRemoved());
        e.setIsPropertyVerifiedRemoved(c.getIsPropertyVerifiedRemoved());
        e.setIsPropertyCommentsRemoved(c.getIsPropertyCommentsRemoved());
        e.setIsPropertyYearsWithContactMechRemoved(c.getIsPropertyYearsWithContactMechRemoved());
        e.setIsPropertyMonthsWithContactMechRemoved(c.getIsPropertyMonthsWithContactMechRemoved());
        ((AbstractPartyContactMechEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyContactMechPurposeCommand innerCommand : c.getPartyContactMechPurposeCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyContactMechPurposeEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addPartyContactMechPurposeEvent(innerEvent);
        }

        return e;
    }


    protected PartyContactMechPurposeEvent map(PartyContactMechPurposeCommand c, PartyContactMechCommand outerCommand, Long version, PartyContactMechState outerState) {
        PartyContactMechPurposeCommand.CreatePartyContactMechPurpose create = (c.getCommandType().equals(CommandType.CREATE)) ? ((PartyContactMechPurposeCommand.CreatePartyContactMechPurpose)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        PartyContactMechPurposeCommand.MergePatchPartyContactMechPurpose merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((PartyContactMechPurposeCommand.MergePatchPartyContactMechPurpose)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        throw new UnsupportedOperationException("Unsupported command type: " + c.getCommandType() + " for " + c.getClass().getName());
    }

    protected PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated mapCreate(PartyContactMechPurposeCommand.CreatePartyContactMechPurpose c, PartyContactMechCommand outerCommand, Long version, PartyContactMechState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        PartyContactMechPurposeEventId stateEventId = new PartyContactMechPurposeEventId(outerState.getPartyContactMechId(), c.getContactMechPurposeTypeId(), version);
        PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated e = newPartyContactMechPurposeStateCreated(stateEventId);
        PartyContactMechPurposeState s = ((EntityStateCollection.MutableEntityStateCollection<String, PartyContactMechPurposeState>)outerState.getPartyContactMechPurposes()).getOrAddDefault(c.getContactMechPurposeTypeId());

        e.setThruDate(c.getThruDate());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected PartyContactMechPurposeEvent.PartyContactMechPurposeStateMergePatched mapMergePatch(PartyContactMechPurposeCommand.MergePatchPartyContactMechPurpose c, PartyContactMechCommand outerCommand, Long version, PartyContactMechState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        PartyContactMechPurposeEventId stateEventId = new PartyContactMechPurposeEventId(outerState.getPartyContactMechId(), c.getContactMechPurposeTypeId(), version);
        PartyContactMechPurposeEvent.PartyContactMechPurposeStateMergePatched e = newPartyContactMechPurposeStateMergePatched(stateEventId);
        PartyContactMechPurposeState s = ((EntityStateCollection.MutableEntityStateCollection<String, PartyContactMechPurposeState>)outerState.getPartyContactMechPurposes()).getOrAddDefault(c.getContactMechPurposeTypeId());

        e.setThruDate(c.getThruDate());
        e.setIsPropertyThruDateRemoved(c.getIsPropertyThruDateRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected void throwOnInconsistentCommands(PartyContactMechCommand command, PartyContactMechPurposeCommand innerCommand) {
        AbstractPartyContactMechCommand properties = command instanceof AbstractPartyContactMechCommand ? (AbstractPartyContactMechCommand) command : null;
        AbstractPartyContactMechPurposeCommand innerProperties = innerCommand instanceof AbstractPartyContactMechPurposeCommand ? (AbstractPartyContactMechPurposeCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerPartyContactMechIdName = "PartyContactMechId";
        PartyContactMechId outerPartyContactMechIdValue = properties.getPartyContactMechId();
        String innerPartyContactMechIdName = "PartyContactMechId";
        PartyContactMechId innerPartyContactMechIdValue = innerProperties.getPartyContactMechId();
        if (innerPartyContactMechIdValue == null) {
            innerProperties.setPartyContactMechId(outerPartyContactMechIdValue);
        }
        else if (innerPartyContactMechIdValue != outerPartyContactMechIdValue 
            && (innerPartyContactMechIdValue == null || innerPartyContactMechIdValue != null && !innerPartyContactMechIdValue.equals(outerPartyContactMechIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerPartyContactMechIdName, outerPartyContactMechIdValue, innerPartyContactMechIdName, innerPartyContactMechIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////


    ////////////////////////

    protected PartyContactMechEvent.PartyContactMechStateCreated newPartyContactMechStateCreated(Long version, String commandId, String requesterId) {
        PartyContactMechEventId stateEventId = new PartyContactMechEventId(this.state.getPartyContactMechId(), version);
        PartyContactMechEvent.PartyContactMechStateCreated e = newPartyContactMechStateCreated(stateEventId);
        ((AbstractPartyContactMechEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected PartyContactMechEvent.PartyContactMechStateMergePatched newPartyContactMechStateMergePatched(Long version, String commandId, String requesterId) {
        PartyContactMechEventId stateEventId = new PartyContactMechEventId(this.state.getPartyContactMechId(), version);
        PartyContactMechEvent.PartyContactMechStateMergePatched e = newPartyContactMechStateMergePatched(stateEventId);
        ((AbstractPartyContactMechEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected PartyContactMechEvent.PartyContactMechStateCreated newPartyContactMechStateCreated(PartyContactMechEventId stateEventId) {
        return new AbstractPartyContactMechEvent.SimplePartyContactMechStateCreated(stateEventId);
    }

    protected PartyContactMechEvent.PartyContactMechStateMergePatched newPartyContactMechStateMergePatched(PartyContactMechEventId stateEventId) {
        return new AbstractPartyContactMechEvent.SimplePartyContactMechStateMergePatched(stateEventId);
    }

    protected PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated newPartyContactMechPurposeStateCreated(PartyContactMechPurposeEventId stateEventId) {
        return new AbstractPartyContactMechPurposeEvent.SimplePartyContactMechPurposeStateCreated(stateEventId);
    }

    protected PartyContactMechPurposeEvent.PartyContactMechPurposeStateMergePatched newPartyContactMechPurposeStateMergePatched(PartyContactMechPurposeEventId stateEventId) {
        return new AbstractPartyContactMechPurposeEvent.SimplePartyContactMechPurposeStateMergePatched(stateEventId);
    }


    public static class SimplePartyContactMechAggregate extends AbstractPartyContactMechAggregate {
        public SimplePartyContactMechAggregate(PartyContactMechState state) {
            super(state);
        }

    }

}

