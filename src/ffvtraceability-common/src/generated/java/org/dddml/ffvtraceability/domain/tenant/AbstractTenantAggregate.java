// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.tenant;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractTenantAggregate extends AbstractAggregate implements TenantAggregate {
    private TenantState.MutableTenantState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractTenantAggregate(TenantState state) {
        this.state = (TenantState.MutableTenantState)state;
    }

    public TenantState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(TenantCommand.CreateTenant c) {
        if (c.getVersion() == null) { c.setVersion(TenantState.VERSION_NULL); }
        TenantEvent e = map(c);
        apply(e);
    }

    public void mergePatch(TenantCommand.MergePatchTenant c) {
        TenantEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        TenantCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected TenantEvent map(TenantCommand.CreateTenant c) {
        TenantEventId stateEventId = new TenantEventId(c.getTenantId(), c.getVersion());
        TenantEvent.TenantStateCreated e = newTenantStateCreated(stateEventId);
        e.setPartyId(c.getPartyId());
        e.setTimeZoneId(c.getTimeZoneId());
        e.setDateTimeFormat(c.getDateTimeFormat());
        e.setDescription(c.getDescription());
        e.setLongDescription(c.getLongDescription());
        ((AbstractTenantEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected TenantEvent map(TenantCommand.MergePatchTenant c) {
        TenantEventId stateEventId = new TenantEventId(c.getTenantId(), c.getVersion());
        TenantEvent.TenantStateMergePatched e = newTenantStateMergePatched(stateEventId);
        e.setPartyId(c.getPartyId());
        e.setTimeZoneId(c.getTimeZoneId());
        e.setDateTimeFormat(c.getDateTimeFormat());
        e.setDescription(c.getDescription());
        e.setLongDescription(c.getLongDescription());
        e.setIsPropertyPartyIdRemoved(c.getIsPropertyPartyIdRemoved());
        e.setIsPropertyTimeZoneIdRemoved(c.getIsPropertyTimeZoneIdRemoved());
        e.setIsPropertyDateTimeFormatRemoved(c.getIsPropertyDateTimeFormatRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyLongDescriptionRemoved(c.getIsPropertyLongDescriptionRemoved());
        ((AbstractTenantEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected TenantEvent.TenantStateCreated newTenantStateCreated(Long version, String commandId, String requesterId) {
        TenantEventId stateEventId = new TenantEventId(this.state.getTenantId(), version);
        TenantEvent.TenantStateCreated e = newTenantStateCreated(stateEventId);
        ((AbstractTenantEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected TenantEvent.TenantStateMergePatched newTenantStateMergePatched(Long version, String commandId, String requesterId) {
        TenantEventId stateEventId = new TenantEventId(this.state.getTenantId(), version);
        TenantEvent.TenantStateMergePatched e = newTenantStateMergePatched(stateEventId);
        ((AbstractTenantEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected TenantEvent.TenantStateCreated newTenantStateCreated(TenantEventId stateEventId) {
        return new AbstractTenantEvent.SimpleTenantStateCreated(stateEventId);
    }

    protected TenantEvent.TenantStateMergePatched newTenantStateMergePatched(TenantEventId stateEventId) {
        return new AbstractTenantEvent.SimpleTenantStateMergePatched(stateEventId);
    }


    public static class SimpleTenantAggregate extends AbstractTenantAggregate {
        public SimpleTenantAggregate(TenantState state) {
            super(state);
        }

    }

}

