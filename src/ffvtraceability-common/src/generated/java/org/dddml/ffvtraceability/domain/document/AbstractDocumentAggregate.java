// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.document;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractDocumentAggregate extends AbstractAggregate implements DocumentAggregate {
    private DocumentState.MutableDocumentState state;

    protected List<Event> changes = new ArrayList<Event>();

    public AbstractDocumentAggregate(DocumentState state) {
        this.state = (DocumentState.MutableDocumentState)state;
    }

    public DocumentState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(DocumentCommand.CreateDocument c) {
        if (c.getVersion() == null) { c.setVersion(DocumentState.VERSION_NULL); }
        DocumentEvent e = map(c);
        apply(e);
    }

    public void mergePatch(DocumentCommand.MergePatchDocument c) {
        DocumentEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        DocumentCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof DocumentEvent) {
            DocumentEvent ee = (DocumentEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected DocumentEvent map(DocumentCommand.CreateDocument c) {
        DocumentEventId stateEventId = new DocumentEventId(c.getDocumentId(), c.getVersion());
        DocumentEvent.DocumentStateCreated e = newDocumentStateCreated(stateEventId);
        e.setDocumentTypeId(c.getDocumentTypeId());
        e.setComments(c.getComments());
        e.setDocumentLocation(c.getDocumentLocation());
        e.setDocumentText(c.getDocumentText());
        ((AbstractDocumentEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DocumentEvent map(DocumentCommand.MergePatchDocument c) {
        DocumentEventId stateEventId = new DocumentEventId(c.getDocumentId(), c.getVersion());
        DocumentEvent.DocumentStateMergePatched e = newDocumentStateMergePatched(stateEventId);
        e.setDocumentTypeId(c.getDocumentTypeId());
        e.setComments(c.getComments());
        e.setDocumentLocation(c.getDocumentLocation());
        e.setDocumentText(c.getDocumentText());
        e.setIsPropertyDocumentTypeIdRemoved(c.getIsPropertyDocumentTypeIdRemoved());
        e.setIsPropertyCommentsRemoved(c.getIsPropertyCommentsRemoved());
        e.setIsPropertyDocumentLocationRemoved(c.getIsPropertyDocumentLocationRemoved());
        e.setIsPropertyDocumentTextRemoved(c.getIsPropertyDocumentTextRemoved());
        ((AbstractDocumentEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected DocumentEvent.DocumentStateCreated newDocumentStateCreated(Long version, String commandId, String requesterId) {
        DocumentEventId stateEventId = new DocumentEventId(this.state.getDocumentId(), version);
        DocumentEvent.DocumentStateCreated e = newDocumentStateCreated(stateEventId);
        ((AbstractDocumentEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DocumentEvent.DocumentStateMergePatched newDocumentStateMergePatched(Long version, String commandId, String requesterId) {
        DocumentEventId stateEventId = new DocumentEventId(this.state.getDocumentId(), version);
        DocumentEvent.DocumentStateMergePatched e = newDocumentStateMergePatched(stateEventId);
        ((AbstractDocumentEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DocumentEvent.DocumentStateCreated newDocumentStateCreated(DocumentEventId stateEventId) {
        return new AbstractDocumentEvent.SimpleDocumentStateCreated(stateEventId);
    }

    protected DocumentEvent.DocumentStateMergePatched newDocumentStateMergePatched(DocumentEventId stateEventId) {
        return new AbstractDocumentEvent.SimpleDocumentStateMergePatched(stateEventId);
    }


    public static class SimpleDocumentAggregate extends AbstractDocumentAggregate {
        public SimpleDocumentAggregate(DocumentState state) {
            super(state);
        }

    }

}

