// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.geo;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface GeoCommand extends Command {

    String getGeoId();

    void setGeoId(String geoId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(GeoState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((GeoCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (isCreationCommand((GeoCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(GeoCommand c) {
        if ((c instanceof GeoCommand.CreateGeo) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(GeoState.VERSION_NULL)))
            return true;
        if ((c instanceof GeoCommand.MergePatchGeo))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(GeoState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchGeo extends GeoCommand {
        String getGeoTypeId();

        void setGeoTypeId(String geoTypeId);

        String getGeoName();

        void setGeoName(String geoName);

        String getGeoCode();

        void setGeoCode(String geoCode);

        String getGeoSecCode();

        void setGeoSecCode(String geoSecCode);

        String getAbbreviation();

        void setAbbreviation(String abbreviation);

        String getWellKnownText();

        void setWellKnownText(String wellKnownText);

        Long getSequenceNumber();

        void setSequenceNumber(Long sequenceNumber);

    }

    interface CreateGeo extends CreateOrMergePatchGeo {
    }

    interface MergePatchGeo extends CreateOrMergePatchGeo {
        Boolean getIsPropertyGeoTypeIdRemoved();

        void setIsPropertyGeoTypeIdRemoved(Boolean removed);

        Boolean getIsPropertyGeoNameRemoved();

        void setIsPropertyGeoNameRemoved(Boolean removed);

        Boolean getIsPropertyGeoCodeRemoved();

        void setIsPropertyGeoCodeRemoved(Boolean removed);

        Boolean getIsPropertyGeoSecCodeRemoved();

        void setIsPropertyGeoSecCodeRemoved(Boolean removed);

        Boolean getIsPropertyAbbreviationRemoved();

        void setIsPropertyAbbreviationRemoved(Boolean removed);

        Boolean getIsPropertyWellKnownTextRemoved();

        void setIsPropertyWellKnownTextRemoved(Boolean removed);

        Boolean getIsPropertySequenceNumberRemoved();

        void setIsPropertySequenceNumberRemoved(Boolean removed);


    }

    interface DeleteGeo extends GeoCommand {
    }

}

