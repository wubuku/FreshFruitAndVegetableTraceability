// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.workeffortinventoryassign;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchWorkEffortInventoryAssignDto extends AbstractWorkEffortInventoryAssignCommandDto implements WorkEffortInventoryAssignCommand.CreateOrMergePatchWorkEffortInventoryAssign {

    /**
     * Status Id
     */
    private String statusId;

    public String getStatusId()
    {
        return this.statusId;
    }

    public void setStatusId(String statusId)
    {
        this.statusId = statusId;
    }

    /**
     * Quantity
     */
    private Double quantity;

    public Double getQuantity()
    {
        return this.quantity;
    }

    public void setQuantity(Double quantity)
    {
        this.quantity = quantity;
    }


    private Boolean isPropertyStatusIdRemoved;

    public Boolean getIsPropertyStatusIdRemoved()
    {
        return this.isPropertyStatusIdRemoved;
    }

    public void setIsPropertyStatusIdRemoved(Boolean removed)
    {
        this.isPropertyStatusIdRemoved = removed;
    }

    private Boolean isPropertyQuantityRemoved;

    public Boolean getIsPropertyQuantityRemoved()
    {
        return this.isPropertyQuantityRemoved;
    }

    public void setIsPropertyQuantityRemoved(Boolean removed)
    {
        this.isPropertyQuantityRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchWorkEffortInventoryAssign command)
    {
        ((AbstractWorkEffortInventoryAssignCommandDto) this).copyTo(command);
        command.setStatusId(this.getStatusId());
        command.setQuantity(this.getQuantity());
    }

    public WorkEffortInventoryAssignCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractWorkEffortInventoryAssignCommand.SimpleCreateWorkEffortInventoryAssign command = new AbstractWorkEffortInventoryAssignCommand.SimpleCreateWorkEffortInventoryAssign();
            copyTo((AbstractWorkEffortInventoryAssignCommand.AbstractCreateWorkEffortInventoryAssign) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractWorkEffortInventoryAssignCommand.SimpleMergePatchWorkEffortInventoryAssign command = new AbstractWorkEffortInventoryAssignCommand.SimpleMergePatchWorkEffortInventoryAssign();
            copyTo((AbstractWorkEffortInventoryAssignCommand.SimpleMergePatchWorkEffortInventoryAssign) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public WorkEffortInventoryAssignCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateWorkEffortInventoryAssignDto command = new CreateWorkEffortInventoryAssignDto();
            copyTo((CreateWorkEffortInventoryAssign) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchWorkEffortInventoryAssignDto command = new MergePatchWorkEffortInventoryAssignDto();
            copyTo((MergePatchWorkEffortInventoryAssign) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateWorkEffortInventoryAssign command)
    {
        copyTo((CreateOrMergePatchWorkEffortInventoryAssign) command);
    }

    public void copyTo(MergePatchWorkEffortInventoryAssign command)
    {
        copyTo((CreateOrMergePatchWorkEffortInventoryAssign) command);
        command.setIsPropertyStatusIdRemoved(this.getIsPropertyStatusIdRemoved());
        command.setIsPropertyQuantityRemoved(this.getIsPropertyQuantityRemoved());
    }

    public static class CreateWorkEffortInventoryAssignDto extends CreateOrMergePatchWorkEffortInventoryAssignDto implements WorkEffortInventoryAssignCommand.CreateWorkEffortInventoryAssign
    {
        public CreateWorkEffortInventoryAssignDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public WorkEffortInventoryAssignCommand.CreateWorkEffortInventoryAssign toCreateWorkEffortInventoryAssign()
        {
            return (WorkEffortInventoryAssignCommand.CreateWorkEffortInventoryAssign) toCommand();
        }

    }

    public static class MergePatchWorkEffortInventoryAssignDto extends CreateOrMergePatchWorkEffortInventoryAssignDto implements WorkEffortInventoryAssignCommand.MergePatchWorkEffortInventoryAssign
    {
        public MergePatchWorkEffortInventoryAssignDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public WorkEffortInventoryAssignCommand.MergePatchWorkEffortInventoryAssign toMergePatchWorkEffortInventoryAssign()
        {
            return (WorkEffortInventoryAssignCommand.MergePatchWorkEffortInventoryAssign) toCommand();
        }

    }

}

