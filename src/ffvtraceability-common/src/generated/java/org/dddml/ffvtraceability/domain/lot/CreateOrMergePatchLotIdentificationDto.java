// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.lot;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchLotIdentificationDto extends AbstractLotIdentificationCommandDto implements LotIdentificationCommand.CreateOrMergePatchLotIdentification {

    /**
     * Id Value
     */
    private String idValue;

    public String getIdValue()
    {
        return this.idValue;
    }

    public void setIdValue(String idValue)
    {
        this.idValue = idValue;
    }

    /**
     * Gtin
     */
    private String gtin;

    public String getGtin()
    {
        return this.gtin;
    }

    public void setGtin(String gtin)
    {
        this.gtin = gtin;
    }

    /**
     * Gs1 Batch
     */
    private String gs1Batch;

    public String getGs1Batch()
    {
        return this.gs1Batch;
    }

    public void setGs1Batch(String gs1Batch)
    {
        this.gs1Batch = gs1Batch;
    }


    private Boolean isPropertyIdValueRemoved;

    public Boolean getIsPropertyIdValueRemoved()
    {
        return this.isPropertyIdValueRemoved;
    }

    public void setIsPropertyIdValueRemoved(Boolean removed)
    {
        this.isPropertyIdValueRemoved = removed;
    }

    private Boolean isPropertyGtinRemoved;

    public Boolean getIsPropertyGtinRemoved()
    {
        return this.isPropertyGtinRemoved;
    }

    public void setIsPropertyGtinRemoved(Boolean removed)
    {
        this.isPropertyGtinRemoved = removed;
    }

    private Boolean isPropertyGs1BatchRemoved;

    public Boolean getIsPropertyGs1BatchRemoved()
    {
        return this.isPropertyGs1BatchRemoved;
    }

    public void setIsPropertyGs1BatchRemoved(Boolean removed)
    {
        this.isPropertyGs1BatchRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchLotIdentification command)
    {
        ((AbstractLotIdentificationCommandDto) this).copyTo(command);
        command.setIdValue(this.getIdValue());
        command.setGtin(this.getGtin());
        command.setGs1Batch(this.getGs1Batch());
    }

    public LotIdentificationCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractLotIdentificationCommand.SimpleCreateLotIdentification command = new AbstractLotIdentificationCommand.SimpleCreateLotIdentification();
            copyTo((AbstractLotIdentificationCommand.AbstractCreateLotIdentification) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractLotIdentificationCommand.SimpleMergePatchLotIdentification command = new AbstractLotIdentificationCommand.SimpleMergePatchLotIdentification();
            copyTo((AbstractLotIdentificationCommand.SimpleMergePatchLotIdentification) command);
            return command;
        } 
        else if (COMMAND_TYPE_REMOVE.equals(getCommandType())) {
            AbstractLotIdentificationCommand.SimpleRemoveLotIdentification command = new AbstractLotIdentificationCommand.SimpleRemoveLotIdentification();
            ((AbstractLotIdentificationCommandDto) this).copyTo(command);
            return command;
        }
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public LotIdentificationCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateLotIdentificationDto command = new CreateLotIdentificationDto();
            copyTo((CreateLotIdentification) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchLotIdentificationDto command = new MergePatchLotIdentificationDto();
            copyTo((MergePatchLotIdentification) command);
            return command;
        } 
        else if (COMMAND_TYPE_REMOVE.equals(getCommandType())) {
            RemoveLotIdentificationDto command = new RemoveLotIdentificationDto();
            ((AbstractLotIdentificationCommandDto) this).copyTo(command);
            return command;
        }
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateLotIdentification command)
    {
        copyTo((CreateOrMergePatchLotIdentification) command);
    }

    public void copyTo(MergePatchLotIdentification command)
    {
        copyTo((CreateOrMergePatchLotIdentification) command);
        command.setIsPropertyIdValueRemoved(this.getIsPropertyIdValueRemoved());
        command.setIsPropertyGtinRemoved(this.getIsPropertyGtinRemoved());
        command.setIsPropertyGs1BatchRemoved(this.getIsPropertyGs1BatchRemoved());
    }

    public static class CreateLotIdentificationDto extends CreateOrMergePatchLotIdentificationDto implements LotIdentificationCommand.CreateLotIdentification
    {
        public CreateLotIdentificationDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public LotIdentificationCommand.CreateLotIdentification toCreateLotIdentification()
        {
            return (LotIdentificationCommand.CreateLotIdentification) toCommand();
        }

    }

    public static class MergePatchLotIdentificationDto extends CreateOrMergePatchLotIdentificationDto implements LotIdentificationCommand.MergePatchLotIdentification
    {
        public MergePatchLotIdentificationDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public LotIdentificationCommand.MergePatchLotIdentification toMergePatchLotIdentification()
        {
            return (LotIdentificationCommand.MergePatchLotIdentification) toCommand();
        }

    }

}

