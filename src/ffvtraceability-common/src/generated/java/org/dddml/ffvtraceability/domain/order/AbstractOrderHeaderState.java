// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.order;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.partyrole.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.order.OrderEvent.*;

public abstract class AbstractOrderHeaderState implements OrderHeaderState.SqlOrderHeaderState, Saveable {

    private String orderId;

    public String getOrderId() {
        return this.orderId;
    }

    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    private String orderTypeId;

    public String getOrderTypeId() {
        return this.orderTypeId;
    }

    public void setOrderTypeId(String orderTypeId) {
        this.orderTypeId = orderTypeId;
    }

    private String orderName;

    public String getOrderName() {
        return this.orderName;
    }

    public void setOrderName(String orderName) {
        this.orderName = orderName;
    }

    private String externalId;

    public String getExternalId() {
        return this.externalId;
    }

    public void setExternalId(String externalId) {
        this.externalId = externalId;
    }

    private String salesChannelEnumId;

    public String getSalesChannelEnumId() {
        return this.salesChannelEnumId;
    }

    public void setSalesChannelEnumId(String salesChannelEnumId) {
        this.salesChannelEnumId = salesChannelEnumId;
    }

    private OffsetDateTime orderDate;

    public OffsetDateTime getOrderDate() {
        return this.orderDate;
    }

    public void setOrderDate(OffsetDateTime orderDate) {
        this.orderDate = orderDate;
    }

    private String priority;

    public String getPriority() {
        return this.priority;
    }

    public void setPriority(String priority) {
        this.priority = priority;
    }

    private OffsetDateTime entryDate;

    public OffsetDateTime getEntryDate() {
        return this.entryDate;
    }

    public void setEntryDate(OffsetDateTime entryDate) {
        this.entryDate = entryDate;
    }

    private OffsetDateTime pickSheetPrintedDate;

    public OffsetDateTime getPickSheetPrintedDate() {
        return this.pickSheetPrintedDate;
    }

    public void setPickSheetPrintedDate(OffsetDateTime pickSheetPrintedDate) {
        this.pickSheetPrintedDate = pickSheetPrintedDate;
    }

    private String visitId;

    public String getVisitId() {
        return this.visitId;
    }

    public void setVisitId(String visitId) {
        this.visitId = visitId;
    }

    private String statusId;

    public String getStatusId() {
        return this.statusId;
    }

    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }

    private String firstAttemptOrderId;

    public String getFirstAttemptOrderId() {
        return this.firstAttemptOrderId;
    }

    public void setFirstAttemptOrderId(String firstAttemptOrderId) {
        this.firstAttemptOrderId = firstAttemptOrderId;
    }

    private String currencyUomId;

    public String getCurrencyUomId() {
        return this.currencyUomId;
    }

    public void setCurrencyUomId(String currencyUomId) {
        this.currencyUomId = currencyUomId;
    }

    private String syncStatusId;

    public String getSyncStatusId() {
        return this.syncStatusId;
    }

    public void setSyncStatusId(String syncStatusId) {
        this.syncStatusId = syncStatusId;
    }

    private String billingAccountId;

    public String getBillingAccountId() {
        return this.billingAccountId;
    }

    public void setBillingAccountId(String billingAccountId) {
        this.billingAccountId = billingAccountId;
    }

    private String originFacilityId;

    public String getOriginFacilityId() {
        return this.originFacilityId;
    }

    public void setOriginFacilityId(String originFacilityId) {
        this.originFacilityId = originFacilityId;
    }

    private String productStoreId;

    public String getProductStoreId() {
        return this.productStoreId;
    }

    public void setProductStoreId(String productStoreId) {
        this.productStoreId = productStoreId;
    }

    private String terminalId;

    public String getTerminalId() {
        return this.terminalId;
    }

    public void setTerminalId(String terminalId) {
        this.terminalId = terminalId;
    }

    private String transactionId;

    public String getTransactionId() {
        return this.transactionId;
    }

    public void setTransactionId(String transactionId) {
        this.transactionId = transactionId;
    }

    private String autoOrderShoppingListId;

    public String getAutoOrderShoppingListId() {
        return this.autoOrderShoppingListId;
    }

    public void setAutoOrderShoppingListId(String autoOrderShoppingListId) {
        this.autoOrderShoppingListId = autoOrderShoppingListId;
    }

    private String needsInventoryIssuance;

    public String getNeedsInventoryIssuance() {
        return this.needsInventoryIssuance;
    }

    public void setNeedsInventoryIssuance(String needsInventoryIssuance) {
        this.needsInventoryIssuance = needsInventoryIssuance;
    }

    private String isRushOrder;

    public String getIsRushOrder() {
        return this.isRushOrder;
    }

    public void setIsRushOrder(String isRushOrder) {
        this.isRushOrder = isRushOrder;
    }

    private String internalCode;

    public String getInternalCode() {
        return this.internalCode;
    }

    public void setInternalCode(String internalCode) {
        this.internalCode = internalCode;
    }

    private java.math.BigDecimal remainingSubTotal;

    public java.math.BigDecimal getRemainingSubTotal() {
        return this.remainingSubTotal;
    }

    public void setRemainingSubTotal(java.math.BigDecimal remainingSubTotal) {
        this.remainingSubTotal = remainingSubTotal;
    }

    private java.math.BigDecimal grandTotal;

    public java.math.BigDecimal getGrandTotal() {
        return this.grandTotal;
    }

    public void setGrandTotal(java.math.BigDecimal grandTotal) {
        this.grandTotal = grandTotal;
    }

    private String isViewed;

    public String getIsViewed() {
        return this.isViewed;
    }

    public void setIsViewed(String isViewed) {
        this.isViewed = isViewed;
    }

    private String invoicePerShipment;

    public String getInvoicePerShipment() {
        return this.invoicePerShipment;
    }

    public void setInvoicePerShipment(String invoicePerShipment) {
        this.invoicePerShipment = invoicePerShipment;
    }

    private String memo;

    public String getMemo() {
        return this.memo;
    }

    public void setMemo(String memo) {
        this.memo = memo;
    }

    private String contactDescription;

    public String getContactDescription() {
        return this.contactDescription;
    }

    public void setContactDescription(String contactDescription) {
        this.contactDescription = contactDescription;
    }

    private String fulfillmentStatusId;

    public String getFulfillmentStatusId() {
        return this.fulfillmentStatusId;
    }

    public void setFulfillmentStatusId(String fulfillmentStatusId) {
        this.fulfillmentStatusId = fulfillmentStatusId;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Set<OrderRoleState> protectedOrderRoles = new HashSet<>();

    protected Set<OrderRoleState> getProtectedOrderRoles() {
        return this.protectedOrderRoles;
    }

    protected void setProtectedOrderRoles(Set<OrderRoleState> protectedOrderRoles) {
        this.protectedOrderRoles = protectedOrderRoles;
    }

    private EntityStateCollection.MutableEntityStateCollection<PartyRoleId, OrderRoleState> orderRoles;

    public EntityStateCollection.MutableEntityStateCollection<PartyRoleId, OrderRoleState> getOrderRoles() {
        return this.orderRoles;
    }

    public void setOrderRoles(EntityStateCollection.MutableEntityStateCollection<PartyRoleId, OrderRoleState> orderRoles) {
        this.orderRoles = orderRoles;
    }

    private Set<OrderContactMechState> protectedOrderContactMechanisms = new HashSet<>();

    protected Set<OrderContactMechState> getProtectedOrderContactMechanisms() {
        return this.protectedOrderContactMechanisms;
    }

    protected void setProtectedOrderContactMechanisms(Set<OrderContactMechState> protectedOrderContactMechanisms) {
        this.protectedOrderContactMechanisms = protectedOrderContactMechanisms;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, OrderContactMechState> orderContactMechanisms;

    public EntityStateCollection.MutableEntityStateCollection<String, OrderContactMechState> getOrderContactMechanisms() {
        return this.orderContactMechanisms;
    }

    public void setOrderContactMechanisms(EntityStateCollection.MutableEntityStateCollection<String, OrderContactMechState> orderContactMechanisms) {
        this.orderContactMechanisms = orderContactMechanisms;
    }

    private Set<OrderItemState> protectedOrderItems = new HashSet<>();

    protected Set<OrderItemState> getProtectedOrderItems() {
        return this.protectedOrderItems;
    }

    protected void setProtectedOrderItems(Set<OrderItemState> protectedOrderItems) {
        this.protectedOrderItems = protectedOrderItems;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, OrderItemState> orderItems;

    public EntityStateCollection.MutableEntityStateCollection<String, OrderItemState> getOrderItems() {
        return this.orderItems;
    }

    public void setOrderItems(EntityStateCollection.MutableEntityStateCollection<String, OrderItemState> orderItems) {
        this.orderItems = orderItems;
    }

    private Set<OrderAdjustmentState> protectedOrderAdjustments = new HashSet<>();

    protected Set<OrderAdjustmentState> getProtectedOrderAdjustments() {
        return this.protectedOrderAdjustments;
    }

    protected void setProtectedOrderAdjustments(Set<OrderAdjustmentState> protectedOrderAdjustments) {
        this.protectedOrderAdjustments = protectedOrderAdjustments;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, OrderAdjustmentState> orderAdjustments;

    public EntityStateCollection.MutableEntityStateCollection<String, OrderAdjustmentState> getOrderAdjustments() {
        return this.orderAdjustments;
    }

    public void setOrderAdjustments(EntityStateCollection.MutableEntityStateCollection<String, OrderAdjustmentState> orderAdjustments) {
        this.orderAdjustments = orderAdjustments;
    }

    private Set<OrderShipGroupState> protectedOrderShipGroups = new HashSet<>();

    protected Set<OrderShipGroupState> getProtectedOrderShipGroups() {
        return this.protectedOrderShipGroups;
    }

    protected void setProtectedOrderShipGroups(Set<OrderShipGroupState> protectedOrderShipGroups) {
        this.protectedOrderShipGroups = protectedOrderShipGroups;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, OrderShipGroupState> orderShipGroups;

    public EntityStateCollection.MutableEntityStateCollection<String, OrderShipGroupState> getOrderShipGroups() {
        return this.orderShipGroups;
    }

    public void setOrderShipGroups(EntityStateCollection.MutableEntityStateCollection<String, OrderShipGroupState> orderShipGroups) {
        this.orderShipGroups = orderShipGroups;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractOrderHeaderState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setOrderId(((OrderEvent.SqlOrderEvent) events.get(0)).getOrderEventId().getOrderId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? OrderHeaderState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractOrderHeaderState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        orderRoles = new SimpleOrderRoleStateCollection();
        orderContactMechanisms = new SimpleOrderContactMechStateCollection();
        orderItems = new SimpleOrderItemStateCollection();
        orderAdjustments = new SimpleOrderAdjustmentStateCollection();
        orderShipGroups = new SimpleOrderShipGroupStateCollection();
    }

    @Override
    public int hashCode() {
        return getOrderId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof OrderHeaderState) {
            return Objects.equals(this.getOrderId(), ((OrderHeaderState)obj).getOrderId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof OrderStateCreated) {
            when((OrderStateCreated) e);
        } else if (e instanceof OrderStateMergePatched) {
            when((OrderStateMergePatched) e);
        } else if (e instanceof AbstractOrderEvent.FulfillmentStatusUpdated) {
            when((AbstractOrderEvent.FulfillmentStatusUpdated)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(OrderStateCreated e) {
        throwOnWrongEvent(e);

        this.setOrderTypeId(e.getOrderTypeId());
        this.setOrderName(e.getOrderName());
        this.setExternalId(e.getExternalId());
        this.setSalesChannelEnumId(e.getSalesChannelEnumId());
        this.setOrderDate(e.getOrderDate());
        this.setPriority(e.getPriority());
        this.setEntryDate(e.getEntryDate());
        this.setPickSheetPrintedDate(e.getPickSheetPrintedDate());
        this.setVisitId(e.getVisitId());
        this.setStatusId(e.getStatusId());
        this.setFirstAttemptOrderId(e.getFirstAttemptOrderId());
        this.setCurrencyUomId(e.getCurrencyUomId());
        this.setSyncStatusId(e.getSyncStatusId());
        this.setBillingAccountId(e.getBillingAccountId());
        this.setOriginFacilityId(e.getOriginFacilityId());
        this.setProductStoreId(e.getProductStoreId());
        this.setTerminalId(e.getTerminalId());
        this.setTransactionId(e.getTransactionId());
        this.setAutoOrderShoppingListId(e.getAutoOrderShoppingListId());
        this.setNeedsInventoryIssuance(e.getNeedsInventoryIssuance());
        this.setIsRushOrder(e.getIsRushOrder());
        this.setInternalCode(e.getInternalCode());
        this.setRemainingSubTotal(e.getRemainingSubTotal());
        this.setGrandTotal(e.getGrandTotal());
        this.setIsViewed(e.getIsViewed());
        this.setInvoicePerShipment(e.getInvoicePerShipment());
        this.setMemo(e.getMemo());
        this.setContactDescription(e.getContactDescription());
        this.setFulfillmentStatusId(e.getFulfillmentStatusId());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

        for (OrderRoleEvent.OrderRoleStateCreated innerEvent : e.getOrderRoleEvents()) {
            OrderRoleState innerState = ((EntityStateCollection.MutableEntityStateCollection<PartyRoleId, OrderRoleState>)this.getOrderRoles()).getOrAddDefault(((OrderRoleEvent.SqlOrderRoleEvent)innerEvent).getOrderRoleEventId().getPartyRoleId());
            ((OrderRoleState.SqlOrderRoleState)innerState).mutate(innerEvent);
        }
        for (OrderContactMechEvent.OrderContactMechStateCreated innerEvent : e.getOrderContactMechEvents()) {
            OrderContactMechState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderContactMechState>)this.getOrderContactMechanisms()).getOrAddDefault(((OrderContactMechEvent.SqlOrderContactMechEvent)innerEvent).getOrderContactMechEventId().getContactMechPurposeTypeId());
            ((OrderContactMechState.SqlOrderContactMechState)innerState).mutate(innerEvent);
        }
        for (OrderItemEvent.OrderItemStateCreated innerEvent : e.getOrderItemEvents()) {
            OrderItemState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderItemState>)this.getOrderItems()).getOrAddDefault(((OrderItemEvent.SqlOrderItemEvent)innerEvent).getOrderItemEventId().getOrderItemSeqId());
            ((OrderItemState.SqlOrderItemState)innerState).mutate(innerEvent);
        }
        for (OrderAdjustmentEvent.OrderAdjustmentStateCreated innerEvent : e.getOrderAdjustmentEvents()) {
            OrderAdjustmentState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderAdjustmentState>)this.getOrderAdjustments()).getOrAddDefault(((OrderAdjustmentEvent.SqlOrderAdjustmentEvent)innerEvent).getOrderAdjustmentEventId().getOrderAdjustmentId());
            ((OrderAdjustmentState.SqlOrderAdjustmentState)innerState).mutate(innerEvent);
        }
        for (OrderShipGroupEvent.OrderShipGroupStateCreated innerEvent : e.getOrderShipGroupEvents()) {
            OrderShipGroupState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderShipGroupState>)this.getOrderShipGroups()).getOrAddDefault(((OrderShipGroupEvent.SqlOrderShipGroupEvent)innerEvent).getOrderShipGroupEventId().getShipGroupSeqId());
            ((OrderShipGroupState.SqlOrderShipGroupState)innerState).mutate(innerEvent);
        }
    }

    public void merge(OrderHeaderState s) {
        if (s == this) {
            return;
        }
        this.setOrderTypeId(s.getOrderTypeId());
        this.setOrderName(s.getOrderName());
        this.setExternalId(s.getExternalId());
        this.setSalesChannelEnumId(s.getSalesChannelEnumId());
        this.setOrderDate(s.getOrderDate());
        this.setPriority(s.getPriority());
        this.setEntryDate(s.getEntryDate());
        this.setPickSheetPrintedDate(s.getPickSheetPrintedDate());
        this.setVisitId(s.getVisitId());
        this.setStatusId(s.getStatusId());
        this.setFirstAttemptOrderId(s.getFirstAttemptOrderId());
        this.setCurrencyUomId(s.getCurrencyUomId());
        this.setSyncStatusId(s.getSyncStatusId());
        this.setBillingAccountId(s.getBillingAccountId());
        this.setOriginFacilityId(s.getOriginFacilityId());
        this.setProductStoreId(s.getProductStoreId());
        this.setTerminalId(s.getTerminalId());
        this.setTransactionId(s.getTransactionId());
        this.setAutoOrderShoppingListId(s.getAutoOrderShoppingListId());
        this.setNeedsInventoryIssuance(s.getNeedsInventoryIssuance());
        this.setIsRushOrder(s.getIsRushOrder());
        this.setInternalCode(s.getInternalCode());
        this.setRemainingSubTotal(s.getRemainingSubTotal());
        this.setGrandTotal(s.getGrandTotal());
        this.setIsViewed(s.getIsViewed());
        this.setInvoicePerShipment(s.getInvoicePerShipment());
        this.setMemo(s.getMemo());
        this.setContactDescription(s.getContactDescription());
        this.setFulfillmentStatusId(s.getFulfillmentStatusId());

        if (s.getOrderRoles() != null) {
            Iterable<OrderRoleState> iterable;
            if (s.getOrderRoles().isLazy()) {
                iterable = s.getOrderRoles().getLoadedStates();
            } else {
                iterable = s.getOrderRoles();
            }
            if (iterable != null) {
                for (OrderRoleState ss : iterable) {
                    OrderRoleState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<PartyRoleId, OrderRoleState>)this.getOrderRoles()).getOrAddDefault(ss.getPartyRoleId());
                    ((AbstractOrderRoleState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getOrderRoles() != null) {
            if (s.getOrderRoles() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getOrderRoles()).getRemovedStates() != null) {
                    for (OrderRoleState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<PartyRoleId, OrderRoleState>)s.getOrderRoles()).getRemovedStates()) {
                        OrderRoleState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<PartyRoleId, OrderRoleState>)this.getOrderRoles()).getOrAddDefault(ss.getPartyRoleId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getOrderRoles()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getOrderRoles().isAllLoaded()) {
                    Set<PartyRoleId> removedStateIds = new HashSet<>(this.getOrderRoles().stream().map(i -> i.getPartyRoleId()).collect(java.util.stream.Collectors.toList()));
                    s.getOrderRoles().forEach(i -> removedStateIds.remove(i.getPartyRoleId()));
                    for (PartyRoleId i : removedStateIds) {
                        OrderRoleState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<PartyRoleId, OrderRoleState>)this.getOrderRoles()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getOrderRoles()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }

        if (s.getOrderContactMechanisms() != null) {
            Iterable<OrderContactMechState> iterable;
            if (s.getOrderContactMechanisms().isLazy()) {
                iterable = s.getOrderContactMechanisms().getLoadedStates();
            } else {
                iterable = s.getOrderContactMechanisms();
            }
            if (iterable != null) {
                for (OrderContactMechState ss : iterable) {
                    OrderContactMechState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderContactMechState>)this.getOrderContactMechanisms()).getOrAddDefault(ss.getContactMechPurposeTypeId());
                    ((AbstractOrderContactMechState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getOrderContactMechanisms() != null) {
            if (s.getOrderContactMechanisms() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getOrderContactMechanisms()).getRemovedStates() != null) {
                    for (OrderContactMechState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, OrderContactMechState>)s.getOrderContactMechanisms()).getRemovedStates()) {
                        OrderContactMechState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderContactMechState>)this.getOrderContactMechanisms()).getOrAddDefault(ss.getContactMechPurposeTypeId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getOrderContactMechanisms()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getOrderContactMechanisms().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getOrderContactMechanisms().stream().map(i -> i.getContactMechPurposeTypeId()).collect(java.util.stream.Collectors.toList()));
                    s.getOrderContactMechanisms().forEach(i -> removedStateIds.remove(i.getContactMechPurposeTypeId()));
                    for (String i : removedStateIds) {
                        OrderContactMechState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderContactMechState>)this.getOrderContactMechanisms()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getOrderContactMechanisms()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }

        if (s.getOrderItems() != null) {
            Iterable<OrderItemState> iterable;
            if (s.getOrderItems().isLazy()) {
                iterable = s.getOrderItems().getLoadedStates();
            } else {
                iterable = s.getOrderItems();
            }
            if (iterable != null) {
                for (OrderItemState ss : iterable) {
                    OrderItemState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderItemState>)this.getOrderItems()).getOrAddDefault(ss.getOrderItemSeqId());
                    ((AbstractOrderItemState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getOrderItems() != null) {
            if (s.getOrderItems() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getOrderItems()).getRemovedStates() != null) {
                    for (OrderItemState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, OrderItemState>)s.getOrderItems()).getRemovedStates()) {
                        OrderItemState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderItemState>)this.getOrderItems()).getOrAddDefault(ss.getOrderItemSeqId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getOrderItems()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getOrderItems().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getOrderItems().stream().map(i -> i.getOrderItemSeqId()).collect(java.util.stream.Collectors.toList()));
                    s.getOrderItems().forEach(i -> removedStateIds.remove(i.getOrderItemSeqId()));
                    for (String i : removedStateIds) {
                        OrderItemState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderItemState>)this.getOrderItems()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getOrderItems()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }

        if (s.getOrderAdjustments() != null) {
            Iterable<OrderAdjustmentState> iterable;
            if (s.getOrderAdjustments().isLazy()) {
                iterable = s.getOrderAdjustments().getLoadedStates();
            } else {
                iterable = s.getOrderAdjustments();
            }
            if (iterable != null) {
                for (OrderAdjustmentState ss : iterable) {
                    OrderAdjustmentState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderAdjustmentState>)this.getOrderAdjustments()).getOrAddDefault(ss.getOrderAdjustmentId());
                    ((AbstractOrderAdjustmentState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getOrderAdjustments() != null) {
            if (s.getOrderAdjustments() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getOrderAdjustments()).getRemovedStates() != null) {
                    for (OrderAdjustmentState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, OrderAdjustmentState>)s.getOrderAdjustments()).getRemovedStates()) {
                        OrderAdjustmentState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderAdjustmentState>)this.getOrderAdjustments()).getOrAddDefault(ss.getOrderAdjustmentId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getOrderAdjustments()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getOrderAdjustments().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getOrderAdjustments().stream().map(i -> i.getOrderAdjustmentId()).collect(java.util.stream.Collectors.toList()));
                    s.getOrderAdjustments().forEach(i -> removedStateIds.remove(i.getOrderAdjustmentId()));
                    for (String i : removedStateIds) {
                        OrderAdjustmentState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderAdjustmentState>)this.getOrderAdjustments()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getOrderAdjustments()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }

        if (s.getOrderShipGroups() != null) {
            Iterable<OrderShipGroupState> iterable;
            if (s.getOrderShipGroups().isLazy()) {
                iterable = s.getOrderShipGroups().getLoadedStates();
            } else {
                iterable = s.getOrderShipGroups();
            }
            if (iterable != null) {
                for (OrderShipGroupState ss : iterable) {
                    OrderShipGroupState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderShipGroupState>)this.getOrderShipGroups()).getOrAddDefault(ss.getShipGroupSeqId());
                    ((AbstractOrderShipGroupState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getOrderShipGroups() != null) {
            if (s.getOrderShipGroups() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getOrderShipGroups()).getRemovedStates() != null) {
                    for (OrderShipGroupState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, OrderShipGroupState>)s.getOrderShipGroups()).getRemovedStates()) {
                        OrderShipGroupState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderShipGroupState>)this.getOrderShipGroups()).getOrAddDefault(ss.getShipGroupSeqId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getOrderShipGroups()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getOrderShipGroups().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getOrderShipGroups().stream().map(i -> i.getShipGroupSeqId()).collect(java.util.stream.Collectors.toList()));
                    s.getOrderShipGroups().forEach(i -> removedStateIds.remove(i.getShipGroupSeqId()));
                    for (String i : removedStateIds) {
                        OrderShipGroupState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderShipGroupState>)this.getOrderShipGroups()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getOrderShipGroups()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(OrderStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getOrderTypeId() == null) {
            if (e.getIsPropertyOrderTypeIdRemoved() != null && e.getIsPropertyOrderTypeIdRemoved()) {
                this.setOrderTypeId(null);
            }
        } else {
            this.setOrderTypeId(e.getOrderTypeId());
        }
        if (e.getOrderName() == null) {
            if (e.getIsPropertyOrderNameRemoved() != null && e.getIsPropertyOrderNameRemoved()) {
                this.setOrderName(null);
            }
        } else {
            this.setOrderName(e.getOrderName());
        }
        if (e.getExternalId() == null) {
            if (e.getIsPropertyExternalIdRemoved() != null && e.getIsPropertyExternalIdRemoved()) {
                this.setExternalId(null);
            }
        } else {
            this.setExternalId(e.getExternalId());
        }
        if (e.getSalesChannelEnumId() == null) {
            if (e.getIsPropertySalesChannelEnumIdRemoved() != null && e.getIsPropertySalesChannelEnumIdRemoved()) {
                this.setSalesChannelEnumId(null);
            }
        } else {
            this.setSalesChannelEnumId(e.getSalesChannelEnumId());
        }
        if (e.getOrderDate() == null) {
            if (e.getIsPropertyOrderDateRemoved() != null && e.getIsPropertyOrderDateRemoved()) {
                this.setOrderDate(null);
            }
        } else {
            this.setOrderDate(e.getOrderDate());
        }
        if (e.getPriority() == null) {
            if (e.getIsPropertyPriorityRemoved() != null && e.getIsPropertyPriorityRemoved()) {
                this.setPriority(null);
            }
        } else {
            this.setPriority(e.getPriority());
        }
        if (e.getEntryDate() == null) {
            if (e.getIsPropertyEntryDateRemoved() != null && e.getIsPropertyEntryDateRemoved()) {
                this.setEntryDate(null);
            }
        } else {
            this.setEntryDate(e.getEntryDate());
        }
        if (e.getPickSheetPrintedDate() == null) {
            if (e.getIsPropertyPickSheetPrintedDateRemoved() != null && e.getIsPropertyPickSheetPrintedDateRemoved()) {
                this.setPickSheetPrintedDate(null);
            }
        } else {
            this.setPickSheetPrintedDate(e.getPickSheetPrintedDate());
        }
        if (e.getVisitId() == null) {
            if (e.getIsPropertyVisitIdRemoved() != null && e.getIsPropertyVisitIdRemoved()) {
                this.setVisitId(null);
            }
        } else {
            this.setVisitId(e.getVisitId());
        }
        if (e.getStatusId() == null) {
            if (e.getIsPropertyStatusIdRemoved() != null && e.getIsPropertyStatusIdRemoved()) {
                this.setStatusId(null);
            }
        } else {
            this.setStatusId(e.getStatusId());
        }
        if (e.getFirstAttemptOrderId() == null) {
            if (e.getIsPropertyFirstAttemptOrderIdRemoved() != null && e.getIsPropertyFirstAttemptOrderIdRemoved()) {
                this.setFirstAttemptOrderId(null);
            }
        } else {
            this.setFirstAttemptOrderId(e.getFirstAttemptOrderId());
        }
        if (e.getCurrencyUomId() == null) {
            if (e.getIsPropertyCurrencyUomIdRemoved() != null && e.getIsPropertyCurrencyUomIdRemoved()) {
                this.setCurrencyUomId(null);
            }
        } else {
            this.setCurrencyUomId(e.getCurrencyUomId());
        }
        if (e.getSyncStatusId() == null) {
            if (e.getIsPropertySyncStatusIdRemoved() != null && e.getIsPropertySyncStatusIdRemoved()) {
                this.setSyncStatusId(null);
            }
        } else {
            this.setSyncStatusId(e.getSyncStatusId());
        }
        if (e.getBillingAccountId() == null) {
            if (e.getIsPropertyBillingAccountIdRemoved() != null && e.getIsPropertyBillingAccountIdRemoved()) {
                this.setBillingAccountId(null);
            }
        } else {
            this.setBillingAccountId(e.getBillingAccountId());
        }
        if (e.getOriginFacilityId() == null) {
            if (e.getIsPropertyOriginFacilityIdRemoved() != null && e.getIsPropertyOriginFacilityIdRemoved()) {
                this.setOriginFacilityId(null);
            }
        } else {
            this.setOriginFacilityId(e.getOriginFacilityId());
        }
        if (e.getProductStoreId() == null) {
            if (e.getIsPropertyProductStoreIdRemoved() != null && e.getIsPropertyProductStoreIdRemoved()) {
                this.setProductStoreId(null);
            }
        } else {
            this.setProductStoreId(e.getProductStoreId());
        }
        if (e.getTerminalId() == null) {
            if (e.getIsPropertyTerminalIdRemoved() != null && e.getIsPropertyTerminalIdRemoved()) {
                this.setTerminalId(null);
            }
        } else {
            this.setTerminalId(e.getTerminalId());
        }
        if (e.getTransactionId() == null) {
            if (e.getIsPropertyTransactionIdRemoved() != null && e.getIsPropertyTransactionIdRemoved()) {
                this.setTransactionId(null);
            }
        } else {
            this.setTransactionId(e.getTransactionId());
        }
        if (e.getAutoOrderShoppingListId() == null) {
            if (e.getIsPropertyAutoOrderShoppingListIdRemoved() != null && e.getIsPropertyAutoOrderShoppingListIdRemoved()) {
                this.setAutoOrderShoppingListId(null);
            }
        } else {
            this.setAutoOrderShoppingListId(e.getAutoOrderShoppingListId());
        }
        if (e.getNeedsInventoryIssuance() == null) {
            if (e.getIsPropertyNeedsInventoryIssuanceRemoved() != null && e.getIsPropertyNeedsInventoryIssuanceRemoved()) {
                this.setNeedsInventoryIssuance(null);
            }
        } else {
            this.setNeedsInventoryIssuance(e.getNeedsInventoryIssuance());
        }
        if (e.getIsRushOrder() == null) {
            if (e.getIsPropertyIsRushOrderRemoved() != null && e.getIsPropertyIsRushOrderRemoved()) {
                this.setIsRushOrder(null);
            }
        } else {
            this.setIsRushOrder(e.getIsRushOrder());
        }
        if (e.getInternalCode() == null) {
            if (e.getIsPropertyInternalCodeRemoved() != null && e.getIsPropertyInternalCodeRemoved()) {
                this.setInternalCode(null);
            }
        } else {
            this.setInternalCode(e.getInternalCode());
        }
        if (e.getRemainingSubTotal() == null) {
            if (e.getIsPropertyRemainingSubTotalRemoved() != null && e.getIsPropertyRemainingSubTotalRemoved()) {
                this.setRemainingSubTotal(null);
            }
        } else {
            this.setRemainingSubTotal(e.getRemainingSubTotal());
        }
        if (e.getGrandTotal() == null) {
            if (e.getIsPropertyGrandTotalRemoved() != null && e.getIsPropertyGrandTotalRemoved()) {
                this.setGrandTotal(null);
            }
        } else {
            this.setGrandTotal(e.getGrandTotal());
        }
        if (e.getIsViewed() == null) {
            if (e.getIsPropertyIsViewedRemoved() != null && e.getIsPropertyIsViewedRemoved()) {
                this.setIsViewed(null);
            }
        } else {
            this.setIsViewed(e.getIsViewed());
        }
        if (e.getInvoicePerShipment() == null) {
            if (e.getIsPropertyInvoicePerShipmentRemoved() != null && e.getIsPropertyInvoicePerShipmentRemoved()) {
                this.setInvoicePerShipment(null);
            }
        } else {
            this.setInvoicePerShipment(e.getInvoicePerShipment());
        }
        if (e.getMemo() == null) {
            if (e.getIsPropertyMemoRemoved() != null && e.getIsPropertyMemoRemoved()) {
                this.setMemo(null);
            }
        } else {
            this.setMemo(e.getMemo());
        }
        if (e.getContactDescription() == null) {
            if (e.getIsPropertyContactDescriptionRemoved() != null && e.getIsPropertyContactDescriptionRemoved()) {
                this.setContactDescription(null);
            }
        } else {
            this.setContactDescription(e.getContactDescription());
        }
        if (e.getFulfillmentStatusId() == null) {
            if (e.getIsPropertyFulfillmentStatusIdRemoved() != null && e.getIsPropertyFulfillmentStatusIdRemoved()) {
                this.setFulfillmentStatusId(null);
            }
        } else {
            this.setFulfillmentStatusId(e.getFulfillmentStatusId());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (OrderRoleEvent innerEvent : e.getOrderRoleEvents()) {
            OrderRoleState innerState = ((EntityStateCollection.MutableEntityStateCollection<PartyRoleId, OrderRoleState>)this.getOrderRoles()).getOrAddDefault(((OrderRoleEvent.SqlOrderRoleEvent)innerEvent).getOrderRoleEventId().getPartyRoleId());
            ((OrderRoleState.SqlOrderRoleState)innerState).mutate(innerEvent);
        }
        for (OrderContactMechEvent innerEvent : e.getOrderContactMechEvents()) {
            OrderContactMechState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderContactMechState>)this.getOrderContactMechanisms()).getOrAddDefault(((OrderContactMechEvent.SqlOrderContactMechEvent)innerEvent).getOrderContactMechEventId().getContactMechPurposeTypeId());
            ((OrderContactMechState.SqlOrderContactMechState)innerState).mutate(innerEvent);
        }
        for (OrderItemEvent innerEvent : e.getOrderItemEvents()) {
            OrderItemState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderItemState>)this.getOrderItems()).getOrAddDefault(((OrderItemEvent.SqlOrderItemEvent)innerEvent).getOrderItemEventId().getOrderItemSeqId());
            ((OrderItemState.SqlOrderItemState)innerState).mutate(innerEvent);
            if (innerEvent instanceof OrderItemEvent.OrderItemStateRemoved) {
                //OrderItemEvent.OrderItemStateRemoved removed = (OrderItemEvent.OrderItemStateRemoved)innerEvent;
                ((EntityStateCollection.MutableEntityStateCollection)this.getOrderItems()).removeState(innerState);
            }
        }
        for (OrderAdjustmentEvent innerEvent : e.getOrderAdjustmentEvents()) {
            OrderAdjustmentState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderAdjustmentState>)this.getOrderAdjustments()).getOrAddDefault(((OrderAdjustmentEvent.SqlOrderAdjustmentEvent)innerEvent).getOrderAdjustmentEventId().getOrderAdjustmentId());
            ((OrderAdjustmentState.SqlOrderAdjustmentState)innerState).mutate(innerEvent);
        }
        for (OrderShipGroupEvent innerEvent : e.getOrderShipGroupEvents()) {
            OrderShipGroupState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, OrderShipGroupState>)this.getOrderShipGroups()).getOrAddDefault(((OrderShipGroupEvent.SqlOrderShipGroupEvent)innerEvent).getOrderShipGroupEventId().getShipGroupSeqId());
            ((OrderShipGroupState.SqlOrderShipGroupState)innerState).mutate(innerEvent);
        }
    }

    public void when(AbstractOrderEvent.FulfillmentStatusUpdated e) {
        throwOnWrongEvent(e);

        OrderItemQuantityAllocationValue[] orderItemAllocations = e.getOrderItemAllocations();
        OrderItemQuantityAllocationValue[] OrderItemAllocations = orderItemAllocations;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        OrderHeaderState updatedOrderHeaderState = ApplicationContext.current.get(IUpdateFulfillmentStatusLogic.class).mutate(
                this, orderItemAllocations, MutationContext.of(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException("Current MutationContext implementation only supports returning the same state instance");}}));


        if (this != updatedOrderHeaderState) { merge(updatedOrderHeaderState); } //else do nothing

    }

    public void save() {
        if (orderRoles instanceof Saveable) {
            ((Saveable)orderRoles).save();
        }
        if (orderContactMechanisms instanceof Saveable) {
            ((Saveable)orderContactMechanisms).save();
        }
        if (orderItems instanceof Saveable) {
            ((Saveable)orderItems).save();
        }
        if (orderAdjustments instanceof Saveable) {
            ((Saveable)orderAdjustments).save();
        }
        if (orderShipGroups instanceof Saveable) {
            ((Saveable)orderShipGroups).save();
        }
    }

    protected void throwOnWrongEvent(OrderEvent event) {
        String stateEntityId = this.getOrderId(); // Aggregate Id
        String eventEntityId = ((OrderEvent.SqlOrderEvent)event).getOrderEventId().getOrderId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((OrderEvent.SqlOrderEvent)event).getOrderEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getOrderEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleOrderHeaderState extends AbstractOrderHeaderState {

        public SimpleOrderHeaderState() {
        }

        public SimpleOrderHeaderState(List<Event> events) {
            super(events);
        }

        public static SimpleOrderHeaderState newForReapplying() {
            SimpleOrderHeaderState s = new SimpleOrderHeaderState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleOrderRoleStateCollection implements EntityStateCollection.MutableEntityStateCollection<PartyRoleId, OrderRoleState>, Collection<OrderRoleState> {

        @Override
        public OrderRoleState get(PartyRoleId partyRoleId) {
            return protectedOrderRoles.stream().filter(
                            e -> e.getPartyRoleId().equals(partyRoleId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<OrderRoleState> getLoadedStates() {
            return protectedOrderRoles;
        }

        @Override
        public OrderRoleState getOrAddDefault(PartyRoleId partyRoleId) {
            OrderRoleState s = get(partyRoleId);
            if (s == null) {
                OrderRoleId globalId = new OrderRoleId(getOrderId(), partyRoleId);
                AbstractOrderRoleState state = new AbstractOrderRoleState.SimpleOrderRoleState();
                state.setOrderRoleId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedOrderRoles.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedOrderRoles.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedOrderRoles.contains(o);
        }

        @Override
        public Iterator<OrderRoleState> iterator() {
            return protectedOrderRoles.iterator();
        }

        @Override
        public java.util.stream.Stream<OrderRoleState> stream() {
            return protectedOrderRoles.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedOrderRoles.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedOrderRoles.toArray(a);
        }

        @Override
        public boolean add(OrderRoleState s) {
            if (s instanceof AbstractOrderRoleState) {
                AbstractOrderRoleState state = (AbstractOrderRoleState) s;
                state.setProtectedOrderHeaderState(AbstractOrderHeaderState.this);
            }
            return protectedOrderRoles.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractOrderRoleState) {
                AbstractOrderRoleState s = (AbstractOrderRoleState) o;
                s.setProtectedOrderHeaderState(null);
            }
            return protectedOrderRoles.remove(o);
        }

        @Override
        public boolean removeState(OrderRoleState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedOrderRoles.containsAll(c);
        }

        @Override
        public boolean addAll(Collection<? extends OrderRoleState> c) {
            return protectedOrderRoles.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedOrderRoles.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedOrderRoles.retainAll(c);
        }

        @Override
        public void clear() {
            protectedOrderRoles.clear();
        }
    }

    class SimpleOrderContactMechStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, OrderContactMechState>, Collection<OrderContactMechState> {

        @Override
        public OrderContactMechState get(String contactMechPurposeTypeId) {
            return protectedOrderContactMechanisms.stream().filter(
                            e -> e.getContactMechPurposeTypeId().equals(contactMechPurposeTypeId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<OrderContactMechState> getLoadedStates() {
            return protectedOrderContactMechanisms;
        }

        @Override
        public OrderContactMechState getOrAddDefault(String contactMechPurposeTypeId) {
            OrderContactMechState s = get(contactMechPurposeTypeId);
            if (s == null) {
                OrderContactMechId globalId = new OrderContactMechId(getOrderId(), contactMechPurposeTypeId);
                AbstractOrderContactMechState state = new AbstractOrderContactMechState.SimpleOrderContactMechState();
                state.setOrderContactMechId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedOrderContactMechanisms.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedOrderContactMechanisms.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedOrderContactMechanisms.contains(o);
        }

        @Override
        public Iterator<OrderContactMechState> iterator() {
            return protectedOrderContactMechanisms.iterator();
        }

        @Override
        public java.util.stream.Stream<OrderContactMechState> stream() {
            return protectedOrderContactMechanisms.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedOrderContactMechanisms.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedOrderContactMechanisms.toArray(a);
        }

        @Override
        public boolean add(OrderContactMechState s) {
            if (s instanceof AbstractOrderContactMechState) {
                AbstractOrderContactMechState state = (AbstractOrderContactMechState) s;
                state.setProtectedOrderHeaderState(AbstractOrderHeaderState.this);
            }
            return protectedOrderContactMechanisms.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractOrderContactMechState) {
                AbstractOrderContactMechState s = (AbstractOrderContactMechState) o;
                s.setProtectedOrderHeaderState(null);
            }
            return protectedOrderContactMechanisms.remove(o);
        }

        @Override
        public boolean removeState(OrderContactMechState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedOrderContactMechanisms.containsAll(c);
        }

        @Override
        public boolean addAll(Collection<? extends OrderContactMechState> c) {
            return protectedOrderContactMechanisms.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedOrderContactMechanisms.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedOrderContactMechanisms.retainAll(c);
        }

        @Override
        public void clear() {
            protectedOrderContactMechanisms.clear();
        }
    }

    class SimpleOrderItemStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, OrderItemState>, Collection<OrderItemState> {

        @Override
        public OrderItemState get(String orderItemSeqId) {
            return protectedOrderItems.stream().filter(
                            e -> e.getOrderItemSeqId().equals(orderItemSeqId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<OrderItemState> getLoadedStates() {
            return protectedOrderItems;
        }

        @Override
        public OrderItemState getOrAddDefault(String orderItemSeqId) {
            OrderItemState s = get(orderItemSeqId);
            if (s == null) {
                OrderItemId globalId = new OrderItemId(getOrderId(), orderItemSeqId);
                AbstractOrderItemState state = new AbstractOrderItemState.SimpleOrderItemState();
                state.setOrderItemId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedOrderItems.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedOrderItems.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedOrderItems.contains(o);
        }

        @Override
        public Iterator<OrderItemState> iterator() {
            return protectedOrderItems.iterator();
        }

        @Override
        public java.util.stream.Stream<OrderItemState> stream() {
            return protectedOrderItems.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedOrderItems.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedOrderItems.toArray(a);
        }

        @Override
        public boolean add(OrderItemState s) {
            if (s instanceof AbstractOrderItemState) {
                AbstractOrderItemState state = (AbstractOrderItemState) s;
                state.setProtectedOrderHeaderState(AbstractOrderHeaderState.this);
            }
            return protectedOrderItems.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractOrderItemState) {
                AbstractOrderItemState s = (AbstractOrderItemState) o;
                s.setProtectedOrderHeaderState(null);
            }
            return protectedOrderItems.remove(o);
        }

        @Override
        public boolean removeState(OrderItemState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedOrderItems.containsAll(c);
        }

        @Override
        public boolean addAll(Collection<? extends OrderItemState> c) {
            return protectedOrderItems.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedOrderItems.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedOrderItems.retainAll(c);
        }

        @Override
        public void clear() {
            protectedOrderItems.clear();
        }
    }

    class SimpleOrderAdjustmentStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, OrderAdjustmentState>, Collection<OrderAdjustmentState> {

        @Override
        public OrderAdjustmentState get(String orderAdjustmentId) {
            return protectedOrderAdjustments.stream().filter(
                            e -> e.getOrderAdjustmentId().equals(orderAdjustmentId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<OrderAdjustmentState> getLoadedStates() {
            return protectedOrderAdjustments;
        }

        @Override
        public OrderAdjustmentState getOrAddDefault(String orderAdjustmentId) {
            OrderAdjustmentState s = get(orderAdjustmentId);
            if (s == null) {
                OrderIdOrderAdjustmentIdPair globalId = new OrderIdOrderAdjustmentIdPair(getOrderId(), orderAdjustmentId);
                AbstractOrderAdjustmentState state = new AbstractOrderAdjustmentState.SimpleOrderAdjustmentState();
                state.setOrderIdOrderAdjustmentIdPair(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedOrderAdjustments.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedOrderAdjustments.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedOrderAdjustments.contains(o);
        }

        @Override
        public Iterator<OrderAdjustmentState> iterator() {
            return protectedOrderAdjustments.iterator();
        }

        @Override
        public java.util.stream.Stream<OrderAdjustmentState> stream() {
            return protectedOrderAdjustments.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedOrderAdjustments.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedOrderAdjustments.toArray(a);
        }

        @Override
        public boolean add(OrderAdjustmentState s) {
            if (s instanceof AbstractOrderAdjustmentState) {
                AbstractOrderAdjustmentState state = (AbstractOrderAdjustmentState) s;
                state.setProtectedOrderHeaderState(AbstractOrderHeaderState.this);
            }
            return protectedOrderAdjustments.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractOrderAdjustmentState) {
                AbstractOrderAdjustmentState s = (AbstractOrderAdjustmentState) o;
                s.setProtectedOrderHeaderState(null);
            }
            return protectedOrderAdjustments.remove(o);
        }

        @Override
        public boolean removeState(OrderAdjustmentState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedOrderAdjustments.containsAll(c);
        }

        @Override
        public boolean addAll(Collection<? extends OrderAdjustmentState> c) {
            return protectedOrderAdjustments.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedOrderAdjustments.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedOrderAdjustments.retainAll(c);
        }

        @Override
        public void clear() {
            protectedOrderAdjustments.clear();
        }
    }

    class SimpleOrderShipGroupStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, OrderShipGroupState>, Collection<OrderShipGroupState> {

        @Override
        public OrderShipGroupState get(String shipGroupSeqId) {
            return protectedOrderShipGroups.stream().filter(
                            e -> e.getShipGroupSeqId().equals(shipGroupSeqId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<OrderShipGroupState> getLoadedStates() {
            return protectedOrderShipGroups;
        }

        @Override
        public OrderShipGroupState getOrAddDefault(String shipGroupSeqId) {
            OrderShipGroupState s = get(shipGroupSeqId);
            if (s == null) {
                OrderShipGroupId globalId = new OrderShipGroupId(getOrderId(), shipGroupSeqId);
                AbstractOrderShipGroupState state = new AbstractOrderShipGroupState.SimpleOrderShipGroupState();
                state.setOrderShipGroupId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedOrderShipGroups.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedOrderShipGroups.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedOrderShipGroups.contains(o);
        }

        @Override
        public Iterator<OrderShipGroupState> iterator() {
            return protectedOrderShipGroups.iterator();
        }

        @Override
        public java.util.stream.Stream<OrderShipGroupState> stream() {
            return protectedOrderShipGroups.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedOrderShipGroups.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedOrderShipGroups.toArray(a);
        }

        @Override
        public boolean add(OrderShipGroupState s) {
            if (s instanceof AbstractOrderShipGroupState) {
                AbstractOrderShipGroupState state = (AbstractOrderShipGroupState) s;
                state.setProtectedOrderHeaderState(AbstractOrderHeaderState.this);
            }
            return protectedOrderShipGroups.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractOrderShipGroupState) {
                AbstractOrderShipGroupState s = (AbstractOrderShipGroupState) o;
                s.setProtectedOrderHeaderState(null);
            }
            return protectedOrderShipGroups.remove(o);
        }

        @Override
        public boolean removeState(OrderShipGroupState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedOrderShipGroups.containsAll(c);
        }

        @Override
        public boolean addAll(Collection<? extends OrderShipGroupState> c) {
            return protectedOrderShipGroups.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedOrderShipGroups.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedOrderShipGroups.retainAll(c);
        }

        @Override
        public void clear() {
            protectedOrderShipGroups.clear();
        }
    }


}

