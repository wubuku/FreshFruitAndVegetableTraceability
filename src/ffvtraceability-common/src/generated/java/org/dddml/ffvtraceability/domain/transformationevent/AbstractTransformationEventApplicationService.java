// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.transformationevent;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import org.dddml.ffvtraceability.domain.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractTransformationEventApplicationService implements TransformationEventApplicationService {
    private TransformationEventStateRepository stateRepository;

    protected TransformationEventStateRepository getStateRepository() {
        return stateRepository;
    }

    private TransformationEventStateQueryRepository stateQueryRepository;

    protected TransformationEventStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    public AbstractTransformationEventApplicationService(TransformationEventStateRepository stateRepository, TransformationEventStateQueryRepository stateQueryRepository) {
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(TransformationEventCommand.CreateTransformationEvent c) {
        update(c, s -> {
        // //////////////////////////
        throwOnConcurrencyConflict(s, c);
        TransformationEventState.SqlTransformationEventState ss = ((TransformationEventState.SqlTransformationEventState)s);
        ss.setFoodUsedTlc(c.getFoodUsedTlc());
        ss.setFoodUsedProductDescription(c.getFoodUsedProductDescription());
        ss.setFoodUsedQuantityAndUom(c.getFoodUsedQuantityAndUom());
        ss.setFoodProducedNewTlc(c.getFoodProducedNewTlc());
        ss.setFoodProducedProductDescription(c.getFoodProducedProductDescription());
        ss.setFoodProducedQuantityAndUom(c.getFoodProducedQuantityAndUom());
        ss.setTransformationLocation(c.getTransformationLocation());
        ss.setDateTransformed(c.getDateTransformed());
        ss.setReferenceDocument(c.getReferenceDocument());
        ss.setDeleted(false);
        ss.setCreatedBy(c.getRequesterId());
        ss.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        ss.setCommandId(c.getCommandId());
        // //////////////////////////
        });
    }

    public void when(TransformationEventCommand.MergePatchTransformationEvent c) {
        update(c, s -> {
        // //////////////////////////////////
        throwOnConcurrencyConflict(s, c);
        TransformationEventState.SqlTransformationEventState ss = ((TransformationEventState.SqlTransformationEventState)s);
        if (c.getFoodUsedTlc() == null) {
            if (c.getIsPropertyFoodUsedTlcRemoved() != null && c.getIsPropertyFoodUsedTlcRemoved()) {
                ss.setFoodUsedTlc(null);
            }
        } else {
            ss.setFoodUsedTlc(c.getFoodUsedTlc());
        }
        if (c.getFoodUsedProductDescription() == null) {
            if (c.getIsPropertyFoodUsedProductDescriptionRemoved() != null && c.getIsPropertyFoodUsedProductDescriptionRemoved()) {
                ss.setFoodUsedProductDescription(null);
            }
        } else {
            ss.setFoodUsedProductDescription(c.getFoodUsedProductDescription());
        }
        if (c.getFoodUsedQuantityAndUom() == null) {
            if (c.getIsPropertyFoodUsedQuantityAndUomRemoved() != null && c.getIsPropertyFoodUsedQuantityAndUomRemoved()) {
                ss.setFoodUsedQuantityAndUom(null);
            }
        } else {
            ss.setFoodUsedQuantityAndUom(c.getFoodUsedQuantityAndUom());
        }
        if (c.getFoodProducedNewTlc() == null) {
            if (c.getIsPropertyFoodProducedNewTlcRemoved() != null && c.getIsPropertyFoodProducedNewTlcRemoved()) {
                ss.setFoodProducedNewTlc(null);
            }
        } else {
            ss.setFoodProducedNewTlc(c.getFoodProducedNewTlc());
        }
        if (c.getFoodProducedProductDescription() == null) {
            if (c.getIsPropertyFoodProducedProductDescriptionRemoved() != null && c.getIsPropertyFoodProducedProductDescriptionRemoved()) {
                ss.setFoodProducedProductDescription(null);
            }
        } else {
            ss.setFoodProducedProductDescription(c.getFoodProducedProductDescription());
        }
        if (c.getFoodProducedQuantityAndUom() == null) {
            if (c.getIsPropertyFoodProducedQuantityAndUomRemoved() != null && c.getIsPropertyFoodProducedQuantityAndUomRemoved()) {
                ss.setFoodProducedQuantityAndUom(null);
            }
        } else {
            ss.setFoodProducedQuantityAndUom(c.getFoodProducedQuantityAndUom());
        }
        if (c.getTransformationLocation() == null) {
            if (c.getIsPropertyTransformationLocationRemoved() != null && c.getIsPropertyTransformationLocationRemoved()) {
                ss.setTransformationLocation(null);
            }
        } else {
            ss.setTransformationLocation(c.getTransformationLocation());
        }
        if (c.getDateTransformed() == null) {
            if (c.getIsPropertyDateTransformedRemoved() != null && c.getIsPropertyDateTransformedRemoved()) {
                ss.setDateTransformed(null);
            }
        } else {
            ss.setDateTransformed(c.getDateTransformed());
        }
        if (c.getReferenceDocument() == null) {
            if (c.getIsPropertyReferenceDocumentRemoved() != null && c.getIsPropertyReferenceDocumentRemoved()) {
                ss.setReferenceDocument(null);
            }
        } else {
            ss.setReferenceDocument(c.getReferenceDocument());
        }
        ss.setUpdatedBy(c.getRequesterId());
        ss.setUpdatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        ss.setCommandId(c.getCommandId());
        // //////////////////////////////////
        });
    }

    public void when(TransformationEventCommand.DeleteTransformationEvent c) {
        update(c, s -> {
        throwOnConcurrencyConflict(s, c);
        // ///////////////////////////////////
        //todo
        // ///////////////////////////////////
        });
    }

    public TransformationEventState get(Long id) {
        TransformationEventState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<TransformationEventState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<TransformationEventState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<TransformationEventState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<TransformationEventState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public EventStoreAggregateId toEventStoreAggregateId(Long aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(TransformationEventCommand c, Consumer<TransformationEventState> action) {
        Long aggregateId = c.getEventId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        TransformationEventState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        TransformationEventCommand.throwOnInvalidStateTransition(state, c);
        action.accept(state);
        persist(eventStoreAggregateId, c.getVersion() == null ? TransformationEventState.VERSION_NULL : c.getVersion(), state); // State version may be null!

    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, TransformationEventState state) {
        getStateRepository().save(state);
    }

    protected boolean isDuplicateCommand(TransformationEventCommand command, EventStoreAggregateId eventStoreAggregateId, TransformationEventState state) {
        boolean duplicate = false;
        if (command.getVersion() == null) { command.setVersion(TransformationEventState.VERSION_NULL); }
        if (state.getVersion() != null && state.getVersion() == command.getVersion() + 1) {
            if (command.getCommandId() != null && command.getCommandId().equals(state.getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    protected static void throwOnConcurrencyConflict(TransformationEventState s, TransformationEventCommand c) {
        Long stateVersion = s.getVersion();
        Long commandVersion = c.getVersion();
        if (commandVersion == null) { commandVersion = TransformationEventState.VERSION_NULL; }
        if (!(stateVersion == null && commandVersion.equals(TransformationEventState.VERSION_NULL)) && !commandVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and command version (%2$s)", stateVersion, commandVersion);
        }
    }

    public static class SimpleTransformationEventApplicationService extends AbstractTransformationEventApplicationService {
        public SimpleTransformationEventApplicationService(TransformationEventStateRepository stateRepository, TransformationEventStateQueryRepository stateQueryRepository)
        {
            super(stateRepository, stateQueryRepository);
        }
    }

}

