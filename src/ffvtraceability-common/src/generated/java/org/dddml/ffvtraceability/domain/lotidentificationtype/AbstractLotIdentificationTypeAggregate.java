// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.lotidentificationtype;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractLotIdentificationTypeAggregate extends AbstractAggregate implements LotIdentificationTypeAggregate {
    private LotIdentificationTypeState.MutableLotIdentificationTypeState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractLotIdentificationTypeAggregate(LotIdentificationTypeState state) {
        this.state = (LotIdentificationTypeState.MutableLotIdentificationTypeState)state;
    }

    public LotIdentificationTypeState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(LotIdentificationTypeCommand.CreateLotIdentificationType c) {
        if (c.getVersion() == null) { c.setVersion(LotIdentificationTypeState.VERSION_NULL); }
        LotIdentificationTypeEvent e = map(c);
        apply(e);
    }

    public void mergePatch(LotIdentificationTypeCommand.MergePatchLotIdentificationType c) {
        LotIdentificationTypeEvent e = map(c);
        apply(e);
    }

    public void delete(LotIdentificationTypeCommand.DeleteLotIdentificationType c) {
        LotIdentificationTypeEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        LotIdentificationTypeCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected LotIdentificationTypeEvent map(LotIdentificationTypeCommand.CreateLotIdentificationType c) {
        LotIdentificationTypeEventId stateEventId = new LotIdentificationTypeEventId(c.getLotIdentificationTypeId(), c.getVersion());
        LotIdentificationTypeEvent.LotIdentificationTypeStateCreated e = newLotIdentificationTypeStateCreated(stateEventId);
        e.setDescription(c.getDescription());
        ((AbstractLotIdentificationTypeEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected LotIdentificationTypeEvent map(LotIdentificationTypeCommand.MergePatchLotIdentificationType c) {
        LotIdentificationTypeEventId stateEventId = new LotIdentificationTypeEventId(c.getLotIdentificationTypeId(), c.getVersion());
        LotIdentificationTypeEvent.LotIdentificationTypeStateMergePatched e = newLotIdentificationTypeStateMergePatched(stateEventId);
        e.setDescription(c.getDescription());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        ((AbstractLotIdentificationTypeEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected LotIdentificationTypeEvent map(LotIdentificationTypeCommand.DeleteLotIdentificationType c) {
        LotIdentificationTypeEventId stateEventId = new LotIdentificationTypeEventId(c.getLotIdentificationTypeId(), c.getVersion());
        LotIdentificationTypeEvent.LotIdentificationTypeStateDeleted e = newLotIdentificationTypeStateDeleted(stateEventId);
        ((AbstractLotIdentificationTypeEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected LotIdentificationTypeEvent.LotIdentificationTypeStateCreated newLotIdentificationTypeStateCreated(Long version, String commandId, String requesterId) {
        LotIdentificationTypeEventId stateEventId = new LotIdentificationTypeEventId(this.state.getLotIdentificationTypeId(), version);
        LotIdentificationTypeEvent.LotIdentificationTypeStateCreated e = newLotIdentificationTypeStateCreated(stateEventId);
        ((AbstractLotIdentificationTypeEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected LotIdentificationTypeEvent.LotIdentificationTypeStateMergePatched newLotIdentificationTypeStateMergePatched(Long version, String commandId, String requesterId) {
        LotIdentificationTypeEventId stateEventId = new LotIdentificationTypeEventId(this.state.getLotIdentificationTypeId(), version);
        LotIdentificationTypeEvent.LotIdentificationTypeStateMergePatched e = newLotIdentificationTypeStateMergePatched(stateEventId);
        ((AbstractLotIdentificationTypeEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected LotIdentificationTypeEvent.LotIdentificationTypeStateDeleted newLotIdentificationTypeStateDeleted(Long version, String commandId, String requesterId) {
        LotIdentificationTypeEventId stateEventId = new LotIdentificationTypeEventId(this.state.getLotIdentificationTypeId(), version);
        LotIdentificationTypeEvent.LotIdentificationTypeStateDeleted e = newLotIdentificationTypeStateDeleted(stateEventId);
        ((AbstractLotIdentificationTypeEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected LotIdentificationTypeEvent.LotIdentificationTypeStateCreated newLotIdentificationTypeStateCreated(LotIdentificationTypeEventId stateEventId) {
        return new AbstractLotIdentificationTypeEvent.SimpleLotIdentificationTypeStateCreated(stateEventId);
    }

    protected LotIdentificationTypeEvent.LotIdentificationTypeStateMergePatched newLotIdentificationTypeStateMergePatched(LotIdentificationTypeEventId stateEventId) {
        return new AbstractLotIdentificationTypeEvent.SimpleLotIdentificationTypeStateMergePatched(stateEventId);
    }

    protected LotIdentificationTypeEvent.LotIdentificationTypeStateDeleted newLotIdentificationTypeStateDeleted(LotIdentificationTypeEventId stateEventId) {
        return new AbstractLotIdentificationTypeEvent.SimpleLotIdentificationTypeStateDeleted(stateEventId);
    }


    public static class SimpleLotIdentificationTypeAggregate extends AbstractLotIdentificationTypeAggregate {
        public SimpleLotIdentificationTypeAggregate(LotIdentificationTypeState state) {
            super(state);
        }

    }

}

