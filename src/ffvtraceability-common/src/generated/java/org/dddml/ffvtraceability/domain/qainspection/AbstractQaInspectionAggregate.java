// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.qainspection;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractQaInspectionAggregate extends AbstractAggregate implements QaInspectionAggregate {
    private QaInspectionState.MutableQaInspectionState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractQaInspectionAggregate(QaInspectionState state) {
        this.state = (QaInspectionState.MutableQaInspectionState)state;
    }

    public QaInspectionState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(QaInspectionCommand.CreateQaInspection c) {
        if (c.getVersion() == null) { c.setVersion(QaInspectionState.VERSION_NULL); }
        QaInspectionEvent e = map(c);
        apply(e);
    }

    public void mergePatch(QaInspectionCommand.MergePatchQaInspection c) {
        QaInspectionEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        QaInspectionCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected QaInspectionEvent map(QaInspectionCommand.CreateQaInspection c) {
        QaInspectionEventId stateEventId = new QaInspectionEventId(c.getQaInspectionId(), c.getVersion());
        QaInspectionEvent.QaInspectionStateCreated e = newQaInspectionStateCreated(stateEventId);
        e.setReceiptId(c.getReceiptId());
        e.setStatusId(c.getStatusId());
        e.setInspectionTypeId(c.getInspectionTypeId());
        e.setComments(c.getComments());
        e.setInspectionFacilityId(c.getInspectionFacilityId());
        e.setInspectedBy(c.getInspectedBy());
        e.setInspectedAt(c.getInspectedAt());
        ((AbstractQaInspectionEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected QaInspectionEvent map(QaInspectionCommand.MergePatchQaInspection c) {
        QaInspectionEventId stateEventId = new QaInspectionEventId(c.getQaInspectionId(), c.getVersion());
        QaInspectionEvent.QaInspectionStateMergePatched e = newQaInspectionStateMergePatched(stateEventId);
        e.setReceiptId(c.getReceiptId());
        e.setStatusId(c.getStatusId());
        e.setInspectionTypeId(c.getInspectionTypeId());
        e.setComments(c.getComments());
        e.setInspectionFacilityId(c.getInspectionFacilityId());
        e.setInspectedBy(c.getInspectedBy());
        e.setInspectedAt(c.getInspectedAt());
        e.setIsPropertyReceiptIdRemoved(c.getIsPropertyReceiptIdRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyInspectionTypeIdRemoved(c.getIsPropertyInspectionTypeIdRemoved());
        e.setIsPropertyCommentsRemoved(c.getIsPropertyCommentsRemoved());
        e.setIsPropertyInspectionFacilityIdRemoved(c.getIsPropertyInspectionFacilityIdRemoved());
        e.setIsPropertyInspectedByRemoved(c.getIsPropertyInspectedByRemoved());
        e.setIsPropertyInspectedAtRemoved(c.getIsPropertyInspectedAtRemoved());
        ((AbstractQaInspectionEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected QaInspectionEvent.QaInspectionStateCreated newQaInspectionStateCreated(Long version, String commandId, String requesterId) {
        QaInspectionEventId stateEventId = new QaInspectionEventId(this.state.getQaInspectionId(), version);
        QaInspectionEvent.QaInspectionStateCreated e = newQaInspectionStateCreated(stateEventId);
        ((AbstractQaInspectionEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected QaInspectionEvent.QaInspectionStateMergePatched newQaInspectionStateMergePatched(Long version, String commandId, String requesterId) {
        QaInspectionEventId stateEventId = new QaInspectionEventId(this.state.getQaInspectionId(), version);
        QaInspectionEvent.QaInspectionStateMergePatched e = newQaInspectionStateMergePatched(stateEventId);
        ((AbstractQaInspectionEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected QaInspectionEvent.QaInspectionStateCreated newQaInspectionStateCreated(QaInspectionEventId stateEventId) {
        return new AbstractQaInspectionEvent.SimpleQaInspectionStateCreated(stateEventId);
    }

    protected QaInspectionEvent.QaInspectionStateMergePatched newQaInspectionStateMergePatched(QaInspectionEventId stateEventId) {
        return new AbstractQaInspectionEvent.SimpleQaInspectionStateMergePatched(stateEventId);
    }


    public static class SimpleQaInspectionAggregate extends AbstractQaInspectionAggregate {
        public SimpleQaInspectionAggregate(QaInspectionState state) {
            super(state);
        }

    }

}

