// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractPartyContactMechBaseEvent extends AbstractEvent implements PartyContactMechBaseEvent.SqlPartyContactMechBaseEvent {
    private PartyContactMechBaseEventId partyContactMechBaseEventId = new PartyContactMechBaseEventId();

    public PartyContactMechBaseEventId getPartyContactMechBaseEventId() {
        return this.partyContactMechBaseEventId;
    }

    public void setPartyContactMechBaseEventId(PartyContactMechBaseEventId eventId) {
        this.partyContactMechBaseEventId = eventId;
    }
    
    public PartyContactMechBaseId getPartyContactMechBaseId() {
        return getPartyContactMechBaseEventId().getPartyContactMechBaseId();
    }

    public void setPartyContactMechBaseId(PartyContactMechBaseId partyContactMechBaseId) {
        getPartyContactMechBaseEventId().setPartyContactMechBaseId(partyContactMechBaseId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getPartyContactMechBaseEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getPartyContactMechBaseEventId().setVersion(version);
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractPartyContactMechBaseEvent() {
    }

    protected AbstractPartyContactMechBaseEvent(PartyContactMechBaseEventId eventId) {
        this.partyContactMechBaseEventId = eventId;
    }

    protected PartyContactMechEventDao getPartyContactMechEventDao() {
        return (PartyContactMechEventDao)ApplicationContext.current.get("partyContactMechEventDao");
    }

    protected PartyContactMechEventId newPartyContactMechEventId(OffsetDateTime fromDate)
    {
        PartyContactMechEventId eventId = new PartyContactMechEventId(this.getPartyContactMechBaseEventId().getPartyContactMechBaseId(), 
            fromDate, 
            this.getPartyContactMechBaseEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(PartyContactMechEvent.SqlPartyContactMechEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(PartyContactMechBaseEvent.SqlPartyContactMechBaseEvent oe, PartyContactMechEvent.SqlPartyContactMechEvent e)
    {
        if (!oe.getPartyContactMechBaseEventId().getPartyContactMechBaseId().equals(e.getPartyContactMechEventId().getPartyContactMechBaseId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id PartyContactMechBaseId %1$s but inner id PartyContactMechBaseId %2$s", 
                oe.getPartyContactMechBaseEventId().getPartyContactMechBaseId(), e.getPartyContactMechEventId().getPartyContactMechBaseId());
        }
    }

    public PartyContactMechEvent.PartyContactMechStateCreated newPartyContactMechStateCreated(OffsetDateTime fromDate) {
        return new AbstractPartyContactMechEvent.SimplePartyContactMechStateCreated(newPartyContactMechEventId(fromDate));
    }

    public PartyContactMechEvent.PartyContactMechStateMergePatched newPartyContactMechStateMergePatched(OffsetDateTime fromDate) {
        return new AbstractPartyContactMechEvent.SimplePartyContactMechStateMergePatched(newPartyContactMechEventId(fromDate));
    }


    public abstract String getEventType();

    public static class PartyContactMechBaseLobEvent extends AbstractPartyContactMechBaseEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventType() {
            return "PartyContactMechBaseLobEvent";
        }

    }


    public static abstract class AbstractPartyContactMechBaseStateEvent extends AbstractPartyContactMechBaseEvent implements PartyContactMechBaseEvent.PartyContactMechBaseStateEvent {
        private OffsetDateTime activeFromDate;

        public OffsetDateTime getActiveFromDate()
        {
            return this.activeFromDate;
        }

        public void setActiveFromDate(OffsetDateTime activeFromDate)
        {
            this.activeFromDate = activeFromDate;
        }

        protected AbstractPartyContactMechBaseStateEvent(PartyContactMechBaseEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractPartyContactMechBaseStateCreated extends AbstractPartyContactMechBaseStateEvent implements PartyContactMechBaseEvent.PartyContactMechBaseStateCreated, Saveable
    {
        public AbstractPartyContactMechBaseStateCreated() {
            this(new PartyContactMechBaseEventId());
        }

        public AbstractPartyContactMechBaseStateCreated(PartyContactMechBaseEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

        private Map<PartyContactMechEventId, PartyContactMechEvent.PartyContactMechStateCreated> partyContactMechEvents = new HashMap<PartyContactMechEventId, PartyContactMechEvent.PartyContactMechStateCreated>();
        
        private Iterable<PartyContactMechEvent.PartyContactMechStateCreated> readOnlyPartyContactMechEvents;

        public Iterable<PartyContactMechEvent.PartyContactMechStateCreated> getPartyContactMechEvents()
        {
            if (!getEventReadOnly())
            {
                return this.partyContactMechEvents.values();
            }
            else
            {
                if (readOnlyPartyContactMechEvents != null) { return readOnlyPartyContactMechEvents; }
                PartyContactMechEventDao eventDao = getPartyContactMechEventDao();
                List<PartyContactMechEvent.PartyContactMechStateCreated> eL = new ArrayList<PartyContactMechEvent.PartyContactMechStateCreated>();
                for (PartyContactMechEvent e : eventDao.findByPartyContactMechBaseEventId(this.getPartyContactMechBaseEventId()))
                {
                    ((PartyContactMechEvent.SqlPartyContactMechEvent)e).setEventReadOnly(true);
                    eL.add((PartyContactMechEvent.PartyContactMechStateCreated)e);
                }
                return (readOnlyPartyContactMechEvents = eL);
            }
        }

        public void setPartyContactMechEvents(Iterable<PartyContactMechEvent.PartyContactMechStateCreated> es)
        {
            if (es != null)
            {
                for (PartyContactMechEvent.PartyContactMechStateCreated e : es)
                {
                    addPartyContactMechEvent(e);
                }
            }
            else { this.partyContactMechEvents.clear(); }
        }
        
        public void addPartyContactMechEvent(PartyContactMechEvent.PartyContactMechStateCreated e)
        {
            throwOnInconsistentEventIds((PartyContactMechEvent.SqlPartyContactMechEvent)e);
            this.partyContactMechEvents.put(((PartyContactMechEvent.SqlPartyContactMechEvent)e).getPartyContactMechEventId(), e);
        }

        public void save()
        {
            for (PartyContactMechEvent.PartyContactMechStateCreated e : this.getPartyContactMechEvents()) {
                getPartyContactMechEventDao().save(e);
            }
        }
    }


    public static abstract class AbstractPartyContactMechBaseStateMergePatched extends AbstractPartyContactMechBaseStateEvent implements PartyContactMechBaseEvent.PartyContactMechBaseStateMergePatched, Saveable
    {
        public AbstractPartyContactMechBaseStateMergePatched() {
            this(new PartyContactMechBaseEventId());
        }

        public AbstractPartyContactMechBaseStateMergePatched(PartyContactMechBaseEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyActiveFromDateRemoved;

        public Boolean getIsPropertyActiveFromDateRemoved() {
            return this.isPropertyActiveFromDateRemoved;
        }

        public void setIsPropertyActiveFromDateRemoved(Boolean removed) {
            this.isPropertyActiveFromDateRemoved = removed;
        }


        private Map<PartyContactMechEventId, PartyContactMechEvent> partyContactMechEvents = new HashMap<PartyContactMechEventId, PartyContactMechEvent>();
        
        private Iterable<PartyContactMechEvent> readOnlyPartyContactMechEvents;

        public Iterable<PartyContactMechEvent> getPartyContactMechEvents()
        {
            if (!getEventReadOnly())
            {
                return this.partyContactMechEvents.values();
            }
            else
            {
                if (readOnlyPartyContactMechEvents != null) { return readOnlyPartyContactMechEvents; }
                PartyContactMechEventDao eventDao = getPartyContactMechEventDao();
                List<PartyContactMechEvent> eL = new ArrayList<PartyContactMechEvent>();
                for (PartyContactMechEvent e : eventDao.findByPartyContactMechBaseEventId(this.getPartyContactMechBaseEventId()))
                {
                    ((PartyContactMechEvent.SqlPartyContactMechEvent)e).setEventReadOnly(true);
                    eL.add((PartyContactMechEvent)e);
                }
                return (readOnlyPartyContactMechEvents = eL);
            }
        }

        public void setPartyContactMechEvents(Iterable<PartyContactMechEvent> es)
        {
            if (es != null)
            {
                for (PartyContactMechEvent e : es)
                {
                    addPartyContactMechEvent(e);
                }
            }
            else { this.partyContactMechEvents.clear(); }
        }
        
        public void addPartyContactMechEvent(PartyContactMechEvent e)
        {
            throwOnInconsistentEventIds((PartyContactMechEvent.SqlPartyContactMechEvent)e);
            this.partyContactMechEvents.put(((PartyContactMechEvent.SqlPartyContactMechEvent)e).getPartyContactMechEventId(), e);
        }

        public void save()
        {
            for (PartyContactMechEvent e : this.getPartyContactMechEvents()) {
                getPartyContactMechEventDao().save(e);
            }
        }
    }



    public static class SimplePartyContactMechBaseStateCreated extends AbstractPartyContactMechBaseStateCreated
    {
        public SimplePartyContactMechBaseStateCreated() {
        }

        public SimplePartyContactMechBaseStateCreated(PartyContactMechBaseEventId eventId) {
            super(eventId);
        }
    }

    public static class SimplePartyContactMechBaseStateMergePatched extends AbstractPartyContactMechBaseStateMergePatched
    {
        public SimplePartyContactMechBaseStateMergePatched() {
        }

        public SimplePartyContactMechBaseStateMergePatched(PartyContactMechBaseEventId eventId) {
            super(eventId);
        }
    }

}

