// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchPartyContactMechBaseDto extends AbstractPartyContactMechBaseCommandDto implements PartyContactMechBaseCommand.CreateOrMergePatchPartyContactMechBase {

    /**
     * Active From Date
     */
    private OffsetDateTime activeFromDate;

    public OffsetDateTime getActiveFromDate()
    {
        return this.activeFromDate;
    }

    public void setActiveFromDate(OffsetDateTime activeFromDate)
    {
        this.activeFromDate = activeFromDate;
    }


    private CreateOrMergePatchPartyContactMechDto[] contactMechanisms = new CreateOrMergePatchPartyContactMechDto[0];

    public CreateOrMergePatchPartyContactMechDto[] getContactMechanisms()
    {
        return this.contactMechanisms;
    }

    public void setContactMechanisms(CreateOrMergePatchPartyContactMechDto[] contactMechanisms)
    {
        this.contactMechanisms = contactMechanisms;
    }

    private Boolean isPropertyActiveFromDateRemoved;

    public Boolean getIsPropertyActiveFromDateRemoved()
    {
        return this.isPropertyActiveFromDateRemoved;
    }

    public void setIsPropertyActiveFromDateRemoved(Boolean removed)
    {
        this.isPropertyActiveFromDateRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchPartyContactMechBase command)
    {
        ((AbstractPartyContactMechBaseCommandDto) this).copyTo(command);
        command.setActiveFromDate(this.getActiveFromDate());
    }

    public PartyContactMechBaseCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractPartyContactMechBaseCommand.SimpleCreatePartyContactMechBase command = new AbstractPartyContactMechBaseCommand.SimpleCreatePartyContactMechBase();
            copyTo((AbstractPartyContactMechBaseCommand.AbstractCreatePartyContactMechBase) command);
            if (this.getContactMechanisms() != null) {
                for (CreateOrMergePatchPartyContactMechDto cmd : this.getContactMechanisms()) {
                    command.getContactMechanisms().add((PartyContactMechCommand.CreatePartyContactMech) cmd.toCommand());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractPartyContactMechBaseCommand.SimpleMergePatchPartyContactMechBase command = new AbstractPartyContactMechBaseCommand.SimpleMergePatchPartyContactMechBase();
            copyTo((AbstractPartyContactMechBaseCommand.SimpleMergePatchPartyContactMechBase) command);
            if (this.getContactMechanisms() != null) {
                for (CreateOrMergePatchPartyContactMechDto cmd : this.getContactMechanisms()) {
                    command.getPartyContactMechCommands().add(cmd.toCommand());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public PartyContactMechBaseCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreatePartyContactMechBaseDto command = new CreatePartyContactMechBaseDto();
            copyTo((CreatePartyContactMechBase) command);
            if (this.getContactMechanisms() != null) {
                for (CreateOrMergePatchPartyContactMechDto cmd : this.getContactMechanisms()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreatePartyContactMechCommands().add((PartyContactMechCommand.CreatePartyContactMech) cmd.toSubclass());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchPartyContactMechBaseDto command = new MergePatchPartyContactMechBaseDto();
            copyTo((MergePatchPartyContactMechBase) command);
            if (this.getContactMechanisms() != null) {
                for (CreateOrMergePatchPartyContactMechDto cmd : this.getContactMechanisms()) {
                    command.getPartyContactMechCommands().add(cmd.toSubclass());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreatePartyContactMechBase command)
    {
        copyTo((CreateOrMergePatchPartyContactMechBase) command);
    }

    public void copyTo(MergePatchPartyContactMechBase command)
    {
        copyTo((CreateOrMergePatchPartyContactMechBase) command);
        command.setIsPropertyActiveFromDateRemoved(this.getIsPropertyActiveFromDateRemoved());
    }

    public static class CreatePartyContactMechBaseDto extends CreateOrMergePatchPartyContactMechBaseDto implements PartyContactMechBaseCommand.CreatePartyContactMechBase
    {
        public CreatePartyContactMechBaseDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public PartyContactMechBaseCommand.CreatePartyContactMechBase toCreatePartyContactMechBase()
        {
            return (PartyContactMechBaseCommand.CreatePartyContactMechBase) toCommand();
        }


        @Override
        public CreatePartyContactMechCommandCollection getCreatePartyContactMechCommands() {
            return new CreatePartyContactMechCommandCollection() {
                @Override
                public void add(PartyContactMechCommand.CreatePartyContactMech c) {
                    java.util.List<CreateOrMergePatchPartyContactMechDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getContactMechanisms()));
                    list.add((CreateOrMergePatchPartyContactMechDto) c);
                    setContactMechanisms(list.toArray(new CreateOrMergePatchPartyContactMechDto[0]));
                }

                @Override
                public void remove(PartyContactMechCommand.CreatePartyContactMech c) {
                    java.util.List<CreateOrMergePatchPartyContactMechDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getContactMechanisms()));
                    list.remove((CreateOrMergePatchPartyContactMechDto) c);
                    setContactMechanisms(list.toArray(new CreateOrMergePatchPartyContactMechDto[0]));
                }

                @Override
                public void clear() {
                    setContactMechanisms(new CreateOrMergePatchPartyContactMechDto[]{});
                }

                @Override
                public java.util.Iterator<PartyContactMechCommand.CreatePartyContactMech> iterator() {
                    return java.util.Arrays.stream(getContactMechanisms())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (PartyContactMechCommand.CreatePartyContactMech) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public PartyContactMechCommand.CreatePartyContactMech newCreatePartyContactMech() {
            return new CreateOrMergePatchPartyContactMechDto.CreatePartyContactMechDto();
        }

    }

    public static class MergePatchPartyContactMechBaseDto extends CreateOrMergePatchPartyContactMechBaseDto implements PartyContactMechBaseCommand.MergePatchPartyContactMechBase
    {
        public MergePatchPartyContactMechBaseDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public PartyContactMechBaseCommand.MergePatchPartyContactMechBase toMergePatchPartyContactMechBase()
        {
            return (PartyContactMechBaseCommand.MergePatchPartyContactMechBase) toCommand();
        }


        @Override
        public PartyContactMechCommandCollection getPartyContactMechCommands() {
            return new PartyContactMechCommandCollection() {
                @Override
                public void add(PartyContactMechCommand c) {
                    java.util.List<CreateOrMergePatchPartyContactMechDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getContactMechanisms()));
                    list.add((CreateOrMergePatchPartyContactMechDto) c);
                    setContactMechanisms(list.toArray(new CreateOrMergePatchPartyContactMechDto[0]));
                }

                @Override
                public void remove(PartyContactMechCommand c) {
                    java.util.List<CreateOrMergePatchPartyContactMechDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getContactMechanisms()));
                    list.remove((CreateOrMergePatchPartyContactMechDto) c);
                    setContactMechanisms(list.toArray(new CreateOrMergePatchPartyContactMechDto[0]));
                }

                @Override
                public void clear() {
                    setContactMechanisms(new CreateOrMergePatchPartyContactMechDto[]{});
                }

                @Override
                public java.util.Iterator<PartyContactMechCommand> iterator() {
                    return java.util.Arrays.stream(getContactMechanisms())
                            .map(e -> (PartyContactMechCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public PartyContactMechCommand.CreatePartyContactMech newCreatePartyContactMech() {
            return new CreateOrMergePatchPartyContactMechDto.CreatePartyContactMechDto();
        }

        @Override
        public PartyContactMechCommand.MergePatchPartyContactMech newMergePatchPartyContactMech() {
            return new CreateOrMergePatchPartyContactMechDto.MergePatchPartyContactMechDto();
        }

        @Override
        public PartyContactMechCommand.RemovePartyContactMech newRemovePartyContactMech() {
            return new RemovePartyContactMechDto();
        }

    }

}

