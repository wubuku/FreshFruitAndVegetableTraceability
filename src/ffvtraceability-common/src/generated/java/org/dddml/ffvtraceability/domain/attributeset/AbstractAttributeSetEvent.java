// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attributeset;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractAttributeSetEvent extends AbstractEvent implements AttributeSetEvent.SqlAttributeSetEvent {
    private AttributeSetEventId attributeSetEventId = new AttributeSetEventId();

    public AttributeSetEventId getAttributeSetEventId() {
        return this.attributeSetEventId;
    }

    public void setAttributeSetEventId(AttributeSetEventId eventId) {
        this.attributeSetEventId = eventId;
    }
    
    public String getAttributeSetId() {
        return getAttributeSetEventId().getAttributeSetId();
    }

    public void setAttributeSetId(String attributeSetId) {
        getAttributeSetEventId().setAttributeSetId(attributeSetId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getAttributeSetEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getAttributeSetEventId().setVersion(version);
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractAttributeSetEvent() {
    }

    protected AbstractAttributeSetEvent(AttributeSetEventId eventId) {
        this.attributeSetEventId = eventId;
    }

    protected AttributeUseEventDao getAttributeUseEventDao() {
        return (AttributeUseEventDao)ApplicationContext.current.get("attributeUseEventDao");
    }

    protected AttributeUseEventId newAttributeUseEventId(String attributeId)
    {
        AttributeUseEventId eventId = new AttributeUseEventId(this.getAttributeSetEventId().getAttributeSetId(), 
            attributeId, 
            this.getAttributeSetEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(AttributeUseEvent.SqlAttributeUseEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(AttributeSetEvent.SqlAttributeSetEvent oe, AttributeUseEvent.SqlAttributeUseEvent e)
    {
        if (!oe.getAttributeSetEventId().getAttributeSetId().equals(e.getAttributeUseEventId().getAttributeSetId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id AttributeSetId %1$s but inner id AttributeSetId %2$s", 
                oe.getAttributeSetEventId().getAttributeSetId(), e.getAttributeUseEventId().getAttributeSetId());
        }
    }

    public AttributeUseEvent.AttributeUseStateCreated newAttributeUseStateCreated(String attributeId) {
        return new AbstractAttributeUseEvent.SimpleAttributeUseStateCreated(newAttributeUseEventId(attributeId));
    }

    public AttributeUseEvent.AttributeUseStateMergePatched newAttributeUseStateMergePatched(String attributeId) {
        return new AbstractAttributeUseEvent.SimpleAttributeUseStateMergePatched(newAttributeUseEventId(attributeId));
    }


    public abstract String getEventType();

    public static class AttributeSetLobEvent extends AbstractAttributeSetEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventType() {
            return "AttributeSetLobEvent";
        }

    }


    public static abstract class AbstractAttributeSetStateEvent extends AbstractAttributeSetEvent implements AttributeSetEvent.AttributeSetStateEvent {
        private String attributeSetName;

        public String getAttributeSetName()
        {
            return this.attributeSetName;
        }

        public void setAttributeSetName(String attributeSetName)
        {
            this.attributeSetName = attributeSetName;
        }

        private String description;

        public String getDescription()
        {
            return this.description;
        }

        public void setDescription(String description)
        {
            this.description = description;
        }

        protected AbstractAttributeSetStateEvent(AttributeSetEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractAttributeSetStateCreated extends AbstractAttributeSetStateEvent implements AttributeSetEvent.AttributeSetStateCreated, Saveable
    {
        public AbstractAttributeSetStateCreated() {
            this(new AttributeSetEventId());
        }

        public AbstractAttributeSetStateCreated(AttributeSetEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

        private Map<AttributeUseEventId, AttributeUseEvent.AttributeUseStateCreated> attributeUseEvents = new HashMap<AttributeUseEventId, AttributeUseEvent.AttributeUseStateCreated>();
        
        private Iterable<AttributeUseEvent.AttributeUseStateCreated> readOnlyAttributeUseEvents;

        public Iterable<AttributeUseEvent.AttributeUseStateCreated> getAttributeUseEvents()
        {
            if (!getEventReadOnly())
            {
                return this.attributeUseEvents.values();
            }
            else
            {
                if (readOnlyAttributeUseEvents != null) { return readOnlyAttributeUseEvents; }
                AttributeUseEventDao eventDao = getAttributeUseEventDao();
                List<AttributeUseEvent.AttributeUseStateCreated> eL = new ArrayList<AttributeUseEvent.AttributeUseStateCreated>();
                for (AttributeUseEvent e : eventDao.findByAttributeSetEventId(this.getAttributeSetEventId()))
                {
                    ((AttributeUseEvent.SqlAttributeUseEvent)e).setEventReadOnly(true);
                    eL.add((AttributeUseEvent.AttributeUseStateCreated)e);
                }
                return (readOnlyAttributeUseEvents = eL);
            }
        }

        public void setAttributeUseEvents(Iterable<AttributeUseEvent.AttributeUseStateCreated> es)
        {
            if (es != null)
            {
                for (AttributeUseEvent.AttributeUseStateCreated e : es)
                {
                    addAttributeUseEvent(e);
                }
            }
            else { this.attributeUseEvents.clear(); }
        }
        
        public void addAttributeUseEvent(AttributeUseEvent.AttributeUseStateCreated e)
        {
            throwOnInconsistentEventIds((AttributeUseEvent.SqlAttributeUseEvent)e);
            this.attributeUseEvents.put(((AttributeUseEvent.SqlAttributeUseEvent)e).getAttributeUseEventId(), e);
        }

        public void save()
        {
            for (AttributeUseEvent.AttributeUseStateCreated e : this.getAttributeUseEvents()) {
                getAttributeUseEventDao().save(e);
            }
        }
    }


    public static abstract class AbstractAttributeSetStateMergePatched extends AbstractAttributeSetStateEvent implements AttributeSetEvent.AttributeSetStateMergePatched, Saveable
    {
        public AbstractAttributeSetStateMergePatched() {
            this(new AttributeSetEventId());
        }

        public AbstractAttributeSetStateMergePatched(AttributeSetEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyAttributeSetNameRemoved;

        public Boolean getIsPropertyAttributeSetNameRemoved() {
            return this.isPropertyAttributeSetNameRemoved;
        }

        public void setIsPropertyAttributeSetNameRemoved(Boolean removed) {
            this.isPropertyAttributeSetNameRemoved = removed;
        }

        private Boolean isPropertyDescriptionRemoved;

        public Boolean getIsPropertyDescriptionRemoved() {
            return this.isPropertyDescriptionRemoved;
        }

        public void setIsPropertyDescriptionRemoved(Boolean removed) {
            this.isPropertyDescriptionRemoved = removed;
        }


        private Map<AttributeUseEventId, AttributeUseEvent> attributeUseEvents = new HashMap<AttributeUseEventId, AttributeUseEvent>();
        
        private Iterable<AttributeUseEvent> readOnlyAttributeUseEvents;

        public Iterable<AttributeUseEvent> getAttributeUseEvents()
        {
            if (!getEventReadOnly())
            {
                return this.attributeUseEvents.values();
            }
            else
            {
                if (readOnlyAttributeUseEvents != null) { return readOnlyAttributeUseEvents; }
                AttributeUseEventDao eventDao = getAttributeUseEventDao();
                List<AttributeUseEvent> eL = new ArrayList<AttributeUseEvent>();
                for (AttributeUseEvent e : eventDao.findByAttributeSetEventId(this.getAttributeSetEventId()))
                {
                    ((AttributeUseEvent.SqlAttributeUseEvent)e).setEventReadOnly(true);
                    eL.add((AttributeUseEvent)e);
                }
                return (readOnlyAttributeUseEvents = eL);
            }
        }

        public void setAttributeUseEvents(Iterable<AttributeUseEvent> es)
        {
            if (es != null)
            {
                for (AttributeUseEvent e : es)
                {
                    addAttributeUseEvent(e);
                }
            }
            else { this.attributeUseEvents.clear(); }
        }
        
        public void addAttributeUseEvent(AttributeUseEvent e)
        {
            throwOnInconsistentEventIds((AttributeUseEvent.SqlAttributeUseEvent)e);
            this.attributeUseEvents.put(((AttributeUseEvent.SqlAttributeUseEvent)e).getAttributeUseEventId(), e);
        }

        public void save()
        {
            for (AttributeUseEvent e : this.getAttributeUseEvents()) {
                getAttributeUseEventDao().save(e);
            }
        }
    }



    public static class SimpleAttributeSetStateCreated extends AbstractAttributeSetStateCreated
    {
        public SimpleAttributeSetStateCreated() {
        }

        public SimpleAttributeSetStateCreated(AttributeSetEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleAttributeSetStateMergePatched extends AbstractAttributeSetStateMergePatched
    {
        public SimpleAttributeSetStateMergePatched() {
        }

        public SimpleAttributeSetStateMergePatched(AttributeSetEventId eventId) {
            super(eventId);
        }
    }

}

