// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.documentassociation;

import java.util.*;
import org.dddml.ffvtraceability.domain.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface DocumentAssociationCommand extends Command {

    DocumentAssociationId getDocumentAssociationId();

    void setDocumentAssociationId(DocumentAssociationId documentAssociationId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(DocumentAssociationState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((DocumentAssociationCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (state.getDeleted() != null && state.getDeleted()) {
            throw DomainError.named("zombie", "Can't do anything to deleted aggregate.");
        }
        if (isCreationCommand((DocumentAssociationCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(DocumentAssociationCommand c) {
        if ((c instanceof DocumentAssociationCommand.CreateDocumentAssociation) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(DocumentAssociationState.VERSION_NULL)))
            return true;
        if ((c instanceof DocumentAssociationCommand.MergePatchDocumentAssociation))
            return false;
        if ((c instanceof DocumentAssociationCommand.DeleteDocumentAssociation))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(DocumentAssociationState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchDocumentAssociation extends DocumentAssociationCommand
    {

        OffsetDateTime getThruDate();

        void setThruDate(OffsetDateTime thruDate);

        Boolean getActive();

        void setActive(Boolean active);

    }

    interface CreateDocumentAssociation extends CreateOrMergePatchDocumentAssociation
    {
    }

    interface MergePatchDocumentAssociation extends CreateOrMergePatchDocumentAssociation
    {
        Boolean getIsPropertyThruDateRemoved();

        void setIsPropertyThruDateRemoved(Boolean removed);

        Boolean getIsPropertyActiveRemoved();

        void setIsPropertyActiveRemoved(Boolean removed);


    }

    interface DeleteDocumentAssociation extends DocumentAssociationCommand
    {
    }

}

