// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.geo;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractGeoApplicationService implements GeoApplicationService {
    private GeoStateRepository stateRepository;

    protected GeoStateRepository getStateRepository() {
        return stateRepository;
    }

    private GeoStateQueryRepository stateQueryRepository;

    protected GeoStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    public AbstractGeoApplicationService(GeoStateRepository stateRepository, GeoStateQueryRepository stateQueryRepository) {
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(GeoCommand.CreateGeo c) {
        update(c, s -> {
        // //////////////////////////
        throwOnConcurrencyConflict(s, c);
        GeoState.SqlGeoState ss = ((GeoState.SqlGeoState)s);
        ss.setGeoTypeId(c.getGeoTypeId());
        ss.setGeoName(c.getGeoName());
        ss.setGeoCode(c.getGeoCode());
        ss.setGeoSecCode(c.getGeoSecCode());
        ss.setAbbreviation(c.getAbbreviation());
        ss.setWellKnownText(c.getWellKnownText());
        ss.setSequenceNumber(c.getSequenceNumber());
        ss.setCreatedBy(c.getRequesterId());
        ss.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        ss.setCommandId(c.getCommandId());
        // //////////////////////////
        });
    }

    public void when(GeoCommand.MergePatchGeo c) {
        update(c, s -> {
        // //////////////////////////////////
        throwOnConcurrencyConflict(s, c);
        GeoState.SqlGeoState ss = ((GeoState.SqlGeoState)s);
        if (c.getGeoTypeId() == null) {
            if (c.getIsPropertyGeoTypeIdRemoved() != null && c.getIsPropertyGeoTypeIdRemoved()) {
                ss.setGeoTypeId(null);
            }
        } else {
            ss.setGeoTypeId(c.getGeoTypeId());
        }
        if (c.getGeoName() == null) {
            if (c.getIsPropertyGeoNameRemoved() != null && c.getIsPropertyGeoNameRemoved()) {
                ss.setGeoName(null);
            }
        } else {
            ss.setGeoName(c.getGeoName());
        }
        if (c.getGeoCode() == null) {
            if (c.getIsPropertyGeoCodeRemoved() != null && c.getIsPropertyGeoCodeRemoved()) {
                ss.setGeoCode(null);
            }
        } else {
            ss.setGeoCode(c.getGeoCode());
        }
        if (c.getGeoSecCode() == null) {
            if (c.getIsPropertyGeoSecCodeRemoved() != null && c.getIsPropertyGeoSecCodeRemoved()) {
                ss.setGeoSecCode(null);
            }
        } else {
            ss.setGeoSecCode(c.getGeoSecCode());
        }
        if (c.getAbbreviation() == null) {
            if (c.getIsPropertyAbbreviationRemoved() != null && c.getIsPropertyAbbreviationRemoved()) {
                ss.setAbbreviation(null);
            }
        } else {
            ss.setAbbreviation(c.getAbbreviation());
        }
        if (c.getWellKnownText() == null) {
            if (c.getIsPropertyWellKnownTextRemoved() != null && c.getIsPropertyWellKnownTextRemoved()) {
                ss.setWellKnownText(null);
            }
        } else {
            ss.setWellKnownText(c.getWellKnownText());
        }
        if (c.getSequenceNumber() == null) {
            if (c.getIsPropertySequenceNumberRemoved() != null && c.getIsPropertySequenceNumberRemoved()) {
                ss.setSequenceNumber(null);
            }
        } else {
            ss.setSequenceNumber(c.getSequenceNumber());
        }
        ss.setUpdatedBy(c.getRequesterId());
        ss.setUpdatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        ss.setCommandId(c.getCommandId());
        // //////////////////////////////////
        });
    }

    public GeoState get(String id) {
        GeoState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<GeoState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<GeoState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<GeoState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<GeoState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public EventStoreAggregateId toEventStoreAggregateId(String aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(GeoCommand c, Consumer<GeoState> action) {
        String aggregateId = c.getGeoId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        GeoState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        GeoCommand.throwOnInvalidStateTransition(state, c);
        action.accept(state);
        persist(eventStoreAggregateId, c.getVersion() == null ? GeoState.VERSION_NULL : c.getVersion(), state); // State version may be null!

    }

    private DomainEventPublisher domainEventPublisher;

    public void setDomainEventPublisher(DomainEventPublisher domainEventPublisher) {
        this.domainEventPublisher = domainEventPublisher;
    }

    public DomainEventPublisher getDomainEventPublisher() {
        if (domainEventPublisher != null) { return domainEventPublisher; }
        return ApplicationContext.current.get(DomainEventPublisher.class);
    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, GeoState state) {
        getStateRepository().save(state);
    }

    protected boolean isDuplicateCommand(GeoCommand command, EventStoreAggregateId eventStoreAggregateId, GeoState state) {
        boolean duplicate = false;
        if (command.getVersion() == null) { command.setVersion(GeoState.VERSION_NULL); }
        if (state.getVersion() != null && state.getVersion() == command.getVersion() + 1) {
            if (command.getCommandId() != null && command.getCommandId().equals(state.getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    protected static void throwOnConcurrencyConflict(GeoState s, GeoCommand c) {
        Long stateVersion = s.getVersion();
        Long commandVersion = c.getVersion();
        if (commandVersion == null) { commandVersion = GeoState.VERSION_NULL; }
        if (!(stateVersion == null && commandVersion.equals(GeoState.VERSION_NULL)) && !commandVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and command version (%2$s)", stateVersion, commandVersion);
        }
    }

    public static class SimpleGeoApplicationService extends AbstractGeoApplicationService {
        public SimpleGeoApplicationService(GeoStateRepository stateRepository, GeoStateQueryRepository stateQueryRepository)
        {
            super(stateRepository, stateQueryRepository);
        }
    }

}

