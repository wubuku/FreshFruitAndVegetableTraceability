// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facilitycontactmech;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractFacilityContactMechEvent extends AbstractEvent implements FacilityContactMechEvent.SqlFacilityContactMechEvent {
    private FacilityContactMechEventId facilityContactMechEventId = new FacilityContactMechEventId();

    public FacilityContactMechEventId getFacilityContactMechEventId() {
        return this.facilityContactMechEventId;
    }

    public void setFacilityContactMechEventId(FacilityContactMechEventId eventId) {
        this.facilityContactMechEventId = eventId;
    }
    
    public FacilityContactMechId getFacilityContactMechId() {
        return getFacilityContactMechEventId().getFacilityContactMechId();
    }

    public void setFacilityContactMechId(FacilityContactMechId facilityContactMechId) {
        getFacilityContactMechEventId().setFacilityContactMechId(facilityContactMechId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getFacilityContactMechEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getFacilityContactMechEventId().setVersion(version);
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractFacilityContactMechEvent() {
    }

    protected AbstractFacilityContactMechEvent(FacilityContactMechEventId eventId) {
        this.facilityContactMechEventId = eventId;
    }

    protected FacilityContactMechPurposeEventDao getFacilityContactMechPurposeEventDao() {
        return (FacilityContactMechPurposeEventDao)ApplicationContext.current.get("facilityContactMechPurposeEventDao");
    }

    protected FacilityContactMechPurposeEventId newFacilityContactMechPurposeEventId(String contactMechPurposeTypeId)
    {
        FacilityContactMechPurposeEventId eventId = new FacilityContactMechPurposeEventId(this.getFacilityContactMechEventId().getFacilityContactMechId(), 
            contactMechPurposeTypeId, 
            this.getFacilityContactMechEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(FacilityContactMechPurposeEvent.SqlFacilityContactMechPurposeEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(FacilityContactMechEvent.SqlFacilityContactMechEvent oe, FacilityContactMechPurposeEvent.SqlFacilityContactMechPurposeEvent e)
    {
        if (!oe.getFacilityContactMechEventId().getFacilityContactMechId().equals(e.getFacilityContactMechPurposeEventId().getFacilityContactMechId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id FacilityContactMechId %1$s but inner id FacilityContactMechId %2$s", 
                oe.getFacilityContactMechEventId().getFacilityContactMechId(), e.getFacilityContactMechPurposeEventId().getFacilityContactMechId());
        }
    }

    public FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated newFacilityContactMechPurposeStateCreated(String contactMechPurposeTypeId) {
        return new AbstractFacilityContactMechPurposeEvent.SimpleFacilityContactMechPurposeStateCreated(newFacilityContactMechPurposeEventId(contactMechPurposeTypeId));
    }

    public FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateMergePatched newFacilityContactMechPurposeStateMergePatched(String contactMechPurposeTypeId) {
        return new AbstractFacilityContactMechPurposeEvent.SimpleFacilityContactMechPurposeStateMergePatched(newFacilityContactMechPurposeEventId(contactMechPurposeTypeId));
    }


    public abstract String getEventType();

    public static class FacilityContactMechLobEvent extends AbstractFacilityContactMechEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventType() {
            return "FacilityContactMechLobEvent";
        }

    }


    public static abstract class AbstractFacilityContactMechStateEvent extends AbstractFacilityContactMechEvent implements FacilityContactMechEvent.FacilityContactMechStateEvent {
        private OffsetDateTime thruDate;

        public OffsetDateTime getThruDate()
        {
            return this.thruDate;
        }

        public void setThruDate(OffsetDateTime thruDate)
        {
            this.thruDate = thruDate;
        }

        private String extension;

        public String getExtension()
        {
            return this.extension;
        }

        public void setExtension(String extension)
        {
            this.extension = extension;
        }

        private String comments;

        public String getComments()
        {
            return this.comments;
        }

        public void setComments(String comments)
        {
            this.comments = comments;
        }

        protected AbstractFacilityContactMechStateEvent(FacilityContactMechEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractFacilityContactMechStateCreated extends AbstractFacilityContactMechStateEvent implements FacilityContactMechEvent.FacilityContactMechStateCreated, Saveable
    {
        public AbstractFacilityContactMechStateCreated() {
            this(new FacilityContactMechEventId());
        }

        public AbstractFacilityContactMechStateCreated(FacilityContactMechEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

        private Map<FacilityContactMechPurposeEventId, FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated> facilityContactMechPurposeEvents = new HashMap<FacilityContactMechPurposeEventId, FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated>();
        
        private Iterable<FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated> readOnlyFacilityContactMechPurposeEvents;

        public Iterable<FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated> getFacilityContactMechPurposeEvents()
        {
            if (!getEventReadOnly())
            {
                return this.facilityContactMechPurposeEvents.values();
            }
            else
            {
                if (readOnlyFacilityContactMechPurposeEvents != null) { return readOnlyFacilityContactMechPurposeEvents; }
                FacilityContactMechPurposeEventDao eventDao = getFacilityContactMechPurposeEventDao();
                List<FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated> eL = new ArrayList<FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated>();
                for (FacilityContactMechPurposeEvent e : eventDao.findByFacilityContactMechEventId(this.getFacilityContactMechEventId()))
                {
                    ((FacilityContactMechPurposeEvent.SqlFacilityContactMechPurposeEvent)e).setEventReadOnly(true);
                    eL.add((FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated)e);
                }
                return (readOnlyFacilityContactMechPurposeEvents = eL);
            }
        }

        public void setFacilityContactMechPurposeEvents(Iterable<FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated> es)
        {
            if (es != null)
            {
                for (FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated e : es)
                {
                    addFacilityContactMechPurposeEvent(e);
                }
            }
            else { this.facilityContactMechPurposeEvents.clear(); }
        }
        
        public void addFacilityContactMechPurposeEvent(FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated e)
        {
            throwOnInconsistentEventIds((FacilityContactMechPurposeEvent.SqlFacilityContactMechPurposeEvent)e);
            this.facilityContactMechPurposeEvents.put(((FacilityContactMechPurposeEvent.SqlFacilityContactMechPurposeEvent)e).getFacilityContactMechPurposeEventId(), e);
        }

        public void save()
        {
            for (FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated e : this.getFacilityContactMechPurposeEvents()) {
                getFacilityContactMechPurposeEventDao().save(e);
            }
        }
    }


    public static abstract class AbstractFacilityContactMechStateMergePatched extends AbstractFacilityContactMechStateEvent implements FacilityContactMechEvent.FacilityContactMechStateMergePatched, Saveable
    {
        public AbstractFacilityContactMechStateMergePatched() {
            this(new FacilityContactMechEventId());
        }

        public AbstractFacilityContactMechStateMergePatched(FacilityContactMechEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyThruDateRemoved;

        public Boolean getIsPropertyThruDateRemoved() {
            return this.isPropertyThruDateRemoved;
        }

        public void setIsPropertyThruDateRemoved(Boolean removed) {
            this.isPropertyThruDateRemoved = removed;
        }

        private Boolean isPropertyExtensionRemoved;

        public Boolean getIsPropertyExtensionRemoved() {
            return this.isPropertyExtensionRemoved;
        }

        public void setIsPropertyExtensionRemoved(Boolean removed) {
            this.isPropertyExtensionRemoved = removed;
        }

        private Boolean isPropertyCommentsRemoved;

        public Boolean getIsPropertyCommentsRemoved() {
            return this.isPropertyCommentsRemoved;
        }

        public void setIsPropertyCommentsRemoved(Boolean removed) {
            this.isPropertyCommentsRemoved = removed;
        }


        private Map<FacilityContactMechPurposeEventId, FacilityContactMechPurposeEvent> facilityContactMechPurposeEvents = new HashMap<FacilityContactMechPurposeEventId, FacilityContactMechPurposeEvent>();
        
        private Iterable<FacilityContactMechPurposeEvent> readOnlyFacilityContactMechPurposeEvents;

        public Iterable<FacilityContactMechPurposeEvent> getFacilityContactMechPurposeEvents()
        {
            if (!getEventReadOnly())
            {
                return this.facilityContactMechPurposeEvents.values();
            }
            else
            {
                if (readOnlyFacilityContactMechPurposeEvents != null) { return readOnlyFacilityContactMechPurposeEvents; }
                FacilityContactMechPurposeEventDao eventDao = getFacilityContactMechPurposeEventDao();
                List<FacilityContactMechPurposeEvent> eL = new ArrayList<FacilityContactMechPurposeEvent>();
                for (FacilityContactMechPurposeEvent e : eventDao.findByFacilityContactMechEventId(this.getFacilityContactMechEventId()))
                {
                    ((FacilityContactMechPurposeEvent.SqlFacilityContactMechPurposeEvent)e).setEventReadOnly(true);
                    eL.add((FacilityContactMechPurposeEvent)e);
                }
                return (readOnlyFacilityContactMechPurposeEvents = eL);
            }
        }

        public void setFacilityContactMechPurposeEvents(Iterable<FacilityContactMechPurposeEvent> es)
        {
            if (es != null)
            {
                for (FacilityContactMechPurposeEvent e : es)
                {
                    addFacilityContactMechPurposeEvent(e);
                }
            }
            else { this.facilityContactMechPurposeEvents.clear(); }
        }
        
        public void addFacilityContactMechPurposeEvent(FacilityContactMechPurposeEvent e)
        {
            throwOnInconsistentEventIds((FacilityContactMechPurposeEvent.SqlFacilityContactMechPurposeEvent)e);
            this.facilityContactMechPurposeEvents.put(((FacilityContactMechPurposeEvent.SqlFacilityContactMechPurposeEvent)e).getFacilityContactMechPurposeEventId(), e);
        }

        public void save()
        {
            for (FacilityContactMechPurposeEvent e : this.getFacilityContactMechPurposeEvents()) {
                getFacilityContactMechPurposeEventDao().save(e);
            }
        }
    }



    public static class SimpleFacilityContactMechStateCreated extends AbstractFacilityContactMechStateCreated
    {
        public SimpleFacilityContactMechStateCreated() {
        }

        public SimpleFacilityContactMechStateCreated(FacilityContactMechEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleFacilityContactMechStateMergePatched extends AbstractFacilityContactMechStateMergePatched
    {
        public SimpleFacilityContactMechStateMergePatched() {
        }

        public SimpleFacilityContactMechStateMergePatched(FacilityContactMechEventId eventId) {
            super(eventId);
        }
    }

}

