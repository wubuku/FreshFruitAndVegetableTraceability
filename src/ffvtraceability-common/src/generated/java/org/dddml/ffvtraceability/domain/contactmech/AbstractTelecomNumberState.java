// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.contactmech;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.contactmech.TelecomNumberEvent.*;

public abstract class AbstractTelecomNumberState extends AbstractContactMechState implements TelecomNumberState.SqlTelecomNumberState {

    private String countryCode;

    public String getCountryCode() {
        return this.countryCode;
    }

    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    private String areaCode;

    public String getAreaCode() {
        return this.areaCode;
    }

    public void setAreaCode(String areaCode) {
        this.areaCode = areaCode;
    }

    private String contactNumber;

    public String getContactNumber() {
        return this.contactNumber;
    }

    public void setContactNumber(String contactNumber) {
        this.contactNumber = contactNumber;
    }

    private String askForName;

    public String getAskForName() {
        return this.askForName;
    }

    public void setAskForName(String askForName) {
        this.askForName = askForName;
    }

    public AbstractTelecomNumberState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setContactMechId(((ContactMechEvent.SqlContactMechEvent) events.get(0)).getContactMechEventId().getContactMechId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? ContactMechState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractTelecomNumberState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        super.setForReapplying(true);

        initializeProperties();
    }
    
    protected void initializeProperties() {
        super.initializeProperties();
    }

    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof TelecomNumberStateCreated) {
            when((TelecomNumberStateCreated) e);
        } else if (e instanceof TelecomNumberStateMergePatched) {
            when((TelecomNumberStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(TelecomNumberStateCreated e) {
        throwOnWrongEvent(e);

        this.setContactMechTypeId(e.getContactMechTypeId());
        this.setInfoString(e.getInfoString());
        this.setCountryCode(e.getCountryCode());
        this.setAreaCode(e.getAreaCode());
        this.setContactNumber(e.getContactNumber());
        this.setAskForName(e.getAskForName());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    @Override
    public void merge(ContactMechState s) {
        merge((TelecomNumberState)s);
    }

    public void merge(TelecomNumberState s) {
        if (s == this) {
            return;
        }
        this.setContactMechTypeId(s.getContactMechTypeId());
        this.setInfoString(s.getInfoString());
        this.setCountryCode(s.getCountryCode());
        this.setAreaCode(s.getAreaCode());
        this.setContactNumber(s.getContactNumber());
        this.setAskForName(s.getAskForName());
    }

    public void when(TelecomNumberStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getContactMechTypeId() == null) {
            if (e.getIsPropertyContactMechTypeIdRemoved() != null && e.getIsPropertyContactMechTypeIdRemoved()) {
                this.setContactMechTypeId(null);
            }
        } else {
            this.setContactMechTypeId(e.getContactMechTypeId());
        }
        if (e.getInfoString() == null) {
            if (e.getIsPropertyInfoStringRemoved() != null && e.getIsPropertyInfoStringRemoved()) {
                this.setInfoString(null);
            }
        } else {
            this.setInfoString(e.getInfoString());
        }
        if (e.getCountryCode() == null) {
            if (e.getIsPropertyCountryCodeRemoved() != null && e.getIsPropertyCountryCodeRemoved()) {
                this.setCountryCode(null);
            }
        } else {
            this.setCountryCode(e.getCountryCode());
        }
        if (e.getAreaCode() == null) {
            if (e.getIsPropertyAreaCodeRemoved() != null && e.getIsPropertyAreaCodeRemoved()) {
                this.setAreaCode(null);
            }
        } else {
            this.setAreaCode(e.getAreaCode());
        }
        if (e.getContactNumber() == null) {
            if (e.getIsPropertyContactNumberRemoved() != null && e.getIsPropertyContactNumberRemoved()) {
                this.setContactNumber(null);
            }
        } else {
            this.setContactNumber(e.getContactNumber());
        }
        if (e.getAskForName() == null) {
            if (e.getIsPropertyAskForNameRemoved() != null && e.getIsPropertyAskForNameRemoved()) {
                this.setAskForName(null);
            }
        } else {
            this.setAskForName(e.getAskForName());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
       super.save();
    }


    public static class SimpleTelecomNumberState extends AbstractTelecomNumberState {

        public SimpleTelecomNumberState() {
        }

        public SimpleTelecomNumberState(List<Event> events) {
            super(events);
        }

        public static SimpleTelecomNumberState newForReapplying() {
            SimpleTelecomNumberState s = new SimpleTelecomNumberState();
            s.initializeForReapplying();
            return s;
        }

    }



}

