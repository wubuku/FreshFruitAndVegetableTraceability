// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.workeffortgoodstandard;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchWorkEffortGoodStandardDto extends AbstractWorkEffortGoodStandardCommandDto implements WorkEffortGoodStandardCommand.CreateOrMergePatchWorkEffortGoodStandard {

    /**
     * Thru Date
     */
    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate()
    {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate)
    {
        this.thruDate = thruDate;
    }

    /**
     * Status Id
     */
    private String statusId;

    public String getStatusId()
    {
        return this.statusId;
    }

    public void setStatusId(String statusId)
    {
        this.statusId = statusId;
    }

    /**
     * Estimated Quantity
     */
    private java.math.BigDecimal estimatedQuantity;

    public java.math.BigDecimal getEstimatedQuantity()
    {
        return this.estimatedQuantity;
    }

    public void setEstimatedQuantity(java.math.BigDecimal estimatedQuantity)
    {
        this.estimatedQuantity = estimatedQuantity;
    }

    /**
     * Estimated Cost
     */
    private java.math.BigDecimal estimatedCost;

    public java.math.BigDecimal getEstimatedCost()
    {
        return this.estimatedCost;
    }

    public void setEstimatedCost(java.math.BigDecimal estimatedCost)
    {
        this.estimatedCost = estimatedCost;
    }


    private Boolean isPropertyThruDateRemoved;

    public Boolean getIsPropertyThruDateRemoved()
    {
        return this.isPropertyThruDateRemoved;
    }

    public void setIsPropertyThruDateRemoved(Boolean removed)
    {
        this.isPropertyThruDateRemoved = removed;
    }

    private Boolean isPropertyStatusIdRemoved;

    public Boolean getIsPropertyStatusIdRemoved()
    {
        return this.isPropertyStatusIdRemoved;
    }

    public void setIsPropertyStatusIdRemoved(Boolean removed)
    {
        this.isPropertyStatusIdRemoved = removed;
    }

    private Boolean isPropertyEstimatedQuantityRemoved;

    public Boolean getIsPropertyEstimatedQuantityRemoved()
    {
        return this.isPropertyEstimatedQuantityRemoved;
    }

    public void setIsPropertyEstimatedQuantityRemoved(Boolean removed)
    {
        this.isPropertyEstimatedQuantityRemoved = removed;
    }

    private Boolean isPropertyEstimatedCostRemoved;

    public Boolean getIsPropertyEstimatedCostRemoved()
    {
        return this.isPropertyEstimatedCostRemoved;
    }

    public void setIsPropertyEstimatedCostRemoved(Boolean removed)
    {
        this.isPropertyEstimatedCostRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchWorkEffortGoodStandard command)
    {
        ((AbstractWorkEffortGoodStandardCommandDto) this).copyTo(command);
        command.setThruDate(this.getThruDate());
        command.setStatusId(this.getStatusId());
        command.setEstimatedQuantity(this.getEstimatedQuantity());
        command.setEstimatedCost(this.getEstimatedCost());
    }

    public WorkEffortGoodStandardCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractWorkEffortGoodStandardCommand.SimpleCreateWorkEffortGoodStandard command = new AbstractWorkEffortGoodStandardCommand.SimpleCreateWorkEffortGoodStandard();
            copyTo((AbstractWorkEffortGoodStandardCommand.AbstractCreateWorkEffortGoodStandard) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractWorkEffortGoodStandardCommand.SimpleMergePatchWorkEffortGoodStandard command = new AbstractWorkEffortGoodStandardCommand.SimpleMergePatchWorkEffortGoodStandard();
            copyTo((AbstractWorkEffortGoodStandardCommand.SimpleMergePatchWorkEffortGoodStandard) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public WorkEffortGoodStandardCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateWorkEffortGoodStandardDto command = new CreateWorkEffortGoodStandardDto();
            copyTo((CreateWorkEffortGoodStandard) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchWorkEffortGoodStandardDto command = new MergePatchWorkEffortGoodStandardDto();
            copyTo((MergePatchWorkEffortGoodStandard) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateWorkEffortGoodStandard command)
    {
        copyTo((CreateOrMergePatchWorkEffortGoodStandard) command);
    }

    public void copyTo(MergePatchWorkEffortGoodStandard command)
    {
        copyTo((CreateOrMergePatchWorkEffortGoodStandard) command);
        command.setIsPropertyThruDateRemoved(this.getIsPropertyThruDateRemoved());
        command.setIsPropertyStatusIdRemoved(this.getIsPropertyStatusIdRemoved());
        command.setIsPropertyEstimatedQuantityRemoved(this.getIsPropertyEstimatedQuantityRemoved());
        command.setIsPropertyEstimatedCostRemoved(this.getIsPropertyEstimatedCostRemoved());
    }

    public static class CreateWorkEffortGoodStandardDto extends CreateOrMergePatchWorkEffortGoodStandardDto implements WorkEffortGoodStandardCommand.CreateWorkEffortGoodStandard
    {
        public CreateWorkEffortGoodStandardDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public WorkEffortGoodStandardCommand.CreateWorkEffortGoodStandard toCreateWorkEffortGoodStandard()
        {
            return (WorkEffortGoodStandardCommand.CreateWorkEffortGoodStandard) toCommand();
        }

    }

    public static class MergePatchWorkEffortGoodStandardDto extends CreateOrMergePatchWorkEffortGoodStandardDto implements WorkEffortGoodStandardCommand.MergePatchWorkEffortGoodStandard
    {
        public MergePatchWorkEffortGoodStandardDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public WorkEffortGoodStandardCommand.MergePatchWorkEffortGoodStandard toMergePatchWorkEffortGoodStandard()
        {
            return (WorkEffortGoodStandardCommand.MergePatchWorkEffortGoodStandard) toCommand();
        }

    }

}

