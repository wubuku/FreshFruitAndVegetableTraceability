// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facilityidentification;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface FacilityIdentificationCommand extends Command {

    String getFacilityIdentificationTypeId();

    void setFacilityIdentificationTypeId(String facilityIdentificationTypeId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(FacilityIdentificationState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((FacilityIdentificationCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (state.getDeleted() != null && state.getDeleted()) {
            throw DomainError.named("zombie", "Can't do anything to deleted aggregate.");
        }
        if (isCreationCommand((FacilityIdentificationCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(FacilityIdentificationCommand c) {
        if ((c instanceof FacilityIdentificationCommand.CreateFacilityIdentification) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(FacilityIdentificationState.VERSION_NULL)))
            return true;
        if ((c instanceof FacilityIdentificationCommand.MergePatchFacilityIdentification))
            return false;
        if ((c instanceof FacilityIdentificationCommand.DeleteFacilityIdentification))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(FacilityIdentificationState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchFacilityIdentification extends FacilityIdentificationCommand
    {

        String getIdValue();

        void setIdValue(String idValue);

    }

    interface CreateFacilityIdentification extends CreateOrMergePatchFacilityIdentification
    {
    }

    interface MergePatchFacilityIdentification extends CreateOrMergePatchFacilityIdentification
    {
        Boolean getIsPropertyIdValueRemoved();

        void setIsPropertyIdValueRemoved(Boolean removed);


    }

    interface DeleteFacilityIdentification extends FacilityIdentificationCommand
    {
    }

}

