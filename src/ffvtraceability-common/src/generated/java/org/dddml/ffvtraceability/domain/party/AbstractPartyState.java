// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.party;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.party.PartyEvent.*;

public abstract class AbstractPartyState implements PartyState.SqlPartyState, Saveable {

    private String partyId;

    public String getPartyId() {
        return this.partyId;
    }

    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }

    private String partyTypeId;

    public String getPartyTypeId() {
        return this.partyTypeId;
    }

    public void setPartyTypeId(String partyTypeId) {
        this.partyTypeId = partyTypeId;
    }

    private String primaryRoleTypeId;

    public String getPrimaryRoleTypeId() {
        return this.primaryRoleTypeId;
    }

    public void setPrimaryRoleTypeId(String primaryRoleTypeId) {
        this.primaryRoleTypeId = primaryRoleTypeId;
    }

    private String externalId;

    public String getExternalId() {
        return this.externalId;
    }

    public void setExternalId(String externalId) {
        this.externalId = externalId;
    }

    private String preferredCurrencyUomId;

    public String getPreferredCurrencyUomId() {
        return this.preferredCurrencyUomId;
    }

    public void setPreferredCurrencyUomId(String preferredCurrencyUomId) {
        this.preferredCurrencyUomId = preferredCurrencyUomId;
    }

    private String description;

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    private String statusId;

    public String getStatusId() {
        return this.statusId;
    }

    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }

    private String shortDescription;

    public String getShortDescription() {
        return this.shortDescription;
    }

    public void setShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
    }

    private String email;

    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    private String webSite;

    public String getWebSite() {
        return this.webSite;
    }

    public void setWebSite(String webSite) {
        this.webSite = webSite;
    }

    private String telephone;

    public String getTelephone() {
        return this.telephone;
    }

    public void setTelephone(String telephone) {
        this.telephone = telephone;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Set<PartyIdentificationState> protectedPartyIdentifications = new HashSet<>();

    protected Set<PartyIdentificationState> getProtectedPartyIdentifications() {
        return this.protectedPartyIdentifications;
    }

    protected void setProtectedPartyIdentifications(Set<PartyIdentificationState> protectedPartyIdentifications) {
        this.protectedPartyIdentifications = protectedPartyIdentifications;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, PartyIdentificationState> partyIdentifications;

    public EntityStateCollection.MutableEntityStateCollection<String, PartyIdentificationState> getPartyIdentifications() {
        return this.partyIdentifications;
    }

    public void setPartyIdentifications(EntityStateCollection.MutableEntityStateCollection<String, PartyIdentificationState> partyIdentifications) {
        this.partyIdentifications = partyIdentifications;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractPartyState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setPartyId(((PartyEvent.SqlPartyEvent) events.get(0)).getPartyEventId().getPartyId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? PartyState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractPartyState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        partyIdentifications = new SimplePartyIdentificationStateCollection();
    }

    @Override
    public int hashCode() {
        return getPartyId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof PartyState) {
            return Objects.equals(this.getPartyId(), ((PartyState)obj).getPartyId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof PartyStateCreated) {
            when((PartyStateCreated) e);
        } else if (e instanceof PartyStateMergePatched) {
            when((PartyStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(PartyStateCreated e) {
        throwOnWrongEvent(e);

        this.setPartyTypeId(e.getPartyTypeId());
        this.setPrimaryRoleTypeId(e.getPrimaryRoleTypeId());
        this.setExternalId(e.getExternalId());
        this.setPreferredCurrencyUomId(e.getPreferredCurrencyUomId());
        this.setDescription(e.getDescription());
        this.setStatusId(e.getStatusId());
        this.setShortDescription(e.getShortDescription());
        this.setEmail(e.getEmail());
        this.setWebSite(e.getWebSite());
        this.setTelephone(e.getTelephone());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

        for (PartyIdentificationEvent.PartyIdentificationStateCreated innerEvent : e.getPartyIdentificationEvents()) {
            PartyIdentificationState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(((PartyIdentificationEvent.SqlPartyIdentificationEvent)innerEvent).getPartyIdentificationEventId().getPartyIdentificationTypeId());
            ((PartyIdentificationState.SqlPartyIdentificationState)innerState).mutate(innerEvent);
        }
    }

    public void merge(PartyState s) {
        if (s == this) {
            return;
        }
        this.setPartyTypeId(s.getPartyTypeId());
        this.setPrimaryRoleTypeId(s.getPrimaryRoleTypeId());
        this.setExternalId(s.getExternalId());
        this.setPreferredCurrencyUomId(s.getPreferredCurrencyUomId());
        this.setDescription(s.getDescription());
        this.setStatusId(s.getStatusId());
        this.setShortDescription(s.getShortDescription());
        this.setEmail(s.getEmail());
        this.setWebSite(s.getWebSite());
        this.setTelephone(s.getTelephone());

        if (s.getPartyIdentifications() != null) {
            Iterable<PartyIdentificationState> iterable;
            if (s.getPartyIdentifications().isLazy()) {
                iterable = s.getPartyIdentifications().getLoadedStates();
            } else {
                iterable = s.getPartyIdentifications();
            }
            if (iterable != null) {
                for (PartyIdentificationState ss : iterable) {
                    PartyIdentificationState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(ss.getPartyIdentificationTypeId());
                    ((AbstractPartyIdentificationState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getPartyIdentifications() != null) {
            if (s.getPartyIdentifications() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getPartyIdentifications()).getRemovedStates() != null) {
                    for (PartyIdentificationState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, PartyIdentificationState>)s.getPartyIdentifications()).getRemovedStates()) {
                        PartyIdentificationState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(ss.getPartyIdentificationTypeId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getPartyIdentifications()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getPartyIdentifications().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getPartyIdentifications().stream().map(i -> i.getPartyIdentificationTypeId()).collect(java.util.stream.Collectors.toList()));
                    s.getPartyIdentifications().forEach(i -> removedStateIds.remove(i.getPartyIdentificationTypeId()));
                    for (String i : removedStateIds) {
                        PartyIdentificationState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getPartyIdentifications()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(PartyStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getPartyTypeId() == null) {
            if (e.getIsPropertyPartyTypeIdRemoved() != null && e.getIsPropertyPartyTypeIdRemoved()) {
                this.setPartyTypeId(null);
            }
        } else {
            this.setPartyTypeId(e.getPartyTypeId());
        }
        if (e.getPrimaryRoleTypeId() == null) {
            if (e.getIsPropertyPrimaryRoleTypeIdRemoved() != null && e.getIsPropertyPrimaryRoleTypeIdRemoved()) {
                this.setPrimaryRoleTypeId(null);
            }
        } else {
            this.setPrimaryRoleTypeId(e.getPrimaryRoleTypeId());
        }
        if (e.getExternalId() == null) {
            if (e.getIsPropertyExternalIdRemoved() != null && e.getIsPropertyExternalIdRemoved()) {
                this.setExternalId(null);
            }
        } else {
            this.setExternalId(e.getExternalId());
        }
        if (e.getPreferredCurrencyUomId() == null) {
            if (e.getIsPropertyPreferredCurrencyUomIdRemoved() != null && e.getIsPropertyPreferredCurrencyUomIdRemoved()) {
                this.setPreferredCurrencyUomId(null);
            }
        } else {
            this.setPreferredCurrencyUomId(e.getPreferredCurrencyUomId());
        }
        if (e.getDescription() == null) {
            if (e.getIsPropertyDescriptionRemoved() != null && e.getIsPropertyDescriptionRemoved()) {
                this.setDescription(null);
            }
        } else {
            this.setDescription(e.getDescription());
        }
        if (e.getStatusId() == null) {
            if (e.getIsPropertyStatusIdRemoved() != null && e.getIsPropertyStatusIdRemoved()) {
                this.setStatusId(null);
            }
        } else {
            this.setStatusId(e.getStatusId());
        }
        if (e.getShortDescription() == null) {
            if (e.getIsPropertyShortDescriptionRemoved() != null && e.getIsPropertyShortDescriptionRemoved()) {
                this.setShortDescription(null);
            }
        } else {
            this.setShortDescription(e.getShortDescription());
        }
        if (e.getEmail() == null) {
            if (e.getIsPropertyEmailRemoved() != null && e.getIsPropertyEmailRemoved()) {
                this.setEmail(null);
            }
        } else {
            this.setEmail(e.getEmail());
        }
        if (e.getWebSite() == null) {
            if (e.getIsPropertyWebSiteRemoved() != null && e.getIsPropertyWebSiteRemoved()) {
                this.setWebSite(null);
            }
        } else {
            this.setWebSite(e.getWebSite());
        }
        if (e.getTelephone() == null) {
            if (e.getIsPropertyTelephoneRemoved() != null && e.getIsPropertyTelephoneRemoved()) {
                this.setTelephone(null);
            }
        } else {
            this.setTelephone(e.getTelephone());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (PartyIdentificationEvent innerEvent : e.getPartyIdentificationEvents()) {
            PartyIdentificationState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(((PartyIdentificationEvent.SqlPartyIdentificationEvent)innerEvent).getPartyIdentificationEventId().getPartyIdentificationTypeId());
            ((PartyIdentificationState.SqlPartyIdentificationState)innerState).mutate(innerEvent);
            if (innerEvent instanceof PartyIdentificationEvent.PartyIdentificationStateRemoved) {
                //PartyIdentificationEvent.PartyIdentificationStateRemoved removed = (PartyIdentificationEvent.PartyIdentificationStateRemoved)innerEvent;
                ((EntityStateCollection.MutableEntityStateCollection)this.getPartyIdentifications()).removeState(innerState);
            }
        }
    }

    public void save() {
        if (partyIdentifications instanceof Saveable) {
            ((Saveable)partyIdentifications).save();
        }
    }

    protected void throwOnWrongEvent(PartyEvent event) {
        String stateEntityId = this.getPartyId(); // Aggregate Id
        String eventEntityId = ((PartyEvent.SqlPartyEvent)event).getPartyEventId().getPartyId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((PartyEvent.SqlPartyEvent)event).getPartyEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getPartyEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimplePartyState extends AbstractPartyState {

        public SimplePartyState() {
        }

        public SimplePartyState(List<Event> events) {
            super(events);
        }

        public static SimplePartyState newForReapplying() {
            SimplePartyState s = new SimplePartyState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimplePartyIdentificationStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, PartyIdentificationState>, Collection<PartyIdentificationState> {

        @Override
        public PartyIdentificationState get(String partyIdentificationTypeId) {
            return protectedPartyIdentifications.stream().filter(
                            e -> e.getPartyIdentificationTypeId().equals(partyIdentificationTypeId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<PartyIdentificationState> getLoadedStates() {
            return protectedPartyIdentifications;
        }

        @Override
        public PartyIdentificationState getOrAddDefault(String partyIdentificationTypeId) {
            PartyIdentificationState s = get(partyIdentificationTypeId);
            if (s == null) {
                PartyIdentificationId globalId = new PartyIdentificationId(getPartyId(), partyIdentificationTypeId);
                AbstractPartyIdentificationState state = new AbstractPartyIdentificationState.SimplePartyIdentificationState();
                state.setPartyIdentificationId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedPartyIdentifications.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedPartyIdentifications.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedPartyIdentifications.contains(o);
        }

        @Override
        public Iterator<PartyIdentificationState> iterator() {
            return protectedPartyIdentifications.iterator();
        }

        @Override
        public java.util.stream.Stream<PartyIdentificationState> stream() {
            return protectedPartyIdentifications.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedPartyIdentifications.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedPartyIdentifications.toArray(a);
        }

        @Override
        public boolean add(PartyIdentificationState s) {
            if (s instanceof AbstractPartyIdentificationState) {
                AbstractPartyIdentificationState state = (AbstractPartyIdentificationState) s;
                state.setProtectedPartyState(AbstractPartyState.this);
            }
            return protectedPartyIdentifications.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractPartyIdentificationState) {
                AbstractPartyIdentificationState s = (AbstractPartyIdentificationState) o;
                s.setProtectedPartyState(null);
            }
            return protectedPartyIdentifications.remove(o);
        }

        @Override
        public boolean removeState(PartyIdentificationState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedPartyIdentifications.containsAll(c);
        }

        @Override
        public boolean addAll(Collection<? extends PartyIdentificationState> c) {
            return protectedPartyIdentifications.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedPartyIdentifications.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedPartyIdentifications.retainAll(c);
        }

        @Override
        public void clear() {
            protectedPartyIdentifications.clear();
        }
    }


}

