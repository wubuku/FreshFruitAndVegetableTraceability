// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.article;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractArticleEvent extends AbstractEvent implements ArticleEvent.SqlArticleEvent {
    private ArticleEventId articleEventId = new ArticleEventId();

    public ArticleEventId getArticleEventId() {
        return this.articleEventId;
    }

    public void setArticleEventId(ArticleEventId eventId) {
        this.articleEventId = eventId;
    }
    
    public Long getArticleId() {
        return getArticleEventId().getArticleId();
    }

    public void setArticleId(Long articleId) {
        getArticleEventId().setArticleId(articleId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getArticleEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getArticleEventId().setVersion(version);
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractArticleEvent() {
    }

    protected AbstractArticleEvent(ArticleEventId eventId) {
        this.articleEventId = eventId;
    }

    protected CommentEventDao getCommentEventDao() {
        return (CommentEventDao)ApplicationContext.current.get("commentEventDao");
    }

    protected CommentEventId newCommentEventId(Long commentSeqId)
    {
        CommentEventId eventId = new CommentEventId(this.getArticleEventId().getArticleId(), 
            commentSeqId, 
            this.getArticleEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(CommentEvent.SqlCommentEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(ArticleEvent.SqlArticleEvent oe, CommentEvent.SqlCommentEvent e)
    {
        if (!oe.getArticleEventId().getArticleId().equals(e.getCommentEventId().getArticleId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id ArticleId %1$s but inner id ArticleId %2$s", 
                oe.getArticleEventId().getArticleId(), e.getCommentEventId().getArticleId());
        }
    }

    public CommentEvent.CommentStateCreated newCommentStateCreated(Long commentSeqId) {
        return new AbstractCommentEvent.SimpleCommentStateCreated(newCommentEventId(commentSeqId));
    }

    public CommentEvent.CommentStateMergePatched newCommentStateMergePatched(Long commentSeqId) {
        return new AbstractCommentEvent.SimpleCommentStateMergePatched(newCommentEventId(commentSeqId));
    }

    public CommentEvent.CommentStateRemoved newCommentStateRemoved(Long commentSeqId) {
        return new AbstractCommentEvent.SimpleCommentStateRemoved(newCommentEventId(commentSeqId));
    }


    public abstract String getEventType();

    public static class ArticleLobEvent extends AbstractArticleEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventType() {
            return "ArticleLobEvent";
        }

    }

    public static class ArticleBodyUpdated extends ArticleLobEvent implements ArticleEvent.ArticleBodyUpdated {

        @Override
        public String getEventType() {
            return "ArticleBodyUpdated";
        }

        public String getBody() {
            Object val = getDynamicProperties().get("body");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setBody(String value) {
            getDynamicProperties().put("body", value);
        }

    }


    public static abstract class AbstractArticleStateEvent extends AbstractArticleEvent implements ArticleEvent.ArticleStateEvent {
        private String title;

        public String getTitle()
        {
            return this.title;
        }

        public void setTitle(String title)
        {
            this.title = title;
        }

        private String body;

        public String getBody()
        {
            return this.body;
        }

        public void setBody(String body)
        {
            this.body = body;
        }

        private String author;

        public String getAuthor()
        {
            return this.author;
        }

        public void setAuthor(String author)
        {
            this.author = author;
        }

        private Set<String> tags;

        public Set<String> getTags()
        {
            return this.tags;
        }

        public void setTags(Set<String> tags)
        {
            this.tags = tags;
        }

        protected AbstractArticleStateEvent(ArticleEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractArticleStateCreated extends AbstractArticleStateEvent implements ArticleEvent.ArticleStateCreated, Saveable
    {
        public AbstractArticleStateCreated() {
            this(new ArticleEventId());
        }

        public AbstractArticleStateCreated(ArticleEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

        private Map<CommentEventId, CommentEvent.CommentStateCreated> commentEvents = new HashMap<CommentEventId, CommentEvent.CommentStateCreated>();
        
        private Iterable<CommentEvent.CommentStateCreated> readOnlyCommentEvents;

        public Iterable<CommentEvent.CommentStateCreated> getCommentEvents()
        {
            if (!getEventReadOnly())
            {
                return this.commentEvents.values();
            }
            else
            {
                if (readOnlyCommentEvents != null) { return readOnlyCommentEvents; }
                CommentEventDao eventDao = getCommentEventDao();
                List<CommentEvent.CommentStateCreated> eL = new ArrayList<CommentEvent.CommentStateCreated>();
                for (CommentEvent e : eventDao.findByArticleEventId(this.getArticleEventId()))
                {
                    ((CommentEvent.SqlCommentEvent)e).setEventReadOnly(true);
                    eL.add((CommentEvent.CommentStateCreated)e);
                }
                return (readOnlyCommentEvents = eL);
            }
        }

        public void setCommentEvents(Iterable<CommentEvent.CommentStateCreated> es)
        {
            if (es != null)
            {
                for (CommentEvent.CommentStateCreated e : es)
                {
                    addCommentEvent(e);
                }
            }
            else { this.commentEvents.clear(); }
        }
        
        public void addCommentEvent(CommentEvent.CommentStateCreated e)
        {
            throwOnInconsistentEventIds((CommentEvent.SqlCommentEvent)e);
            this.commentEvents.put(((CommentEvent.SqlCommentEvent)e).getCommentEventId(), e);
        }

        public void save()
        {
            for (CommentEvent.CommentStateCreated e : this.getCommentEvents()) {
                getCommentEventDao().save(e);
            }
        }
    }


    public static abstract class AbstractArticleStateMergePatched extends AbstractArticleStateEvent implements ArticleEvent.ArticleStateMergePatched, Saveable
    {
        public AbstractArticleStateMergePatched() {
            this(new ArticleEventId());
        }

        public AbstractArticleStateMergePatched(ArticleEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyTitleRemoved;

        public Boolean getIsPropertyTitleRemoved() {
            return this.isPropertyTitleRemoved;
        }

        public void setIsPropertyTitleRemoved(Boolean removed) {
            this.isPropertyTitleRemoved = removed;
        }

        private Boolean isPropertyBodyRemoved;

        public Boolean getIsPropertyBodyRemoved() {
            return this.isPropertyBodyRemoved;
        }

        public void setIsPropertyBodyRemoved(Boolean removed) {
            this.isPropertyBodyRemoved = removed;
        }

        private Boolean isPropertyAuthorRemoved;

        public Boolean getIsPropertyAuthorRemoved() {
            return this.isPropertyAuthorRemoved;
        }

        public void setIsPropertyAuthorRemoved(Boolean removed) {
            this.isPropertyAuthorRemoved = removed;
        }

        private Boolean isPropertyTagsRemoved;

        public Boolean getIsPropertyTagsRemoved() {
            return this.isPropertyTagsRemoved;
        }

        public void setIsPropertyTagsRemoved(Boolean removed) {
            this.isPropertyTagsRemoved = removed;
        }


        private Map<CommentEventId, CommentEvent> commentEvents = new HashMap<CommentEventId, CommentEvent>();
        
        private Iterable<CommentEvent> readOnlyCommentEvents;

        public Iterable<CommentEvent> getCommentEvents()
        {
            if (!getEventReadOnly())
            {
                return this.commentEvents.values();
            }
            else
            {
                if (readOnlyCommentEvents != null) { return readOnlyCommentEvents; }
                CommentEventDao eventDao = getCommentEventDao();
                List<CommentEvent> eL = new ArrayList<CommentEvent>();
                for (CommentEvent e : eventDao.findByArticleEventId(this.getArticleEventId()))
                {
                    ((CommentEvent.SqlCommentEvent)e).setEventReadOnly(true);
                    eL.add((CommentEvent)e);
                }
                return (readOnlyCommentEvents = eL);
            }
        }

        public void setCommentEvents(Iterable<CommentEvent> es)
        {
            if (es != null)
            {
                for (CommentEvent e : es)
                {
                    addCommentEvent(e);
                }
            }
            else { this.commentEvents.clear(); }
        }
        
        public void addCommentEvent(CommentEvent e)
        {
            throwOnInconsistentEventIds((CommentEvent.SqlCommentEvent)e);
            this.commentEvents.put(((CommentEvent.SqlCommentEvent)e).getCommentEventId(), e);
        }

        public void save()
        {
            for (CommentEvent e : this.getCommentEvents()) {
                getCommentEventDao().save(e);
            }
        }
    }


    public static abstract class AbstractArticleStateDeleted extends AbstractArticleStateEvent implements ArticleEvent.ArticleStateDeleted, Saveable
    {
        public AbstractArticleStateDeleted() {
            this(new ArticleEventId());
        }

        public AbstractArticleStateDeleted(ArticleEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.DELETED;
        }

        
        private Map<CommentEventId, CommentEvent.CommentStateRemoved> commentEvents = new HashMap<CommentEventId, CommentEvent.CommentStateRemoved>();
        
        private Iterable<CommentEvent.CommentStateRemoved> readOnlyCommentEvents;

        public Iterable<CommentEvent.CommentStateRemoved> getCommentEvents()
        {
            if (!getEventReadOnly())
            {
                return this.commentEvents.values();
            }
            else
            {
                if (readOnlyCommentEvents != null) { return readOnlyCommentEvents; }
                CommentEventDao eventDao = getCommentEventDao();
                List<CommentEvent.CommentStateRemoved> eL = new ArrayList<CommentEvent.CommentStateRemoved>();
                for (CommentEvent e : eventDao.findByArticleEventId(this.getArticleEventId()))
                {
                    ((CommentEvent.SqlCommentEvent)e).setEventReadOnly(true);
                    eL.add((CommentEvent.CommentStateRemoved)e);
                }
                return (readOnlyCommentEvents = eL);
            }
        }

        public void setCommentEvents(Iterable<CommentEvent.CommentStateRemoved> es)
        {
            if (es != null)
            {
                for (CommentEvent.CommentStateRemoved e : es)
                {
                    addCommentEvent(e);
                }
            }
            else { this.commentEvents.clear(); }
        }
        
        public void addCommentEvent(CommentEvent.CommentStateRemoved e)
        {
            throwOnInconsistentEventIds((CommentEvent.SqlCommentEvent)e);
            this.commentEvents.put(((CommentEvent.SqlCommentEvent)e).getCommentEventId(), e);
        }

        public void save()
        {
            for (CommentEvent.CommentStateRemoved e : this.getCommentEvents()) {
                getCommentEventDao().save(e);
            }
        }
    }

    public static class SimpleArticleStateCreated extends AbstractArticleStateCreated
    {
        public SimpleArticleStateCreated() {
        }

        public SimpleArticleStateCreated(ArticleEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleArticleStateMergePatched extends AbstractArticleStateMergePatched
    {
        public SimpleArticleStateMergePatched() {
        }

        public SimpleArticleStateMergePatched(ArticleEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleArticleStateDeleted extends AbstractArticleStateDeleted
    {
        public SimpleArticleStateDeleted() {
        }

        public SimpleArticleStateDeleted(ArticleEventId eventId) {
            super(eventId);
        }
    }

}

