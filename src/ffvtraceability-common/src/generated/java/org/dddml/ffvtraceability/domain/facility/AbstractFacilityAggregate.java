// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facility;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractFacilityAggregate extends AbstractAggregate implements FacilityAggregate {
    private FacilityState.MutableFacilityState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractFacilityAggregate(FacilityState state) {
        this.state = (FacilityState.MutableFacilityState)state;
    }

    public FacilityState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(FacilityCommand.CreateFacility c) {
        if (c.getVersion() == null) { c.setVersion(FacilityState.VERSION_NULL); }
        FacilityEvent e = map(c);
        apply(e);
    }

    public void mergePatch(FacilityCommand.MergePatchFacility c) {
        FacilityEvent e = map(c);
        apply(e);
    }

    public void delete(FacilityCommand.DeleteFacility c) {
        FacilityEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        FacilityCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected FacilityEvent map(FacilityCommand.CreateFacility c) {
        FacilityEventId stateEventId = new FacilityEventId(c.getFacilityId(), c.getVersion());
        FacilityEvent.FacilityStateCreated e = newFacilityStateCreated(stateEventId);
        e.setFacilityTypeId(c.getFacilityTypeId());
        e.setParentFacilityId(c.getParentFacilityId());
        e.setOwnerPartyId(c.getOwnerPartyId());
        e.setDefaultInventoryItemTypeId(c.getDefaultInventoryItemTypeId());
        e.setFacilityName(c.getFacilityName());
        e.setPrimaryFacilityGroupId(c.getPrimaryFacilityGroupId());
        e.setOldSquareFootage(c.getOldSquareFootage());
        e.setFacilitySize(c.getFacilitySize());
        e.setFacilitySizeUomId(c.getFacilitySizeUomId());
        e.setProductStoreId(c.getProductStoreId());
        e.setDefaultDaysToShip(c.getDefaultDaysToShip());
        e.setOpenedDate(c.getOpenedDate());
        e.setClosedDate(c.getClosedDate());
        e.setDescription(c.getDescription());
        e.setDefaultDimensionUomId(c.getDefaultDimensionUomId());
        e.setDefaultWeightUomId(c.getDefaultWeightUomId());
        e.setGeoPointId(c.getGeoPointId());
        e.setGeoId(c.getGeoId());
        e.setActive(c.getActive());
        ((AbstractFacilityEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (FacilityIdentificationCommand.CreateFacilityIdentification innerCommand : c.getCreateFacilityIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            FacilityIdentificationEvent.FacilityIdentificationStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addFacilityIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected FacilityEvent map(FacilityCommand.MergePatchFacility c) {
        FacilityEventId stateEventId = new FacilityEventId(c.getFacilityId(), c.getVersion());
        FacilityEvent.FacilityStateMergePatched e = newFacilityStateMergePatched(stateEventId);
        e.setFacilityTypeId(c.getFacilityTypeId());
        e.setParentFacilityId(c.getParentFacilityId());
        e.setOwnerPartyId(c.getOwnerPartyId());
        e.setDefaultInventoryItemTypeId(c.getDefaultInventoryItemTypeId());
        e.setFacilityName(c.getFacilityName());
        e.setPrimaryFacilityGroupId(c.getPrimaryFacilityGroupId());
        e.setOldSquareFootage(c.getOldSquareFootage());
        e.setFacilitySize(c.getFacilitySize());
        e.setFacilitySizeUomId(c.getFacilitySizeUomId());
        e.setProductStoreId(c.getProductStoreId());
        e.setDefaultDaysToShip(c.getDefaultDaysToShip());
        e.setOpenedDate(c.getOpenedDate());
        e.setClosedDate(c.getClosedDate());
        e.setDescription(c.getDescription());
        e.setDefaultDimensionUomId(c.getDefaultDimensionUomId());
        e.setDefaultWeightUomId(c.getDefaultWeightUomId());
        e.setGeoPointId(c.getGeoPointId());
        e.setGeoId(c.getGeoId());
        e.setActive(c.getActive());
        e.setIsPropertyFacilityTypeIdRemoved(c.getIsPropertyFacilityTypeIdRemoved());
        e.setIsPropertyParentFacilityIdRemoved(c.getIsPropertyParentFacilityIdRemoved());
        e.setIsPropertyOwnerPartyIdRemoved(c.getIsPropertyOwnerPartyIdRemoved());
        e.setIsPropertyDefaultInventoryItemTypeIdRemoved(c.getIsPropertyDefaultInventoryItemTypeIdRemoved());
        e.setIsPropertyFacilityNameRemoved(c.getIsPropertyFacilityNameRemoved());
        e.setIsPropertyPrimaryFacilityGroupIdRemoved(c.getIsPropertyPrimaryFacilityGroupIdRemoved());
        e.setIsPropertyOldSquareFootageRemoved(c.getIsPropertyOldSquareFootageRemoved());
        e.setIsPropertyFacilitySizeRemoved(c.getIsPropertyFacilitySizeRemoved());
        e.setIsPropertyFacilitySizeUomIdRemoved(c.getIsPropertyFacilitySizeUomIdRemoved());
        e.setIsPropertyProductStoreIdRemoved(c.getIsPropertyProductStoreIdRemoved());
        e.setIsPropertyDefaultDaysToShipRemoved(c.getIsPropertyDefaultDaysToShipRemoved());
        e.setIsPropertyOpenedDateRemoved(c.getIsPropertyOpenedDateRemoved());
        e.setIsPropertyClosedDateRemoved(c.getIsPropertyClosedDateRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyDefaultDimensionUomIdRemoved(c.getIsPropertyDefaultDimensionUomIdRemoved());
        e.setIsPropertyDefaultWeightUomIdRemoved(c.getIsPropertyDefaultWeightUomIdRemoved());
        e.setIsPropertyGeoPointIdRemoved(c.getIsPropertyGeoPointIdRemoved());
        e.setIsPropertyGeoIdRemoved(c.getIsPropertyGeoIdRemoved());
        e.setIsPropertyActiveRemoved(c.getIsPropertyActiveRemoved());
        ((AbstractFacilityEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (FacilityIdentificationCommand innerCommand : c.getFacilityIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            FacilityIdentificationEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addFacilityIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected FacilityEvent map(FacilityCommand.DeleteFacility c) {
        FacilityEventId stateEventId = new FacilityEventId(c.getFacilityId(), c.getVersion());
        FacilityEvent.FacilityStateDeleted e = newFacilityStateDeleted(stateEventId);
        ((AbstractFacilityEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    protected FacilityIdentificationEvent map(FacilityIdentificationCommand c, FacilityCommand outerCommand, Long version, FacilityState outerState) {
        FacilityIdentificationCommand.CreateFacilityIdentification create = (c.getCommandType().equals(CommandType.CREATE)) ? ((FacilityIdentificationCommand.CreateFacilityIdentification)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        FacilityIdentificationCommand.MergePatchFacilityIdentification merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((FacilityIdentificationCommand.MergePatchFacilityIdentification)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        FacilityIdentificationCommand.RemoveFacilityIdentification remove = (c.getCommandType().equals(CommandType.REMOVE)) ? ((FacilityIdentificationCommand.RemoveFacilityIdentification)c) : null;
        if (remove != null) {
            return mapRemove(remove, outerCommand, version, outerState);
        }
        throw new UnsupportedOperationException();
    }

    protected FacilityIdentificationEvent.FacilityIdentificationStateCreated mapCreate(FacilityIdentificationCommand.CreateFacilityIdentification c, FacilityCommand outerCommand, Long version, FacilityState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        FacilityIdentificationEventId stateEventId = new FacilityIdentificationEventId(outerState.getFacilityId(), c.getFacilityIdentificationTypeId(), version);
        FacilityIdentificationEvent.FacilityIdentificationStateCreated e = newFacilityIdentificationStateCreated(stateEventId);
        FacilityIdentificationState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, FacilityIdentificationState>)outerState.getFacilityIdentifications()).getOrAddDefault(c.getFacilityIdentificationTypeId());

        e.setIdValue(c.getIdValue());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected FacilityIdentificationEvent.FacilityIdentificationStateMergePatched mapMergePatch(FacilityIdentificationCommand.MergePatchFacilityIdentification c, FacilityCommand outerCommand, Long version, FacilityState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        FacilityIdentificationEventId stateEventId = new FacilityIdentificationEventId(outerState.getFacilityId(), c.getFacilityIdentificationTypeId(), version);
        FacilityIdentificationEvent.FacilityIdentificationStateMergePatched e = newFacilityIdentificationStateMergePatched(stateEventId);
        FacilityIdentificationState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, FacilityIdentificationState>)outerState.getFacilityIdentifications()).getOrAddDefault(c.getFacilityIdentificationTypeId());

        e.setIdValue(c.getIdValue());
        e.setIsPropertyIdValueRemoved(c.getIsPropertyIdValueRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected FacilityIdentificationEvent.FacilityIdentificationStateRemoved mapRemove(FacilityIdentificationCommand.RemoveFacilityIdentification c, FacilityCommand outerCommand, Long version, FacilityState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        FacilityIdentificationEventId stateEventId = new FacilityIdentificationEventId(outerState.getFacilityId(), c.getFacilityIdentificationTypeId(), version);
        FacilityIdentificationEvent.FacilityIdentificationStateRemoved e = newFacilityIdentificationStateRemoved(stateEventId);

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IRemove... ////////////////////////////

    protected void throwOnInconsistentCommands(FacilityCommand command, FacilityIdentificationCommand innerCommand) {
        AbstractFacilityCommand properties = command instanceof AbstractFacilityCommand ? (AbstractFacilityCommand) command : null;
        AbstractFacilityIdentificationCommand innerProperties = innerCommand instanceof AbstractFacilityIdentificationCommand ? (AbstractFacilityIdentificationCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerFacilityIdName = "FacilityId";
        String outerFacilityIdValue = properties.getFacilityId();
        String innerFacilityIdName = "FacilityId";
        String innerFacilityIdValue = innerProperties.getFacilityId();
        if (innerFacilityIdValue == null) {
            innerProperties.setFacilityId(outerFacilityIdValue);
        }
        else if (innerFacilityIdValue != outerFacilityIdValue 
            && (innerFacilityIdValue == null || innerFacilityIdValue != null && !innerFacilityIdValue.equals(outerFacilityIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerFacilityIdName, outerFacilityIdValue, innerFacilityIdName, innerFacilityIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////


    ////////////////////////

    protected FacilityEvent.FacilityStateCreated newFacilityStateCreated(Long version, String commandId, String requesterId) {
        FacilityEventId stateEventId = new FacilityEventId(this.state.getFacilityId(), version);
        FacilityEvent.FacilityStateCreated e = newFacilityStateCreated(stateEventId);
        ((AbstractFacilityEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FacilityEvent.FacilityStateMergePatched newFacilityStateMergePatched(Long version, String commandId, String requesterId) {
        FacilityEventId stateEventId = new FacilityEventId(this.state.getFacilityId(), version);
        FacilityEvent.FacilityStateMergePatched e = newFacilityStateMergePatched(stateEventId);
        ((AbstractFacilityEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FacilityEvent.FacilityStateDeleted newFacilityStateDeleted(Long version, String commandId, String requesterId) {
        FacilityEventId stateEventId = new FacilityEventId(this.state.getFacilityId(), version);
        FacilityEvent.FacilityStateDeleted e = newFacilityStateDeleted(stateEventId);
        ((AbstractFacilityEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FacilityEvent.FacilityStateCreated newFacilityStateCreated(FacilityEventId stateEventId) {
        return new AbstractFacilityEvent.SimpleFacilityStateCreated(stateEventId);
    }

    protected FacilityEvent.FacilityStateMergePatched newFacilityStateMergePatched(FacilityEventId stateEventId) {
        return new AbstractFacilityEvent.SimpleFacilityStateMergePatched(stateEventId);
    }

    protected FacilityEvent.FacilityStateDeleted newFacilityStateDeleted(FacilityEventId stateEventId) {
        return new AbstractFacilityEvent.SimpleFacilityStateDeleted(stateEventId);
    }

    protected FacilityIdentificationEvent.FacilityIdentificationStateCreated newFacilityIdentificationStateCreated(FacilityIdentificationEventId stateEventId) {
        return new AbstractFacilityIdentificationEvent.SimpleFacilityIdentificationStateCreated(stateEventId);
    }

    protected FacilityIdentificationEvent.FacilityIdentificationStateMergePatched newFacilityIdentificationStateMergePatched(FacilityIdentificationEventId stateEventId) {
        return new AbstractFacilityIdentificationEvent.SimpleFacilityIdentificationStateMergePatched(stateEventId);
    }

    protected FacilityIdentificationEvent.FacilityIdentificationStateRemoved newFacilityIdentificationStateRemoved(FacilityIdentificationEventId stateEventId) {
        return new AbstractFacilityIdentificationEvent.SimpleFacilityIdentificationStateRemoved(stateEventId);
    }


    public static class SimpleFacilityAggregate extends AbstractFacilityAggregate {
        public SimpleFacilityAggregate(FacilityState state) {
            super(state);
        }

    }

}

