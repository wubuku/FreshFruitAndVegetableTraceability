// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface PartyContactMechBaseCommand extends Command {

    PartyContactMechBaseId getPartyContactMechBaseId();

    void setPartyContactMechBaseId(PartyContactMechBaseId partyContactMechBaseId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(PartyContactMechBaseState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((PartyContactMechBaseCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (isCreationCommand((PartyContactMechBaseCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(PartyContactMechBaseCommand c) {
        if ((c instanceof PartyContactMechBaseCommand.CreatePartyContactMechBase) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(PartyContactMechBaseState.VERSION_NULL)))
            return true;
        if ((c instanceof PartyContactMechBaseCommand.MergePatchPartyContactMechBase))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(PartyContactMechBaseState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchPartyContactMechBase extends PartyContactMechBaseCommand {
        OffsetDateTime getActiveFromDate();

        void setActiveFromDate(OffsetDateTime activeFromDate);

    }

    interface CreatePartyContactMechBase extends CreateOrMergePatchPartyContactMechBase {
        CreatePartyContactMechCommandCollection getCreatePartyContactMechCommands();

        PartyContactMechCommand.CreatePartyContactMech newCreatePartyContactMech();

    }

    interface MergePatchPartyContactMechBase extends CreateOrMergePatchPartyContactMechBase {
        Boolean getIsPropertyActiveFromDateRemoved();

        void setIsPropertyActiveFromDateRemoved(Boolean removed);


        PartyContactMechCommandCollection getPartyContactMechCommands();

        PartyContactMechCommand.CreatePartyContactMech newCreatePartyContactMech();

        PartyContactMechCommand.MergePatchPartyContactMech newMergePatchPartyContactMech();

        PartyContactMechCommand.RemovePartyContactMech newRemovePartyContactMech();

    }

    interface DeletePartyContactMechBase extends PartyContactMechBaseCommand {
    }

    interface CreatePartyContactMechCommandCollection extends Iterable<PartyContactMechCommand.CreatePartyContactMech> {
        void add(PartyContactMechCommand.CreatePartyContactMech c);

        void remove(PartyContactMechCommand.CreatePartyContactMech c);

        void clear();
    }

    interface PartyContactMechCommandCollection extends Iterable<PartyContactMechCommand> {
        void add(PartyContactMechCommand c);

        void remove(PartyContactMechCommand c);

        void clear();
    }

}

