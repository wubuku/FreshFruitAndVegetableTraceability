// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipmentboxtype;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.shipmentboxtype.ShipmentBoxTypeEvent.*;

public abstract class AbstractShipmentBoxTypeState implements ShipmentBoxTypeState.SqlShipmentBoxTypeState {

    private String shipmentBoxTypeId;

    public String getShipmentBoxTypeId() {
        return this.shipmentBoxTypeId;
    }

    public void setShipmentBoxTypeId(String shipmentBoxTypeId) {
        this.shipmentBoxTypeId = shipmentBoxTypeId;
    }

    private String description;

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    private String dimensionUomId;

    public String getDimensionUomId() {
        return this.dimensionUomId;
    }

    public void setDimensionUomId(String dimensionUomId) {
        this.dimensionUomId = dimensionUomId;
    }

    private java.math.BigDecimal boxLength;

    public java.math.BigDecimal getBoxLength() {
        return this.boxLength;
    }

    public void setBoxLength(java.math.BigDecimal boxLength) {
        this.boxLength = boxLength;
    }

    private java.math.BigDecimal boxWidth;

    public java.math.BigDecimal getBoxWidth() {
        return this.boxWidth;
    }

    public void setBoxWidth(java.math.BigDecimal boxWidth) {
        this.boxWidth = boxWidth;
    }

    private java.math.BigDecimal boxHeight;

    public java.math.BigDecimal getBoxHeight() {
        return this.boxHeight;
    }

    public void setBoxHeight(java.math.BigDecimal boxHeight) {
        this.boxHeight = boxHeight;
    }

    private String weightUomId;

    public String getWeightUomId() {
        return this.weightUomId;
    }

    public void setWeightUomId(String weightUomId) {
        this.weightUomId = weightUomId;
    }

    private java.math.BigDecimal boxWeight;

    public java.math.BigDecimal getBoxWeight() {
        return this.boxWeight;
    }

    public void setBoxWeight(java.math.BigDecimal boxWeight) {
        this.boxWeight = boxWeight;
    }

    private String active;

    public String getActive() {
        return this.active;
    }

    public void setActive(String active) {
        this.active = active;
    }

    private String boxTypeName;

    public String getBoxTypeName() {
        return this.boxTypeName;
    }

    public void setBoxTypeName(String boxTypeName) {
        this.boxTypeName = boxTypeName;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractShipmentBoxTypeState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setShipmentBoxTypeId(((ShipmentBoxTypeEvent.SqlShipmentBoxTypeEvent) events.get(0)).getShipmentBoxTypeEventId().getShipmentBoxTypeId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? ShipmentBoxTypeState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractShipmentBoxTypeState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getShipmentBoxTypeId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof ShipmentBoxTypeState) {
            return Objects.equals(this.getShipmentBoxTypeId(), ((ShipmentBoxTypeState)obj).getShipmentBoxTypeId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof ShipmentBoxTypeStateCreated) {
            when((ShipmentBoxTypeStateCreated) e);
        } else if (e instanceof ShipmentBoxTypeStateMergePatched) {
            when((ShipmentBoxTypeStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(ShipmentBoxTypeStateCreated e) {
        throwOnWrongEvent(e);

        this.setDescription(e.getDescription());
        this.setDimensionUomId(e.getDimensionUomId());
        this.setBoxLength(e.getBoxLength());
        this.setBoxWidth(e.getBoxWidth());
        this.setBoxHeight(e.getBoxHeight());
        this.setWeightUomId(e.getWeightUomId());
        this.setBoxWeight(e.getBoxWeight());
        this.setActive(e.getActive());
        this.setBoxTypeName(e.getBoxTypeName());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(ShipmentBoxTypeState s) {
        if (s == this) {
            return;
        }
        this.setDescription(s.getDescription());
        this.setDimensionUomId(s.getDimensionUomId());
        this.setBoxLength(s.getBoxLength());
        this.setBoxWidth(s.getBoxWidth());
        this.setBoxHeight(s.getBoxHeight());
        this.setWeightUomId(s.getWeightUomId());
        this.setBoxWeight(s.getBoxWeight());
        this.setActive(s.getActive());
        this.setBoxTypeName(s.getBoxTypeName());
    }

    public void when(ShipmentBoxTypeStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getDescription() == null) {
            if (e.getIsPropertyDescriptionRemoved() != null && e.getIsPropertyDescriptionRemoved()) {
                this.setDescription(null);
            }
        } else {
            this.setDescription(e.getDescription());
        }
        if (e.getDimensionUomId() == null) {
            if (e.getIsPropertyDimensionUomIdRemoved() != null && e.getIsPropertyDimensionUomIdRemoved()) {
                this.setDimensionUomId(null);
            }
        } else {
            this.setDimensionUomId(e.getDimensionUomId());
        }
        if (e.getBoxLength() == null) {
            if (e.getIsPropertyBoxLengthRemoved() != null && e.getIsPropertyBoxLengthRemoved()) {
                this.setBoxLength(null);
            }
        } else {
            this.setBoxLength(e.getBoxLength());
        }
        if (e.getBoxWidth() == null) {
            if (e.getIsPropertyBoxWidthRemoved() != null && e.getIsPropertyBoxWidthRemoved()) {
                this.setBoxWidth(null);
            }
        } else {
            this.setBoxWidth(e.getBoxWidth());
        }
        if (e.getBoxHeight() == null) {
            if (e.getIsPropertyBoxHeightRemoved() != null && e.getIsPropertyBoxHeightRemoved()) {
                this.setBoxHeight(null);
            }
        } else {
            this.setBoxHeight(e.getBoxHeight());
        }
        if (e.getWeightUomId() == null) {
            if (e.getIsPropertyWeightUomIdRemoved() != null && e.getIsPropertyWeightUomIdRemoved()) {
                this.setWeightUomId(null);
            }
        } else {
            this.setWeightUomId(e.getWeightUomId());
        }
        if (e.getBoxWeight() == null) {
            if (e.getIsPropertyBoxWeightRemoved() != null && e.getIsPropertyBoxWeightRemoved()) {
                this.setBoxWeight(null);
            }
        } else {
            this.setBoxWeight(e.getBoxWeight());
        }
        if (e.getActive() == null) {
            if (e.getIsPropertyActiveRemoved() != null && e.getIsPropertyActiveRemoved()) {
                this.setActive(null);
            }
        } else {
            this.setActive(e.getActive());
        }
        if (e.getBoxTypeName() == null) {
            if (e.getIsPropertyBoxTypeNameRemoved() != null && e.getIsPropertyBoxTypeNameRemoved()) {
                this.setBoxTypeName(null);
            }
        } else {
            this.setBoxTypeName(e.getBoxTypeName());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(ShipmentBoxTypeEvent event) {
        String stateEntityId = this.getShipmentBoxTypeId(); // Aggregate Id
        String eventEntityId = ((ShipmentBoxTypeEvent.SqlShipmentBoxTypeEvent)event).getShipmentBoxTypeEventId().getShipmentBoxTypeId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((ShipmentBoxTypeEvent.SqlShipmentBoxTypeEvent)event).getShipmentBoxTypeEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getShipmentBoxTypeEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleShipmentBoxTypeState extends AbstractShipmentBoxTypeState {

        public SimpleShipmentBoxTypeState() {
        }

        public SimpleShipmentBoxTypeState(List<Event> events) {
            super(events);
        }

        public static SimpleShipmentBoxTypeState newForReapplying() {
            SimpleShipmentBoxTypeState s = new SimpleShipmentBoxTypeState();
            s.initializeForReapplying();
            return s;
        }

    }



}

