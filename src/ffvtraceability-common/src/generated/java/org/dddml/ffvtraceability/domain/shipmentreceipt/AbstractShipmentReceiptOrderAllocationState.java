// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipmentreceipt;

import java.util.*;
import java.math.*;
import org.dddml.ffvtraceability.domain.order.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.shipmentreceipt.ShipmentReceiptOrderAllocationEvent.*;

public abstract class AbstractShipmentReceiptOrderAllocationState implements ShipmentReceiptOrderAllocationState.SqlShipmentReceiptOrderAllocationState {

    private ShipmentReceiptOrderAllocationId shipmentReceiptOrderAllocationId = new ShipmentReceiptOrderAllocationId();

    public ShipmentReceiptOrderAllocationId getShipmentReceiptOrderAllocationId() {
        return this.shipmentReceiptOrderAllocationId;
    }

    public void setShipmentReceiptOrderAllocationId(ShipmentReceiptOrderAllocationId shipmentReceiptOrderAllocationId) {
        this.shipmentReceiptOrderAllocationId = shipmentReceiptOrderAllocationId;
    }

    private transient ShipmentReceiptState shipmentReceiptState;

    public ShipmentReceiptState getShipmentReceiptState() {
        return shipmentReceiptState;
    }

    public void setShipmentReceiptState(ShipmentReceiptState s) {
        shipmentReceiptState = s;
    }
    
    private ShipmentReceiptState protectedShipmentReceiptState;

    protected ShipmentReceiptState getProtectedShipmentReceiptState() {
        return protectedShipmentReceiptState;
    }

    protected void setProtectedShipmentReceiptState(ShipmentReceiptState protectedShipmentReceiptState) {
        this.protectedShipmentReceiptState = protectedShipmentReceiptState;
    }

    public String getShipmentReceiptReceiptId() {
        return this.getShipmentReceiptOrderAllocationId().getShipmentReceiptReceiptId();
    }
        
    public void setShipmentReceiptReceiptId(String shipmentReceiptReceiptId) {
        this.getShipmentReceiptOrderAllocationId().setShipmentReceiptReceiptId(shipmentReceiptReceiptId);
    }

    public OrderItemId getOrderItemId() {
        return this.getShipmentReceiptOrderAllocationId().getOrderItemId();
    }
        
    public void setOrderItemId(OrderItemId orderItemId) {
        this.getShipmentReceiptOrderAllocationId().setOrderItemId(orderItemId);
    }

    private java.math.BigDecimal quantityAllocated;

    public java.math.BigDecimal getQuantityAllocated() {
        return this.quantityAllocated;
    }

    public void setQuantityAllocated(java.math.BigDecimal quantityAllocated) {
        this.quantityAllocated = quantityAllocated;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean __Deleted__;

    public Boolean get__Deleted__() {
        return this.__Deleted__;
    }

    public void set__Deleted__(Boolean __Deleted__) {
        this.__Deleted__ = __Deleted__;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractShipmentReceiptOrderAllocationState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getOrderItemId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof ShipmentReceiptOrderAllocationState) {
            return Objects.equals(this.getOrderItemId(), ((ShipmentReceiptOrderAllocationState)obj).getOrderItemId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof ShipmentReceiptOrderAllocationStateCreated) {
            when((ShipmentReceiptOrderAllocationStateCreated) e);
        } else if (e instanceof ShipmentReceiptOrderAllocationStateMergePatched) {
            when((ShipmentReceiptOrderAllocationStateMergePatched) e);
        } else if (e instanceof ShipmentReceiptOrderAllocationStateRemoved) {
            when((ShipmentReceiptOrderAllocationStateRemoved) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(ShipmentReceiptOrderAllocationStateCreated e) {
        throwOnWrongEvent(e);

        this.setQuantityAllocated(e.getQuantityAllocated());

        this.set__Deleted__(false);

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(ShipmentReceiptOrderAllocationState s) {
        if (s == this) {
            return;
        }
        this.setQuantityAllocated(s.getQuantityAllocated());
    }

    public void when(ShipmentReceiptOrderAllocationStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getQuantityAllocated() == null) {
            if (e.getIsPropertyQuantityAllocatedRemoved() != null && e.getIsPropertyQuantityAllocatedRemoved()) {
                this.setQuantityAllocated(null);
            }
        } else {
            this.setQuantityAllocated(e.getQuantityAllocated());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void when(ShipmentReceiptOrderAllocationStateRemoved e) {
        throwOnWrongEvent(e);

        this.set__Deleted__(true);
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(ShipmentReceiptOrderAllocationEvent event) {
        String stateEntityIdShipmentReceiptReceiptId = this.getShipmentReceiptOrderAllocationId().getShipmentReceiptReceiptId();
        String eventEntityIdShipmentReceiptReceiptId = ((ShipmentReceiptOrderAllocationEvent.SqlShipmentReceiptOrderAllocationEvent)event).getShipmentReceiptOrderAllocationEventId().getShipmentReceiptReceiptId();
        if (!stateEntityIdShipmentReceiptReceiptId.equals(eventEntityIdShipmentReceiptReceiptId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id ShipmentReceiptReceiptId %1$s in state but entity id ShipmentReceiptReceiptId %2$s in event", stateEntityIdShipmentReceiptReceiptId, eventEntityIdShipmentReceiptReceiptId);
        }

        OrderItemId stateEntityIdOrderItemId = this.getShipmentReceiptOrderAllocationId().getOrderItemId();
        OrderItemId eventEntityIdOrderItemId = ((ShipmentReceiptOrderAllocationEvent.SqlShipmentReceiptOrderAllocationEvent)event).getShipmentReceiptOrderAllocationEventId().getOrderItemId();
        if (!stateEntityIdOrderItemId.equals(eventEntityIdOrderItemId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id OrderItemId %1$s in state but entity id OrderItemId %2$s in event", stateEntityIdOrderItemId, eventEntityIdOrderItemId);
        }


        if (getForReapplying()) { return; }
        ShipmentReceiptOrderAllocationStateEvent stateEvent = event instanceof ShipmentReceiptOrderAllocationStateEvent ? (ShipmentReceiptOrderAllocationStateEvent)event : null;
        if (stateEvent == null) { return; }

        Long stateVersion = this.getVersion();
        Long stateEventStateVersion = stateEvent.getVersion();
        //if (stateEventStateVersion == null) {
        stateEventStateVersion = stateVersion == null ? ShipmentReceiptOrderAllocationState.VERSION_NULL : stateVersion;
        stateEvent.setVersion(stateEventStateVersion);
        //}
        //if (!(stateVersion == null && stateEventStateVersion.equals(ShipmentReceiptOrderAllocationState.VERSION_NULL)) && !stateEventStateVersion.equals(stateVersion))
        //{
        //    throw DomainError.named("concurrencyConflict", "Conflict between stateVersion (%1$s) and stateEventStateVersion (%2$s)", stateVersion, stateEventStateVersion);
        //}

    }


    public static class SimpleShipmentReceiptOrderAllocationState extends AbstractShipmentReceiptOrderAllocationState {

        public SimpleShipmentReceiptOrderAllocationState() {
        }

        public static SimpleShipmentReceiptOrderAllocationState newForReapplying() {
            SimpleShipmentReceiptOrderAllocationState s = new SimpleShipmentReceiptOrderAllocationState();
            s.initializeForReapplying();
            return s;
        }

    }



}

