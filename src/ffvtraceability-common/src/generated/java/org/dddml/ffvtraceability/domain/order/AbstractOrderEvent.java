// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.order;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.partyrole.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractOrderEvent extends AbstractEvent implements OrderEvent.SqlOrderEvent {
    private OrderEventId orderEventId = new OrderEventId();

    public OrderEventId getOrderEventId() {
        return this.orderEventId;
    }

    public void setOrderEventId(OrderEventId eventId) {
        this.orderEventId = eventId;
    }
    
    public String getOrderId() {
        return getOrderEventId().getOrderId();
    }

    public void setOrderId(String orderId) {
        getOrderEventId().setOrderId(orderId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getOrderEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getOrderEventId().setVersion(version);
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractOrderEvent() {
    }

    protected AbstractOrderEvent(OrderEventId eventId) {
        this.orderEventId = eventId;
    }

    protected OrderRoleEventDao getOrderRoleEventDao() {
        return (OrderRoleEventDao)ApplicationContext.current.get("orderRoleEventDao");
    }

    protected OrderRoleEventId newOrderRoleEventId(PartyRoleId partyRoleId)
    {
        OrderRoleEventId eventId = new OrderRoleEventId(this.getOrderEventId().getOrderId(), 
            partyRoleId, 
            this.getOrderEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(OrderRoleEvent.SqlOrderRoleEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(OrderEvent.SqlOrderEvent oe, OrderRoleEvent.SqlOrderRoleEvent e)
    {
        if (!oe.getOrderEventId().getOrderId().equals(e.getOrderRoleEventId().getOrderId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id OrderId %1$s but inner id OrderId %2$s", 
                oe.getOrderEventId().getOrderId(), e.getOrderRoleEventId().getOrderId());
        }
    }

    protected OrderContactMechEventDao getOrderContactMechEventDao() {
        return (OrderContactMechEventDao)ApplicationContext.current.get("orderContactMechEventDao");
    }

    protected OrderContactMechEventId newOrderContactMechEventId(String contactMechPurposeTypeId)
    {
        OrderContactMechEventId eventId = new OrderContactMechEventId(this.getOrderEventId().getOrderId(), 
            contactMechPurposeTypeId, 
            this.getOrderEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(OrderContactMechEvent.SqlOrderContactMechEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(OrderEvent.SqlOrderEvent oe, OrderContactMechEvent.SqlOrderContactMechEvent e)
    {
        if (!oe.getOrderEventId().getOrderId().equals(e.getOrderContactMechEventId().getOrderId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id OrderId %1$s but inner id OrderId %2$s", 
                oe.getOrderEventId().getOrderId(), e.getOrderContactMechEventId().getOrderId());
        }
    }

    protected OrderItemEventDao getOrderItemEventDao() {
        return (OrderItemEventDao)ApplicationContext.current.get("orderItemEventDao");
    }

    protected OrderItemEventId newOrderItemEventId(String orderItemSeqId)
    {
        OrderItemEventId eventId = new OrderItemEventId(this.getOrderEventId().getOrderId(), 
            orderItemSeqId, 
            this.getOrderEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(OrderItemEvent.SqlOrderItemEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(OrderEvent.SqlOrderEvent oe, OrderItemEvent.SqlOrderItemEvent e)
    {
        if (!oe.getOrderEventId().getOrderId().equals(e.getOrderItemEventId().getOrderId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id OrderId %1$s but inner id OrderId %2$s", 
                oe.getOrderEventId().getOrderId(), e.getOrderItemEventId().getOrderId());
        }
    }

    protected OrderAdjustmentEventDao getOrderAdjustmentEventDao() {
        return (OrderAdjustmentEventDao)ApplicationContext.current.get("orderAdjustmentEventDao");
    }

    protected OrderAdjustmentEventId newOrderAdjustmentEventId(String orderAdjustmentId)
    {
        OrderAdjustmentEventId eventId = new OrderAdjustmentEventId(this.getOrderEventId().getOrderId(), 
            orderAdjustmentId, 
            this.getOrderEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(OrderAdjustmentEvent.SqlOrderAdjustmentEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(OrderEvent.SqlOrderEvent oe, OrderAdjustmentEvent.SqlOrderAdjustmentEvent e)
    {
        if (!oe.getOrderEventId().getOrderId().equals(e.getOrderAdjustmentEventId().getOrderId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id OrderId %1$s but inner id OrderId %2$s", 
                oe.getOrderEventId().getOrderId(), e.getOrderAdjustmentEventId().getOrderId());
        }
    }

    protected OrderShipGroupEventDao getOrderShipGroupEventDao() {
        return (OrderShipGroupEventDao)ApplicationContext.current.get("orderShipGroupEventDao");
    }

    protected OrderShipGroupEventId newOrderShipGroupEventId(String shipGroupSeqId)
    {
        OrderShipGroupEventId eventId = new OrderShipGroupEventId(this.getOrderEventId().getOrderId(), 
            shipGroupSeqId, 
            this.getOrderEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(OrderShipGroupEvent.SqlOrderShipGroupEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(OrderEvent.SqlOrderEvent oe, OrderShipGroupEvent.SqlOrderShipGroupEvent e)
    {
        if (!oe.getOrderEventId().getOrderId().equals(e.getOrderShipGroupEventId().getOrderId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id OrderId %1$s but inner id OrderId %2$s", 
                oe.getOrderEventId().getOrderId(), e.getOrderShipGroupEventId().getOrderId());
        }
    }

    public OrderRoleEvent.OrderRoleStateCreated newOrderRoleStateCreated(PartyRoleId partyRoleId) {
        return new AbstractOrderRoleEvent.SimpleOrderRoleStateCreated(newOrderRoleEventId(partyRoleId));
    }

    public OrderRoleEvent.OrderRoleStateMergePatched newOrderRoleStateMergePatched(PartyRoleId partyRoleId) {
        return new AbstractOrderRoleEvent.SimpleOrderRoleStateMergePatched(newOrderRoleEventId(partyRoleId));
    }

    public OrderContactMechEvent.OrderContactMechStateCreated newOrderContactMechStateCreated(String contactMechPurposeTypeId) {
        return new AbstractOrderContactMechEvent.SimpleOrderContactMechStateCreated(newOrderContactMechEventId(contactMechPurposeTypeId));
    }

    public OrderContactMechEvent.OrderContactMechStateMergePatched newOrderContactMechStateMergePatched(String contactMechPurposeTypeId) {
        return new AbstractOrderContactMechEvent.SimpleOrderContactMechStateMergePatched(newOrderContactMechEventId(contactMechPurposeTypeId));
    }

    public OrderItemEvent.OrderItemStateCreated newOrderItemStateCreated(String orderItemSeqId) {
        return new AbstractOrderItemEvent.SimpleOrderItemStateCreated(newOrderItemEventId(orderItemSeqId));
    }

    public OrderItemEvent.OrderItemStateMergePatched newOrderItemStateMergePatched(String orderItemSeqId) {
        return new AbstractOrderItemEvent.SimpleOrderItemStateMergePatched(newOrderItemEventId(orderItemSeqId));
    }

    public OrderItemEvent.OrderItemStateRemoved newOrderItemStateRemoved(String orderItemSeqId) {
        return new AbstractOrderItemEvent.SimpleOrderItemStateRemoved(newOrderItemEventId(orderItemSeqId));
    }

    public OrderAdjustmentEvent.OrderAdjustmentStateCreated newOrderAdjustmentStateCreated(String orderAdjustmentId) {
        return new AbstractOrderAdjustmentEvent.SimpleOrderAdjustmentStateCreated(newOrderAdjustmentEventId(orderAdjustmentId));
    }

    public OrderAdjustmentEvent.OrderAdjustmentStateMergePatched newOrderAdjustmentStateMergePatched(String orderAdjustmentId) {
        return new AbstractOrderAdjustmentEvent.SimpleOrderAdjustmentStateMergePatched(newOrderAdjustmentEventId(orderAdjustmentId));
    }

    public OrderShipGroupEvent.OrderShipGroupStateCreated newOrderShipGroupStateCreated(String shipGroupSeqId) {
        return new AbstractOrderShipGroupEvent.SimpleOrderShipGroupStateCreated(newOrderShipGroupEventId(shipGroupSeqId));
    }

    public OrderShipGroupEvent.OrderShipGroupStateMergePatched newOrderShipGroupStateMergePatched(String shipGroupSeqId) {
        return new AbstractOrderShipGroupEvent.SimpleOrderShipGroupStateMergePatched(newOrderShipGroupEventId(shipGroupSeqId));
    }


    public abstract String getEventType();

    public static class OrderLobEvent extends AbstractOrderEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventType() {
            return "OrderLobEvent";
        }

    }


    public static abstract class AbstractOrderStateEvent extends AbstractOrderEvent implements OrderEvent.OrderStateEvent {
        private String orderTypeId;

        public String getOrderTypeId()
        {
            return this.orderTypeId;
        }

        public void setOrderTypeId(String orderTypeId)
        {
            this.orderTypeId = orderTypeId;
        }

        private String orderName;

        public String getOrderName()
        {
            return this.orderName;
        }

        public void setOrderName(String orderName)
        {
            this.orderName = orderName;
        }

        private String externalId;

        public String getExternalId()
        {
            return this.externalId;
        }

        public void setExternalId(String externalId)
        {
            this.externalId = externalId;
        }

        private String salesChannelEnumId;

        public String getSalesChannelEnumId()
        {
            return this.salesChannelEnumId;
        }

        public void setSalesChannelEnumId(String salesChannelEnumId)
        {
            this.salesChannelEnumId = salesChannelEnumId;
        }

        private OffsetDateTime orderDate;

        public OffsetDateTime getOrderDate()
        {
            return this.orderDate;
        }

        public void setOrderDate(OffsetDateTime orderDate)
        {
            this.orderDate = orderDate;
        }

        private String priority;

        public String getPriority()
        {
            return this.priority;
        }

        public void setPriority(String priority)
        {
            this.priority = priority;
        }

        private OffsetDateTime entryDate;

        public OffsetDateTime getEntryDate()
        {
            return this.entryDate;
        }

        public void setEntryDate(OffsetDateTime entryDate)
        {
            this.entryDate = entryDate;
        }

        private OffsetDateTime pickSheetPrintedDate;

        public OffsetDateTime getPickSheetPrintedDate()
        {
            return this.pickSheetPrintedDate;
        }

        public void setPickSheetPrintedDate(OffsetDateTime pickSheetPrintedDate)
        {
            this.pickSheetPrintedDate = pickSheetPrintedDate;
        }

        private String visitId;

        public String getVisitId()
        {
            return this.visitId;
        }

        public void setVisitId(String visitId)
        {
            this.visitId = visitId;
        }

        private String statusId;

        public String getStatusId()
        {
            return this.statusId;
        }

        public void setStatusId(String statusId)
        {
            this.statusId = statusId;
        }

        private String firstAttemptOrderId;

        public String getFirstAttemptOrderId()
        {
            return this.firstAttemptOrderId;
        }

        public void setFirstAttemptOrderId(String firstAttemptOrderId)
        {
            this.firstAttemptOrderId = firstAttemptOrderId;
        }

        private String currencyUomId;

        public String getCurrencyUomId()
        {
            return this.currencyUomId;
        }

        public void setCurrencyUomId(String currencyUomId)
        {
            this.currencyUomId = currencyUomId;
        }

        private String syncStatusId;

        public String getSyncStatusId()
        {
            return this.syncStatusId;
        }

        public void setSyncStatusId(String syncStatusId)
        {
            this.syncStatusId = syncStatusId;
        }

        private String billingAccountId;

        public String getBillingAccountId()
        {
            return this.billingAccountId;
        }

        public void setBillingAccountId(String billingAccountId)
        {
            this.billingAccountId = billingAccountId;
        }

        private String originFacilityId;

        public String getOriginFacilityId()
        {
            return this.originFacilityId;
        }

        public void setOriginFacilityId(String originFacilityId)
        {
            this.originFacilityId = originFacilityId;
        }

        private String productStoreId;

        public String getProductStoreId()
        {
            return this.productStoreId;
        }

        public void setProductStoreId(String productStoreId)
        {
            this.productStoreId = productStoreId;
        }

        private String terminalId;

        public String getTerminalId()
        {
            return this.terminalId;
        }

        public void setTerminalId(String terminalId)
        {
            this.terminalId = terminalId;
        }

        private String transactionId;

        public String getTransactionId()
        {
            return this.transactionId;
        }

        public void setTransactionId(String transactionId)
        {
            this.transactionId = transactionId;
        }

        private String autoOrderShoppingListId;

        public String getAutoOrderShoppingListId()
        {
            return this.autoOrderShoppingListId;
        }

        public void setAutoOrderShoppingListId(String autoOrderShoppingListId)
        {
            this.autoOrderShoppingListId = autoOrderShoppingListId;
        }

        private String needsInventoryIssuance;

        public String getNeedsInventoryIssuance()
        {
            return this.needsInventoryIssuance;
        }

        public void setNeedsInventoryIssuance(String needsInventoryIssuance)
        {
            this.needsInventoryIssuance = needsInventoryIssuance;
        }

        private String isRushOrder;

        public String getIsRushOrder()
        {
            return this.isRushOrder;
        }

        public void setIsRushOrder(String isRushOrder)
        {
            this.isRushOrder = isRushOrder;
        }

        private String internalCode;

        public String getInternalCode()
        {
            return this.internalCode;
        }

        public void setInternalCode(String internalCode)
        {
            this.internalCode = internalCode;
        }

        private java.math.BigDecimal remainingSubTotal;

        public java.math.BigDecimal getRemainingSubTotal()
        {
            return this.remainingSubTotal;
        }

        public void setRemainingSubTotal(java.math.BigDecimal remainingSubTotal)
        {
            this.remainingSubTotal = remainingSubTotal;
        }

        private java.math.BigDecimal grandTotal;

        public java.math.BigDecimal getGrandTotal()
        {
            return this.grandTotal;
        }

        public void setGrandTotal(java.math.BigDecimal grandTotal)
        {
            this.grandTotal = grandTotal;
        }

        private String isViewed;

        public String getIsViewed()
        {
            return this.isViewed;
        }

        public void setIsViewed(String isViewed)
        {
            this.isViewed = isViewed;
        }

        private String invoicePerShipment;

        public String getInvoicePerShipment()
        {
            return this.invoicePerShipment;
        }

        public void setInvoicePerShipment(String invoicePerShipment)
        {
            this.invoicePerShipment = invoicePerShipment;
        }

        private String memo;

        public String getMemo()
        {
            return this.memo;
        }

        public void setMemo(String memo)
        {
            this.memo = memo;
        }

        private String contactDescription;

        public String getContactDescription()
        {
            return this.contactDescription;
        }

        public void setContactDescription(String contactDescription)
        {
            this.contactDescription = contactDescription;
        }

        private String fulfillmentStatusId;

        public String getFulfillmentStatusId()
        {
            return this.fulfillmentStatusId;
        }

        public void setFulfillmentStatusId(String fulfillmentStatusId)
        {
            this.fulfillmentStatusId = fulfillmentStatusId;
        }

        protected AbstractOrderStateEvent(OrderEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractOrderStateCreated extends AbstractOrderStateEvent implements OrderEvent.OrderStateCreated, Saveable
    {
        public AbstractOrderStateCreated() {
            this(new OrderEventId());
        }

        public AbstractOrderStateCreated(OrderEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

        private Map<OrderRoleEventId, OrderRoleEvent.OrderRoleStateCreated> orderRoleEvents = new HashMap<OrderRoleEventId, OrderRoleEvent.OrderRoleStateCreated>();
        
        private Iterable<OrderRoleEvent.OrderRoleStateCreated> readOnlyOrderRoleEvents;

        public Iterable<OrderRoleEvent.OrderRoleStateCreated> getOrderRoleEvents()
        {
            if (!getEventReadOnly())
            {
                return this.orderRoleEvents.values();
            }
            else
            {
                if (readOnlyOrderRoleEvents != null) { return readOnlyOrderRoleEvents; }
                OrderRoleEventDao eventDao = getOrderRoleEventDao();
                List<OrderRoleEvent.OrderRoleStateCreated> eL = new ArrayList<OrderRoleEvent.OrderRoleStateCreated>();
                for (OrderRoleEvent e : eventDao.findByOrderEventId(this.getOrderEventId()))
                {
                    ((OrderRoleEvent.SqlOrderRoleEvent)e).setEventReadOnly(true);
                    eL.add((OrderRoleEvent.OrderRoleStateCreated)e);
                }
                return (readOnlyOrderRoleEvents = eL);
            }
        }

        public void setOrderRoleEvents(Iterable<OrderRoleEvent.OrderRoleStateCreated> es)
        {
            if (es != null)
            {
                for (OrderRoleEvent.OrderRoleStateCreated e : es)
                {
                    addOrderRoleEvent(e);
                }
            }
            else { this.orderRoleEvents.clear(); }
        }
        
        public void addOrderRoleEvent(OrderRoleEvent.OrderRoleStateCreated e)
        {
            throwOnInconsistentEventIds((OrderRoleEvent.SqlOrderRoleEvent)e);
            this.orderRoleEvents.put(((OrderRoleEvent.SqlOrderRoleEvent)e).getOrderRoleEventId(), e);
        }

        private Map<OrderContactMechEventId, OrderContactMechEvent.OrderContactMechStateCreated> orderContactMechEvents = new HashMap<OrderContactMechEventId, OrderContactMechEvent.OrderContactMechStateCreated>();
        
        private Iterable<OrderContactMechEvent.OrderContactMechStateCreated> readOnlyOrderContactMechEvents;

        public Iterable<OrderContactMechEvent.OrderContactMechStateCreated> getOrderContactMechEvents()
        {
            if (!getEventReadOnly())
            {
                return this.orderContactMechEvents.values();
            }
            else
            {
                if (readOnlyOrderContactMechEvents != null) { return readOnlyOrderContactMechEvents; }
                OrderContactMechEventDao eventDao = getOrderContactMechEventDao();
                List<OrderContactMechEvent.OrderContactMechStateCreated> eL = new ArrayList<OrderContactMechEvent.OrderContactMechStateCreated>();
                for (OrderContactMechEvent e : eventDao.findByOrderEventId(this.getOrderEventId()))
                {
                    ((OrderContactMechEvent.SqlOrderContactMechEvent)e).setEventReadOnly(true);
                    eL.add((OrderContactMechEvent.OrderContactMechStateCreated)e);
                }
                return (readOnlyOrderContactMechEvents = eL);
            }
        }

        public void setOrderContactMechEvents(Iterable<OrderContactMechEvent.OrderContactMechStateCreated> es)
        {
            if (es != null)
            {
                for (OrderContactMechEvent.OrderContactMechStateCreated e : es)
                {
                    addOrderContactMechEvent(e);
                }
            }
            else { this.orderContactMechEvents.clear(); }
        }
        
        public void addOrderContactMechEvent(OrderContactMechEvent.OrderContactMechStateCreated e)
        {
            throwOnInconsistentEventIds((OrderContactMechEvent.SqlOrderContactMechEvent)e);
            this.orderContactMechEvents.put(((OrderContactMechEvent.SqlOrderContactMechEvent)e).getOrderContactMechEventId(), e);
        }

        private Map<OrderItemEventId, OrderItemEvent.OrderItemStateCreated> orderItemEvents = new HashMap<OrderItemEventId, OrderItemEvent.OrderItemStateCreated>();
        
        private Iterable<OrderItemEvent.OrderItemStateCreated> readOnlyOrderItemEvents;

        public Iterable<OrderItemEvent.OrderItemStateCreated> getOrderItemEvents()
        {
            if (!getEventReadOnly())
            {
                return this.orderItemEvents.values();
            }
            else
            {
                if (readOnlyOrderItemEvents != null) { return readOnlyOrderItemEvents; }
                OrderItemEventDao eventDao = getOrderItemEventDao();
                List<OrderItemEvent.OrderItemStateCreated> eL = new ArrayList<OrderItemEvent.OrderItemStateCreated>();
                for (OrderItemEvent e : eventDao.findByOrderEventId(this.getOrderEventId()))
                {
                    ((OrderItemEvent.SqlOrderItemEvent)e).setEventReadOnly(true);
                    eL.add((OrderItemEvent.OrderItemStateCreated)e);
                }
                return (readOnlyOrderItemEvents = eL);
            }
        }

        public void setOrderItemEvents(Iterable<OrderItemEvent.OrderItemStateCreated> es)
        {
            if (es != null)
            {
                for (OrderItemEvent.OrderItemStateCreated e : es)
                {
                    addOrderItemEvent(e);
                }
            }
            else { this.orderItemEvents.clear(); }
        }
        
        public void addOrderItemEvent(OrderItemEvent.OrderItemStateCreated e)
        {
            throwOnInconsistentEventIds((OrderItemEvent.SqlOrderItemEvent)e);
            this.orderItemEvents.put(((OrderItemEvent.SqlOrderItemEvent)e).getOrderItemEventId(), e);
        }

        private Map<OrderAdjustmentEventId, OrderAdjustmentEvent.OrderAdjustmentStateCreated> orderAdjustmentEvents = new HashMap<OrderAdjustmentEventId, OrderAdjustmentEvent.OrderAdjustmentStateCreated>();
        
        private Iterable<OrderAdjustmentEvent.OrderAdjustmentStateCreated> readOnlyOrderAdjustmentEvents;

        public Iterable<OrderAdjustmentEvent.OrderAdjustmentStateCreated> getOrderAdjustmentEvents()
        {
            if (!getEventReadOnly())
            {
                return this.orderAdjustmentEvents.values();
            }
            else
            {
                if (readOnlyOrderAdjustmentEvents != null) { return readOnlyOrderAdjustmentEvents; }
                OrderAdjustmentEventDao eventDao = getOrderAdjustmentEventDao();
                List<OrderAdjustmentEvent.OrderAdjustmentStateCreated> eL = new ArrayList<OrderAdjustmentEvent.OrderAdjustmentStateCreated>();
                for (OrderAdjustmentEvent e : eventDao.findByOrderEventId(this.getOrderEventId()))
                {
                    ((OrderAdjustmentEvent.SqlOrderAdjustmentEvent)e).setEventReadOnly(true);
                    eL.add((OrderAdjustmentEvent.OrderAdjustmentStateCreated)e);
                }
                return (readOnlyOrderAdjustmentEvents = eL);
            }
        }

        public void setOrderAdjustmentEvents(Iterable<OrderAdjustmentEvent.OrderAdjustmentStateCreated> es)
        {
            if (es != null)
            {
                for (OrderAdjustmentEvent.OrderAdjustmentStateCreated e : es)
                {
                    addOrderAdjustmentEvent(e);
                }
            }
            else { this.orderAdjustmentEvents.clear(); }
        }
        
        public void addOrderAdjustmentEvent(OrderAdjustmentEvent.OrderAdjustmentStateCreated e)
        {
            throwOnInconsistentEventIds((OrderAdjustmentEvent.SqlOrderAdjustmentEvent)e);
            this.orderAdjustmentEvents.put(((OrderAdjustmentEvent.SqlOrderAdjustmentEvent)e).getOrderAdjustmentEventId(), e);
        }

        private Map<OrderShipGroupEventId, OrderShipGroupEvent.OrderShipGroupStateCreated> orderShipGroupEvents = new HashMap<OrderShipGroupEventId, OrderShipGroupEvent.OrderShipGroupStateCreated>();
        
        private Iterable<OrderShipGroupEvent.OrderShipGroupStateCreated> readOnlyOrderShipGroupEvents;

        public Iterable<OrderShipGroupEvent.OrderShipGroupStateCreated> getOrderShipGroupEvents()
        {
            if (!getEventReadOnly())
            {
                return this.orderShipGroupEvents.values();
            }
            else
            {
                if (readOnlyOrderShipGroupEvents != null) { return readOnlyOrderShipGroupEvents; }
                OrderShipGroupEventDao eventDao = getOrderShipGroupEventDao();
                List<OrderShipGroupEvent.OrderShipGroupStateCreated> eL = new ArrayList<OrderShipGroupEvent.OrderShipGroupStateCreated>();
                for (OrderShipGroupEvent e : eventDao.findByOrderEventId(this.getOrderEventId()))
                {
                    ((OrderShipGroupEvent.SqlOrderShipGroupEvent)e).setEventReadOnly(true);
                    eL.add((OrderShipGroupEvent.OrderShipGroupStateCreated)e);
                }
                return (readOnlyOrderShipGroupEvents = eL);
            }
        }

        public void setOrderShipGroupEvents(Iterable<OrderShipGroupEvent.OrderShipGroupStateCreated> es)
        {
            if (es != null)
            {
                for (OrderShipGroupEvent.OrderShipGroupStateCreated e : es)
                {
                    addOrderShipGroupEvent(e);
                }
            }
            else { this.orderShipGroupEvents.clear(); }
        }
        
        public void addOrderShipGroupEvent(OrderShipGroupEvent.OrderShipGroupStateCreated e)
        {
            throwOnInconsistentEventIds((OrderShipGroupEvent.SqlOrderShipGroupEvent)e);
            this.orderShipGroupEvents.put(((OrderShipGroupEvent.SqlOrderShipGroupEvent)e).getOrderShipGroupEventId(), e);
        }

        public void save()
        {
            for (OrderRoleEvent.OrderRoleStateCreated e : this.getOrderRoleEvents()) {
                getOrderRoleEventDao().save(e);
            }
            for (OrderContactMechEvent.OrderContactMechStateCreated e : this.getOrderContactMechEvents()) {
                getOrderContactMechEventDao().save(e);
            }
            for (OrderItemEvent.OrderItemStateCreated e : this.getOrderItemEvents()) {
                getOrderItemEventDao().save(e);
            }
            for (OrderAdjustmentEvent.OrderAdjustmentStateCreated e : this.getOrderAdjustmentEvents()) {
                getOrderAdjustmentEventDao().save(e);
            }
            for (OrderShipGroupEvent.OrderShipGroupStateCreated e : this.getOrderShipGroupEvents()) {
                getOrderShipGroupEventDao().save(e);
            }
        }
    }


    public static abstract class AbstractOrderStateMergePatched extends AbstractOrderStateEvent implements OrderEvent.OrderStateMergePatched, Saveable
    {
        public AbstractOrderStateMergePatched() {
            this(new OrderEventId());
        }

        public AbstractOrderStateMergePatched(OrderEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyOrderTypeIdRemoved;

        public Boolean getIsPropertyOrderTypeIdRemoved() {
            return this.isPropertyOrderTypeIdRemoved;
        }

        public void setIsPropertyOrderTypeIdRemoved(Boolean removed) {
            this.isPropertyOrderTypeIdRemoved = removed;
        }

        private Boolean isPropertyOrderNameRemoved;

        public Boolean getIsPropertyOrderNameRemoved() {
            return this.isPropertyOrderNameRemoved;
        }

        public void setIsPropertyOrderNameRemoved(Boolean removed) {
            this.isPropertyOrderNameRemoved = removed;
        }

        private Boolean isPropertyExternalIdRemoved;

        public Boolean getIsPropertyExternalIdRemoved() {
            return this.isPropertyExternalIdRemoved;
        }

        public void setIsPropertyExternalIdRemoved(Boolean removed) {
            this.isPropertyExternalIdRemoved = removed;
        }

        private Boolean isPropertySalesChannelEnumIdRemoved;

        public Boolean getIsPropertySalesChannelEnumIdRemoved() {
            return this.isPropertySalesChannelEnumIdRemoved;
        }

        public void setIsPropertySalesChannelEnumIdRemoved(Boolean removed) {
            this.isPropertySalesChannelEnumIdRemoved = removed;
        }

        private Boolean isPropertyOrderDateRemoved;

        public Boolean getIsPropertyOrderDateRemoved() {
            return this.isPropertyOrderDateRemoved;
        }

        public void setIsPropertyOrderDateRemoved(Boolean removed) {
            this.isPropertyOrderDateRemoved = removed;
        }

        private Boolean isPropertyPriorityRemoved;

        public Boolean getIsPropertyPriorityRemoved() {
            return this.isPropertyPriorityRemoved;
        }

        public void setIsPropertyPriorityRemoved(Boolean removed) {
            this.isPropertyPriorityRemoved = removed;
        }

        private Boolean isPropertyEntryDateRemoved;

        public Boolean getIsPropertyEntryDateRemoved() {
            return this.isPropertyEntryDateRemoved;
        }

        public void setIsPropertyEntryDateRemoved(Boolean removed) {
            this.isPropertyEntryDateRemoved = removed;
        }

        private Boolean isPropertyPickSheetPrintedDateRemoved;

        public Boolean getIsPropertyPickSheetPrintedDateRemoved() {
            return this.isPropertyPickSheetPrintedDateRemoved;
        }

        public void setIsPropertyPickSheetPrintedDateRemoved(Boolean removed) {
            this.isPropertyPickSheetPrintedDateRemoved = removed;
        }

        private Boolean isPropertyVisitIdRemoved;

        public Boolean getIsPropertyVisitIdRemoved() {
            return this.isPropertyVisitIdRemoved;
        }

        public void setIsPropertyVisitIdRemoved(Boolean removed) {
            this.isPropertyVisitIdRemoved = removed;
        }

        private Boolean isPropertyStatusIdRemoved;

        public Boolean getIsPropertyStatusIdRemoved() {
            return this.isPropertyStatusIdRemoved;
        }

        public void setIsPropertyStatusIdRemoved(Boolean removed) {
            this.isPropertyStatusIdRemoved = removed;
        }

        private Boolean isPropertyFirstAttemptOrderIdRemoved;

        public Boolean getIsPropertyFirstAttemptOrderIdRemoved() {
            return this.isPropertyFirstAttemptOrderIdRemoved;
        }

        public void setIsPropertyFirstAttemptOrderIdRemoved(Boolean removed) {
            this.isPropertyFirstAttemptOrderIdRemoved = removed;
        }

        private Boolean isPropertyCurrencyUomIdRemoved;

        public Boolean getIsPropertyCurrencyUomIdRemoved() {
            return this.isPropertyCurrencyUomIdRemoved;
        }

        public void setIsPropertyCurrencyUomIdRemoved(Boolean removed) {
            this.isPropertyCurrencyUomIdRemoved = removed;
        }

        private Boolean isPropertySyncStatusIdRemoved;

        public Boolean getIsPropertySyncStatusIdRemoved() {
            return this.isPropertySyncStatusIdRemoved;
        }

        public void setIsPropertySyncStatusIdRemoved(Boolean removed) {
            this.isPropertySyncStatusIdRemoved = removed;
        }

        private Boolean isPropertyBillingAccountIdRemoved;

        public Boolean getIsPropertyBillingAccountIdRemoved() {
            return this.isPropertyBillingAccountIdRemoved;
        }

        public void setIsPropertyBillingAccountIdRemoved(Boolean removed) {
            this.isPropertyBillingAccountIdRemoved = removed;
        }

        private Boolean isPropertyOriginFacilityIdRemoved;

        public Boolean getIsPropertyOriginFacilityIdRemoved() {
            return this.isPropertyOriginFacilityIdRemoved;
        }

        public void setIsPropertyOriginFacilityIdRemoved(Boolean removed) {
            this.isPropertyOriginFacilityIdRemoved = removed;
        }

        private Boolean isPropertyProductStoreIdRemoved;

        public Boolean getIsPropertyProductStoreIdRemoved() {
            return this.isPropertyProductStoreIdRemoved;
        }

        public void setIsPropertyProductStoreIdRemoved(Boolean removed) {
            this.isPropertyProductStoreIdRemoved = removed;
        }

        private Boolean isPropertyTerminalIdRemoved;

        public Boolean getIsPropertyTerminalIdRemoved() {
            return this.isPropertyTerminalIdRemoved;
        }

        public void setIsPropertyTerminalIdRemoved(Boolean removed) {
            this.isPropertyTerminalIdRemoved = removed;
        }

        private Boolean isPropertyTransactionIdRemoved;

        public Boolean getIsPropertyTransactionIdRemoved() {
            return this.isPropertyTransactionIdRemoved;
        }

        public void setIsPropertyTransactionIdRemoved(Boolean removed) {
            this.isPropertyTransactionIdRemoved = removed;
        }

        private Boolean isPropertyAutoOrderShoppingListIdRemoved;

        public Boolean getIsPropertyAutoOrderShoppingListIdRemoved() {
            return this.isPropertyAutoOrderShoppingListIdRemoved;
        }

        public void setIsPropertyAutoOrderShoppingListIdRemoved(Boolean removed) {
            this.isPropertyAutoOrderShoppingListIdRemoved = removed;
        }

        private Boolean isPropertyNeedsInventoryIssuanceRemoved;

        public Boolean getIsPropertyNeedsInventoryIssuanceRemoved() {
            return this.isPropertyNeedsInventoryIssuanceRemoved;
        }

        public void setIsPropertyNeedsInventoryIssuanceRemoved(Boolean removed) {
            this.isPropertyNeedsInventoryIssuanceRemoved = removed;
        }

        private Boolean isPropertyIsRushOrderRemoved;

        public Boolean getIsPropertyIsRushOrderRemoved() {
            return this.isPropertyIsRushOrderRemoved;
        }

        public void setIsPropertyIsRushOrderRemoved(Boolean removed) {
            this.isPropertyIsRushOrderRemoved = removed;
        }

        private Boolean isPropertyInternalCodeRemoved;

        public Boolean getIsPropertyInternalCodeRemoved() {
            return this.isPropertyInternalCodeRemoved;
        }

        public void setIsPropertyInternalCodeRemoved(Boolean removed) {
            this.isPropertyInternalCodeRemoved = removed;
        }

        private Boolean isPropertyRemainingSubTotalRemoved;

        public Boolean getIsPropertyRemainingSubTotalRemoved() {
            return this.isPropertyRemainingSubTotalRemoved;
        }

        public void setIsPropertyRemainingSubTotalRemoved(Boolean removed) {
            this.isPropertyRemainingSubTotalRemoved = removed;
        }

        private Boolean isPropertyGrandTotalRemoved;

        public Boolean getIsPropertyGrandTotalRemoved() {
            return this.isPropertyGrandTotalRemoved;
        }

        public void setIsPropertyGrandTotalRemoved(Boolean removed) {
            this.isPropertyGrandTotalRemoved = removed;
        }

        private Boolean isPropertyIsViewedRemoved;

        public Boolean getIsPropertyIsViewedRemoved() {
            return this.isPropertyIsViewedRemoved;
        }

        public void setIsPropertyIsViewedRemoved(Boolean removed) {
            this.isPropertyIsViewedRemoved = removed;
        }

        private Boolean isPropertyInvoicePerShipmentRemoved;

        public Boolean getIsPropertyInvoicePerShipmentRemoved() {
            return this.isPropertyInvoicePerShipmentRemoved;
        }

        public void setIsPropertyInvoicePerShipmentRemoved(Boolean removed) {
            this.isPropertyInvoicePerShipmentRemoved = removed;
        }

        private Boolean isPropertyMemoRemoved;

        public Boolean getIsPropertyMemoRemoved() {
            return this.isPropertyMemoRemoved;
        }

        public void setIsPropertyMemoRemoved(Boolean removed) {
            this.isPropertyMemoRemoved = removed;
        }

        private Boolean isPropertyContactDescriptionRemoved;

        public Boolean getIsPropertyContactDescriptionRemoved() {
            return this.isPropertyContactDescriptionRemoved;
        }

        public void setIsPropertyContactDescriptionRemoved(Boolean removed) {
            this.isPropertyContactDescriptionRemoved = removed;
        }

        private Boolean isPropertyFulfillmentStatusIdRemoved;

        public Boolean getIsPropertyFulfillmentStatusIdRemoved() {
            return this.isPropertyFulfillmentStatusIdRemoved;
        }

        public void setIsPropertyFulfillmentStatusIdRemoved(Boolean removed) {
            this.isPropertyFulfillmentStatusIdRemoved = removed;
        }


        private Map<OrderRoleEventId, OrderRoleEvent> orderRoleEvents = new HashMap<OrderRoleEventId, OrderRoleEvent>();
        
        private Iterable<OrderRoleEvent> readOnlyOrderRoleEvents;

        public Iterable<OrderRoleEvent> getOrderRoleEvents()
        {
            if (!getEventReadOnly())
            {
                return this.orderRoleEvents.values();
            }
            else
            {
                if (readOnlyOrderRoleEvents != null) { return readOnlyOrderRoleEvents; }
                OrderRoleEventDao eventDao = getOrderRoleEventDao();
                List<OrderRoleEvent> eL = new ArrayList<OrderRoleEvent>();
                for (OrderRoleEvent e : eventDao.findByOrderEventId(this.getOrderEventId()))
                {
                    ((OrderRoleEvent.SqlOrderRoleEvent)e).setEventReadOnly(true);
                    eL.add((OrderRoleEvent)e);
                }
                return (readOnlyOrderRoleEvents = eL);
            }
        }

        public void setOrderRoleEvents(Iterable<OrderRoleEvent> es)
        {
            if (es != null)
            {
                for (OrderRoleEvent e : es)
                {
                    addOrderRoleEvent(e);
                }
            }
            else { this.orderRoleEvents.clear(); }
        }
        
        public void addOrderRoleEvent(OrderRoleEvent e)
        {
            throwOnInconsistentEventIds((OrderRoleEvent.SqlOrderRoleEvent)e);
            this.orderRoleEvents.put(((OrderRoleEvent.SqlOrderRoleEvent)e).getOrderRoleEventId(), e);
        }

        private Map<OrderContactMechEventId, OrderContactMechEvent> orderContactMechEvents = new HashMap<OrderContactMechEventId, OrderContactMechEvent>();
        
        private Iterable<OrderContactMechEvent> readOnlyOrderContactMechEvents;

        public Iterable<OrderContactMechEvent> getOrderContactMechEvents()
        {
            if (!getEventReadOnly())
            {
                return this.orderContactMechEvents.values();
            }
            else
            {
                if (readOnlyOrderContactMechEvents != null) { return readOnlyOrderContactMechEvents; }
                OrderContactMechEventDao eventDao = getOrderContactMechEventDao();
                List<OrderContactMechEvent> eL = new ArrayList<OrderContactMechEvent>();
                for (OrderContactMechEvent e : eventDao.findByOrderEventId(this.getOrderEventId()))
                {
                    ((OrderContactMechEvent.SqlOrderContactMechEvent)e).setEventReadOnly(true);
                    eL.add((OrderContactMechEvent)e);
                }
                return (readOnlyOrderContactMechEvents = eL);
            }
        }

        public void setOrderContactMechEvents(Iterable<OrderContactMechEvent> es)
        {
            if (es != null)
            {
                for (OrderContactMechEvent e : es)
                {
                    addOrderContactMechEvent(e);
                }
            }
            else { this.orderContactMechEvents.clear(); }
        }
        
        public void addOrderContactMechEvent(OrderContactMechEvent e)
        {
            throwOnInconsistentEventIds((OrderContactMechEvent.SqlOrderContactMechEvent)e);
            this.orderContactMechEvents.put(((OrderContactMechEvent.SqlOrderContactMechEvent)e).getOrderContactMechEventId(), e);
        }

        private Map<OrderItemEventId, OrderItemEvent> orderItemEvents = new HashMap<OrderItemEventId, OrderItemEvent>();
        
        private Iterable<OrderItemEvent> readOnlyOrderItemEvents;

        public Iterable<OrderItemEvent> getOrderItemEvents()
        {
            if (!getEventReadOnly())
            {
                return this.orderItemEvents.values();
            }
            else
            {
                if (readOnlyOrderItemEvents != null) { return readOnlyOrderItemEvents; }
                OrderItemEventDao eventDao = getOrderItemEventDao();
                List<OrderItemEvent> eL = new ArrayList<OrderItemEvent>();
                for (OrderItemEvent e : eventDao.findByOrderEventId(this.getOrderEventId()))
                {
                    ((OrderItemEvent.SqlOrderItemEvent)e).setEventReadOnly(true);
                    eL.add((OrderItemEvent)e);
                }
                return (readOnlyOrderItemEvents = eL);
            }
        }

        public void setOrderItemEvents(Iterable<OrderItemEvent> es)
        {
            if (es != null)
            {
                for (OrderItemEvent e : es)
                {
                    addOrderItemEvent(e);
                }
            }
            else { this.orderItemEvents.clear(); }
        }
        
        public void addOrderItemEvent(OrderItemEvent e)
        {
            throwOnInconsistentEventIds((OrderItemEvent.SqlOrderItemEvent)e);
            this.orderItemEvents.put(((OrderItemEvent.SqlOrderItemEvent)e).getOrderItemEventId(), e);
        }

        private Map<OrderAdjustmentEventId, OrderAdjustmentEvent> orderAdjustmentEvents = new HashMap<OrderAdjustmentEventId, OrderAdjustmentEvent>();
        
        private Iterable<OrderAdjustmentEvent> readOnlyOrderAdjustmentEvents;

        public Iterable<OrderAdjustmentEvent> getOrderAdjustmentEvents()
        {
            if (!getEventReadOnly())
            {
                return this.orderAdjustmentEvents.values();
            }
            else
            {
                if (readOnlyOrderAdjustmentEvents != null) { return readOnlyOrderAdjustmentEvents; }
                OrderAdjustmentEventDao eventDao = getOrderAdjustmentEventDao();
                List<OrderAdjustmentEvent> eL = new ArrayList<OrderAdjustmentEvent>();
                for (OrderAdjustmentEvent e : eventDao.findByOrderEventId(this.getOrderEventId()))
                {
                    ((OrderAdjustmentEvent.SqlOrderAdjustmentEvent)e).setEventReadOnly(true);
                    eL.add((OrderAdjustmentEvent)e);
                }
                return (readOnlyOrderAdjustmentEvents = eL);
            }
        }

        public void setOrderAdjustmentEvents(Iterable<OrderAdjustmentEvent> es)
        {
            if (es != null)
            {
                for (OrderAdjustmentEvent e : es)
                {
                    addOrderAdjustmentEvent(e);
                }
            }
            else { this.orderAdjustmentEvents.clear(); }
        }
        
        public void addOrderAdjustmentEvent(OrderAdjustmentEvent e)
        {
            throwOnInconsistentEventIds((OrderAdjustmentEvent.SqlOrderAdjustmentEvent)e);
            this.orderAdjustmentEvents.put(((OrderAdjustmentEvent.SqlOrderAdjustmentEvent)e).getOrderAdjustmentEventId(), e);
        }

        private Map<OrderShipGroupEventId, OrderShipGroupEvent> orderShipGroupEvents = new HashMap<OrderShipGroupEventId, OrderShipGroupEvent>();
        
        private Iterable<OrderShipGroupEvent> readOnlyOrderShipGroupEvents;

        public Iterable<OrderShipGroupEvent> getOrderShipGroupEvents()
        {
            if (!getEventReadOnly())
            {
                return this.orderShipGroupEvents.values();
            }
            else
            {
                if (readOnlyOrderShipGroupEvents != null) { return readOnlyOrderShipGroupEvents; }
                OrderShipGroupEventDao eventDao = getOrderShipGroupEventDao();
                List<OrderShipGroupEvent> eL = new ArrayList<OrderShipGroupEvent>();
                for (OrderShipGroupEvent e : eventDao.findByOrderEventId(this.getOrderEventId()))
                {
                    ((OrderShipGroupEvent.SqlOrderShipGroupEvent)e).setEventReadOnly(true);
                    eL.add((OrderShipGroupEvent)e);
                }
                return (readOnlyOrderShipGroupEvents = eL);
            }
        }

        public void setOrderShipGroupEvents(Iterable<OrderShipGroupEvent> es)
        {
            if (es != null)
            {
                for (OrderShipGroupEvent e : es)
                {
                    addOrderShipGroupEvent(e);
                }
            }
            else { this.orderShipGroupEvents.clear(); }
        }
        
        public void addOrderShipGroupEvent(OrderShipGroupEvent e)
        {
            throwOnInconsistentEventIds((OrderShipGroupEvent.SqlOrderShipGroupEvent)e);
            this.orderShipGroupEvents.put(((OrderShipGroupEvent.SqlOrderShipGroupEvent)e).getOrderShipGroupEventId(), e);
        }

        public void save()
        {
            for (OrderRoleEvent e : this.getOrderRoleEvents()) {
                getOrderRoleEventDao().save(e);
            }
            for (OrderContactMechEvent e : this.getOrderContactMechEvents()) {
                getOrderContactMechEventDao().save(e);
            }
            for (OrderItemEvent e : this.getOrderItemEvents()) {
                getOrderItemEventDao().save(e);
            }
            for (OrderAdjustmentEvent e : this.getOrderAdjustmentEvents()) {
                getOrderAdjustmentEventDao().save(e);
            }
            for (OrderShipGroupEvent e : this.getOrderShipGroupEvents()) {
                getOrderShipGroupEventDao().save(e);
            }
        }
    }



    public static class SimpleOrderStateCreated extends AbstractOrderStateCreated
    {
        public SimpleOrderStateCreated() {
        }

        public SimpleOrderStateCreated(OrderEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleOrderStateMergePatched extends AbstractOrderStateMergePatched
    {
        public SimpleOrderStateMergePatched() {
        }

        public SimpleOrderStateMergePatched(OrderEventId eventId) {
            super(eventId);
        }
    }

}

