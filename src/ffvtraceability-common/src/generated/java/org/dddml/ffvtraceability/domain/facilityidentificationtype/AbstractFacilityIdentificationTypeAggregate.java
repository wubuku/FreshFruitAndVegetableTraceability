// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facilityidentificationtype;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractFacilityIdentificationTypeAggregate extends AbstractAggregate implements FacilityIdentificationTypeAggregate {
    private FacilityIdentificationTypeState.MutableFacilityIdentificationTypeState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractFacilityIdentificationTypeAggregate(FacilityIdentificationTypeState state) {
        this.state = (FacilityIdentificationTypeState.MutableFacilityIdentificationTypeState)state;
    }

    public FacilityIdentificationTypeState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(FacilityIdentificationTypeCommand.CreateFacilityIdentificationType c) {
        if (c.getVersion() == null) { c.setVersion(FacilityIdentificationTypeState.VERSION_NULL); }
        FacilityIdentificationTypeEvent e = map(c);
        apply(e);
    }

    public void mergePatch(FacilityIdentificationTypeCommand.MergePatchFacilityIdentificationType c) {
        FacilityIdentificationTypeEvent e = map(c);
        apply(e);
    }

    public void delete(FacilityIdentificationTypeCommand.DeleteFacilityIdentificationType c) {
        FacilityIdentificationTypeEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        FacilityIdentificationTypeCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected FacilityIdentificationTypeEvent map(FacilityIdentificationTypeCommand.CreateFacilityIdentificationType c) {
        FacilityIdentificationTypeEventId stateEventId = new FacilityIdentificationTypeEventId(c.getFacilityIdentificationTypeId(), c.getVersion());
        FacilityIdentificationTypeEvent.FacilityIdentificationTypeStateCreated e = newFacilityIdentificationTypeStateCreated(stateEventId);
        e.setDescription(c.getDescription());
        ((AbstractFacilityIdentificationTypeEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FacilityIdentificationTypeEvent map(FacilityIdentificationTypeCommand.MergePatchFacilityIdentificationType c) {
        FacilityIdentificationTypeEventId stateEventId = new FacilityIdentificationTypeEventId(c.getFacilityIdentificationTypeId(), c.getVersion());
        FacilityIdentificationTypeEvent.FacilityIdentificationTypeStateMergePatched e = newFacilityIdentificationTypeStateMergePatched(stateEventId);
        e.setDescription(c.getDescription());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        ((AbstractFacilityIdentificationTypeEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FacilityIdentificationTypeEvent map(FacilityIdentificationTypeCommand.DeleteFacilityIdentificationType c) {
        FacilityIdentificationTypeEventId stateEventId = new FacilityIdentificationTypeEventId(c.getFacilityIdentificationTypeId(), c.getVersion());
        FacilityIdentificationTypeEvent.FacilityIdentificationTypeStateDeleted e = newFacilityIdentificationTypeStateDeleted(stateEventId);
        ((AbstractFacilityIdentificationTypeEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected FacilityIdentificationTypeEvent.FacilityIdentificationTypeStateCreated newFacilityIdentificationTypeStateCreated(Long version, String commandId, String requesterId) {
        FacilityIdentificationTypeEventId stateEventId = new FacilityIdentificationTypeEventId(this.state.getFacilityIdentificationTypeId(), version);
        FacilityIdentificationTypeEvent.FacilityIdentificationTypeStateCreated e = newFacilityIdentificationTypeStateCreated(stateEventId);
        ((AbstractFacilityIdentificationTypeEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FacilityIdentificationTypeEvent.FacilityIdentificationTypeStateMergePatched newFacilityIdentificationTypeStateMergePatched(Long version, String commandId, String requesterId) {
        FacilityIdentificationTypeEventId stateEventId = new FacilityIdentificationTypeEventId(this.state.getFacilityIdentificationTypeId(), version);
        FacilityIdentificationTypeEvent.FacilityIdentificationTypeStateMergePatched e = newFacilityIdentificationTypeStateMergePatched(stateEventId);
        ((AbstractFacilityIdentificationTypeEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FacilityIdentificationTypeEvent.FacilityIdentificationTypeStateDeleted newFacilityIdentificationTypeStateDeleted(Long version, String commandId, String requesterId) {
        FacilityIdentificationTypeEventId stateEventId = new FacilityIdentificationTypeEventId(this.state.getFacilityIdentificationTypeId(), version);
        FacilityIdentificationTypeEvent.FacilityIdentificationTypeStateDeleted e = newFacilityIdentificationTypeStateDeleted(stateEventId);
        ((AbstractFacilityIdentificationTypeEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FacilityIdentificationTypeEvent.FacilityIdentificationTypeStateCreated newFacilityIdentificationTypeStateCreated(FacilityIdentificationTypeEventId stateEventId) {
        return new AbstractFacilityIdentificationTypeEvent.SimpleFacilityIdentificationTypeStateCreated(stateEventId);
    }

    protected FacilityIdentificationTypeEvent.FacilityIdentificationTypeStateMergePatched newFacilityIdentificationTypeStateMergePatched(FacilityIdentificationTypeEventId stateEventId) {
        return new AbstractFacilityIdentificationTypeEvent.SimpleFacilityIdentificationTypeStateMergePatched(stateEventId);
    }

    protected FacilityIdentificationTypeEvent.FacilityIdentificationTypeStateDeleted newFacilityIdentificationTypeStateDeleted(FacilityIdentificationTypeEventId stateEventId) {
        return new AbstractFacilityIdentificationTypeEvent.SimpleFacilityIdentificationTypeStateDeleted(stateEventId);
    }


    public static class SimpleFacilityIdentificationTypeAggregate extends AbstractFacilityIdentificationTypeAggregate {
        public SimpleFacilityIdentificationTypeAggregate(FacilityIdentificationTypeState state) {
            super(state);
        }

    }

}

