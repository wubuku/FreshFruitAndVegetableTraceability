// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipment;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.shipment.ShipmentEvent.*;

public abstract class AbstractShipmentState implements ShipmentState.SqlShipmentState, Saveable {

    private String shipmentId;

    public String getShipmentId() {
        return this.shipmentId;
    }

    public void setShipmentId(String shipmentId) {
        this.shipmentId = shipmentId;
    }

    private String shipmentTypeId;

    public String getShipmentTypeId() {
        return this.shipmentTypeId;
    }

    public void setShipmentTypeId(String shipmentTypeId) {
        this.shipmentTypeId = shipmentTypeId;
    }

    private String statusId;

    public String getStatusId() {
        return this.statusId;
    }

    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }

    private String qaStatusId;

    public String getQaStatusId() {
        return this.qaStatusId;
    }

    public void setQaStatusId(String qaStatusId) {
        this.qaStatusId = qaStatusId;
    }

    private String primaryOrderId;

    public String getPrimaryOrderId() {
        return this.primaryOrderId;
    }

    public void setPrimaryOrderId(String primaryOrderId) {
        this.primaryOrderId = primaryOrderId;
    }

    private String primaryReturnId;

    public String getPrimaryReturnId() {
        return this.primaryReturnId;
    }

    public void setPrimaryReturnId(String primaryReturnId) {
        this.primaryReturnId = primaryReturnId;
    }

    private String primaryShipGroupSeqId;

    public String getPrimaryShipGroupSeqId() {
        return this.primaryShipGroupSeqId;
    }

    public void setPrimaryShipGroupSeqId(String primaryShipGroupSeqId) {
        this.primaryShipGroupSeqId = primaryShipGroupSeqId;
    }

    private String picklistBinId;

    public String getPicklistBinId() {
        return this.picklistBinId;
    }

    public void setPicklistBinId(String picklistBinId) {
        this.picklistBinId = picklistBinId;
    }

    private OffsetDateTime estimatedReadyDate;

    public OffsetDateTime getEstimatedReadyDate() {
        return this.estimatedReadyDate;
    }

    public void setEstimatedReadyDate(OffsetDateTime estimatedReadyDate) {
        this.estimatedReadyDate = estimatedReadyDate;
    }

    private OffsetDateTime estimatedShipDate;

    public OffsetDateTime getEstimatedShipDate() {
        return this.estimatedShipDate;
    }

    public void setEstimatedShipDate(OffsetDateTime estimatedShipDate) {
        this.estimatedShipDate = estimatedShipDate;
    }

    private String estimatedShipWorkEffId;

    public String getEstimatedShipWorkEffId() {
        return this.estimatedShipWorkEffId;
    }

    public void setEstimatedShipWorkEffId(String estimatedShipWorkEffId) {
        this.estimatedShipWorkEffId = estimatedShipWorkEffId;
    }

    private OffsetDateTime estimatedArrivalDate;

    public OffsetDateTime getEstimatedArrivalDate() {
        return this.estimatedArrivalDate;
    }

    public void setEstimatedArrivalDate(OffsetDateTime estimatedArrivalDate) {
        this.estimatedArrivalDate = estimatedArrivalDate;
    }

    private String estimatedArrivalWorkEffId;

    public String getEstimatedArrivalWorkEffId() {
        return this.estimatedArrivalWorkEffId;
    }

    public void setEstimatedArrivalWorkEffId(String estimatedArrivalWorkEffId) {
        this.estimatedArrivalWorkEffId = estimatedArrivalWorkEffId;
    }

    private OffsetDateTime latestCancelDate;

    public OffsetDateTime getLatestCancelDate() {
        return this.latestCancelDate;
    }

    public void setLatestCancelDate(OffsetDateTime latestCancelDate) {
        this.latestCancelDate = latestCancelDate;
    }

    private java.math.BigDecimal estimatedShipCost;

    public java.math.BigDecimal getEstimatedShipCost() {
        return this.estimatedShipCost;
    }

    public void setEstimatedShipCost(java.math.BigDecimal estimatedShipCost) {
        this.estimatedShipCost = estimatedShipCost;
    }

    private String currencyUomId;

    public String getCurrencyUomId() {
        return this.currencyUomId;
    }

    public void setCurrencyUomId(String currencyUomId) {
        this.currencyUomId = currencyUomId;
    }

    private String handlingInstructions;

    public String getHandlingInstructions() {
        return this.handlingInstructions;
    }

    public void setHandlingInstructions(String handlingInstructions) {
        this.handlingInstructions = handlingInstructions;
    }

    private String originFacilityId;

    public String getOriginFacilityId() {
        return this.originFacilityId;
    }

    public void setOriginFacilityId(String originFacilityId) {
        this.originFacilityId = originFacilityId;
    }

    private String destinationFacilityId;

    public String getDestinationFacilityId() {
        return this.destinationFacilityId;
    }

    public void setDestinationFacilityId(String destinationFacilityId) {
        this.destinationFacilityId = destinationFacilityId;
    }

    private String originContactMechId;

    public String getOriginContactMechId() {
        return this.originContactMechId;
    }

    public void setOriginContactMechId(String originContactMechId) {
        this.originContactMechId = originContactMechId;
    }

    private String originTelecomNumberId;

    public String getOriginTelecomNumberId() {
        return this.originTelecomNumberId;
    }

    public void setOriginTelecomNumberId(String originTelecomNumberId) {
        this.originTelecomNumberId = originTelecomNumberId;
    }

    private String destinationContactMechId;

    public String getDestinationContactMechId() {
        return this.destinationContactMechId;
    }

    public void setDestinationContactMechId(String destinationContactMechId) {
        this.destinationContactMechId = destinationContactMechId;
    }

    private String destinationTelecomNumberId;

    public String getDestinationTelecomNumberId() {
        return this.destinationTelecomNumberId;
    }

    public void setDestinationTelecomNumberId(String destinationTelecomNumberId) {
        this.destinationTelecomNumberId = destinationTelecomNumberId;
    }

    private String partyIdTo;

    public String getPartyIdTo() {
        return this.partyIdTo;
    }

    public void setPartyIdTo(String partyIdTo) {
        this.partyIdTo = partyIdTo;
    }

    private String partyIdFrom;

    public String getPartyIdFrom() {
        return this.partyIdFrom;
    }

    public void setPartyIdFrom(String partyIdFrom) {
        this.partyIdFrom = partyIdFrom;
    }

    private java.math.BigDecimal additionalShippingCharge;

    public java.math.BigDecimal getAdditionalShippingCharge() {
        return this.additionalShippingCharge;
    }

    public void setAdditionalShippingCharge(java.math.BigDecimal additionalShippingCharge) {
        this.additionalShippingCharge = additionalShippingCharge;
    }

    private String addtlShippingChargeDesc;

    public String getAddtlShippingChargeDesc() {
        return this.addtlShippingChargeDesc;
    }

    public void setAddtlShippingChargeDesc(String addtlShippingChargeDesc) {
        this.addtlShippingChargeDesc = addtlShippingChargeDesc;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Set<ShipmentItemState> protectedShipmentItems = new HashSet<>();

    protected Set<ShipmentItemState> getProtectedShipmentItems() {
        return this.protectedShipmentItems;
    }

    protected void setProtectedShipmentItems(Set<ShipmentItemState> protectedShipmentItems) {
        this.protectedShipmentItems = protectedShipmentItems;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, ShipmentItemState> shipmentItems;

    public EntityStateCollection.MutableEntityStateCollection<String, ShipmentItemState> getShipmentItems() {
        return this.shipmentItems;
    }

    public void setShipmentItems(EntityStateCollection.MutableEntityStateCollection<String, ShipmentItemState> shipmentItems) {
        this.shipmentItems = shipmentItems;
    }

    private Set<ShipmentPackageState> protectedShipmentPackages = new HashSet<>();

    protected Set<ShipmentPackageState> getProtectedShipmentPackages() {
        return this.protectedShipmentPackages;
    }

    protected void setProtectedShipmentPackages(Set<ShipmentPackageState> protectedShipmentPackages) {
        this.protectedShipmentPackages = protectedShipmentPackages;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, ShipmentPackageState> shipmentPackages;

    public EntityStateCollection.MutableEntityStateCollection<String, ShipmentPackageState> getShipmentPackages() {
        return this.shipmentPackages;
    }

    public void setShipmentPackages(EntityStateCollection.MutableEntityStateCollection<String, ShipmentPackageState> shipmentPackages) {
        this.shipmentPackages = shipmentPackages;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractShipmentState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setShipmentId(((ShipmentEvent.SqlShipmentEvent) events.get(0)).getShipmentEventId().getShipmentId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? ShipmentState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractShipmentState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        shipmentItems = new SimpleShipmentItemStateCollection();
        shipmentPackages = new SimpleShipmentPackageStateCollection();
    }

    @Override
    public int hashCode() {
        return getShipmentId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof ShipmentState) {
            return Objects.equals(this.getShipmentId(), ((ShipmentState)obj).getShipmentId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof ShipmentStateCreated) {
            when((ShipmentStateCreated) e);
        } else if (e instanceof ShipmentStateMergePatched) {
            when((ShipmentStateMergePatched) e);
        } else if (e instanceof AbstractShipmentEvent.ShipmentActionEvent) {
            when((AbstractShipmentEvent.ShipmentActionEvent)e);
        } else if (e instanceof AbstractShipmentEvent.ShipmentQaActionEvent) {
            when((AbstractShipmentEvent.ShipmentQaActionEvent)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(ShipmentStateCreated e) {
        throwOnWrongEvent(e);

        this.setShipmentTypeId(e.getShipmentTypeId());
        this.setStatusId(e.getStatusId());
        this.setQaStatusId(e.getQaStatusId());
        this.setPrimaryOrderId(e.getPrimaryOrderId());
        this.setPrimaryReturnId(e.getPrimaryReturnId());
        this.setPrimaryShipGroupSeqId(e.getPrimaryShipGroupSeqId());
        this.setPicklistBinId(e.getPicklistBinId());
        this.setEstimatedReadyDate(e.getEstimatedReadyDate());
        this.setEstimatedShipDate(e.getEstimatedShipDate());
        this.setEstimatedShipWorkEffId(e.getEstimatedShipWorkEffId());
        this.setEstimatedArrivalDate(e.getEstimatedArrivalDate());
        this.setEstimatedArrivalWorkEffId(e.getEstimatedArrivalWorkEffId());
        this.setLatestCancelDate(e.getLatestCancelDate());
        this.setEstimatedShipCost(e.getEstimatedShipCost());
        this.setCurrencyUomId(e.getCurrencyUomId());
        this.setHandlingInstructions(e.getHandlingInstructions());
        this.setOriginFacilityId(e.getOriginFacilityId());
        this.setDestinationFacilityId(e.getDestinationFacilityId());
        this.setOriginContactMechId(e.getOriginContactMechId());
        this.setOriginTelecomNumberId(e.getOriginTelecomNumberId());
        this.setDestinationContactMechId(e.getDestinationContactMechId());
        this.setDestinationTelecomNumberId(e.getDestinationTelecomNumberId());
        this.setPartyIdTo(e.getPartyIdTo());
        this.setPartyIdFrom(e.getPartyIdFrom());
        this.setAdditionalShippingCharge(e.getAdditionalShippingCharge());
        this.setAddtlShippingChargeDesc(e.getAddtlShippingChargeDesc());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

        for (ShipmentItemEvent.ShipmentItemStateCreated innerEvent : e.getShipmentItemEvents()) {
            ShipmentItemState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, ShipmentItemState>)this.getShipmentItems()).getOrAddDefault(((ShipmentItemEvent.SqlShipmentItemEvent)innerEvent).getShipmentItemEventId().getShipmentItemSeqId());
            ((ShipmentItemState.SqlShipmentItemState)innerState).mutate(innerEvent);
        }
        for (ShipmentPackageEvent.ShipmentPackageStateCreated innerEvent : e.getShipmentPackageEvents()) {
            ShipmentPackageState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, ShipmentPackageState>)this.getShipmentPackages()).getOrAddDefault(((ShipmentPackageEvent.SqlShipmentPackageEvent)innerEvent).getShipmentPackageEventId().getShipmentPackageSeqId());
            ((ShipmentPackageState.SqlShipmentPackageState)innerState).mutate(innerEvent);
        }
    }

    public void merge(ShipmentState s) {
        if (s == this) {
            return;
        }
        this.setShipmentTypeId(s.getShipmentTypeId());
        this.setStatusId(s.getStatusId());
        this.setQaStatusId(s.getQaStatusId());
        this.setPrimaryOrderId(s.getPrimaryOrderId());
        this.setPrimaryReturnId(s.getPrimaryReturnId());
        this.setPrimaryShipGroupSeqId(s.getPrimaryShipGroupSeqId());
        this.setPicklistBinId(s.getPicklistBinId());
        this.setEstimatedReadyDate(s.getEstimatedReadyDate());
        this.setEstimatedShipDate(s.getEstimatedShipDate());
        this.setEstimatedShipWorkEffId(s.getEstimatedShipWorkEffId());
        this.setEstimatedArrivalDate(s.getEstimatedArrivalDate());
        this.setEstimatedArrivalWorkEffId(s.getEstimatedArrivalWorkEffId());
        this.setLatestCancelDate(s.getLatestCancelDate());
        this.setEstimatedShipCost(s.getEstimatedShipCost());
        this.setCurrencyUomId(s.getCurrencyUomId());
        this.setHandlingInstructions(s.getHandlingInstructions());
        this.setOriginFacilityId(s.getOriginFacilityId());
        this.setDestinationFacilityId(s.getDestinationFacilityId());
        this.setOriginContactMechId(s.getOriginContactMechId());
        this.setOriginTelecomNumberId(s.getOriginTelecomNumberId());
        this.setDestinationContactMechId(s.getDestinationContactMechId());
        this.setDestinationTelecomNumberId(s.getDestinationTelecomNumberId());
        this.setPartyIdTo(s.getPartyIdTo());
        this.setPartyIdFrom(s.getPartyIdFrom());
        this.setAdditionalShippingCharge(s.getAdditionalShippingCharge());
        this.setAddtlShippingChargeDesc(s.getAddtlShippingChargeDesc());

        if (s.getShipmentItems() != null) {
            Iterable<ShipmentItemState> iterable;
            if (s.getShipmentItems().isLazy()) {
                iterable = s.getShipmentItems().getLoadedStates();
            } else {
                iterable = s.getShipmentItems();
            }
            if (iterable != null) {
                for (ShipmentItemState ss : iterable) {
                    ShipmentItemState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, ShipmentItemState>)this.getShipmentItems()).getOrAddDefault(ss.getShipmentItemSeqId());
                    ((AbstractShipmentItemState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getShipmentItems() != null) {
            if (s.getShipmentItems() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getShipmentItems()).getRemovedStates() != null) {
                    for (ShipmentItemState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, ShipmentItemState>)s.getShipmentItems()).getRemovedStates()) {
                        ShipmentItemState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, ShipmentItemState>)this.getShipmentItems()).getOrAddDefault(ss.getShipmentItemSeqId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getShipmentItems()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getShipmentItems().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getShipmentItems().stream().map(i -> i.getShipmentItemSeqId()).collect(java.util.stream.Collectors.toList()));
                    s.getShipmentItems().forEach(i -> removedStateIds.remove(i.getShipmentItemSeqId()));
                    for (String i : removedStateIds) {
                        ShipmentItemState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, ShipmentItemState>)this.getShipmentItems()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getShipmentItems()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }

        if (s.getShipmentPackages() != null) {
            Iterable<ShipmentPackageState> iterable;
            if (s.getShipmentPackages().isLazy()) {
                iterable = s.getShipmentPackages().getLoadedStates();
            } else {
                iterable = s.getShipmentPackages();
            }
            if (iterable != null) {
                for (ShipmentPackageState ss : iterable) {
                    ShipmentPackageState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, ShipmentPackageState>)this.getShipmentPackages()).getOrAddDefault(ss.getShipmentPackageSeqId());
                    ((AbstractShipmentPackageState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getShipmentPackages() != null) {
            if (s.getShipmentPackages() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getShipmentPackages()).getRemovedStates() != null) {
                    for (ShipmentPackageState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, ShipmentPackageState>)s.getShipmentPackages()).getRemovedStates()) {
                        ShipmentPackageState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, ShipmentPackageState>)this.getShipmentPackages()).getOrAddDefault(ss.getShipmentPackageSeqId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getShipmentPackages()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getShipmentPackages().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getShipmentPackages().stream().map(i -> i.getShipmentPackageSeqId()).collect(java.util.stream.Collectors.toList()));
                    s.getShipmentPackages().forEach(i -> removedStateIds.remove(i.getShipmentPackageSeqId()));
                    for (String i : removedStateIds) {
                        ShipmentPackageState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, ShipmentPackageState>)this.getShipmentPackages()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getShipmentPackages()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(ShipmentStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getShipmentTypeId() == null) {
            if (e.getIsPropertyShipmentTypeIdRemoved() != null && e.getIsPropertyShipmentTypeIdRemoved()) {
                this.setShipmentTypeId(null);
            }
        } else {
            this.setShipmentTypeId(e.getShipmentTypeId());
        }
        if (e.getStatusId() == null) {
            if (e.getIsPropertyStatusIdRemoved() != null && e.getIsPropertyStatusIdRemoved()) {
                this.setStatusId(null);
            }
        } else {
            this.setStatusId(e.getStatusId());
        }
        if (e.getQaStatusId() == null) {
            if (e.getIsPropertyQaStatusIdRemoved() != null && e.getIsPropertyQaStatusIdRemoved()) {
                this.setQaStatusId(null);
            }
        } else {
            this.setQaStatusId(e.getQaStatusId());
        }
        if (e.getPrimaryOrderId() == null) {
            if (e.getIsPropertyPrimaryOrderIdRemoved() != null && e.getIsPropertyPrimaryOrderIdRemoved()) {
                this.setPrimaryOrderId(null);
            }
        } else {
            this.setPrimaryOrderId(e.getPrimaryOrderId());
        }
        if (e.getPrimaryReturnId() == null) {
            if (e.getIsPropertyPrimaryReturnIdRemoved() != null && e.getIsPropertyPrimaryReturnIdRemoved()) {
                this.setPrimaryReturnId(null);
            }
        } else {
            this.setPrimaryReturnId(e.getPrimaryReturnId());
        }
        if (e.getPrimaryShipGroupSeqId() == null) {
            if (e.getIsPropertyPrimaryShipGroupSeqIdRemoved() != null && e.getIsPropertyPrimaryShipGroupSeqIdRemoved()) {
                this.setPrimaryShipGroupSeqId(null);
            }
        } else {
            this.setPrimaryShipGroupSeqId(e.getPrimaryShipGroupSeqId());
        }
        if (e.getPicklistBinId() == null) {
            if (e.getIsPropertyPicklistBinIdRemoved() != null && e.getIsPropertyPicklistBinIdRemoved()) {
                this.setPicklistBinId(null);
            }
        } else {
            this.setPicklistBinId(e.getPicklistBinId());
        }
        if (e.getEstimatedReadyDate() == null) {
            if (e.getIsPropertyEstimatedReadyDateRemoved() != null && e.getIsPropertyEstimatedReadyDateRemoved()) {
                this.setEstimatedReadyDate(null);
            }
        } else {
            this.setEstimatedReadyDate(e.getEstimatedReadyDate());
        }
        if (e.getEstimatedShipDate() == null) {
            if (e.getIsPropertyEstimatedShipDateRemoved() != null && e.getIsPropertyEstimatedShipDateRemoved()) {
                this.setEstimatedShipDate(null);
            }
        } else {
            this.setEstimatedShipDate(e.getEstimatedShipDate());
        }
        if (e.getEstimatedShipWorkEffId() == null) {
            if (e.getIsPropertyEstimatedShipWorkEffIdRemoved() != null && e.getIsPropertyEstimatedShipWorkEffIdRemoved()) {
                this.setEstimatedShipWorkEffId(null);
            }
        } else {
            this.setEstimatedShipWorkEffId(e.getEstimatedShipWorkEffId());
        }
        if (e.getEstimatedArrivalDate() == null) {
            if (e.getIsPropertyEstimatedArrivalDateRemoved() != null && e.getIsPropertyEstimatedArrivalDateRemoved()) {
                this.setEstimatedArrivalDate(null);
            }
        } else {
            this.setEstimatedArrivalDate(e.getEstimatedArrivalDate());
        }
        if (e.getEstimatedArrivalWorkEffId() == null) {
            if (e.getIsPropertyEstimatedArrivalWorkEffIdRemoved() != null && e.getIsPropertyEstimatedArrivalWorkEffIdRemoved()) {
                this.setEstimatedArrivalWorkEffId(null);
            }
        } else {
            this.setEstimatedArrivalWorkEffId(e.getEstimatedArrivalWorkEffId());
        }
        if (e.getLatestCancelDate() == null) {
            if (e.getIsPropertyLatestCancelDateRemoved() != null && e.getIsPropertyLatestCancelDateRemoved()) {
                this.setLatestCancelDate(null);
            }
        } else {
            this.setLatestCancelDate(e.getLatestCancelDate());
        }
        if (e.getEstimatedShipCost() == null) {
            if (e.getIsPropertyEstimatedShipCostRemoved() != null && e.getIsPropertyEstimatedShipCostRemoved()) {
                this.setEstimatedShipCost(null);
            }
        } else {
            this.setEstimatedShipCost(e.getEstimatedShipCost());
        }
        if (e.getCurrencyUomId() == null) {
            if (e.getIsPropertyCurrencyUomIdRemoved() != null && e.getIsPropertyCurrencyUomIdRemoved()) {
                this.setCurrencyUomId(null);
            }
        } else {
            this.setCurrencyUomId(e.getCurrencyUomId());
        }
        if (e.getHandlingInstructions() == null) {
            if (e.getIsPropertyHandlingInstructionsRemoved() != null && e.getIsPropertyHandlingInstructionsRemoved()) {
                this.setHandlingInstructions(null);
            }
        } else {
            this.setHandlingInstructions(e.getHandlingInstructions());
        }
        if (e.getOriginFacilityId() == null) {
            if (e.getIsPropertyOriginFacilityIdRemoved() != null && e.getIsPropertyOriginFacilityIdRemoved()) {
                this.setOriginFacilityId(null);
            }
        } else {
            this.setOriginFacilityId(e.getOriginFacilityId());
        }
        if (e.getDestinationFacilityId() == null) {
            if (e.getIsPropertyDestinationFacilityIdRemoved() != null && e.getIsPropertyDestinationFacilityIdRemoved()) {
                this.setDestinationFacilityId(null);
            }
        } else {
            this.setDestinationFacilityId(e.getDestinationFacilityId());
        }
        if (e.getOriginContactMechId() == null) {
            if (e.getIsPropertyOriginContactMechIdRemoved() != null && e.getIsPropertyOriginContactMechIdRemoved()) {
                this.setOriginContactMechId(null);
            }
        } else {
            this.setOriginContactMechId(e.getOriginContactMechId());
        }
        if (e.getOriginTelecomNumberId() == null) {
            if (e.getIsPropertyOriginTelecomNumberIdRemoved() != null && e.getIsPropertyOriginTelecomNumberIdRemoved()) {
                this.setOriginTelecomNumberId(null);
            }
        } else {
            this.setOriginTelecomNumberId(e.getOriginTelecomNumberId());
        }
        if (e.getDestinationContactMechId() == null) {
            if (e.getIsPropertyDestinationContactMechIdRemoved() != null && e.getIsPropertyDestinationContactMechIdRemoved()) {
                this.setDestinationContactMechId(null);
            }
        } else {
            this.setDestinationContactMechId(e.getDestinationContactMechId());
        }
        if (e.getDestinationTelecomNumberId() == null) {
            if (e.getIsPropertyDestinationTelecomNumberIdRemoved() != null && e.getIsPropertyDestinationTelecomNumberIdRemoved()) {
                this.setDestinationTelecomNumberId(null);
            }
        } else {
            this.setDestinationTelecomNumberId(e.getDestinationTelecomNumberId());
        }
        if (e.getPartyIdTo() == null) {
            if (e.getIsPropertyPartyIdToRemoved() != null && e.getIsPropertyPartyIdToRemoved()) {
                this.setPartyIdTo(null);
            }
        } else {
            this.setPartyIdTo(e.getPartyIdTo());
        }
        if (e.getPartyIdFrom() == null) {
            if (e.getIsPropertyPartyIdFromRemoved() != null && e.getIsPropertyPartyIdFromRemoved()) {
                this.setPartyIdFrom(null);
            }
        } else {
            this.setPartyIdFrom(e.getPartyIdFrom());
        }
        if (e.getAdditionalShippingCharge() == null) {
            if (e.getIsPropertyAdditionalShippingChargeRemoved() != null && e.getIsPropertyAdditionalShippingChargeRemoved()) {
                this.setAdditionalShippingCharge(null);
            }
        } else {
            this.setAdditionalShippingCharge(e.getAdditionalShippingCharge());
        }
        if (e.getAddtlShippingChargeDesc() == null) {
            if (e.getIsPropertyAddtlShippingChargeDescRemoved() != null && e.getIsPropertyAddtlShippingChargeDescRemoved()) {
                this.setAddtlShippingChargeDesc(null);
            }
        } else {
            this.setAddtlShippingChargeDesc(e.getAddtlShippingChargeDesc());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (ShipmentItemEvent innerEvent : e.getShipmentItemEvents()) {
            ShipmentItemState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, ShipmentItemState>)this.getShipmentItems()).getOrAddDefault(((ShipmentItemEvent.SqlShipmentItemEvent)innerEvent).getShipmentItemEventId().getShipmentItemSeqId());
            ((ShipmentItemState.SqlShipmentItemState)innerState).mutate(innerEvent);
        }
        for (ShipmentPackageEvent innerEvent : e.getShipmentPackageEvents()) {
            ShipmentPackageState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, ShipmentPackageState>)this.getShipmentPackages()).getOrAddDefault(((ShipmentPackageEvent.SqlShipmentPackageEvent)innerEvent).getShipmentPackageEventId().getShipmentPackageSeqId());
            ((ShipmentPackageState.SqlShipmentPackageState)innerState).mutate(innerEvent);
        }
    }

    public void when(AbstractShipmentEvent.ShipmentActionEvent e) {
        throwOnWrongEvent(e);

        String value = e.getValue();
        String Value = value;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        ShipmentState updatedShipmentState = ApplicationContext.current.get(IShipmentActionLogic.class).mutate(
                this, value, MutationContext.of(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException("Current MutationContext implementation only supports returning the same state instance");}}));


        if (this != updatedShipmentState) { merge(updatedShipmentState); } //else do nothing

    }

    public void when(AbstractShipmentEvent.ShipmentQaActionEvent e) {
        throwOnWrongEvent(e);

        String value = e.getValue();
        String Value = value;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        ShipmentState updatedShipmentState = ApplicationContext.current.get(IShipmentQaActionLogic.class).mutate(
                this, value, MutationContext.of(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException("Current MutationContext implementation only supports returning the same state instance");}}));


        if (this != updatedShipmentState) { merge(updatedShipmentState); } //else do nothing

    }

    public void save() {
        if (shipmentItems instanceof Saveable) {
            ((Saveable)shipmentItems).save();
        }
        if (shipmentPackages instanceof Saveable) {
            ((Saveable)shipmentPackages).save();
        }
    }

    protected void throwOnWrongEvent(ShipmentEvent event) {
        String stateEntityId = this.getShipmentId(); // Aggregate Id
        String eventEntityId = ((ShipmentEvent.SqlShipmentEvent)event).getShipmentEventId().getShipmentId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((ShipmentEvent.SqlShipmentEvent)event).getShipmentEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getShipmentEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleShipmentState extends AbstractShipmentState {

        public SimpleShipmentState() {
        }

        public SimpleShipmentState(List<Event> events) {
            super(events);
        }

        public static SimpleShipmentState newForReapplying() {
            SimpleShipmentState s = new SimpleShipmentState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleShipmentItemStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, ShipmentItemState>, Collection<ShipmentItemState> {

        @Override
        public ShipmentItemState get(String shipmentItemSeqId) {
            return protectedShipmentItems.stream().filter(
                            e -> e.getShipmentItemSeqId().equals(shipmentItemSeqId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<ShipmentItemState> getLoadedStates() {
            return protectedShipmentItems;
        }

        @Override
        public ShipmentItemState getOrAddDefault(String shipmentItemSeqId) {
            ShipmentItemState s = get(shipmentItemSeqId);
            if (s == null) {
                ShipmentItemId globalId = new ShipmentItemId(getShipmentId(), shipmentItemSeqId);
                AbstractShipmentItemState state = new AbstractShipmentItemState.SimpleShipmentItemState();
                state.setShipmentItemId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedShipmentItems.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedShipmentItems.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedShipmentItems.contains(o);
        }

        @Override
        public Iterator<ShipmentItemState> iterator() {
            return protectedShipmentItems.iterator();
        }

        @Override
        public java.util.stream.Stream<ShipmentItemState> stream() {
            return protectedShipmentItems.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedShipmentItems.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedShipmentItems.toArray(a);
        }

        @Override
        public boolean add(ShipmentItemState s) {
            if (s instanceof AbstractShipmentItemState) {
                AbstractShipmentItemState state = (AbstractShipmentItemState) s;
                state.setProtectedShipmentState(AbstractShipmentState.this);
            }
            return protectedShipmentItems.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractShipmentItemState) {
                AbstractShipmentItemState s = (AbstractShipmentItemState) o;
                s.setProtectedShipmentState(null);
            }
            return protectedShipmentItems.remove(o);
        }

        @Override
        public boolean removeState(ShipmentItemState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedShipmentItems.containsAll(c);
        }

        @Override
        public boolean addAll(Collection<? extends ShipmentItemState> c) {
            return protectedShipmentItems.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedShipmentItems.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedShipmentItems.retainAll(c);
        }

        @Override
        public void clear() {
            protectedShipmentItems.clear();
        }
    }

    class SimpleShipmentPackageStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, ShipmentPackageState>, Collection<ShipmentPackageState> {

        @Override
        public ShipmentPackageState get(String shipmentPackageSeqId) {
            return protectedShipmentPackages.stream().filter(
                            e -> e.getShipmentPackageSeqId().equals(shipmentPackageSeqId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<ShipmentPackageState> getLoadedStates() {
            return protectedShipmentPackages;
        }

        @Override
        public ShipmentPackageState getOrAddDefault(String shipmentPackageSeqId) {
            ShipmentPackageState s = get(shipmentPackageSeqId);
            if (s == null) {
                ShipmentPackageId globalId = new ShipmentPackageId(getShipmentId(), shipmentPackageSeqId);
                AbstractShipmentPackageState state = new AbstractShipmentPackageState.SimpleShipmentPackageState();
                state.setShipmentPackageId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedShipmentPackages.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedShipmentPackages.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedShipmentPackages.contains(o);
        }

        @Override
        public Iterator<ShipmentPackageState> iterator() {
            return protectedShipmentPackages.iterator();
        }

        @Override
        public java.util.stream.Stream<ShipmentPackageState> stream() {
            return protectedShipmentPackages.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedShipmentPackages.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedShipmentPackages.toArray(a);
        }

        @Override
        public boolean add(ShipmentPackageState s) {
            if (s instanceof AbstractShipmentPackageState) {
                AbstractShipmentPackageState state = (AbstractShipmentPackageState) s;
                state.setProtectedShipmentState(AbstractShipmentState.this);
            }
            return protectedShipmentPackages.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractShipmentPackageState) {
                AbstractShipmentPackageState s = (AbstractShipmentPackageState) o;
                s.setProtectedShipmentState(null);
            }
            return protectedShipmentPackages.remove(o);
        }

        @Override
        public boolean removeState(ShipmentPackageState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedShipmentPackages.containsAll(c);
        }

        @Override
        public boolean addAll(Collection<? extends ShipmentPackageState> c) {
            return protectedShipmentPackages.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedShipmentPackages.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedShipmentPackages.retainAll(c);
        }

        @Override
        public void clear() {
            protectedShipmentPackages.clear();
        }
    }


}

