// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.article;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface ArticleCommand extends Command {

    Long getArticleId();

    void setArticleId(Long articleId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(ArticleState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((ArticleCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (state.getDeleted() != null && state.getDeleted()) {
            throw DomainError.named("zombie", "Can't do anything to deleted aggregate.");
        }
        if (isCreationCommand((ArticleCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(ArticleCommand c) {
        if ((c instanceof ArticleCommand.CreateArticle) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(ArticleState.VERSION_NULL)))
            return true;
        if ((c instanceof ArticleCommand.MergePatchArticle))
            return false;
        if ((c instanceof ArticleCommand.DeleteArticle))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(ArticleState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchArticle extends ArticleCommand
    {

        String getTitle();

        void setTitle(String title);

        String getBody();

        void setBody(String body);

        String getAuthor();

        void setAuthor(String author);

        Boolean getActive();

        void setActive(Boolean active);

        String[] getTags();

        void setTags(String[] tags);

    }

    interface CreateArticle extends CreateOrMergePatchArticle
    {
        CreateCommentCommandCollection getCreateCommentCommands();

        CommentCommand.CreateComment newCreateComment();

    }

    interface MergePatchArticle extends CreateOrMergePatchArticle
    {
        Boolean getIsPropertyTitleRemoved();

        void setIsPropertyTitleRemoved(Boolean removed);

        Boolean getIsPropertyBodyRemoved();

        void setIsPropertyBodyRemoved(Boolean removed);

        Boolean getIsPropertyAuthorRemoved();

        void setIsPropertyAuthorRemoved(Boolean removed);

        Boolean getIsPropertyTagsRemoved();

        void setIsPropertyTagsRemoved(Boolean removed);

        Boolean getIsPropertyActiveRemoved();

        void setIsPropertyActiveRemoved(Boolean removed);


        CommentCommandCollection getCommentCommands();

        CommentCommand.CreateComment newCreateComment();

        CommentCommand.MergePatchComment newMergePatchComment();

        CommentCommand.RemoveComment newRemoveComment();

    }

    interface DeleteArticle extends ArticleCommand
    {
    }

    interface CreateCommentCommandCollection extends Iterable<CommentCommand.CreateComment>
    {
        void add(CommentCommand.CreateComment c);

        void remove(CommentCommand.CreateComment c);

        void clear();
    }

    interface CommentCommandCollection extends Iterable<CommentCommand>
    {
        void add(CommentCommand c);

        void remove(CommentCommand c);

        void clear();
    }

}

