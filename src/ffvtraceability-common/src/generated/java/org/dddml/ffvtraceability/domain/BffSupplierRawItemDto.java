// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain;

import java.io.Serializable;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class BffSupplierRawItemDto implements Serializable {
    private String productId;

    public String getProductId()
    {
        return this.productId;
    }

    public void setProductId(String productId)
    {
        this.productId = productId;
    }

    private String supplierId;

    public String getSupplierId()
    {
        return this.supplierId;
    }

    public void setSupplierId(String supplierId)
    {
        this.supplierId = supplierId;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }

    private String currencyUomId;

    public String getCurrencyUomId()
    {
        return this.currencyUomId;
    }

    public void setCurrencyUomId(String currencyUomId)
    {
        this.currencyUomId = currencyUomId;
    }

    private java.math.BigDecimal minimumOrderQuantity;

    public java.math.BigDecimal getMinimumOrderQuantity()
    {
        return this.minimumOrderQuantity;
    }

    public void setMinimumOrderQuantity(java.math.BigDecimal minimumOrderQuantity)
    {
        this.minimumOrderQuantity = minimumOrderQuantity;
    }

    private OffsetDateTime availableFromDate;

    public OffsetDateTime getAvailableFromDate()
    {
        return this.availableFromDate;
    }

    public void setAvailableFromDate(OffsetDateTime availableFromDate)
    {
        this.availableFromDate = availableFromDate;
    }

    private OffsetDateTime availableThruDate;

    public OffsetDateTime getAvailableThruDate()
    {
        return this.availableThruDate;
    }

    public void setAvailableThruDate(OffsetDateTime availableThruDate)
    {
        this.availableThruDate = availableThruDate;
    }

    private String brandName;

    public String getBrandName()
    {
        return this.brandName;
    }

    public void setBrandName(String brandName)
    {
        this.brandName = brandName;
    }

    /**
     * GTIN (Global Trade Item Number)
     */
    private String gtin;

    public String getGtin()
    {
        return this.gtin;
    }

    public void setGtin(String gtin)
    {
        this.gtin = gtin;
    }

    /**
     * If you have a six-pack of 12oz soda cans you would have quantityIncluded=12, quantityUomId=oz, piecesIncluded=6.
     */
    private java.math.BigDecimal quantityIncluded;

    public java.math.BigDecimal getQuantityIncluded()
    {
        return this.quantityIncluded;
    }

    public void setQuantityIncluded(java.math.BigDecimal quantityIncluded)
    {
        this.quantityIncluded = quantityIncluded;
    }

    private Long piecesIncluded;

    public Long getPiecesIncluded()
    {
        return this.piecesIncluded;
    }

    public void setPiecesIncluded(Long piecesIncluded)
    {
        this.piecesIncluded = piecesIncluded;
    }

    private String supplierName;

    public String getSupplierName()
    {
        return this.supplierName;
    }

    public void setSupplierName(String supplierName)
    {
        this.supplierName = supplierName;
    }

    private java.math.BigDecimal productWeight;

    public java.math.BigDecimal getProductWeight()
    {
        return this.productWeight;
    }

    public void setProductWeight(java.math.BigDecimal productWeight)
    {
        this.productWeight = productWeight;
    }

    private String active;

    public String getActive()
    {
        return this.active;
    }

    public void setActive(String active)
    {
        this.active = active;
    }

    private String caseUomId;

    public String getCaseUomId()
    {
        return this.caseUomId;
    }

    public void setCaseUomId(String caseUomId)
    {
        this.caseUomId = caseUomId;
    }

    private String organicCertifications;

    public String getOrganicCertifications()
    {
        return this.organicCertifications;
    }

    public void setOrganicCertifications(String organicCertifications)
    {
        this.organicCertifications = organicCertifications;
    }

    private String materialCompositionDescription;

    public String getMaterialCompositionDescription()
    {
        return this.materialCompositionDescription;
    }

    public void setMaterialCompositionDescription(String materialCompositionDescription)
    {
        this.materialCompositionDescription = materialCompositionDescription;
    }

    private String countryOfOrigin;

    public String getCountryOfOrigin()
    {
        return this.countryOfOrigin;
    }

    public void setCountryOfOrigin(String countryOfOrigin)
    {
        this.countryOfOrigin = countryOfOrigin;
    }

    private String certificationCodes;

    public String getCertificationCodes()
    {
        return this.certificationCodes;
    }

    public void setCertificationCodes(String certificationCodes)
    {
        this.certificationCodes = certificationCodes;
    }

    /**
     * Number of individual units in one package (for products counted by individual pieces, e.g., fruits, eggs)
     */
    private Long individualsPerPackage;

    public Long getIndividualsPerPackage()
    {
        return this.individualsPerPackage;
    }

    public void setIndividualsPerPackage(Long individualsPerPackage)
    {
        this.individualsPerPackage = individualsPerPackage;
    }

    public BffSupplierRawItemDto()
    {
    }

    public BffSupplierRawItemDto(String productId, String supplierId, Long version, String currencyUomId, java.math.BigDecimal minimumOrderQuantity, OffsetDateTime availableFromDate, OffsetDateTime availableThruDate, String brandName, String gtin, java.math.BigDecimal quantityIncluded, Long piecesIncluded, String supplierName, java.math.BigDecimal productWeight, String active, String caseUomId, String organicCertifications, String materialCompositionDescription, String countryOfOrigin, String certificationCodes, Long individualsPerPackage)
    {
        this.productId = productId;
        this.supplierId = supplierId;
        this.version = version;
        this.currencyUomId = currencyUomId;
        this.minimumOrderQuantity = minimumOrderQuantity;
        this.availableFromDate = availableFromDate;
        this.availableThruDate = availableThruDate;
        this.brandName = brandName;
        this.gtin = gtin;
        this.quantityIncluded = quantityIncluded;
        this.piecesIncluded = piecesIncluded;
        this.supplierName = supplierName;
        this.productWeight = productWeight;
        this.active = active;
        this.caseUomId = caseUomId;
        this.organicCertifications = organicCertifications;
        this.materialCompositionDescription = materialCompositionDescription;
        this.countryOfOrigin = countryOfOrigin;
        this.certificationCodes = certificationCodes;
        this.individualsPerPackage = individualsPerPackage;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (obj == this) {
            return true;
        }
        if (obj == null || obj.getClass() != this.getClass()) {
            return false;
        }

        BffSupplierRawItemDto other = (BffSupplierRawItemDto)obj;
        return true 
            && (productId == other.productId || (productId != null && productId.equals(other.productId)))
            && (supplierId == other.supplierId || (supplierId != null && supplierId.equals(other.supplierId)))
            && (version == other.version || (version != null && version.equals(other.version)))
            && (currencyUomId == other.currencyUomId || (currencyUomId != null && currencyUomId.equals(other.currencyUomId)))
            && (minimumOrderQuantity == other.minimumOrderQuantity || (minimumOrderQuantity != null && minimumOrderQuantity.equals(other.minimumOrderQuantity)))
            && (availableFromDate == other.availableFromDate || (availableFromDate != null && availableFromDate.equals(other.availableFromDate)))
            && (availableThruDate == other.availableThruDate || (availableThruDate != null && availableThruDate.equals(other.availableThruDate)))
            && (brandName == other.brandName || (brandName != null && brandName.equals(other.brandName)))
            && (gtin == other.gtin || (gtin != null && gtin.equals(other.gtin)))
            && (quantityIncluded == other.quantityIncluded || (quantityIncluded != null && quantityIncluded.equals(other.quantityIncluded)))
            && (piecesIncluded == other.piecesIncluded || (piecesIncluded != null && piecesIncluded.equals(other.piecesIncluded)))
            && (supplierName == other.supplierName || (supplierName != null && supplierName.equals(other.supplierName)))
            && (productWeight == other.productWeight || (productWeight != null && productWeight.equals(other.productWeight)))
            && (active == other.active || (active != null && active.equals(other.active)))
            && (caseUomId == other.caseUomId || (caseUomId != null && caseUomId.equals(other.caseUomId)))
            && (organicCertifications == other.organicCertifications || (organicCertifications != null && organicCertifications.equals(other.organicCertifications)))
            && (materialCompositionDescription == other.materialCompositionDescription || (materialCompositionDescription != null && materialCompositionDescription.equals(other.materialCompositionDescription)))
            && (countryOfOrigin == other.countryOfOrigin || (countryOfOrigin != null && countryOfOrigin.equals(other.countryOfOrigin)))
            && (certificationCodes == other.certificationCodes || (certificationCodes != null && certificationCodes.equals(other.certificationCodes)))
            && (individualsPerPackage == other.individualsPerPackage || (individualsPerPackage != null && individualsPerPackage.equals(other.individualsPerPackage)))
            ;
    }

    @Override
    public int hashCode()
    {
        int hash = 0;
        if (this.productId != null) {
            hash += 13 * this.productId.hashCode();
        }
        if (this.supplierId != null) {
            hash += 13 * this.supplierId.hashCode();
        }
        if (this.version != null) {
            hash += 13 * this.version.hashCode();
        }
        if (this.currencyUomId != null) {
            hash += 13 * this.currencyUomId.hashCode();
        }
        if (this.minimumOrderQuantity != null) {
            hash += 13 * this.minimumOrderQuantity.hashCode();
        }
        if (this.availableFromDate != null) {
            hash += 13 * this.availableFromDate.hashCode();
        }
        if (this.availableThruDate != null) {
            hash += 13 * this.availableThruDate.hashCode();
        }
        if (this.brandName != null) {
            hash += 13 * this.brandName.hashCode();
        }
        if (this.gtin != null) {
            hash += 13 * this.gtin.hashCode();
        }
        if (this.quantityIncluded != null) {
            hash += 13 * this.quantityIncluded.hashCode();
        }
        if (this.piecesIncluded != null) {
            hash += 13 * this.piecesIncluded.hashCode();
        }
        if (this.supplierName != null) {
            hash += 13 * this.supplierName.hashCode();
        }
        if (this.productWeight != null) {
            hash += 13 * this.productWeight.hashCode();
        }
        if (this.active != null) {
            hash += 13 * this.active.hashCode();
        }
        if (this.caseUomId != null) {
            hash += 13 * this.caseUomId.hashCode();
        }
        if (this.organicCertifications != null) {
            hash += 13 * this.organicCertifications.hashCode();
        }
        if (this.materialCompositionDescription != null) {
            hash += 13 * this.materialCompositionDescription.hashCode();
        }
        if (this.countryOfOrigin != null) {
            hash += 13 * this.countryOfOrigin.hashCode();
        }
        if (this.certificationCodes != null) {
            hash += 13 * this.certificationCodes.hashCode();
        }
        if (this.individualsPerPackage != null) {
            hash += 13 * this.individualsPerPackage.hashCode();
        }
        return hash;
    }

    @Override
    public String toString() {
        return "BffSupplierRawItemDto{" +
                "productId=" + '\'' + productId + '\'' +
                ", supplierId=" + '\'' + supplierId + '\'' +
                ", version=" + version +
                ", currencyUomId=" + '\'' + currencyUomId + '\'' +
                ", minimumOrderQuantity=" + minimumOrderQuantity +
                ", availableFromDate=" + availableFromDate +
                ", availableThruDate=" + availableThruDate +
                ", brandName=" + '\'' + brandName + '\'' +
                ", gtin=" + '\'' + gtin + '\'' +
                ", quantityIncluded=" + quantityIncluded +
                ", piecesIncluded=" + piecesIncluded +
                ", supplierName=" + '\'' + supplierName + '\'' +
                ", productWeight=" + productWeight +
                ", active=" + '\'' + active + '\'' +
                ", caseUomId=" + '\'' + caseUomId + '\'' +
                ", organicCertifications=" + '\'' + organicCertifications + '\'' +
                ", materialCompositionDescription=" + '\'' + materialCompositionDescription + '\'' +
                ", countryOfOrigin=" + '\'' + countryOfOrigin + '\'' +
                ", certificationCodes=" + '\'' + certificationCodes + '\'' +
                ", individualsPerPackage=" + individualsPerPackage +
                '}';
    }


}

