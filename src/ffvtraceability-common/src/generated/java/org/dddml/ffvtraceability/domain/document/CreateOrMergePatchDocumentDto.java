// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.document;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchDocumentDto extends AbstractDocumentCommandDto implements DocumentCommand.CreateOrMergePatchDocument {

    /**
     * Document Type Id
     */
    private String documentTypeId;

    public String getDocumentTypeId()
    {
        return this.documentTypeId;
    }

    public void setDocumentTypeId(String documentTypeId)
    {
        this.documentTypeId = documentTypeId;
    }

    /**
     * Comments
     */
    private String comments;

    public String getComments()
    {
        return this.comments;
    }

    public void setComments(String comments)
    {
        this.comments = comments;
    }

    /**
     * Document Location
     */
    private String documentLocation;

    public String getDocumentLocation()
    {
        return this.documentLocation;
    }

    public void setDocumentLocation(String documentLocation)
    {
        this.documentLocation = documentLocation;
    }

    /**
     * Document Text
     */
    private String documentText;

    public String getDocumentText()
    {
        return this.documentText;
    }

    public void setDocumentText(String documentText)
    {
        this.documentText = documentText;
    }

    /**
     * Active
     */
    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }


    private Boolean isPropertyDocumentTypeIdRemoved;

    public Boolean getIsPropertyDocumentTypeIdRemoved()
    {
        return this.isPropertyDocumentTypeIdRemoved;
    }

    public void setIsPropertyDocumentTypeIdRemoved(Boolean removed)
    {
        this.isPropertyDocumentTypeIdRemoved = removed;
    }

    private Boolean isPropertyCommentsRemoved;

    public Boolean getIsPropertyCommentsRemoved()
    {
        return this.isPropertyCommentsRemoved;
    }

    public void setIsPropertyCommentsRemoved(Boolean removed)
    {
        this.isPropertyCommentsRemoved = removed;
    }

    private Boolean isPropertyDocumentLocationRemoved;

    public Boolean getIsPropertyDocumentLocationRemoved()
    {
        return this.isPropertyDocumentLocationRemoved;
    }

    public void setIsPropertyDocumentLocationRemoved(Boolean removed)
    {
        this.isPropertyDocumentLocationRemoved = removed;
    }

    private Boolean isPropertyDocumentTextRemoved;

    public Boolean getIsPropertyDocumentTextRemoved()
    {
        return this.isPropertyDocumentTextRemoved;
    }

    public void setIsPropertyDocumentTextRemoved(Boolean removed)
    {
        this.isPropertyDocumentTextRemoved = removed;
    }

    private Boolean isPropertyActiveRemoved;

    public Boolean getIsPropertyActiveRemoved()
    {
        return this.isPropertyActiveRemoved;
    }

    public void setIsPropertyActiveRemoved(Boolean removed)
    {
        this.isPropertyActiveRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchDocument command)
    {
        ((AbstractDocumentCommandDto) this).copyTo(command);
        command.setDocumentTypeId(this.getDocumentTypeId());
        command.setComments(this.getComments());
        command.setDocumentLocation(this.getDocumentLocation());
        command.setDocumentText(this.getDocumentText());
        command.setActive(this.getActive());
    }

    public DocumentCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractDocumentCommand.SimpleCreateDocument command = new AbstractDocumentCommand.SimpleCreateDocument();
            copyTo((AbstractDocumentCommand.AbstractCreateDocument) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractDocumentCommand.SimpleMergePatchDocument command = new AbstractDocumentCommand.SimpleMergePatchDocument();
            copyTo((AbstractDocumentCommand.SimpleMergePatchDocument) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public DocumentCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateDocumentDto command = new CreateDocumentDto();
            copyTo((CreateDocument) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchDocumentDto command = new MergePatchDocumentDto();
            copyTo((MergePatchDocument) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateDocument command)
    {
        copyTo((CreateOrMergePatchDocument) command);
    }

    public void copyTo(MergePatchDocument command)
    {
        copyTo((CreateOrMergePatchDocument) command);
        command.setIsPropertyDocumentTypeIdRemoved(this.getIsPropertyDocumentTypeIdRemoved());
        command.setIsPropertyCommentsRemoved(this.getIsPropertyCommentsRemoved());
        command.setIsPropertyDocumentLocationRemoved(this.getIsPropertyDocumentLocationRemoved());
        command.setIsPropertyDocumentTextRemoved(this.getIsPropertyDocumentTextRemoved());
        command.setIsPropertyActiveRemoved(this.getIsPropertyActiveRemoved());
    }

    public static class CreateDocumentDto extends CreateOrMergePatchDocumentDto implements DocumentCommand.CreateDocument
    {
        public CreateDocumentDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public DocumentCommand.CreateDocument toCreateDocument()
        {
            return (DocumentCommand.CreateDocument) toCommand();
        }

    }

    public static class MergePatchDocumentDto extends CreateOrMergePatchDocumentDto implements DocumentCommand.MergePatchDocument
    {
        public MergePatchDocumentDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public DocumentCommand.MergePatchDocument toMergePatchDocument()
        {
            return (DocumentCommand.MergePatchDocument) toCommand();
        }

    }

}

