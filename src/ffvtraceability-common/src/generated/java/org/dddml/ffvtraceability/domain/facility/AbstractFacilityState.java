// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facility;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.facility.FacilityEvent.*;

public abstract class AbstractFacilityState implements FacilityState.SqlFacilityState, Saveable {

    private String facilityId;

    public String getFacilityId() {
        return this.facilityId;
    }

    public void setFacilityId(String facilityId) {
        this.facilityId = facilityId;
    }

    private String facilityTypeId;

    public String getFacilityTypeId() {
        return this.facilityTypeId;
    }

    public void setFacilityTypeId(String facilityTypeId) {
        this.facilityTypeId = facilityTypeId;
    }

    private String parentFacilityId;

    public String getParentFacilityId() {
        return this.parentFacilityId;
    }

    public void setParentFacilityId(String parentFacilityId) {
        this.parentFacilityId = parentFacilityId;
    }

    private String ownerPartyId;

    public String getOwnerPartyId() {
        return this.ownerPartyId;
    }

    public void setOwnerPartyId(String ownerPartyId) {
        this.ownerPartyId = ownerPartyId;
    }

    private String defaultInventoryItemTypeId;

    public String getDefaultInventoryItemTypeId() {
        return this.defaultInventoryItemTypeId;
    }

    public void setDefaultInventoryItemTypeId(String defaultInventoryItemTypeId) {
        this.defaultInventoryItemTypeId = defaultInventoryItemTypeId;
    }

    private String facilityName;

    public String getFacilityName() {
        return this.facilityName;
    }

    public void setFacilityName(String facilityName) {
        this.facilityName = facilityName;
    }

    private String primaryFacilityGroupId;

    public String getPrimaryFacilityGroupId() {
        return this.primaryFacilityGroupId;
    }

    public void setPrimaryFacilityGroupId(String primaryFacilityGroupId) {
        this.primaryFacilityGroupId = primaryFacilityGroupId;
    }

    private Long oldSquareFootage;

    public Long getOldSquareFootage() {
        return this.oldSquareFootage;
    }

    public void setOldSquareFootage(Long oldSquareFootage) {
        this.oldSquareFootage = oldSquareFootage;
    }

    private java.math.BigDecimal facilitySize;

    public java.math.BigDecimal getFacilitySize() {
        return this.facilitySize;
    }

    public void setFacilitySize(java.math.BigDecimal facilitySize) {
        this.facilitySize = facilitySize;
    }

    private String facilitySizeUomId;

    public String getFacilitySizeUomId() {
        return this.facilitySizeUomId;
    }

    public void setFacilitySizeUomId(String facilitySizeUomId) {
        this.facilitySizeUomId = facilitySizeUomId;
    }

    private String productStoreId;

    public String getProductStoreId() {
        return this.productStoreId;
    }

    public void setProductStoreId(String productStoreId) {
        this.productStoreId = productStoreId;
    }

    private Long defaultDaysToShip;

    public Long getDefaultDaysToShip() {
        return this.defaultDaysToShip;
    }

    public void setDefaultDaysToShip(Long defaultDaysToShip) {
        this.defaultDaysToShip = defaultDaysToShip;
    }

    private OffsetDateTime openedDate;

    public OffsetDateTime getOpenedDate() {
        return this.openedDate;
    }

    public void setOpenedDate(OffsetDateTime openedDate) {
        this.openedDate = openedDate;
    }

    private OffsetDateTime closedDate;

    public OffsetDateTime getClosedDate() {
        return this.closedDate;
    }

    public void setClosedDate(OffsetDateTime closedDate) {
        this.closedDate = closedDate;
    }

    private String description;

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    private String defaultDimensionUomId;

    public String getDefaultDimensionUomId() {
        return this.defaultDimensionUomId;
    }

    public void setDefaultDimensionUomId(String defaultDimensionUomId) {
        this.defaultDimensionUomId = defaultDimensionUomId;
    }

    private String defaultWeightUomId;

    public String getDefaultWeightUomId() {
        return this.defaultWeightUomId;
    }

    public void setDefaultWeightUomId(String defaultWeightUomId) {
        this.defaultWeightUomId = defaultWeightUomId;
    }

    private String geoPointId;

    public String getGeoPointId() {
        return this.geoPointId;
    }

    public void setGeoPointId(String geoPointId) {
        this.geoPointId = geoPointId;
    }

    private String geoId;

    public String getGeoId() {
        return this.geoId;
    }

    public void setGeoId(String geoId) {
        this.geoId = geoId;
    }

    private Long facilityLevel;

    public Long getFacilityLevel() {
        return this.facilityLevel;
    }

    public void setFacilityLevel(Long facilityLevel) {
        this.facilityLevel = facilityLevel;
    }

    private String active;

    public String getActive() {
        return this.active;
    }

    public void setActive(String active) {
        this.active = active;
    }

    private Long sequenceNumber;

    public Long getSequenceNumber() {
        return this.sequenceNumber;
    }

    public void setSequenceNumber(Long sequenceNumber) {
        this.sequenceNumber = sequenceNumber;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Set<FacilityIdentificationState> protectedFacilityIdentifications = new HashSet<>();

    protected Set<FacilityIdentificationState> getProtectedFacilityIdentifications() {
        return this.protectedFacilityIdentifications;
    }

    protected void setProtectedFacilityIdentifications(Set<FacilityIdentificationState> protectedFacilityIdentifications) {
        this.protectedFacilityIdentifications = protectedFacilityIdentifications;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, FacilityIdentificationState> facilityIdentifications;

    public EntityStateCollection.MutableEntityStateCollection<String, FacilityIdentificationState> getFacilityIdentifications() {
        return this.facilityIdentifications;
    }

    public void setFacilityIdentifications(EntityStateCollection.MutableEntityStateCollection<String, FacilityIdentificationState> facilityIdentifications) {
        this.facilityIdentifications = facilityIdentifications;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractFacilityState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setFacilityId(((FacilityEvent.SqlFacilityEvent) events.get(0)).getFacilityEventId().getFacilityId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? FacilityState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractFacilityState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        facilityIdentifications = new SimpleFacilityIdentificationStateCollection();
    }

    @Override
    public int hashCode() {
        return getFacilityId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof FacilityState) {
            return Objects.equals(this.getFacilityId(), ((FacilityState)obj).getFacilityId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof FacilityStateCreated) {
            when((FacilityStateCreated) e);
        } else if (e instanceof FacilityStateMergePatched) {
            when((FacilityStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(FacilityStateCreated e) {
        throwOnWrongEvent(e);

        this.setFacilityTypeId(e.getFacilityTypeId());
        this.setParentFacilityId(e.getParentFacilityId());
        this.setOwnerPartyId(e.getOwnerPartyId());
        this.setDefaultInventoryItemTypeId(e.getDefaultInventoryItemTypeId());
        this.setFacilityName(e.getFacilityName());
        this.setPrimaryFacilityGroupId(e.getPrimaryFacilityGroupId());
        this.setOldSquareFootage(e.getOldSquareFootage());
        this.setFacilitySize(e.getFacilitySize());
        this.setFacilitySizeUomId(e.getFacilitySizeUomId());
        this.setProductStoreId(e.getProductStoreId());
        this.setDefaultDaysToShip(e.getDefaultDaysToShip());
        this.setOpenedDate(e.getOpenedDate());
        this.setClosedDate(e.getClosedDate());
        this.setDescription(e.getDescription());
        this.setDefaultDimensionUomId(e.getDefaultDimensionUomId());
        this.setDefaultWeightUomId(e.getDefaultWeightUomId());
        this.setGeoPointId(e.getGeoPointId());
        this.setGeoId(e.getGeoId());
        this.setFacilityLevel(e.getFacilityLevel());
        this.setActive(e.getActive());
        this.setSequenceNumber(e.getSequenceNumber());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

        for (FacilityIdentificationEvent.FacilityIdentificationStateCreated innerEvent : e.getFacilityIdentificationEvents()) {
            FacilityIdentificationState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, FacilityIdentificationState>)this.getFacilityIdentifications()).getOrAddDefault(((FacilityIdentificationEvent.SqlFacilityIdentificationEvent)innerEvent).getFacilityIdentificationEventId().getFacilityIdentificationTypeId());
            ((FacilityIdentificationState.SqlFacilityIdentificationState)innerState).mutate(innerEvent);
        }
    }

    public void merge(FacilityState s) {
        if (s == this) {
            return;
        }
        this.setFacilityTypeId(s.getFacilityTypeId());
        this.setParentFacilityId(s.getParentFacilityId());
        this.setOwnerPartyId(s.getOwnerPartyId());
        this.setDefaultInventoryItemTypeId(s.getDefaultInventoryItemTypeId());
        this.setFacilityName(s.getFacilityName());
        this.setPrimaryFacilityGroupId(s.getPrimaryFacilityGroupId());
        this.setOldSquareFootage(s.getOldSquareFootage());
        this.setFacilitySize(s.getFacilitySize());
        this.setFacilitySizeUomId(s.getFacilitySizeUomId());
        this.setProductStoreId(s.getProductStoreId());
        this.setDefaultDaysToShip(s.getDefaultDaysToShip());
        this.setOpenedDate(s.getOpenedDate());
        this.setClosedDate(s.getClosedDate());
        this.setDescription(s.getDescription());
        this.setDefaultDimensionUomId(s.getDefaultDimensionUomId());
        this.setDefaultWeightUomId(s.getDefaultWeightUomId());
        this.setGeoPointId(s.getGeoPointId());
        this.setGeoId(s.getGeoId());
        this.setFacilityLevel(s.getFacilityLevel());
        this.setActive(s.getActive());
        this.setSequenceNumber(s.getSequenceNumber());

        if (s.getFacilityIdentifications() != null) {
            Iterable<FacilityIdentificationState> iterable;
            if (s.getFacilityIdentifications().isLazy()) {
                iterable = s.getFacilityIdentifications().getLoadedStates();
            } else {
                iterable = s.getFacilityIdentifications();
            }
            if (iterable != null) {
                for (FacilityIdentificationState ss : iterable) {
                    FacilityIdentificationState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, FacilityIdentificationState>)this.getFacilityIdentifications()).getOrAddDefault(ss.getFacilityIdentificationTypeId());
                    ((AbstractFacilityIdentificationState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getFacilityIdentifications() != null) {
            if (s.getFacilityIdentifications() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getFacilityIdentifications()).getRemovedStates() != null) {
                    for (FacilityIdentificationState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, FacilityIdentificationState>)s.getFacilityIdentifications()).getRemovedStates()) {
                        FacilityIdentificationState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, FacilityIdentificationState>)this.getFacilityIdentifications()).getOrAddDefault(ss.getFacilityIdentificationTypeId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getFacilityIdentifications()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getFacilityIdentifications().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getFacilityIdentifications().stream().map(i -> i.getFacilityIdentificationTypeId()).collect(java.util.stream.Collectors.toList()));
                    s.getFacilityIdentifications().forEach(i -> removedStateIds.remove(i.getFacilityIdentificationTypeId()));
                    for (String i : removedStateIds) {
                        FacilityIdentificationState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, FacilityIdentificationState>)this.getFacilityIdentifications()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getFacilityIdentifications()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(FacilityStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getFacilityTypeId() == null) {
            if (e.getIsPropertyFacilityTypeIdRemoved() != null && e.getIsPropertyFacilityTypeIdRemoved()) {
                this.setFacilityTypeId(null);
            }
        } else {
            this.setFacilityTypeId(e.getFacilityTypeId());
        }
        if (e.getParentFacilityId() == null) {
            if (e.getIsPropertyParentFacilityIdRemoved() != null && e.getIsPropertyParentFacilityIdRemoved()) {
                this.setParentFacilityId(null);
            }
        } else {
            this.setParentFacilityId(e.getParentFacilityId());
        }
        if (e.getOwnerPartyId() == null) {
            if (e.getIsPropertyOwnerPartyIdRemoved() != null && e.getIsPropertyOwnerPartyIdRemoved()) {
                this.setOwnerPartyId(null);
            }
        } else {
            this.setOwnerPartyId(e.getOwnerPartyId());
        }
        if (e.getDefaultInventoryItemTypeId() == null) {
            if (e.getIsPropertyDefaultInventoryItemTypeIdRemoved() != null && e.getIsPropertyDefaultInventoryItemTypeIdRemoved()) {
                this.setDefaultInventoryItemTypeId(null);
            }
        } else {
            this.setDefaultInventoryItemTypeId(e.getDefaultInventoryItemTypeId());
        }
        if (e.getFacilityName() == null) {
            if (e.getIsPropertyFacilityNameRemoved() != null && e.getIsPropertyFacilityNameRemoved()) {
                this.setFacilityName(null);
            }
        } else {
            this.setFacilityName(e.getFacilityName());
        }
        if (e.getPrimaryFacilityGroupId() == null) {
            if (e.getIsPropertyPrimaryFacilityGroupIdRemoved() != null && e.getIsPropertyPrimaryFacilityGroupIdRemoved()) {
                this.setPrimaryFacilityGroupId(null);
            }
        } else {
            this.setPrimaryFacilityGroupId(e.getPrimaryFacilityGroupId());
        }
        if (e.getOldSquareFootage() == null) {
            if (e.getIsPropertyOldSquareFootageRemoved() != null && e.getIsPropertyOldSquareFootageRemoved()) {
                this.setOldSquareFootage(null);
            }
        } else {
            this.setOldSquareFootage(e.getOldSquareFootage());
        }
        if (e.getFacilitySize() == null) {
            if (e.getIsPropertyFacilitySizeRemoved() != null && e.getIsPropertyFacilitySizeRemoved()) {
                this.setFacilitySize(null);
            }
        } else {
            this.setFacilitySize(e.getFacilitySize());
        }
        if (e.getFacilitySizeUomId() == null) {
            if (e.getIsPropertyFacilitySizeUomIdRemoved() != null && e.getIsPropertyFacilitySizeUomIdRemoved()) {
                this.setFacilitySizeUomId(null);
            }
        } else {
            this.setFacilitySizeUomId(e.getFacilitySizeUomId());
        }
        if (e.getProductStoreId() == null) {
            if (e.getIsPropertyProductStoreIdRemoved() != null && e.getIsPropertyProductStoreIdRemoved()) {
                this.setProductStoreId(null);
            }
        } else {
            this.setProductStoreId(e.getProductStoreId());
        }
        if (e.getDefaultDaysToShip() == null) {
            if (e.getIsPropertyDefaultDaysToShipRemoved() != null && e.getIsPropertyDefaultDaysToShipRemoved()) {
                this.setDefaultDaysToShip(null);
            }
        } else {
            this.setDefaultDaysToShip(e.getDefaultDaysToShip());
        }
        if (e.getOpenedDate() == null) {
            if (e.getIsPropertyOpenedDateRemoved() != null && e.getIsPropertyOpenedDateRemoved()) {
                this.setOpenedDate(null);
            }
        } else {
            this.setOpenedDate(e.getOpenedDate());
        }
        if (e.getClosedDate() == null) {
            if (e.getIsPropertyClosedDateRemoved() != null && e.getIsPropertyClosedDateRemoved()) {
                this.setClosedDate(null);
            }
        } else {
            this.setClosedDate(e.getClosedDate());
        }
        if (e.getDescription() == null) {
            if (e.getIsPropertyDescriptionRemoved() != null && e.getIsPropertyDescriptionRemoved()) {
                this.setDescription(null);
            }
        } else {
            this.setDescription(e.getDescription());
        }
        if (e.getDefaultDimensionUomId() == null) {
            if (e.getIsPropertyDefaultDimensionUomIdRemoved() != null && e.getIsPropertyDefaultDimensionUomIdRemoved()) {
                this.setDefaultDimensionUomId(null);
            }
        } else {
            this.setDefaultDimensionUomId(e.getDefaultDimensionUomId());
        }
        if (e.getDefaultWeightUomId() == null) {
            if (e.getIsPropertyDefaultWeightUomIdRemoved() != null && e.getIsPropertyDefaultWeightUomIdRemoved()) {
                this.setDefaultWeightUomId(null);
            }
        } else {
            this.setDefaultWeightUomId(e.getDefaultWeightUomId());
        }
        if (e.getGeoPointId() == null) {
            if (e.getIsPropertyGeoPointIdRemoved() != null && e.getIsPropertyGeoPointIdRemoved()) {
                this.setGeoPointId(null);
            }
        } else {
            this.setGeoPointId(e.getGeoPointId());
        }
        if (e.getGeoId() == null) {
            if (e.getIsPropertyGeoIdRemoved() != null && e.getIsPropertyGeoIdRemoved()) {
                this.setGeoId(null);
            }
        } else {
            this.setGeoId(e.getGeoId());
        }
        if (e.getFacilityLevel() == null) {
            if (e.getIsPropertyFacilityLevelRemoved() != null && e.getIsPropertyFacilityLevelRemoved()) {
                this.setFacilityLevel(null);
            }
        } else {
            this.setFacilityLevel(e.getFacilityLevel());
        }
        if (e.getActive() == null) {
            if (e.getIsPropertyActiveRemoved() != null && e.getIsPropertyActiveRemoved()) {
                this.setActive(null);
            }
        } else {
            this.setActive(e.getActive());
        }
        if (e.getSequenceNumber() == null) {
            if (e.getIsPropertySequenceNumberRemoved() != null && e.getIsPropertySequenceNumberRemoved()) {
                this.setSequenceNumber(null);
            }
        } else {
            this.setSequenceNumber(e.getSequenceNumber());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (FacilityIdentificationEvent innerEvent : e.getFacilityIdentificationEvents()) {
            FacilityIdentificationState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, FacilityIdentificationState>)this.getFacilityIdentifications()).getOrAddDefault(((FacilityIdentificationEvent.SqlFacilityIdentificationEvent)innerEvent).getFacilityIdentificationEventId().getFacilityIdentificationTypeId());
            ((FacilityIdentificationState.SqlFacilityIdentificationState)innerState).mutate(innerEvent);
            if (innerEvent instanceof FacilityIdentificationEvent.FacilityIdentificationStateRemoved) {
                //FacilityIdentificationEvent.FacilityIdentificationStateRemoved removed = (FacilityIdentificationEvent.FacilityIdentificationStateRemoved)innerEvent;
                ((EntityStateCollection.MutableEntityStateCollection)this.getFacilityIdentifications()).removeState(innerState);
            }
        }
    }

    public void save() {
        if (facilityIdentifications instanceof Saveable) {
            ((Saveable)facilityIdentifications).save();
        }
    }

    protected void throwOnWrongEvent(FacilityEvent event) {
        String stateEntityId = this.getFacilityId(); // Aggregate Id
        String eventEntityId = ((FacilityEvent.SqlFacilityEvent)event).getFacilityEventId().getFacilityId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((FacilityEvent.SqlFacilityEvent)event).getFacilityEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getFacilityEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleFacilityState extends AbstractFacilityState {

        public SimpleFacilityState() {
        }

        public SimpleFacilityState(List<Event> events) {
            super(events);
        }

        public static SimpleFacilityState newForReapplying() {
            SimpleFacilityState s = new SimpleFacilityState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleFacilityIdentificationStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, FacilityIdentificationState>, Collection<FacilityIdentificationState> {

        @Override
        public FacilityIdentificationState get(String facilityIdentificationTypeId) {
            return protectedFacilityIdentifications.stream().filter(
                            e -> e.getFacilityIdentificationTypeId().equals(facilityIdentificationTypeId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<FacilityIdentificationState> getLoadedStates() {
            return protectedFacilityIdentifications;
        }

        @Override
        public FacilityIdentificationState getOrAddDefault(String facilityIdentificationTypeId) {
            FacilityIdentificationState s = get(facilityIdentificationTypeId);
            if (s == null) {
                FacilityIdentificationId globalId = new FacilityIdentificationId(getFacilityId(), facilityIdentificationTypeId);
                AbstractFacilityIdentificationState state = new AbstractFacilityIdentificationState.SimpleFacilityIdentificationState();
                state.setFacilityIdentificationId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedFacilityIdentifications.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedFacilityIdentifications.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedFacilityIdentifications.contains(o);
        }

        @Override
        public Iterator<FacilityIdentificationState> iterator() {
            return protectedFacilityIdentifications.iterator();
        }

        @Override
        public java.util.stream.Stream<FacilityIdentificationState> stream() {
            return protectedFacilityIdentifications.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedFacilityIdentifications.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedFacilityIdentifications.toArray(a);
        }

        @Override
        public boolean add(FacilityIdentificationState s) {
            if (s instanceof AbstractFacilityIdentificationState) {
                AbstractFacilityIdentificationState state = (AbstractFacilityIdentificationState) s;
                state.setProtectedFacilityState(AbstractFacilityState.this);
            }
            return protectedFacilityIdentifications.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractFacilityIdentificationState) {
                AbstractFacilityIdentificationState s = (AbstractFacilityIdentificationState) o;
                s.setProtectedFacilityState(null);
            }
            return protectedFacilityIdentifications.remove(o);
        }

        @Override
        public boolean removeState(FacilityIdentificationState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedFacilityIdentifications.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends FacilityIdentificationState> c) {
            return protectedFacilityIdentifications.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedFacilityIdentifications.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedFacilityIdentifications.retainAll(c);
        }

        @Override
        public void clear() {
            protectedFacilityIdentifications.clear();
        }
    }


}

