// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractPartyContactMechEvent extends AbstractEvent implements PartyContactMechEvent.SqlPartyContactMechEvent {
    private PartyContactMechEventId partyContactMechEventId = new PartyContactMechEventId();

    public PartyContactMechEventId getPartyContactMechEventId() {
        return this.partyContactMechEventId;
    }

    public void setPartyContactMechEventId(PartyContactMechEventId eventId) {
        this.partyContactMechEventId = eventId;
    }
    
    public OffsetDateTime getFromDate() {
        return getPartyContactMechEventId().getFromDate();
    }

    public void setFromDate(OffsetDateTime fromDate) {
        getPartyContactMechEventId().setFromDate(fromDate);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    protected AbstractPartyContactMechEvent() {
    }

    protected AbstractPartyContactMechEvent(PartyContactMechEventId eventId) {
        this.partyContactMechEventId = eventId;
    }

    protected PartyContactMechPurposeEventDao getPartyContactMechPurposeEventDao() {
        return (PartyContactMechPurposeEventDao)ApplicationContext.current.get("partyContactMechPurposeEventDao");
    }

    protected PartyContactMechPurposeEventId newPartyContactMechPurposeEventId(String contactMechPurposeTypeId)
    {
        PartyContactMechPurposeEventId eventId = new PartyContactMechPurposeEventId(this.getPartyContactMechEventId().getPartyContactMechBaseId(), this.getPartyContactMechEventId().getFromDate(), 
            contactMechPurposeTypeId, 
            this.getPartyContactMechEventId().getPartyContactMechBaseVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(PartyContactMechPurposeEvent.SqlPartyContactMechPurposeEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(PartyContactMechEvent.SqlPartyContactMechEvent oe, PartyContactMechPurposeEvent.SqlPartyContactMechPurposeEvent e)
    {
        if (!oe.getPartyContactMechEventId().getPartyContactMechBaseId().equals(e.getPartyContactMechPurposeEventId().getPartyContactMechBaseId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id PartyContactMechBaseId %1$s but inner id PartyContactMechBaseId %2$s", 
                oe.getPartyContactMechEventId().getPartyContactMechBaseId(), e.getPartyContactMechPurposeEventId().getPartyContactMechBaseId());
        }
        if (!oe.getPartyContactMechEventId().getFromDate().equals(e.getPartyContactMechPurposeEventId().getPartyContactMechFromDate()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id FromDate %1$s but inner id PartyContactMechFromDate %2$s", 
                oe.getPartyContactMechEventId().getFromDate(), e.getPartyContactMechPurposeEventId().getPartyContactMechFromDate());
        }
    }

    public PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated newPartyContactMechPurposeStateCreated(String contactMechPurposeTypeId) {
        return new AbstractPartyContactMechPurposeEvent.SimplePartyContactMechPurposeStateCreated(newPartyContactMechPurposeEventId(contactMechPurposeTypeId));
    }

    public PartyContactMechPurposeEvent.PartyContactMechPurposeStateMergePatched newPartyContactMechPurposeStateMergePatched(String contactMechPurposeTypeId) {
        return new AbstractPartyContactMechPurposeEvent.SimplePartyContactMechPurposeStateMergePatched(newPartyContactMechPurposeEventId(contactMechPurposeTypeId));
    }


    public abstract String getEventType();


    public static abstract class AbstractPartyContactMechStateEvent extends AbstractPartyContactMechEvent implements PartyContactMechEvent.PartyContactMechStateEvent {
        private Long version;

        public Long getVersion()
        {
            return this.version;
        }

        public void setVersion(Long version)
        {
            this.version = version;
        }

        private OffsetDateTime thruDate;

        public OffsetDateTime getThruDate()
        {
            return this.thruDate;
        }

        public void setThruDate(OffsetDateTime thruDate)
        {
            this.thruDate = thruDate;
        }

        private String roleTypeId;

        public String getRoleTypeId()
        {
            return this.roleTypeId;
        }

        public void setRoleTypeId(String roleTypeId)
        {
            this.roleTypeId = roleTypeId;
        }

        private String allowSolicitation;

        public String getAllowSolicitation()
        {
            return this.allowSolicitation;
        }

        public void setAllowSolicitation(String allowSolicitation)
        {
            this.allowSolicitation = allowSolicitation;
        }

        private String extension;

        public String getExtension()
        {
            return this.extension;
        }

        public void setExtension(String extension)
        {
            this.extension = extension;
        }

        private String verified;

        public String getVerified()
        {
            return this.verified;
        }

        public void setVerified(String verified)
        {
            this.verified = verified;
        }

        private String comments;

        public String getComments()
        {
            return this.comments;
        }

        public void setComments(String comments)
        {
            this.comments = comments;
        }

        private Long yearsWithContactMech;

        public Long getYearsWithContactMech()
        {
            return this.yearsWithContactMech;
        }

        public void setYearsWithContactMech(Long yearsWithContactMech)
        {
            this.yearsWithContactMech = yearsWithContactMech;
        }

        private Long monthsWithContactMech;

        public Long getMonthsWithContactMech()
        {
            return this.monthsWithContactMech;
        }

        public void setMonthsWithContactMech(Long monthsWithContactMech)
        {
            this.monthsWithContactMech = monthsWithContactMech;
        }

        protected AbstractPartyContactMechStateEvent(PartyContactMechEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractPartyContactMechStateCreated extends AbstractPartyContactMechStateEvent implements PartyContactMechEvent.PartyContactMechStateCreated, Saveable
    {
        public AbstractPartyContactMechStateCreated() {
            this(new PartyContactMechEventId());
        }

        public AbstractPartyContactMechStateCreated(PartyContactMechEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

        private Map<PartyContactMechPurposeEventId, PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated> partyContactMechPurposeEvents = new HashMap<PartyContactMechPurposeEventId, PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated>();
        
        private Iterable<PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated> readOnlyPartyContactMechPurposeEvents;

        public Iterable<PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated> getPartyContactMechPurposeEvents()
        {
            if (!getEventReadOnly())
            {
                return this.partyContactMechPurposeEvents.values();
            }
            else
            {
                if (readOnlyPartyContactMechPurposeEvents != null) { return readOnlyPartyContactMechPurposeEvents; }
                PartyContactMechPurposeEventDao eventDao = getPartyContactMechPurposeEventDao();
                List<PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated> eL = new ArrayList<PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated>();
                for (PartyContactMechPurposeEvent e : eventDao.findByPartyContactMechEventId(this.getPartyContactMechEventId()))
                {
                    ((PartyContactMechPurposeEvent.SqlPartyContactMechPurposeEvent)e).setEventReadOnly(true);
                    eL.add((PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated)e);
                }
                return (readOnlyPartyContactMechPurposeEvents = eL);
            }
        }

        public void setPartyContactMechPurposeEvents(Iterable<PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated> es)
        {
            if (es != null)
            {
                for (PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated e : es)
                {
                    addPartyContactMechPurposeEvent(e);
                }
            }
            else { this.partyContactMechPurposeEvents.clear(); }
        }
        
        public void addPartyContactMechPurposeEvent(PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated e)
        {
            throwOnInconsistentEventIds((PartyContactMechPurposeEvent.SqlPartyContactMechPurposeEvent)e);
            this.partyContactMechPurposeEvents.put(((PartyContactMechPurposeEvent.SqlPartyContactMechPurposeEvent)e).getPartyContactMechPurposeEventId(), e);
        }

        public void save()
        {
            for (PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated e : this.getPartyContactMechPurposeEvents()) {
                getPartyContactMechPurposeEventDao().save(e);
            }
        }
    }


    public static abstract class AbstractPartyContactMechStateMergePatched extends AbstractPartyContactMechStateEvent implements PartyContactMechEvent.PartyContactMechStateMergePatched, Saveable
    {
        public AbstractPartyContactMechStateMergePatched() {
            this(new PartyContactMechEventId());
        }

        public AbstractPartyContactMechStateMergePatched(PartyContactMechEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyThruDateRemoved;

        public Boolean getIsPropertyThruDateRemoved() {
            return this.isPropertyThruDateRemoved;
        }

        public void setIsPropertyThruDateRemoved(Boolean removed) {
            this.isPropertyThruDateRemoved = removed;
        }

        private Boolean isPropertyRoleTypeIdRemoved;

        public Boolean getIsPropertyRoleTypeIdRemoved() {
            return this.isPropertyRoleTypeIdRemoved;
        }

        public void setIsPropertyRoleTypeIdRemoved(Boolean removed) {
            this.isPropertyRoleTypeIdRemoved = removed;
        }

        private Boolean isPropertyAllowSolicitationRemoved;

        public Boolean getIsPropertyAllowSolicitationRemoved() {
            return this.isPropertyAllowSolicitationRemoved;
        }

        public void setIsPropertyAllowSolicitationRemoved(Boolean removed) {
            this.isPropertyAllowSolicitationRemoved = removed;
        }

        private Boolean isPropertyExtensionRemoved;

        public Boolean getIsPropertyExtensionRemoved() {
            return this.isPropertyExtensionRemoved;
        }

        public void setIsPropertyExtensionRemoved(Boolean removed) {
            this.isPropertyExtensionRemoved = removed;
        }

        private Boolean isPropertyVerifiedRemoved;

        public Boolean getIsPropertyVerifiedRemoved() {
            return this.isPropertyVerifiedRemoved;
        }

        public void setIsPropertyVerifiedRemoved(Boolean removed) {
            this.isPropertyVerifiedRemoved = removed;
        }

        private Boolean isPropertyCommentsRemoved;

        public Boolean getIsPropertyCommentsRemoved() {
            return this.isPropertyCommentsRemoved;
        }

        public void setIsPropertyCommentsRemoved(Boolean removed) {
            this.isPropertyCommentsRemoved = removed;
        }

        private Boolean isPropertyYearsWithContactMechRemoved;

        public Boolean getIsPropertyYearsWithContactMechRemoved() {
            return this.isPropertyYearsWithContactMechRemoved;
        }

        public void setIsPropertyYearsWithContactMechRemoved(Boolean removed) {
            this.isPropertyYearsWithContactMechRemoved = removed;
        }

        private Boolean isPropertyMonthsWithContactMechRemoved;

        public Boolean getIsPropertyMonthsWithContactMechRemoved() {
            return this.isPropertyMonthsWithContactMechRemoved;
        }

        public void setIsPropertyMonthsWithContactMechRemoved(Boolean removed) {
            this.isPropertyMonthsWithContactMechRemoved = removed;
        }


        private Map<PartyContactMechPurposeEventId, PartyContactMechPurposeEvent> partyContactMechPurposeEvents = new HashMap<PartyContactMechPurposeEventId, PartyContactMechPurposeEvent>();
        
        private Iterable<PartyContactMechPurposeEvent> readOnlyPartyContactMechPurposeEvents;

        public Iterable<PartyContactMechPurposeEvent> getPartyContactMechPurposeEvents()
        {
            if (!getEventReadOnly())
            {
                return this.partyContactMechPurposeEvents.values();
            }
            else
            {
                if (readOnlyPartyContactMechPurposeEvents != null) { return readOnlyPartyContactMechPurposeEvents; }
                PartyContactMechPurposeEventDao eventDao = getPartyContactMechPurposeEventDao();
                List<PartyContactMechPurposeEvent> eL = new ArrayList<PartyContactMechPurposeEvent>();
                for (PartyContactMechPurposeEvent e : eventDao.findByPartyContactMechEventId(this.getPartyContactMechEventId()))
                {
                    ((PartyContactMechPurposeEvent.SqlPartyContactMechPurposeEvent)e).setEventReadOnly(true);
                    eL.add((PartyContactMechPurposeEvent)e);
                }
                return (readOnlyPartyContactMechPurposeEvents = eL);
            }
        }

        public void setPartyContactMechPurposeEvents(Iterable<PartyContactMechPurposeEvent> es)
        {
            if (es != null)
            {
                for (PartyContactMechPurposeEvent e : es)
                {
                    addPartyContactMechPurposeEvent(e);
                }
            }
            else { this.partyContactMechPurposeEvents.clear(); }
        }
        
        public void addPartyContactMechPurposeEvent(PartyContactMechPurposeEvent e)
        {
            throwOnInconsistentEventIds((PartyContactMechPurposeEvent.SqlPartyContactMechPurposeEvent)e);
            this.partyContactMechPurposeEvents.put(((PartyContactMechPurposeEvent.SqlPartyContactMechPurposeEvent)e).getPartyContactMechPurposeEventId(), e);
        }

        public void save()
        {
            for (PartyContactMechPurposeEvent e : this.getPartyContactMechPurposeEvents()) {
                getPartyContactMechPurposeEventDao().save(e);
            }
        }
    }



    public static class SimplePartyContactMechStateCreated extends AbstractPartyContactMechStateCreated
    {
        public SimplePartyContactMechStateCreated() {
        }

        public SimplePartyContactMechStateCreated(PartyContactMechEventId eventId) {
            super(eventId);
        }
    }

    public static class SimplePartyContactMechStateMergePatched extends AbstractPartyContactMechStateMergePatched
    {
        public SimplePartyContactMechStateMergePatched() {
        }

        public SimplePartyContactMechStateMergePatched(PartyContactMechEventId eventId) {
            super(eventId);
        }
    }

}

