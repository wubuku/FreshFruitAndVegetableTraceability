// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facilitylocation;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface FacilityLocationCommand extends Command {

    FacilityLocationId getFacilityLocationId();

    void setFacilityLocationId(FacilityLocationId facilityLocationId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(FacilityLocationState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((FacilityLocationCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (isCreationCommand((FacilityLocationCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(FacilityLocationCommand c) {
        if ((c instanceof FacilityLocationCommand.CreateFacilityLocation) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(FacilityLocationState.VERSION_NULL)))
            return true;
        if ((c instanceof FacilityLocationCommand.MergePatchFacilityLocation))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(FacilityLocationState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchFacilityLocation extends FacilityLocationCommand
    {

        String getLocationTypeEnumId();

        void setLocationTypeEnumId(String locationTypeEnumId);

        String getAreaId();

        void setAreaId(String areaId);

        String getAisleId();

        void setAisleId(String aisleId);

        String getSectionId();

        void setSectionId(String sectionId);

        String getLevelId();

        void setLevelId(String levelId);

        String getPositionId();

        void setPositionId(String positionId);

        String getGeoPointId();

        void setGeoPointId(String geoPointId);

        String getActive();

        void setActive(String active);

    }

    interface CreateFacilityLocation extends CreateOrMergePatchFacilityLocation
    {
    }

    interface MergePatchFacilityLocation extends CreateOrMergePatchFacilityLocation
    {
        Boolean getIsPropertyLocationTypeEnumIdRemoved();

        void setIsPropertyLocationTypeEnumIdRemoved(Boolean removed);

        Boolean getIsPropertyAreaIdRemoved();

        void setIsPropertyAreaIdRemoved(Boolean removed);

        Boolean getIsPropertyAisleIdRemoved();

        void setIsPropertyAisleIdRemoved(Boolean removed);

        Boolean getIsPropertySectionIdRemoved();

        void setIsPropertySectionIdRemoved(Boolean removed);

        Boolean getIsPropertyLevelIdRemoved();

        void setIsPropertyLevelIdRemoved(Boolean removed);

        Boolean getIsPropertyPositionIdRemoved();

        void setIsPropertyPositionIdRemoved(Boolean removed);

        Boolean getIsPropertyGeoPointIdRemoved();

        void setIsPropertyGeoPointIdRemoved(Boolean removed);

        Boolean getIsPropertyActiveRemoved();

        void setIsPropertyActiveRemoved(Boolean removed);


    }

    interface DeleteFacilityLocation extends FacilityLocationCommand
    {
    }

}

