// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.documentnumbergenerator;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;


public class DocumentNumberGeneratorStateDto {

    private String generatorId;

    public String getGeneratorId()
    {
        return this.generatorId;
    }

    public void setGeneratorId(String generatorId)
    {
        this.generatorId = generatorId;
    }

    private String prefix;

    public String getPrefix()
    {
        return this.prefix;
    }

    public void setPrefix(String prefix)
    {
        this.prefix = prefix;
    }

    private String dateFormat;

    public String getDateFormat()
    {
        return this.dateFormat;
    }

    public void setDateFormat(String dateFormat)
    {
        this.dateFormat = dateFormat;
    }

    private String timeZoneId;

    public String getTimeZoneId()
    {
        return this.timeZoneId;
    }

    public void setTimeZoneId(String timeZoneId)
    {
        this.timeZoneId = timeZoneId;
    }

    private Long sequenceLength;

    public Long getSequenceLength()
    {
        return this.sequenceLength;
    }

    public void setSequenceLength(Long sequenceLength)
    {
        this.sequenceLength = sequenceLength;
    }

    private String lastGeneratedDate;

    public String getLastGeneratedDate()
    {
        return this.lastGeneratedDate;
    }

    public void setLastGeneratedDate(String lastGeneratedDate)
    {
        this.lastGeneratedDate = lastGeneratedDate;
    }

    private Long currentSequence;

    public Long getCurrentSequence()
    {
        return this.currentSequence;
    }

    public void setCurrentSequence(Long currentSequence)
    {
        this.currentSequence = currentSequence;
    }

    private String description;

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt)
    {
        this.updatedAt = updatedAt;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public DocumentNumberGeneratorStateDto[] toDocumentNumberGeneratorStateDtoArray(Iterable<DocumentNumberGeneratorState> states) {
            return toDocumentNumberGeneratorStateDtoList(states).toArray(new DocumentNumberGeneratorStateDto[0]);
        }

        public List<DocumentNumberGeneratorStateDto> toDocumentNumberGeneratorStateDtoList(Iterable<DocumentNumberGeneratorState> states) {
            ArrayList<DocumentNumberGeneratorStateDto> stateDtos = new ArrayList();
            for (DocumentNumberGeneratorState s : states) {
                DocumentNumberGeneratorStateDto dto = toDocumentNumberGeneratorStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public DocumentNumberGeneratorStateDto toDocumentNumberGeneratorStateDto(DocumentNumberGeneratorState state)
        {
            if(state == null) {
                return null;
            }
            DocumentNumberGeneratorStateDto dto = new DocumentNumberGeneratorStateDto();
            if (returnedFieldsContains("GeneratorId")) {
                dto.setGeneratorId(state.getGeneratorId());
            }
            if (returnedFieldsContains("Prefix")) {
                dto.setPrefix(state.getPrefix());
            }
            if (returnedFieldsContains("DateFormat")) {
                dto.setDateFormat(state.getDateFormat());
            }
            if (returnedFieldsContains("TimeZoneId")) {
                dto.setTimeZoneId(state.getTimeZoneId());
            }
            if (returnedFieldsContains("SequenceLength")) {
                dto.setSequenceLength(state.getSequenceLength());
            }
            if (returnedFieldsContains("LastGeneratedDate")) {
                dto.setLastGeneratedDate(state.getLastGeneratedDate());
            }
            if (returnedFieldsContains("CurrentSequence")) {
                dto.setCurrentSequence(state.getCurrentSequence());
            }
            if (returnedFieldsContains("Description")) {
                dto.setDescription(state.getDescription());
            }
            if (returnedFieldsContains("Version")) {
                dto.setVersion(state.getVersion());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            return dto;
        }

    }
}

