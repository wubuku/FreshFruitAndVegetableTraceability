// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.workeffortinventoryproduced;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractWorkEffortInventoryProducedEvent extends AbstractEvent implements WorkEffortInventoryProducedEvent.SqlWorkEffortInventoryProducedEvent {
    private WorkEffortInventoryProducedState.MutableWorkEffortInventoryProducedState state;

    public WorkEffortInventoryProducedState.MutableWorkEffortInventoryProducedState getWorkEffortInventoryProducedState() {
        return state;
    }

    public WorkEffortInventoryProducedEventId getWorkEffortInventoryProducedEventId() {
        WorkEffortInventoryProducedEventId eventId = new WorkEffortInventoryProducedEventId(state.getWorkEffortInventoryProducedId(), WorkEffortInventoryProducedState.VERSION_NULL);
        return eventId;
    }

    public void setWorkEffortInventoryProducedEventId(WorkEffortInventoryProducedEventId eventId) {
        this.state.setWorkEffortInventoryProducedId(eventId.getWorkEffortInventoryProducedId());
    }

    public WorkEffortInventoryProducedId getWorkEffortInventoryProducedId() {
        return getWorkEffortInventoryProducedEventId().getWorkEffortInventoryProducedId();
    }

    public void setWorkEffortInventoryProducedId(WorkEffortInventoryProducedId workEffortInventoryProducedId) {
        getWorkEffortInventoryProducedEventId().setWorkEffortInventoryProducedId(workEffortInventoryProducedId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getWorkEffortInventoryProducedEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getWorkEffortInventoryProducedEventId().setVersion(version);
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public String getCreatedBy() {
        return this.state.getCreatedBy();
    }

    public void setCreatedBy(String createdBy) {
        this.state.setCreatedBy(createdBy);
    }

    public OffsetDateTime getCreatedAt() {
        return this.state.getCreatedAt();
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.state.setCreatedAt(createdAt);
    }


    public String getCommandId() {
        return this.state.getCommandId();
    }

    public void setCommandId(String commandId) {
        this.state.setCommandId(commandId);
    }

    protected AbstractWorkEffortInventoryProducedEvent() {
        this(new AbstractWorkEffortInventoryProducedState.SimpleWorkEffortInventoryProducedState());
    }

    protected AbstractWorkEffortInventoryProducedEvent(WorkEffortInventoryProducedEventId eventId) {
        this(new AbstractWorkEffortInventoryProducedState.SimpleWorkEffortInventoryProducedState());
        setWorkEffortInventoryProducedEventId(eventId);
    }

    protected AbstractWorkEffortInventoryProducedEvent(WorkEffortInventoryProducedState s) {
        if (s == null) { throw new IllegalArgumentException(); }
        this.state = (WorkEffortInventoryProducedState.MutableWorkEffortInventoryProducedState)s;
    }


    public abstract String getEventType();

    public static class WorkEffortInventoryProducedLobEvent extends AbstractWorkEffortInventoryProducedEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventType() {
            return "WorkEffortInventoryProducedLobEvent";
        }

    }


    public static abstract class AbstractWorkEffortInventoryProducedStateEvent extends AbstractWorkEffortInventoryProducedEvent implements WorkEffortInventoryProducedEvent.WorkEffortInventoryProducedStateEvent {
        protected AbstractWorkEffortInventoryProducedStateEvent(WorkEffortInventoryProducedEventId eventId) {
            super(eventId);
        }

        public AbstractWorkEffortInventoryProducedStateEvent(WorkEffortInventoryProducedState s) {
            super(s);
        }
    }

    public static abstract class AbstractWorkEffortInventoryProducedStateCreated extends AbstractWorkEffortInventoryProducedStateEvent implements WorkEffortInventoryProducedEvent.WorkEffortInventoryProducedStateCreated
    {
        public AbstractWorkEffortInventoryProducedStateCreated() {
            this(new WorkEffortInventoryProducedEventId());
        }

        public AbstractWorkEffortInventoryProducedStateCreated(WorkEffortInventoryProducedEventId eventId) {
            super(eventId);
        }

        public AbstractWorkEffortInventoryProducedStateCreated(WorkEffortInventoryProducedState s) {
            super(s);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

    }



    public static class SimpleWorkEffortInventoryProducedStateCreated extends AbstractWorkEffortInventoryProducedStateCreated
    {
        public SimpleWorkEffortInventoryProducedStateCreated() {
        }

        public SimpleWorkEffortInventoryProducedStateCreated(WorkEffortInventoryProducedEventId eventId) {
            super(eventId);
        }

        public SimpleWorkEffortInventoryProducedStateCreated(WorkEffortInventoryProducedState s) {
            super(s);
        }
    }

}

