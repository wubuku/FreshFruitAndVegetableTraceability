// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attributeset;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.attributeset.AttributeSetEvent.*;

public abstract class AbstractAttributeSetState implements AttributeSetState.SqlAttributeSetState, Saveable {

    private String attributeSetId;

    public String getAttributeSetId() {
        return this.attributeSetId;
    }

    public void setAttributeSetId(String attributeSetId) {
        this.attributeSetId = attributeSetId;
    }

    private String attributeSetName;

    public String getAttributeSetName() {
        return this.attributeSetName;
    }

    public void setAttributeSetName(String attributeSetName) {
        this.attributeSetName = attributeSetName;
    }

    private String description;

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Set<AttributeUseState> protectedAttributeUses = new HashSet<>();

    protected Set<AttributeUseState> getProtectedAttributeUses() {
        return this.protectedAttributeUses;
    }

    protected void setProtectedAttributeUses(Set<AttributeUseState> protectedAttributeUses) {
        this.protectedAttributeUses = protectedAttributeUses;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, AttributeUseState> attributeUses;

    public EntityStateCollection.MutableEntityStateCollection<String, AttributeUseState> getAttributeUses() {
        return this.attributeUses;
    }

    public void setAttributeUses(EntityStateCollection.MutableEntityStateCollection<String, AttributeUseState> attributeUses) {
        this.attributeUses = attributeUses;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractAttributeSetState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setAttributeSetId(((AttributeSetEvent.SqlAttributeSetEvent) events.get(0)).getAttributeSetEventId().getAttributeSetId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? AttributeSetState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractAttributeSetState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        attributeUses = new SimpleAttributeUseStateCollection();
    }

    @Override
    public int hashCode() {
        return getAttributeSetId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof AttributeSetState) {
            return Objects.equals(this.getAttributeSetId(), ((AttributeSetState)obj).getAttributeSetId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof AttributeSetStateCreated) {
            when((AttributeSetStateCreated) e);
        } else if (e instanceof AttributeSetStateMergePatched) {
            when((AttributeSetStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(AttributeSetStateCreated e) {
        throwOnWrongEvent(e);

        this.setAttributeSetName(e.getAttributeSetName());
        this.setDescription(e.getDescription());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

        for (AttributeUseEvent.AttributeUseStateCreated innerEvent : e.getAttributeUseEvents()) {
            AttributeUseState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, AttributeUseState>)this.getAttributeUses()).getOrAddDefault(((AttributeUseEvent.SqlAttributeUseEvent)innerEvent).getAttributeUseEventId().getAttributeId());
            ((AttributeUseState.SqlAttributeUseState)innerState).mutate(innerEvent);
        }
    }

    public void merge(AttributeSetState s) {
        if (s == this) {
            return;
        }
        this.setAttributeSetName(s.getAttributeSetName());
        this.setDescription(s.getDescription());

        if (s.getAttributeUses() != null) {
            Iterable<AttributeUseState> iterable;
            if (s.getAttributeUses().isLazy()) {
                iterable = s.getAttributeUses().getLoadedStates();
            } else {
                iterable = s.getAttributeUses();
            }
            if (iterable != null) {
                for (AttributeUseState ss : iterable) {
                    AttributeUseState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, AttributeUseState>)this.getAttributeUses()).getOrAddDefault(ss.getAttributeId());
                    ((AbstractAttributeUseState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getAttributeUses() != null) {
            if (s.getAttributeUses() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getAttributeUses()).getRemovedStates() != null) {
                    for (AttributeUseState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, AttributeUseState>)s.getAttributeUses()).getRemovedStates()) {
                        AttributeUseState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, AttributeUseState>)this.getAttributeUses()).getOrAddDefault(ss.getAttributeId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getAttributeUses()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getAttributeUses().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getAttributeUses().stream().map(i -> i.getAttributeId()).collect(java.util.stream.Collectors.toList()));
                    s.getAttributeUses().forEach(i -> removedStateIds.remove(i.getAttributeId()));
                    for (String i : removedStateIds) {
                        AttributeUseState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, AttributeUseState>)this.getAttributeUses()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getAttributeUses()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(AttributeSetStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getAttributeSetName() == null) {
            if (e.getIsPropertyAttributeSetNameRemoved() != null && e.getIsPropertyAttributeSetNameRemoved()) {
                this.setAttributeSetName(null);
            }
        } else {
            this.setAttributeSetName(e.getAttributeSetName());
        }
        if (e.getDescription() == null) {
            if (e.getIsPropertyDescriptionRemoved() != null && e.getIsPropertyDescriptionRemoved()) {
                this.setDescription(null);
            }
        } else {
            this.setDescription(e.getDescription());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (AttributeUseEvent innerEvent : e.getAttributeUseEvents()) {
            AttributeUseState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, AttributeUseState>)this.getAttributeUses()).getOrAddDefault(((AttributeUseEvent.SqlAttributeUseEvent)innerEvent).getAttributeUseEventId().getAttributeId());
            ((AttributeUseState.SqlAttributeUseState)innerState).mutate(innerEvent);
        }
    }

    public void save() {
        if (attributeUses instanceof Saveable) {
            ((Saveable)attributeUses).save();
        }
    }

    protected void throwOnWrongEvent(AttributeSetEvent event) {
        String stateEntityId = this.getAttributeSetId(); // Aggregate Id
        String eventEntityId = ((AttributeSetEvent.SqlAttributeSetEvent)event).getAttributeSetEventId().getAttributeSetId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((AttributeSetEvent.SqlAttributeSetEvent)event).getAttributeSetEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getAttributeSetEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleAttributeSetState extends AbstractAttributeSetState {

        public SimpleAttributeSetState() {
        }

        public SimpleAttributeSetState(List<Event> events) {
            super(events);
        }

        public static SimpleAttributeSetState newForReapplying() {
            SimpleAttributeSetState s = new SimpleAttributeSetState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleAttributeUseStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, AttributeUseState>, Collection<AttributeUseState> {

        @Override
        public AttributeUseState get(String attributeId) {
            return protectedAttributeUses.stream().filter(
                            e -> e.getAttributeId().equals(attributeId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<AttributeUseState> getLoadedStates() {
            return protectedAttributeUses;
        }

        @Override
        public AttributeUseState getOrAddDefault(String attributeId) {
            AttributeUseState s = get(attributeId);
            if (s == null) {
                AttributeSetAttributeUseId globalId = new AttributeSetAttributeUseId(getAttributeSetId(), attributeId);
                AbstractAttributeUseState state = new AbstractAttributeUseState.SimpleAttributeUseState();
                state.setAttributeSetAttributeUseId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedAttributeUses.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedAttributeUses.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedAttributeUses.contains(o);
        }

        @Override
        public Iterator<AttributeUseState> iterator() {
            return protectedAttributeUses.iterator();
        }

        @Override
        public java.util.stream.Stream<AttributeUseState> stream() {
            return protectedAttributeUses.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedAttributeUses.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedAttributeUses.toArray(a);
        }

        @Override
        public boolean add(AttributeUseState s) {
            if (s instanceof AbstractAttributeUseState) {
                AbstractAttributeUseState state = (AbstractAttributeUseState) s;
                state.setProtectedAttributeSetState(AbstractAttributeSetState.this);
            }
            return protectedAttributeUses.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractAttributeUseState) {
                AbstractAttributeUseState s = (AbstractAttributeUseState) o;
                s.setProtectedAttributeSetState(null);
            }
            return protectedAttributeUses.remove(o);
        }

        @Override
        public boolean removeState(AttributeUseState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedAttributeUses.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends AttributeUseState> c) {
            return protectedAttributeUses.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedAttributeUses.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedAttributeUses.retainAll(c);
        }

        @Override
        public void clear() {
            protectedAttributeUses.clear();
        }
    }


}

