// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.productassoc;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface ProductAssocCommand extends Command {

    ProductAssocId getProductAssocId();

    void setProductAssocId(ProductAssocId productAssocId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(ProductAssocState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((ProductAssocCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (isCreationCommand((ProductAssocCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(ProductAssocCommand c) {
        if ((c instanceof ProductAssocCommand.CreateProductAssoc) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(ProductAssocState.VERSION_NULL)))
            return true;
        if ((c instanceof ProductAssocCommand.MergePatchProductAssoc))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(ProductAssocState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchProductAssoc extends ProductAssocCommand {
        OffsetDateTime getThruDate();

        void setThruDate(OffsetDateTime thruDate);

        Long getSequenceNum();

        void setSequenceNum(Long sequenceNum);

        String getReason();

        void setReason(String reason);

        java.math.BigDecimal getQuantity();

        void setQuantity(java.math.BigDecimal quantity);

        java.math.BigDecimal getScrapFactor();

        void setScrapFactor(java.math.BigDecimal scrapFactor);

        String getInstruction();

        void setInstruction(String instruction);

        String getRoutingWorkEffortId();

        void setRoutingWorkEffortId(String routingWorkEffortId);

        String getEstimateCalcMethod();

        void setEstimateCalcMethod(String estimateCalcMethod);

        String getRecurrenceInfoId();

        void setRecurrenceInfoId(String recurrenceInfoId);

    }

    interface CreateProductAssoc extends CreateOrMergePatchProductAssoc {
    }

    interface MergePatchProductAssoc extends CreateOrMergePatchProductAssoc {
        Boolean getIsPropertyThruDateRemoved();

        void setIsPropertyThruDateRemoved(Boolean removed);

        Boolean getIsPropertySequenceNumRemoved();

        void setIsPropertySequenceNumRemoved(Boolean removed);

        Boolean getIsPropertyReasonRemoved();

        void setIsPropertyReasonRemoved(Boolean removed);

        Boolean getIsPropertyQuantityRemoved();

        void setIsPropertyQuantityRemoved(Boolean removed);

        Boolean getIsPropertyScrapFactorRemoved();

        void setIsPropertyScrapFactorRemoved(Boolean removed);

        Boolean getIsPropertyInstructionRemoved();

        void setIsPropertyInstructionRemoved(Boolean removed);

        Boolean getIsPropertyRoutingWorkEffortIdRemoved();

        void setIsPropertyRoutingWorkEffortIdRemoved(Boolean removed);

        Boolean getIsPropertyEstimateCalcMethodRemoved();

        void setIsPropertyEstimateCalcMethodRemoved(Boolean removed);

        Boolean getIsPropertyRecurrenceInfoIdRemoved();

        void setIsPropertyRecurrenceInfoIdRemoved(Boolean removed);


    }

    interface DeleteProductAssoc extends ProductAssocCommand {
    }

}

