// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipmenttype;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchShipmentTypeDto extends AbstractShipmentTypeCommandDto implements ShipmentTypeCommand.CreateOrMergePatchShipmentType {

    /**
     * Parent Type Id
     */
    private String parentTypeId;

    public String getParentTypeId()
    {
        return this.parentTypeId;
    }

    public void setParentTypeId(String parentTypeId)
    {
        this.parentTypeId = parentTypeId;
    }

    /**
     * Has Table
     */
    private String hasTable;

    public String getHasTable()
    {
        return this.hasTable;
    }

    public void setHasTable(String hasTable)
    {
        this.hasTable = hasTable;
    }

    /**
     * Description
     */
    private String description;

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }


    private Boolean isPropertyParentTypeIdRemoved;

    public Boolean getIsPropertyParentTypeIdRemoved()
    {
        return this.isPropertyParentTypeIdRemoved;
    }

    public void setIsPropertyParentTypeIdRemoved(Boolean removed)
    {
        this.isPropertyParentTypeIdRemoved = removed;
    }

    private Boolean isPropertyHasTableRemoved;

    public Boolean getIsPropertyHasTableRemoved()
    {
        return this.isPropertyHasTableRemoved;
    }

    public void setIsPropertyHasTableRemoved(Boolean removed)
    {
        this.isPropertyHasTableRemoved = removed;
    }

    private Boolean isPropertyDescriptionRemoved;

    public Boolean getIsPropertyDescriptionRemoved()
    {
        return this.isPropertyDescriptionRemoved;
    }

    public void setIsPropertyDescriptionRemoved(Boolean removed)
    {
        this.isPropertyDescriptionRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchShipmentType command)
    {
        ((AbstractShipmentTypeCommandDto) this).copyTo(command);
        command.setParentTypeId(this.getParentTypeId());
        command.setHasTable(this.getHasTable());
        command.setDescription(this.getDescription());
    }

    public ShipmentTypeCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractShipmentTypeCommand.SimpleCreateShipmentType command = new AbstractShipmentTypeCommand.SimpleCreateShipmentType();
            copyTo((AbstractShipmentTypeCommand.AbstractCreateShipmentType) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractShipmentTypeCommand.SimpleMergePatchShipmentType command = new AbstractShipmentTypeCommand.SimpleMergePatchShipmentType();
            copyTo((AbstractShipmentTypeCommand.SimpleMergePatchShipmentType) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public ShipmentTypeCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateShipmentTypeDto command = new CreateShipmentTypeDto();
            copyTo((CreateShipmentType) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchShipmentTypeDto command = new MergePatchShipmentTypeDto();
            copyTo((MergePatchShipmentType) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateShipmentType command)
    {
        copyTo((CreateOrMergePatchShipmentType) command);
    }

    public void copyTo(MergePatchShipmentType command)
    {
        copyTo((CreateOrMergePatchShipmentType) command);
        command.setIsPropertyParentTypeIdRemoved(this.getIsPropertyParentTypeIdRemoved());
        command.setIsPropertyHasTableRemoved(this.getIsPropertyHasTableRemoved());
        command.setIsPropertyDescriptionRemoved(this.getIsPropertyDescriptionRemoved());
    }

    public static class CreateShipmentTypeDto extends CreateOrMergePatchShipmentTypeDto implements ShipmentTypeCommand.CreateShipmentType
    {
        public CreateShipmentTypeDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public ShipmentTypeCommand.CreateShipmentType toCreateShipmentType()
        {
            return (ShipmentTypeCommand.CreateShipmentType) toCommand();
        }

    }

    public static class MergePatchShipmentTypeDto extends CreateOrMergePatchShipmentTypeDto implements ShipmentTypeCommand.MergePatchShipmentType
    {
        public MergePatchShipmentTypeDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public ShipmentTypeCommand.MergePatchShipmentType toMergePatchShipmentType()
        {
            return (ShipmentTypeCommand.MergePatchShipmentType) toCommand();
        }

    }

}

