// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.documentassociation;

import java.util.*;
import org.dddml.ffvtraceability.domain.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractDocumentAssociationAggregate extends AbstractAggregate implements DocumentAssociationAggregate {
    private DocumentAssociationState.MutableDocumentAssociationState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractDocumentAssociationAggregate(DocumentAssociationState state) {
        this.state = (DocumentAssociationState.MutableDocumentAssociationState)state;
    }

    public DocumentAssociationState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(DocumentAssociationCommand.CreateDocumentAssociation c) {
        if (c.getVersion() == null) { c.setVersion(DocumentAssociationState.VERSION_NULL); }
        DocumentAssociationEvent e = map(c);
        apply(e);
    }

    public void mergePatch(DocumentAssociationCommand.MergePatchDocumentAssociation c) {
        DocumentAssociationEvent e = map(c);
        apply(e);
    }

    public void delete(DocumentAssociationCommand.DeleteDocumentAssociation c) {
        DocumentAssociationEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        DocumentAssociationCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected DocumentAssociationEvent map(DocumentAssociationCommand.CreateDocumentAssociation c) {
        DocumentAssociationEventId stateEventId = new DocumentAssociationEventId(c.getDocumentAssociationId(), c.getVersion());
        DocumentAssociationEvent.DocumentAssociationStateCreated e = newDocumentAssociationStateCreated(stateEventId);
        e.setThruDate(c.getThruDate());
        ((AbstractDocumentAssociationEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DocumentAssociationEvent map(DocumentAssociationCommand.MergePatchDocumentAssociation c) {
        DocumentAssociationEventId stateEventId = new DocumentAssociationEventId(c.getDocumentAssociationId(), c.getVersion());
        DocumentAssociationEvent.DocumentAssociationStateMergePatched e = newDocumentAssociationStateMergePatched(stateEventId);
        e.setThruDate(c.getThruDate());
        e.setIsPropertyThruDateRemoved(c.getIsPropertyThruDateRemoved());
        ((AbstractDocumentAssociationEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DocumentAssociationEvent map(DocumentAssociationCommand.DeleteDocumentAssociation c) {
        DocumentAssociationEventId stateEventId = new DocumentAssociationEventId(c.getDocumentAssociationId(), c.getVersion());
        DocumentAssociationEvent.DocumentAssociationStateDeleted e = newDocumentAssociationStateDeleted(stateEventId);
        ((AbstractDocumentAssociationEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected DocumentAssociationEvent.DocumentAssociationStateCreated newDocumentAssociationStateCreated(Long version, String commandId, String requesterId) {
        DocumentAssociationEventId stateEventId = new DocumentAssociationEventId(this.state.getDocumentAssociationId(), version);
        DocumentAssociationEvent.DocumentAssociationStateCreated e = newDocumentAssociationStateCreated(stateEventId);
        ((AbstractDocumentAssociationEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DocumentAssociationEvent.DocumentAssociationStateMergePatched newDocumentAssociationStateMergePatched(Long version, String commandId, String requesterId) {
        DocumentAssociationEventId stateEventId = new DocumentAssociationEventId(this.state.getDocumentAssociationId(), version);
        DocumentAssociationEvent.DocumentAssociationStateMergePatched e = newDocumentAssociationStateMergePatched(stateEventId);
        ((AbstractDocumentAssociationEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DocumentAssociationEvent.DocumentAssociationStateDeleted newDocumentAssociationStateDeleted(Long version, String commandId, String requesterId) {
        DocumentAssociationEventId stateEventId = new DocumentAssociationEventId(this.state.getDocumentAssociationId(), version);
        DocumentAssociationEvent.DocumentAssociationStateDeleted e = newDocumentAssociationStateDeleted(stateEventId);
        ((AbstractDocumentAssociationEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DocumentAssociationEvent.DocumentAssociationStateCreated newDocumentAssociationStateCreated(DocumentAssociationEventId stateEventId) {
        return new AbstractDocumentAssociationEvent.SimpleDocumentAssociationStateCreated(stateEventId);
    }

    protected DocumentAssociationEvent.DocumentAssociationStateMergePatched newDocumentAssociationStateMergePatched(DocumentAssociationEventId stateEventId) {
        return new AbstractDocumentAssociationEvent.SimpleDocumentAssociationStateMergePatched(stateEventId);
    }

    protected DocumentAssociationEvent.DocumentAssociationStateDeleted newDocumentAssociationStateDeleted(DocumentAssociationEventId stateEventId) {
        return new AbstractDocumentAssociationEvent.SimpleDocumentAssociationStateDeleted(stateEventId);
    }


    public static class SimpleDocumentAssociationAggregate extends AbstractDocumentAssociationAggregate {
        public SimpleDocumentAssociationAggregate(DocumentAssociationState state) {
            super(state);
        }

    }

}

