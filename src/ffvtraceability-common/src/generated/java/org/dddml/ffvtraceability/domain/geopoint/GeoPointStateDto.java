// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.geopoint;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;


public class GeoPointStateDto {

    private String geoPointId;

    public String getGeoPointId()
    {
        return this.geoPointId;
    }

    public void setGeoPointId(String geoPointId)
    {
        this.geoPointId = geoPointId;
    }

    private String geoPointTypeEnumId;

    public String getGeoPointTypeEnumId()
    {
        return this.geoPointTypeEnumId;
    }

    public void setGeoPointTypeEnumId(String geoPointTypeEnumId)
    {
        this.geoPointTypeEnumId = geoPointTypeEnumId;
    }

    private String description;

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }

    private java.math.BigDecimal latitude;

    public java.math.BigDecimal getLatitude()
    {
        return this.latitude;
    }

    public void setLatitude(java.math.BigDecimal latitude)
    {
        this.latitude = latitude;
    }

    private java.math.BigDecimal longitude;

    public java.math.BigDecimal getLongitude()
    {
        return this.longitude;
    }

    public void setLongitude(java.math.BigDecimal longitude)
    {
        this.longitude = longitude;
    }

    private java.math.BigDecimal elevation;

    public java.math.BigDecimal getElevation()
    {
        return this.elevation;
    }

    public void setElevation(java.math.BigDecimal elevation)
    {
        this.elevation = elevation;
    }

    private String elevationUomId;

    public String getElevationUomId()
    {
        return this.elevationUomId;
    }

    public void setElevationUomId(String elevationUomId)
    {
        this.elevationUomId = elevationUomId;
    }

    private String information;

    public String getInformation()
    {
        return this.information;
    }

    public void setInformation(String information)
    {
        this.information = information;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt)
    {
        this.updatedAt = updatedAt;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public GeoPointStateDto[] toGeoPointStateDtoArray(Iterable<GeoPointState> states) {
            return toGeoPointStateDtoList(states).toArray(new GeoPointStateDto[0]);
        }

        public List<GeoPointStateDto> toGeoPointStateDtoList(Iterable<GeoPointState> states) {
            ArrayList<GeoPointStateDto> stateDtos = new ArrayList();
            for (GeoPointState s : states) {
                GeoPointStateDto dto = toGeoPointStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public GeoPointStateDto toGeoPointStateDto(GeoPointState state)
        {
            if(state == null) {
                return null;
            }
            GeoPointStateDto dto = new GeoPointStateDto();
            if (returnedFieldsContains("GeoPointId")) {
                dto.setGeoPointId(state.getGeoPointId());
            }
            if (returnedFieldsContains("GeoPointTypeEnumId")) {
                dto.setGeoPointTypeEnumId(state.getGeoPointTypeEnumId());
            }
            if (returnedFieldsContains("Description")) {
                dto.setDescription(state.getDescription());
            }
            if (returnedFieldsContains("Latitude")) {
                dto.setLatitude(state.getLatitude());
            }
            if (returnedFieldsContains("Longitude")) {
                dto.setLongitude(state.getLongitude());
            }
            if (returnedFieldsContains("Elevation")) {
                dto.setElevation(state.getElevation());
            }
            if (returnedFieldsContains("ElevationUomId")) {
                dto.setElevationUomId(state.getElevationUomId());
            }
            if (returnedFieldsContains("Information")) {
                dto.setInformation(state.getInformation());
            }
            if (returnedFieldsContains("Version")) {
                dto.setVersion(state.getVersion());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            return dto;
        }

    }
}

