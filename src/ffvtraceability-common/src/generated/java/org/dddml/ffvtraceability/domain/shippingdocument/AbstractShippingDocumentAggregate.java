// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shippingdocument;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractShippingDocumentAggregate extends AbstractAggregate implements ShippingDocumentAggregate {
    private ShippingDocumentState.MutableShippingDocumentState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractShippingDocumentAggregate(ShippingDocumentState state) {
        this.state = (ShippingDocumentState.MutableShippingDocumentState)state;
    }

    public ShippingDocumentState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(ShippingDocumentCommand.CreateShippingDocument c) {
        if (c.getVersion() == null) { c.setVersion(ShippingDocumentState.VERSION_NULL); }
        ShippingDocumentEvent e = map(c);
        apply(e);
    }

    public void mergePatch(ShippingDocumentCommand.MergePatchShippingDocument c) {
        ShippingDocumentEvent e = map(c);
        apply(e);
    }

    public void delete(ShippingDocumentCommand.DeleteShippingDocument c) {
        ShippingDocumentEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        ShippingDocumentCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof ShippingDocumentEvent) {
            ShippingDocumentEvent ee = (ShippingDocumentEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected ShippingDocumentEvent map(ShippingDocumentCommand.CreateShippingDocument c) {
        ShippingDocumentEventId stateEventId = new ShippingDocumentEventId(c.getDocumentId(), c.getVersion());
        ShippingDocumentEvent.ShippingDocumentStateCreated e = newShippingDocumentStateCreated(stateEventId);
        e.setShipmentId(c.getShipmentId());
        e.setShipmentItemSeqId(c.getShipmentItemSeqId());
        e.setShipmentPackageSeqId(c.getShipmentPackageSeqId());
        e.setDescription(c.getDescription());
        ((AbstractShippingDocumentEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShippingDocumentEvent map(ShippingDocumentCommand.MergePatchShippingDocument c) {
        ShippingDocumentEventId stateEventId = new ShippingDocumentEventId(c.getDocumentId(), c.getVersion());
        ShippingDocumentEvent.ShippingDocumentStateMergePatched e = newShippingDocumentStateMergePatched(stateEventId);
        e.setShipmentId(c.getShipmentId());
        e.setShipmentItemSeqId(c.getShipmentItemSeqId());
        e.setShipmentPackageSeqId(c.getShipmentPackageSeqId());
        e.setDescription(c.getDescription());
        e.setIsPropertyShipmentIdRemoved(c.getIsPropertyShipmentIdRemoved());
        e.setIsPropertyShipmentItemSeqIdRemoved(c.getIsPropertyShipmentItemSeqIdRemoved());
        e.setIsPropertyShipmentPackageSeqIdRemoved(c.getIsPropertyShipmentPackageSeqIdRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        ((AbstractShippingDocumentEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShippingDocumentEvent map(ShippingDocumentCommand.DeleteShippingDocument c) {
        ShippingDocumentEventId stateEventId = new ShippingDocumentEventId(c.getDocumentId(), c.getVersion());
        ShippingDocumentEvent.ShippingDocumentStateDeleted e = newShippingDocumentStateDeleted(stateEventId);
        ((AbstractShippingDocumentEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected ShippingDocumentEvent.ShippingDocumentStateCreated newShippingDocumentStateCreated(Long version, String commandId, String requesterId) {
        ShippingDocumentEventId stateEventId = new ShippingDocumentEventId(this.state.getDocumentId(), version);
        ShippingDocumentEvent.ShippingDocumentStateCreated e = newShippingDocumentStateCreated(stateEventId);
        ((AbstractShippingDocumentEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShippingDocumentEvent.ShippingDocumentStateMergePatched newShippingDocumentStateMergePatched(Long version, String commandId, String requesterId) {
        ShippingDocumentEventId stateEventId = new ShippingDocumentEventId(this.state.getDocumentId(), version);
        ShippingDocumentEvent.ShippingDocumentStateMergePatched e = newShippingDocumentStateMergePatched(stateEventId);
        ((AbstractShippingDocumentEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShippingDocumentEvent.ShippingDocumentStateDeleted newShippingDocumentStateDeleted(Long version, String commandId, String requesterId) {
        ShippingDocumentEventId stateEventId = new ShippingDocumentEventId(this.state.getDocumentId(), version);
        ShippingDocumentEvent.ShippingDocumentStateDeleted e = newShippingDocumentStateDeleted(stateEventId);
        ((AbstractShippingDocumentEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShippingDocumentEvent.ShippingDocumentStateCreated newShippingDocumentStateCreated(ShippingDocumentEventId stateEventId) {
        return new AbstractShippingDocumentEvent.SimpleShippingDocumentStateCreated(stateEventId);
    }

    protected ShippingDocumentEvent.ShippingDocumentStateMergePatched newShippingDocumentStateMergePatched(ShippingDocumentEventId stateEventId) {
        return new AbstractShippingDocumentEvent.SimpleShippingDocumentStateMergePatched(stateEventId);
    }

    protected ShippingDocumentEvent.ShippingDocumentStateDeleted newShippingDocumentStateDeleted(ShippingDocumentEventId stateEventId) {
        return new AbstractShippingDocumentEvent.SimpleShippingDocumentStateDeleted(stateEventId);
    }


    public static class SimpleShippingDocumentAggregate extends AbstractShippingDocumentAggregate {
        public SimpleShippingDocumentAggregate(ShippingDocumentState state) {
            super(state);
        }

    }

}

