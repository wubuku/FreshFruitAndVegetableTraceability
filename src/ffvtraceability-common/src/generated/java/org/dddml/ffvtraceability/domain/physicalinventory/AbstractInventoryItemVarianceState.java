// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.physicalinventory;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.physicalinventory.InventoryItemVarianceEvent.*;

public abstract class AbstractInventoryItemVarianceState implements InventoryItemVarianceState.SqlInventoryItemVarianceState {

    private PhysicalInventoryInventoryItemVarianceId physicalInventoryInventoryItemVarianceId = new PhysicalInventoryInventoryItemVarianceId();

    public PhysicalInventoryInventoryItemVarianceId getPhysicalInventoryInventoryItemVarianceId() {
        return this.physicalInventoryInventoryItemVarianceId;
    }

    public void setPhysicalInventoryInventoryItemVarianceId(PhysicalInventoryInventoryItemVarianceId physicalInventoryInventoryItemVarianceId) {
        this.physicalInventoryInventoryItemVarianceId = physicalInventoryInventoryItemVarianceId;
    }

    private transient PhysicalInventoryState physicalInventoryState;

    public PhysicalInventoryState getPhysicalInventoryState() {
        return physicalInventoryState;
    }

    public void setPhysicalInventoryState(PhysicalInventoryState s) {
        physicalInventoryState = s;
    }
    
    private PhysicalInventoryState protectedPhysicalInventoryState;

    protected PhysicalInventoryState getProtectedPhysicalInventoryState() {
        return protectedPhysicalInventoryState;
    }

    protected void setProtectedPhysicalInventoryState(PhysicalInventoryState protectedPhysicalInventoryState) {
        this.protectedPhysicalInventoryState = protectedPhysicalInventoryState;
    }

    public String getPhysicalInventoryId() {
        return this.getPhysicalInventoryInventoryItemVarianceId().getPhysicalInventoryId();
    }
        
    public void setPhysicalInventoryId(String physicalInventoryId) {
        this.getPhysicalInventoryInventoryItemVarianceId().setPhysicalInventoryId(physicalInventoryId);
    }

    public String getInventoryItemId() {
        return this.getPhysicalInventoryInventoryItemVarianceId().getInventoryItemId();
    }
        
    public void setInventoryItemId(String inventoryItemId) {
        this.getPhysicalInventoryInventoryItemVarianceId().setInventoryItemId(inventoryItemId);
    }

    private String varianceReasonId;

    public String getVarianceReasonId() {
        return this.varianceReasonId;
    }

    public void setVarianceReasonId(String varianceReasonId) {
        this.varianceReasonId = varianceReasonId;
    }

    private java.math.BigDecimal availableToPromiseVar;

    public java.math.BigDecimal getAvailableToPromiseVar() {
        return this.availableToPromiseVar;
    }

    public void setAvailableToPromiseVar(java.math.BigDecimal availableToPromiseVar) {
        this.availableToPromiseVar = availableToPromiseVar;
    }

    private java.math.BigDecimal quantityOnHandVar;

    public java.math.BigDecimal getQuantityOnHandVar() {
        return this.quantityOnHandVar;
    }

    public void setQuantityOnHandVar(java.math.BigDecimal quantityOnHandVar) {
        this.quantityOnHandVar = quantityOnHandVar;
    }

    private String comments;

    public String getComments() {
        return this.comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractInventoryItemVarianceState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getInventoryItemId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof InventoryItemVarianceState) {
            return Objects.equals(this.getInventoryItemId(), ((InventoryItemVarianceState)obj).getInventoryItemId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof InventoryItemVarianceStateCreated) {
            when((InventoryItemVarianceStateCreated) e);
        } else if (e instanceof InventoryItemVarianceStateMergePatched) {
            when((InventoryItemVarianceStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(InventoryItemVarianceStateCreated e) {
        throwOnWrongEvent(e);

        this.setVarianceReasonId(e.getVarianceReasonId());
        this.setAvailableToPromiseVar(e.getAvailableToPromiseVar());
        this.setQuantityOnHandVar(e.getQuantityOnHandVar());
        this.setComments(e.getComments());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(InventoryItemVarianceState s) {
        if (s == this) {
            return;
        }
        this.setVarianceReasonId(s.getVarianceReasonId());
        this.setAvailableToPromiseVar(s.getAvailableToPromiseVar());
        this.setQuantityOnHandVar(s.getQuantityOnHandVar());
        this.setComments(s.getComments());
    }

    public void when(InventoryItemVarianceStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getVarianceReasonId() == null) {
            if (e.getIsPropertyVarianceReasonIdRemoved() != null && e.getIsPropertyVarianceReasonIdRemoved()) {
                this.setVarianceReasonId(null);
            }
        } else {
            this.setVarianceReasonId(e.getVarianceReasonId());
        }
        if (e.getAvailableToPromiseVar() == null) {
            if (e.getIsPropertyAvailableToPromiseVarRemoved() != null && e.getIsPropertyAvailableToPromiseVarRemoved()) {
                this.setAvailableToPromiseVar(null);
            }
        } else {
            this.setAvailableToPromiseVar(e.getAvailableToPromiseVar());
        }
        if (e.getQuantityOnHandVar() == null) {
            if (e.getIsPropertyQuantityOnHandVarRemoved() != null && e.getIsPropertyQuantityOnHandVarRemoved()) {
                this.setQuantityOnHandVar(null);
            }
        } else {
            this.setQuantityOnHandVar(e.getQuantityOnHandVar());
        }
        if (e.getComments() == null) {
            if (e.getIsPropertyCommentsRemoved() != null && e.getIsPropertyCommentsRemoved()) {
                this.setComments(null);
            }
        } else {
            this.setComments(e.getComments());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(InventoryItemVarianceEvent event) {
        String stateEntityIdPhysicalInventoryId = this.getPhysicalInventoryInventoryItemVarianceId().getPhysicalInventoryId();
        String eventEntityIdPhysicalInventoryId = ((InventoryItemVarianceEvent.SqlInventoryItemVarianceEvent)event).getInventoryItemVarianceEventId().getPhysicalInventoryId();
        if (!stateEntityIdPhysicalInventoryId.equals(eventEntityIdPhysicalInventoryId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id PhysicalInventoryId %1$s in state but entity id PhysicalInventoryId %2$s in event", stateEntityIdPhysicalInventoryId, eventEntityIdPhysicalInventoryId);
        }

        String stateEntityIdInventoryItemId = this.getPhysicalInventoryInventoryItemVarianceId().getInventoryItemId();
        String eventEntityIdInventoryItemId = ((InventoryItemVarianceEvent.SqlInventoryItemVarianceEvent)event).getInventoryItemVarianceEventId().getInventoryItemId();
        if (!stateEntityIdInventoryItemId.equals(eventEntityIdInventoryItemId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id InventoryItemId %1$s in state but entity id InventoryItemId %2$s in event", stateEntityIdInventoryItemId, eventEntityIdInventoryItemId);
        }


        if (getForReapplying()) { return; }
        InventoryItemVarianceStateEvent stateEvent = event instanceof InventoryItemVarianceStateEvent ? (InventoryItemVarianceStateEvent)event : null;
        if (stateEvent == null) { return; }

        Long stateVersion = this.getVersion();
        Long stateEventStateVersion = stateEvent.getVersion();
        //if (stateEventStateVersion == null) {
        stateEventStateVersion = stateVersion == null ? InventoryItemVarianceState.VERSION_NULL : stateVersion;
        stateEvent.setVersion(stateEventStateVersion);
        //}
        //if (!(stateVersion == null && stateEventStateVersion.equals(InventoryItemVarianceState.VERSION_NULL)) && !stateEventStateVersion.equals(stateVersion))
        //{
        //    throw DomainError.named("concurrencyConflict", "Conflict between stateVersion (%1$s) and stateEventStateVersion (%2$s)", stateVersion, stateEventStateVersion);
        //}

    }


    public static class SimpleInventoryItemVarianceState extends AbstractInventoryItemVarianceState {

        public SimpleInventoryItemVarianceState() {
        }

        public static SimpleInventoryItemVarianceState newForReapplying() {
            SimpleInventoryItemVarianceState s = new SimpleInventoryItemVarianceState();
            s.initializeForReapplying();
            return s;
        }

    }



}

