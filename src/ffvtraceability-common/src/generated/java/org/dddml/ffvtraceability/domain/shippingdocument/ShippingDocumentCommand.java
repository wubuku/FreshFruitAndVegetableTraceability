// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shippingdocument;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface ShippingDocumentCommand extends Command {

    String getDocumentId();

    void setDocumentId(String documentId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(ShippingDocumentState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((ShippingDocumentCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (state.getDeleted() != null && state.getDeleted()) {
            throw DomainError.named("zombie", "Can't do anything to deleted aggregate.");
        }
        if (isCreationCommand((ShippingDocumentCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(ShippingDocumentCommand c) {
        if ((c instanceof ShippingDocumentCommand.CreateShippingDocument) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(ShippingDocumentState.VERSION_NULL)))
            return true;
        if ((c instanceof ShippingDocumentCommand.MergePatchShippingDocument))
            return false;
        if ((c instanceof ShippingDocumentCommand.DeleteShippingDocument))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(ShippingDocumentState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchShippingDocument extends ShippingDocumentCommand
    {

        String getShipmentId();

        void setShipmentId(String shipmentId);

        String getShipmentItemSeqId();

        void setShipmentItemSeqId(String shipmentItemSeqId);

        String getShipmentPackageSeqId();

        void setShipmentPackageSeqId(String shipmentPackageSeqId);

        String getDescription();

        void setDescription(String description);

    }

    interface CreateShippingDocument extends CreateOrMergePatchShippingDocument
    {
    }

    interface MergePatchShippingDocument extends CreateOrMergePatchShippingDocument
    {
        Boolean getIsPropertyShipmentIdRemoved();

        void setIsPropertyShipmentIdRemoved(Boolean removed);

        Boolean getIsPropertyShipmentItemSeqIdRemoved();

        void setIsPropertyShipmentItemSeqIdRemoved(Boolean removed);

        Boolean getIsPropertyShipmentPackageSeqIdRemoved();

        void setIsPropertyShipmentPackageSeqIdRemoved(Boolean removed);

        Boolean getIsPropertyDescriptionRemoved();

        void setIsPropertyDescriptionRemoved(Boolean removed);


    }

    interface DeleteShippingDocument extends ShippingDocumentCommand
    {
    }

}

