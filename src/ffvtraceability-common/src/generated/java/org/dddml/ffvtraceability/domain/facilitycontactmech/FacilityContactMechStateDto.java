// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facilitycontactmech;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;


public class FacilityContactMechStateDto {

    private FacilityContactMechId facilityContactMechId;

    public FacilityContactMechId getFacilityContactMechId()
    {
        return this.facilityContactMechId;
    }

    public void setFacilityContactMechId(FacilityContactMechId facilityContactMechId)
    {
        this.facilityContactMechId = facilityContactMechId;
    }

    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate()
    {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate)
    {
        this.thruDate = thruDate;
    }

    private String extension;

    public String getExtension()
    {
        return this.extension;
    }

    public void setExtension(String extension)
    {
        this.extension = extension;
    }

    private String comments;

    public String getComments()
    {
        return this.comments;
    }

    public void setComments(String comments)
    {
        this.comments = comments;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt)
    {
        this.updatedAt = updatedAt;
    }

    private FacilityContactMechPurposeStateDto[] facilityContactMechPurposes;

    public FacilityContactMechPurposeStateDto[] getFacilityContactMechPurposes()
    {
        return this.facilityContactMechPurposes;
    }    

    public void setFacilityContactMechPurposes(FacilityContactMechPurposeStateDto[] facilityContactMechPurposes)
    {
        this.facilityContactMechPurposes = facilityContactMechPurposes;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{"FacilityContactMechPurposes"});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public FacilityContactMechStateDto[] toFacilityContactMechStateDtoArray(Iterable<FacilityContactMechState> states) {
            return toFacilityContactMechStateDtoList(states).toArray(new FacilityContactMechStateDto[0]);
        }

        public List<FacilityContactMechStateDto> toFacilityContactMechStateDtoList(Iterable<FacilityContactMechState> states) {
            ArrayList<FacilityContactMechStateDto> stateDtos = new ArrayList();
            for (FacilityContactMechState s : states) {
                FacilityContactMechStateDto dto = toFacilityContactMechStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public FacilityContactMechStateDto toFacilityContactMechStateDto(FacilityContactMechState state)
        {
            if(state == null) {
                return null;
            }
            FacilityContactMechStateDto dto = new FacilityContactMechStateDto();
            if (returnedFieldsContains("FacilityContactMechId")) {
                dto.setFacilityContactMechId(state.getFacilityContactMechId());
            }
            if (returnedFieldsContains("ThruDate")) {
                dto.setThruDate(state.getThruDate());
            }
            if (returnedFieldsContains("Extension")) {
                dto.setExtension(state.getExtension());
            }
            if (returnedFieldsContains("Comments")) {
                dto.setComments(state.getComments());
            }
            if (returnedFieldsContains("Version")) {
                dto.setVersion(state.getVersion());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            if (returnedFieldsContains("FacilityContactMechPurposes")) {
                ArrayList<FacilityContactMechPurposeStateDto> arrayList = new ArrayList();
                if (state.getFacilityContactMechPurposes() != null) {
                    FacilityContactMechPurposeStateDto.DtoConverter conv = new FacilityContactMechPurposeStateDto.DtoConverter();
                    String returnFS = CollectionUtils.mapGetValueIgnoringCase(getReturnedFields(), "FacilityContactMechPurposes");
                    if(returnFS != null) { conv.setReturnedFieldsString(returnFS); } else { conv.setAllFieldsReturned(this.getAllFieldsReturned()); }
                    for (FacilityContactMechPurposeState s : state.getFacilityContactMechPurposes()) {
                        arrayList.add(conv.toFacilityContactMechPurposeStateDto(s));
                    }
                }
                dto.setFacilityContactMechPurposes(arrayList.toArray(new FacilityContactMechPurposeStateDto[0]));
            }
            return dto;
        }

    }
}

