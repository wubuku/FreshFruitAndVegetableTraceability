// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attributeset;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchAttributeUseDto extends AbstractAttributeUseCommandDto implements AttributeUseCommand.CreateOrMergePatchAttributeUse {

    /**
     * Sequence Number
     */
    private Long sequenceNumber;

    public Long getSequenceNumber()
    {
        return this.sequenceNumber;
    }

    public void setSequenceNumber(Long sequenceNumber)
    {
        this.sequenceNumber = sequenceNumber;
    }


    private Boolean isPropertySequenceNumberRemoved;

    public Boolean getIsPropertySequenceNumberRemoved()
    {
        return this.isPropertySequenceNumberRemoved;
    }

    public void setIsPropertySequenceNumberRemoved(Boolean removed)
    {
        this.isPropertySequenceNumberRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchAttributeUse command)
    {
        ((AbstractAttributeUseCommandDto) this).copyTo(command);
        command.setSequenceNumber(this.getSequenceNumber());
    }

    public AttributeUseCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractAttributeUseCommand.SimpleCreateAttributeUse command = new AbstractAttributeUseCommand.SimpleCreateAttributeUse();
            copyTo((AbstractAttributeUseCommand.AbstractCreateAttributeUse) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractAttributeUseCommand.SimpleMergePatchAttributeUse command = new AbstractAttributeUseCommand.SimpleMergePatchAttributeUse();
            copyTo((AbstractAttributeUseCommand.SimpleMergePatchAttributeUse) command);
            return command;
        } 
        else if (COMMAND_TYPE_REMOVE.equals(getCommandType())) {
            AbstractAttributeUseCommand.SimpleRemoveAttributeUse command = new AbstractAttributeUseCommand.SimpleRemoveAttributeUse();
            ((AbstractAttributeUseCommandDto) this).copyTo(command);
            return command;
        }
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public AttributeUseCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateAttributeUseDto command = new CreateAttributeUseDto();
            copyTo((CreateAttributeUse) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchAttributeUseDto command = new MergePatchAttributeUseDto();
            copyTo((MergePatchAttributeUse) command);
            return command;
        } 
        else if (COMMAND_TYPE_REMOVE.equals(getCommandType())) {
            RemoveAttributeUseDto command = new RemoveAttributeUseDto();
            ((AbstractAttributeUseCommandDto) this).copyTo(command);
            return command;
        }
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateAttributeUse command)
    {
        copyTo((CreateOrMergePatchAttributeUse) command);
    }

    public void copyTo(MergePatchAttributeUse command)
    {
        copyTo((CreateOrMergePatchAttributeUse) command);
        command.setIsPropertySequenceNumberRemoved(this.getIsPropertySequenceNumberRemoved());
    }

    public static class CreateAttributeUseDto extends CreateOrMergePatchAttributeUseDto implements AttributeUseCommand.CreateAttributeUse
    {
        public CreateAttributeUseDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public AttributeUseCommand.CreateAttributeUse toCreateAttributeUse()
        {
            return (AttributeUseCommand.CreateAttributeUse) toCommand();
        }

    }

    public static class MergePatchAttributeUseDto extends CreateOrMergePatchAttributeUseDto implements AttributeUseCommand.MergePatchAttributeUse
    {
        public MergePatchAttributeUseDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public AttributeUseCommand.MergePatchAttributeUse toMergePatchAttributeUse()
        {
            return (AttributeUseCommand.MergePatchAttributeUse) toCommand();
        }

    }

}

