// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.lot;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchLotDto extends AbstractLotCommandDto implements LotCommand.CreateOrMergePatchLot {

    /**
     * Quantity
     */
    private java.math.BigDecimal quantity;

    public java.math.BigDecimal getQuantity()
    {
        return this.quantity;
    }

    public void setQuantity(java.math.BigDecimal quantity)
    {
        this.quantity = quantity;
    }

    /**
     * Expiration Date
     */
    private OffsetDateTime expirationDate;

    public OffsetDateTime getExpirationDate()
    {
        return this.expirationDate;
    }

    public void setExpirationDate(OffsetDateTime expirationDate)
    {
        this.expirationDate = expirationDate;
    }

    /**
     * Lot Type Id
     */
    private String lotTypeId;

    public String getLotTypeId()
    {
        return this.lotTypeId;
    }

    public void setLotTypeId(String lotTypeId)
    {
        this.lotTypeId = lotTypeId;
    }

    /**
     * Active
     */
    private String active;

    public String getActive()
    {
        return this.active;
    }

    public void setActive(String active)
    {
        this.active = active;
    }

    /**
     * Gtin
     */
    private String gtin;

    public String getGtin()
    {
        return this.gtin;
    }

    public void setGtin(String gtin)
    {
        this.gtin = gtin;
    }

    /**
     * GS1 BATCH (AI=10)
     */
    private String gs1Batch;

    public String getGs1Batch()
    {
        return this.gs1Batch;
    }

    public void setGs1Batch(String gs1Batch)
    {
        this.gs1Batch = gs1Batch;
    }

    /**
     * The facility (location) where TLC was assigned during initial packing or transformation
     */
    private String sourceFacilityId;

    public String getSourceFacilityId()
    {
        return this.sourceFacilityId;
    }

    public void setSourceFacilityId(String sourceFacilityId)
    {
        this.sourceFacilityId = sourceFacilityId;
    }

    /**
     * Internal Id
     */
    private String internalId;

    public String getInternalId()
    {
        return this.internalId;
    }

    public void setInternalId(String internalId)
    {
        this.internalId = internalId;
    }

    /**
     * Pallet Sscc
     */
    private String palletSscc;

    public String getPalletSscc()
    {
        return this.palletSscc;
    }

    public void setPalletSscc(String palletSscc)
    {
        this.palletSscc = palletSscc;
    }

    /**
     * Pack Date
     */
    private OffsetDateTime packDate;

    public OffsetDateTime getPackDate()
    {
        return this.packDate;
    }

    public void setPackDate(OffsetDateTime packDate)
    {
        this.packDate = packDate;
    }

    /**
     * Harvest Date
     */
    private OffsetDateTime harvestDate;

    public OffsetDateTime getHarvestDate()
    {
        return this.harvestDate;
    }

    public void setHarvestDate(OffsetDateTime harvestDate)
    {
        this.harvestDate = harvestDate;
    }

    /**
     * Serial Number
     */
    private String serialNumber;

    public String getSerialNumber()
    {
        return this.serialNumber;
    }

    public void setSerialNumber(String serialNumber)
    {
        this.serialNumber = serialNumber;
    }


    private CreateOrMergePatchLotIdentificationDto[] lotIdentifications = new CreateOrMergePatchLotIdentificationDto[0];

    public CreateOrMergePatchLotIdentificationDto[] getLotIdentifications()
    {
        return this.lotIdentifications;
    }

    public void setLotIdentifications(CreateOrMergePatchLotIdentificationDto[] lotIdentifications)
    {
        this.lotIdentifications = lotIdentifications;
    }

    private Boolean isPropertyQuantityRemoved;

    public Boolean getIsPropertyQuantityRemoved()
    {
        return this.isPropertyQuantityRemoved;
    }

    public void setIsPropertyQuantityRemoved(Boolean removed)
    {
        this.isPropertyQuantityRemoved = removed;
    }

    private Boolean isPropertyExpirationDateRemoved;

    public Boolean getIsPropertyExpirationDateRemoved()
    {
        return this.isPropertyExpirationDateRemoved;
    }

    public void setIsPropertyExpirationDateRemoved(Boolean removed)
    {
        this.isPropertyExpirationDateRemoved = removed;
    }

    private Boolean isPropertyLotTypeIdRemoved;

    public Boolean getIsPropertyLotTypeIdRemoved()
    {
        return this.isPropertyLotTypeIdRemoved;
    }

    public void setIsPropertyLotTypeIdRemoved(Boolean removed)
    {
        this.isPropertyLotTypeIdRemoved = removed;
    }

    private Boolean isPropertyActiveRemoved;

    public Boolean getIsPropertyActiveRemoved()
    {
        return this.isPropertyActiveRemoved;
    }

    public void setIsPropertyActiveRemoved(Boolean removed)
    {
        this.isPropertyActiveRemoved = removed;
    }

    private Boolean isPropertyGtinRemoved;

    public Boolean getIsPropertyGtinRemoved()
    {
        return this.isPropertyGtinRemoved;
    }

    public void setIsPropertyGtinRemoved(Boolean removed)
    {
        this.isPropertyGtinRemoved = removed;
    }

    private Boolean isPropertyGs1BatchRemoved;

    public Boolean getIsPropertyGs1BatchRemoved()
    {
        return this.isPropertyGs1BatchRemoved;
    }

    public void setIsPropertyGs1BatchRemoved(Boolean removed)
    {
        this.isPropertyGs1BatchRemoved = removed;
    }

    private Boolean isPropertySourceFacilityIdRemoved;

    public Boolean getIsPropertySourceFacilityIdRemoved()
    {
        return this.isPropertySourceFacilityIdRemoved;
    }

    public void setIsPropertySourceFacilityIdRemoved(Boolean removed)
    {
        this.isPropertySourceFacilityIdRemoved = removed;
    }

    private Boolean isPropertyInternalIdRemoved;

    public Boolean getIsPropertyInternalIdRemoved()
    {
        return this.isPropertyInternalIdRemoved;
    }

    public void setIsPropertyInternalIdRemoved(Boolean removed)
    {
        this.isPropertyInternalIdRemoved = removed;
    }

    private Boolean isPropertyPalletSsccRemoved;

    public Boolean getIsPropertyPalletSsccRemoved()
    {
        return this.isPropertyPalletSsccRemoved;
    }

    public void setIsPropertyPalletSsccRemoved(Boolean removed)
    {
        this.isPropertyPalletSsccRemoved = removed;
    }

    private Boolean isPropertyPackDateRemoved;

    public Boolean getIsPropertyPackDateRemoved()
    {
        return this.isPropertyPackDateRemoved;
    }

    public void setIsPropertyPackDateRemoved(Boolean removed)
    {
        this.isPropertyPackDateRemoved = removed;
    }

    private Boolean isPropertyHarvestDateRemoved;

    public Boolean getIsPropertyHarvestDateRemoved()
    {
        return this.isPropertyHarvestDateRemoved;
    }

    public void setIsPropertyHarvestDateRemoved(Boolean removed)
    {
        this.isPropertyHarvestDateRemoved = removed;
    }

    private Boolean isPropertySerialNumberRemoved;

    public Boolean getIsPropertySerialNumberRemoved()
    {
        return this.isPropertySerialNumberRemoved;
    }

    public void setIsPropertySerialNumberRemoved(Boolean removed)
    {
        this.isPropertySerialNumberRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchLot command)
    {
        ((AbstractLotCommandDto) this).copyTo(command);
        command.setQuantity(this.getQuantity());
        command.setExpirationDate(this.getExpirationDate());
        command.setLotTypeId(this.getLotTypeId());
        command.setActive(this.getActive());
        command.setGtin(this.getGtin());
        command.setGs1Batch(this.getGs1Batch());
        command.setSourceFacilityId(this.getSourceFacilityId());
        command.setInternalId(this.getInternalId());
        command.setPalletSscc(this.getPalletSscc());
        command.setPackDate(this.getPackDate());
        command.setHarvestDate(this.getHarvestDate());
        command.setSerialNumber(this.getSerialNumber());
    }

    public LotCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractLotCommand.SimpleCreateLot command = new AbstractLotCommand.SimpleCreateLot();
            copyTo((AbstractLotCommand.AbstractCreateLot) command);
            if (this.getLotIdentifications() != null) {
                for (CreateOrMergePatchLotIdentificationDto cmd : this.getLotIdentifications()) {
                    command.getLotIdentifications().add((LotIdentificationCommand.CreateLotIdentification) cmd.toCommand());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractLotCommand.SimpleMergePatchLot command = new AbstractLotCommand.SimpleMergePatchLot();
            copyTo((AbstractLotCommand.SimpleMergePatchLot) command);
            if (this.getLotIdentifications() != null) {
                for (CreateOrMergePatchLotIdentificationDto cmd : this.getLotIdentifications()) {
                    command.getLotIdentificationCommands().add(cmd.toCommand());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public LotCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateLotDto command = new CreateLotDto();
            copyTo((CreateLot) command);
            if (this.getLotIdentifications() != null) {
                for (CreateOrMergePatchLotIdentificationDto cmd : this.getLotIdentifications()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreateLotIdentificationCommands().add((LotIdentificationCommand.CreateLotIdentification) cmd.toSubclass());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchLotDto command = new MergePatchLotDto();
            copyTo((MergePatchLot) command);
            if (this.getLotIdentifications() != null) {
                for (CreateOrMergePatchLotIdentificationDto cmd : this.getLotIdentifications()) {
                    command.getLotIdentificationCommands().add(cmd.toSubclass());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateLot command)
    {
        copyTo((CreateOrMergePatchLot) command);
    }

    public void copyTo(MergePatchLot command)
    {
        copyTo((CreateOrMergePatchLot) command);
        command.setIsPropertyQuantityRemoved(this.getIsPropertyQuantityRemoved());
        command.setIsPropertyExpirationDateRemoved(this.getIsPropertyExpirationDateRemoved());
        command.setIsPropertyLotTypeIdRemoved(this.getIsPropertyLotTypeIdRemoved());
        command.setIsPropertyActiveRemoved(this.getIsPropertyActiveRemoved());
        command.setIsPropertyGtinRemoved(this.getIsPropertyGtinRemoved());
        command.setIsPropertyGs1BatchRemoved(this.getIsPropertyGs1BatchRemoved());
        command.setIsPropertySourceFacilityIdRemoved(this.getIsPropertySourceFacilityIdRemoved());
        command.setIsPropertyInternalIdRemoved(this.getIsPropertyInternalIdRemoved());
        command.setIsPropertyPalletSsccRemoved(this.getIsPropertyPalletSsccRemoved());
        command.setIsPropertyPackDateRemoved(this.getIsPropertyPackDateRemoved());
        command.setIsPropertyHarvestDateRemoved(this.getIsPropertyHarvestDateRemoved());
        command.setIsPropertySerialNumberRemoved(this.getIsPropertySerialNumberRemoved());
    }

    public static class CreateLotDto extends CreateOrMergePatchLotDto implements LotCommand.CreateLot
    {
        public CreateLotDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public LotCommand.CreateLot toCreateLot()
        {
            return (LotCommand.CreateLot) toCommand();
        }


        @Override
        public CreateLotIdentificationCommandCollection getCreateLotIdentificationCommands() {
            return new CreateLotIdentificationCommandCollection() {
                @Override
                public void add(LotIdentificationCommand.CreateLotIdentification c) {
                    java.util.List<CreateOrMergePatchLotIdentificationDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getLotIdentifications()));
                    list.add((CreateOrMergePatchLotIdentificationDto) c);
                    setLotIdentifications(list.toArray(new CreateOrMergePatchLotIdentificationDto[0]));
                }

                @Override
                public void remove(LotIdentificationCommand.CreateLotIdentification c) {
                    java.util.List<CreateOrMergePatchLotIdentificationDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getLotIdentifications()));
                    list.remove((CreateOrMergePatchLotIdentificationDto) c);
                    setLotIdentifications(list.toArray(new CreateOrMergePatchLotIdentificationDto[0]));
                }

                @Override
                public void clear() {
                    setLotIdentifications(new CreateOrMergePatchLotIdentificationDto[]{});
                }

                @Override
                public java.util.Iterator<LotIdentificationCommand.CreateLotIdentification> iterator() {
                    return java.util.Arrays.stream(getLotIdentifications())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (LotIdentificationCommand.CreateLotIdentification) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public LotIdentificationCommand.CreateLotIdentification newCreateLotIdentification() {
            return new CreateOrMergePatchLotIdentificationDto.CreateLotIdentificationDto();
        }

    }

    public static class MergePatchLotDto extends CreateOrMergePatchLotDto implements LotCommand.MergePatchLot
    {
        public MergePatchLotDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public LotCommand.MergePatchLot toMergePatchLot()
        {
            return (LotCommand.MergePatchLot) toCommand();
        }


        @Override
        public LotIdentificationCommandCollection getLotIdentificationCommands() {
            return new LotIdentificationCommandCollection() {
                @Override
                public void add(LotIdentificationCommand c) {
                    java.util.List<CreateOrMergePatchLotIdentificationDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getLotIdentifications()));
                    list.add((CreateOrMergePatchLotIdentificationDto) c);
                    setLotIdentifications(list.toArray(new CreateOrMergePatchLotIdentificationDto[0]));
                }

                @Override
                public void remove(LotIdentificationCommand c) {
                    java.util.List<CreateOrMergePatchLotIdentificationDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getLotIdentifications()));
                    list.remove((CreateOrMergePatchLotIdentificationDto) c);
                    setLotIdentifications(list.toArray(new CreateOrMergePatchLotIdentificationDto[0]));
                }

                @Override
                public void clear() {
                    setLotIdentifications(new CreateOrMergePatchLotIdentificationDto[]{});
                }

                @Override
                public java.util.Iterator<LotIdentificationCommand> iterator() {
                    return java.util.Arrays.stream(getLotIdentifications())
                            .map(e -> (LotIdentificationCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public LotIdentificationCommand.CreateLotIdentification newCreateLotIdentification() {
            return new CreateOrMergePatchLotIdentificationDto.CreateLotIdentificationDto();
        }

        @Override
        public LotIdentificationCommand.MergePatchLotIdentification newMergePatchLotIdentification() {
            return new CreateOrMergePatchLotIdentificationDto.MergePatchLotIdentificationDto();
        }

        @Override
        public LotIdentificationCommand.RemoveLotIdentification newRemoveLotIdentification() {
            return new RemoveLotIdentificationDto();
        }

    }

}

