// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partyrole;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.partyrole.PartyRoleEvent.*;

public abstract class AbstractPartyRoleState implements PartyRoleState.SqlPartyRoleState {

    private PartyRoleId partyRoleId;

    public PartyRoleId getPartyRoleId() {
        return this.partyRoleId;
    }

    public void setPartyRoleId(PartyRoleId partyRoleId) {
        this.partyRoleId = partyRoleId;
    }

    private String supplierShortName;

    public String getSupplierShortName() {
        return this.supplierShortName;
    }

    public void setSupplierShortName(String supplierShortName) {
        this.supplierShortName = supplierShortName;
    }

    private String tpaNumber;

    public String getTpaNumber() {
        return this.tpaNumber;
    }

    public void setTpaNumber(String tpaNumber) {
        this.tpaNumber = tpaNumber;
    }

    private String certificationCodes;

    public String getCertificationCodes() {
        return this.certificationCodes;
    }

    public void setCertificationCodes(String certificationCodes) {
        this.certificationCodes = certificationCodes;
    }

    private String bankAccountInformation;

    public String getBankAccountInformation() {
        return this.bankAccountInformation;
    }

    public void setBankAccountInformation(String bankAccountInformation) {
        this.bankAccountInformation = bankAccountInformation;
    }

    private String supplierTypeEnumId;

    public String getSupplierTypeEnumId() {
        return this.supplierTypeEnumId;
    }

    public void setSupplierTypeEnumId(String supplierTypeEnumId) {
        this.supplierTypeEnumId = supplierTypeEnumId;
    }

    private String supplierProductTypeDescription;

    public String getSupplierProductTypeDescription() {
        return this.supplierProductTypeDescription;
    }

    public void setSupplierProductTypeDescription(String supplierProductTypeDescription) {
        this.supplierProductTypeDescription = supplierProductTypeDescription;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractPartyRoleState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setPartyRoleId(((PartyRoleEvent.SqlPartyRoleEvent) events.get(0)).getPartyRoleEventId().getPartyRoleId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? PartyRoleState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractPartyRoleState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getPartyRoleId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof PartyRoleState) {
            return Objects.equals(this.getPartyRoleId(), ((PartyRoleState)obj).getPartyRoleId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof PartyRoleStateCreated) {
            when((PartyRoleStateCreated) e);
        } else if (e instanceof PartyRoleStateMergePatched) {
            when((PartyRoleStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(PartyRoleStateCreated e) {
        throwOnWrongEvent(e);

        this.setSupplierShortName(e.getSupplierShortName());
        this.setTpaNumber(e.getTpaNumber());
        this.setCertificationCodes(e.getCertificationCodes());
        this.setBankAccountInformation(e.getBankAccountInformation());
        this.setSupplierTypeEnumId(e.getSupplierTypeEnumId());
        this.setSupplierProductTypeDescription(e.getSupplierProductTypeDescription());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(PartyRoleState s) {
        if (s == this) {
            return;
        }
        this.setSupplierShortName(s.getSupplierShortName());
        this.setTpaNumber(s.getTpaNumber());
        this.setCertificationCodes(s.getCertificationCodes());
        this.setBankAccountInformation(s.getBankAccountInformation());
        this.setSupplierTypeEnumId(s.getSupplierTypeEnumId());
        this.setSupplierProductTypeDescription(s.getSupplierProductTypeDescription());
    }

    public void when(PartyRoleStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getSupplierShortName() == null) {
            if (e.getIsPropertySupplierShortNameRemoved() != null && e.getIsPropertySupplierShortNameRemoved()) {
                this.setSupplierShortName(null);
            }
        } else {
            this.setSupplierShortName(e.getSupplierShortName());
        }
        if (e.getTpaNumber() == null) {
            if (e.getIsPropertyTpaNumberRemoved() != null && e.getIsPropertyTpaNumberRemoved()) {
                this.setTpaNumber(null);
            }
        } else {
            this.setTpaNumber(e.getTpaNumber());
        }
        if (e.getCertificationCodes() == null) {
            if (e.getIsPropertyCertificationCodesRemoved() != null && e.getIsPropertyCertificationCodesRemoved()) {
                this.setCertificationCodes(null);
            }
        } else {
            this.setCertificationCodes(e.getCertificationCodes());
        }
        if (e.getBankAccountInformation() == null) {
            if (e.getIsPropertyBankAccountInformationRemoved() != null && e.getIsPropertyBankAccountInformationRemoved()) {
                this.setBankAccountInformation(null);
            }
        } else {
            this.setBankAccountInformation(e.getBankAccountInformation());
        }
        if (e.getSupplierTypeEnumId() == null) {
            if (e.getIsPropertySupplierTypeEnumIdRemoved() != null && e.getIsPropertySupplierTypeEnumIdRemoved()) {
                this.setSupplierTypeEnumId(null);
            }
        } else {
            this.setSupplierTypeEnumId(e.getSupplierTypeEnumId());
        }
        if (e.getSupplierProductTypeDescription() == null) {
            if (e.getIsPropertySupplierProductTypeDescriptionRemoved() != null && e.getIsPropertySupplierProductTypeDescriptionRemoved()) {
                this.setSupplierProductTypeDescription(null);
            }
        } else {
            this.setSupplierProductTypeDescription(e.getSupplierProductTypeDescription());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(PartyRoleEvent event) {
        PartyRoleId stateEntityId = this.getPartyRoleId(); // Aggregate Id
        PartyRoleId eventEntityId = ((PartyRoleEvent.SqlPartyRoleEvent)event).getPartyRoleEventId().getPartyRoleId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((PartyRoleEvent.SqlPartyRoleEvent)event).getPartyRoleEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getPartyRoleEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimplePartyRoleState extends AbstractPartyRoleState {

        public SimplePartyRoleState() {
        }

        public SimplePartyRoleState(List<Event> events) {
            super(events);
        }

        public static SimplePartyRoleState newForReapplying() {
            SimplePartyRoleState s = new SimplePartyRoleState();
            s.initializeForReapplying();
            return s;
        }

    }



}

