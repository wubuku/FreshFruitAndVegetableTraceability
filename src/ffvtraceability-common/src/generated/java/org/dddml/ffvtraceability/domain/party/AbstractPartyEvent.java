// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.party;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractPartyEvent extends AbstractEvent implements PartyEvent.SqlPartyEvent {
    private PartyEventId partyEventId = new PartyEventId();

    public PartyEventId getPartyEventId() {
        return this.partyEventId;
    }

    public void setPartyEventId(PartyEventId eventId) {
        this.partyEventId = eventId;
    }
    
    public String getPartyId() {
        return getPartyEventId().getPartyId();
    }

    public void setPartyId(String partyId) {
        getPartyEventId().setPartyId(partyId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getPartyEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getPartyEventId().setVersion(version);
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractPartyEvent() {
    }

    protected AbstractPartyEvent(PartyEventId eventId) {
        this.partyEventId = eventId;
    }

    protected PartyIdentificationEventDao getPartyIdentificationEventDao() {
        return (PartyIdentificationEventDao)ApplicationContext.current.get("partyIdentificationEventDao");
    }

    protected PartyIdentificationEventId newPartyIdentificationEventId(String partyIdentificationTypeId)
    {
        PartyIdentificationEventId eventId = new PartyIdentificationEventId(this.getPartyEventId().getPartyId(), 
            partyIdentificationTypeId, 
            this.getPartyEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(PartyIdentificationEvent.SqlPartyIdentificationEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(PartyEvent.SqlPartyEvent oe, PartyIdentificationEvent.SqlPartyIdentificationEvent e)
    {
        if (!oe.getPartyEventId().getPartyId().equals(e.getPartyIdentificationEventId().getPartyId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id PartyId %1$s but inner id PartyId %2$s", 
                oe.getPartyEventId().getPartyId(), e.getPartyIdentificationEventId().getPartyId());
        }
    }

    public PartyIdentificationEvent.PartyIdentificationStateCreated newPartyIdentificationStateCreated(String partyIdentificationTypeId) {
        return new AbstractPartyIdentificationEvent.SimplePartyIdentificationStateCreated(newPartyIdentificationEventId(partyIdentificationTypeId));
    }

    public PartyIdentificationEvent.PartyIdentificationStateMergePatched newPartyIdentificationStateMergePatched(String partyIdentificationTypeId) {
        return new AbstractPartyIdentificationEvent.SimplePartyIdentificationStateMergePatched(newPartyIdentificationEventId(partyIdentificationTypeId));
    }


    public abstract String getEventType();

    public static class PartyLobEvent extends AbstractPartyEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventType() {
            return "PartyLobEvent";
        }

    }


    public static abstract class AbstractPartyStateEvent extends AbstractPartyEvent implements PartyEvent.PartyStateEvent {
        private String partyTypeId;

        public String getPartyTypeId()
        {
            return this.partyTypeId;
        }

        public void setPartyTypeId(String partyTypeId)
        {
            this.partyTypeId = partyTypeId;
        }

        private String primaryRoleTypeId;

        public String getPrimaryRoleTypeId()
        {
            return this.primaryRoleTypeId;
        }

        public void setPrimaryRoleTypeId(String primaryRoleTypeId)
        {
            this.primaryRoleTypeId = primaryRoleTypeId;
        }

        private String externalId;

        public String getExternalId()
        {
            return this.externalId;
        }

        public void setExternalId(String externalId)
        {
            this.externalId = externalId;
        }

        private String preferredCurrencyUomId;

        public String getPreferredCurrencyUomId()
        {
            return this.preferredCurrencyUomId;
        }

        public void setPreferredCurrencyUomId(String preferredCurrencyUomId)
        {
            this.preferredCurrencyUomId = preferredCurrencyUomId;
        }

        private String description;

        public String getDescription()
        {
            return this.description;
        }

        public void setDescription(String description)
        {
            this.description = description;
        }

        private String statusId;

        public String getStatusId()
        {
            return this.statusId;
        }

        public void setStatusId(String statusId)
        {
            this.statusId = statusId;
        }

        protected AbstractPartyStateEvent(PartyEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractPartyStateCreated extends AbstractPartyStateEvent implements PartyEvent.PartyStateCreated, Saveable
    {
        public AbstractPartyStateCreated() {
            this(new PartyEventId());
        }

        public AbstractPartyStateCreated(PartyEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

        private Map<PartyIdentificationEventId, PartyIdentificationEvent.PartyIdentificationStateCreated> partyIdentificationEvents = new HashMap<PartyIdentificationEventId, PartyIdentificationEvent.PartyIdentificationStateCreated>();
        
        private Iterable<PartyIdentificationEvent.PartyIdentificationStateCreated> readOnlyPartyIdentificationEvents;

        public Iterable<PartyIdentificationEvent.PartyIdentificationStateCreated> getPartyIdentificationEvents()
        {
            if (!getEventReadOnly())
            {
                return this.partyIdentificationEvents.values();
            }
            else
            {
                if (readOnlyPartyIdentificationEvents != null) { return readOnlyPartyIdentificationEvents; }
                PartyIdentificationEventDao eventDao = getPartyIdentificationEventDao();
                List<PartyIdentificationEvent.PartyIdentificationStateCreated> eL = new ArrayList<PartyIdentificationEvent.PartyIdentificationStateCreated>();
                for (PartyIdentificationEvent e : eventDao.findByPartyEventId(this.getPartyEventId()))
                {
                    ((PartyIdentificationEvent.SqlPartyIdentificationEvent)e).setEventReadOnly(true);
                    eL.add((PartyIdentificationEvent.PartyIdentificationStateCreated)e);
                }
                return (readOnlyPartyIdentificationEvents = eL);
            }
        }

        public void setPartyIdentificationEvents(Iterable<PartyIdentificationEvent.PartyIdentificationStateCreated> es)
        {
            if (es != null)
            {
                for (PartyIdentificationEvent.PartyIdentificationStateCreated e : es)
                {
                    addPartyIdentificationEvent(e);
                }
            }
            else { this.partyIdentificationEvents.clear(); }
        }
        
        public void addPartyIdentificationEvent(PartyIdentificationEvent.PartyIdentificationStateCreated e)
        {
            throwOnInconsistentEventIds((PartyIdentificationEvent.SqlPartyIdentificationEvent)e);
            this.partyIdentificationEvents.put(((PartyIdentificationEvent.SqlPartyIdentificationEvent)e).getPartyIdentificationEventId(), e);
        }

        public void save()
        {
            for (PartyIdentificationEvent.PartyIdentificationStateCreated e : this.getPartyIdentificationEvents()) {
                getPartyIdentificationEventDao().save(e);
            }
        }
    }


    public static abstract class AbstractPartyStateMergePatched extends AbstractPartyStateEvent implements PartyEvent.PartyStateMergePatched, Saveable
    {
        public AbstractPartyStateMergePatched() {
            this(new PartyEventId());
        }

        public AbstractPartyStateMergePatched(PartyEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyPartyTypeIdRemoved;

        public Boolean getIsPropertyPartyTypeIdRemoved() {
            return this.isPropertyPartyTypeIdRemoved;
        }

        public void setIsPropertyPartyTypeIdRemoved(Boolean removed) {
            this.isPropertyPartyTypeIdRemoved = removed;
        }

        private Boolean isPropertyPrimaryRoleTypeIdRemoved;

        public Boolean getIsPropertyPrimaryRoleTypeIdRemoved() {
            return this.isPropertyPrimaryRoleTypeIdRemoved;
        }

        public void setIsPropertyPrimaryRoleTypeIdRemoved(Boolean removed) {
            this.isPropertyPrimaryRoleTypeIdRemoved = removed;
        }

        private Boolean isPropertyExternalIdRemoved;

        public Boolean getIsPropertyExternalIdRemoved() {
            return this.isPropertyExternalIdRemoved;
        }

        public void setIsPropertyExternalIdRemoved(Boolean removed) {
            this.isPropertyExternalIdRemoved = removed;
        }

        private Boolean isPropertyPreferredCurrencyUomIdRemoved;

        public Boolean getIsPropertyPreferredCurrencyUomIdRemoved() {
            return this.isPropertyPreferredCurrencyUomIdRemoved;
        }

        public void setIsPropertyPreferredCurrencyUomIdRemoved(Boolean removed) {
            this.isPropertyPreferredCurrencyUomIdRemoved = removed;
        }

        private Boolean isPropertyDescriptionRemoved;

        public Boolean getIsPropertyDescriptionRemoved() {
            return this.isPropertyDescriptionRemoved;
        }

        public void setIsPropertyDescriptionRemoved(Boolean removed) {
            this.isPropertyDescriptionRemoved = removed;
        }

        private Boolean isPropertyStatusIdRemoved;

        public Boolean getIsPropertyStatusIdRemoved() {
            return this.isPropertyStatusIdRemoved;
        }

        public void setIsPropertyStatusIdRemoved(Boolean removed) {
            this.isPropertyStatusIdRemoved = removed;
        }


        private Map<PartyIdentificationEventId, PartyIdentificationEvent> partyIdentificationEvents = new HashMap<PartyIdentificationEventId, PartyIdentificationEvent>();
        
        private Iterable<PartyIdentificationEvent> readOnlyPartyIdentificationEvents;

        public Iterable<PartyIdentificationEvent> getPartyIdentificationEvents()
        {
            if (!getEventReadOnly())
            {
                return this.partyIdentificationEvents.values();
            }
            else
            {
                if (readOnlyPartyIdentificationEvents != null) { return readOnlyPartyIdentificationEvents; }
                PartyIdentificationEventDao eventDao = getPartyIdentificationEventDao();
                List<PartyIdentificationEvent> eL = new ArrayList<PartyIdentificationEvent>();
                for (PartyIdentificationEvent e : eventDao.findByPartyEventId(this.getPartyEventId()))
                {
                    ((PartyIdentificationEvent.SqlPartyIdentificationEvent)e).setEventReadOnly(true);
                    eL.add((PartyIdentificationEvent)e);
                }
                return (readOnlyPartyIdentificationEvents = eL);
            }
        }

        public void setPartyIdentificationEvents(Iterable<PartyIdentificationEvent> es)
        {
            if (es != null)
            {
                for (PartyIdentificationEvent e : es)
                {
                    addPartyIdentificationEvent(e);
                }
            }
            else { this.partyIdentificationEvents.clear(); }
        }
        
        public void addPartyIdentificationEvent(PartyIdentificationEvent e)
        {
            throwOnInconsistentEventIds((PartyIdentificationEvent.SqlPartyIdentificationEvent)e);
            this.partyIdentificationEvents.put(((PartyIdentificationEvent.SqlPartyIdentificationEvent)e).getPartyIdentificationEventId(), e);
        }

        public void save()
        {
            for (PartyIdentificationEvent e : this.getPartyIdentificationEvents()) {
                getPartyIdentificationEventDao().save(e);
            }
        }
    }



    public static class SimplePartyStateCreated extends AbstractPartyStateCreated
    {
        public SimplePartyStateCreated() {
        }

        public SimplePartyStateCreated(PartyEventId eventId) {
            super(eventId);
        }
    }

    public static class SimplePartyStateMergePatched extends AbstractPartyStateMergePatched
    {
        public SimplePartyStateMergePatched() {
        }

        public SimplePartyStateMergePatched(PartyEventId eventId) {
            super(eventId);
        }
    }

}

