// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.lot;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.AbstractCommand;

public abstract class AbstractLotCommand extends AbstractCommand implements LotCommand {

    private String lotId;

    public String getLotId()
    {
        return this.lotId;
    }

    public void setLotId(String lotId)
    {
        this.lotId = lotId;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }


    public static abstract class AbstractCreateOrMergePatchLot extends AbstractLotCommand implements CreateOrMergePatchLot
    {

        private java.math.BigDecimal quantity;

        public java.math.BigDecimal getQuantity()
        {
            return this.quantity;
        }

        public void setQuantity(java.math.BigDecimal quantity)
        {
            this.quantity = quantity;
        }

        private OffsetDateTime expirationDate;

        public OffsetDateTime getExpirationDate()
        {
            return this.expirationDate;
        }

        public void setExpirationDate(OffsetDateTime expirationDate)
        {
            this.expirationDate = expirationDate;
        }

        private String active;

        public String getActive()
        {
            return this.active;
        }

        public void setActive(String active)
        {
            this.active = active;
        }

        public LotIdentificationCommand.CreateLotIdentification newCreateLotIdentification()
        {
            AbstractLotIdentificationCommand.SimpleCreateLotIdentification c = new AbstractLotIdentificationCommand.SimpleCreateLotIdentification();
            c.setLotId(this.getLotId());

            return c;
        }

        public LotIdentificationCommand.MergePatchLotIdentification newMergePatchLotIdentification()
        {
            AbstractLotIdentificationCommand.SimpleMergePatchLotIdentification c = new AbstractLotIdentificationCommand.SimpleMergePatchLotIdentification();
            c.setLotId(this.getLotId());

            return c;
        }

        public LotIdentificationCommand.RemoveLotIdentification newRemoveLotIdentification()
        {
            AbstractLotIdentificationCommand.SimpleRemoveLotIdentification c = new AbstractLotIdentificationCommand.SimpleRemoveLotIdentification();
            c.setLotId(this.getLotId());

            return c;
        }

    }

    public static abstract class AbstractCreateLot extends AbstractCreateOrMergePatchLot implements CreateLot
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }

        private CreateLotIdentificationCommandCollection createLotIdentificationCommands = new SimpleCreateLotIdentificationCommandCollection();

        public CreateLotIdentificationCommandCollection getCreateLotIdentificationCommands() {
            return this.createLotIdentificationCommands;
        }

        public CreateLotIdentificationCommandCollection getLotIdentifications() {
            return this.createLotIdentificationCommands; //lotIdentifications;
        }

    }

    public static abstract class AbstractMergePatchLot extends AbstractCreateOrMergePatchLot implements MergePatchLot
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }

        private Boolean isPropertyQuantityRemoved;

        public Boolean getIsPropertyQuantityRemoved()
        {
            return this.isPropertyQuantityRemoved;
        }

        public void setIsPropertyQuantityRemoved(Boolean removed)
        {
            this.isPropertyQuantityRemoved = removed;
        }

        private Boolean isPropertyExpirationDateRemoved;

        public Boolean getIsPropertyExpirationDateRemoved()
        {
            return this.isPropertyExpirationDateRemoved;
        }

        public void setIsPropertyExpirationDateRemoved(Boolean removed)
        {
            this.isPropertyExpirationDateRemoved = removed;
        }

        private Boolean isPropertyActiveRemoved;

        public Boolean getIsPropertyActiveRemoved()
        {
            return this.isPropertyActiveRemoved;
        }

        public void setIsPropertyActiveRemoved(Boolean removed)
        {
            this.isPropertyActiveRemoved = removed;
        }


        private LotIdentificationCommandCollection lotIdentificationCommands = new SimpleLotIdentificationCommandCollection();

        public LotIdentificationCommandCollection getLotIdentificationCommands()
        {
            return this.lotIdentificationCommands;
        }

    }

    public static class SimpleCreateLot extends AbstractCreateLot
    {
    }

    
    public static class SimpleMergePatchLot extends AbstractMergePatchLot
    {
    }

    
    public static class SimpleDeleteLot extends AbstractLotCommand implements DeleteLot
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_DELETE;
        }
    }

    
    public static class SimpleCreateLotIdentificationCommandCollection implements CreateLotIdentificationCommandCollection {
        private List<LotIdentificationCommand.CreateLotIdentification> innerCommands = new ArrayList<LotIdentificationCommand.CreateLotIdentification>();

        public void add(LotIdentificationCommand.CreateLotIdentification c) {
            innerCommands.add(c);
        }

        public void remove(LotIdentificationCommand.CreateLotIdentification c) {
            innerCommands.remove(c);
        }

        public void clear() {
            innerCommands.clear();
        }

        @Override
        public Iterator<LotIdentificationCommand.CreateLotIdentification> iterator() {
            return innerCommands.iterator();
        }
    }

    public static class SimpleLotIdentificationCommandCollection implements LotIdentificationCommandCollection {
        private List<LotIdentificationCommand> innerCommands = new ArrayList<LotIdentificationCommand>();

        public void add(LotIdentificationCommand c) {
            innerCommands.add(c);
        }

        public void remove(LotIdentificationCommand c) {
            innerCommands.remove(c);
        }

        public void clear() {
            innerCommands.clear();
        }

        @Override
        public Iterator<LotIdentificationCommand> iterator() {
            return innerCommands.iterator();
        }
    }


}

