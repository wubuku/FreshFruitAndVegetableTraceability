// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.inventoryitem;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface InventoryItemCommand extends Command {

    String getInventoryItemId();

    void setInventoryItemId(String inventoryItemId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(InventoryItemState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((InventoryItemCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (isCreationCommand((InventoryItemCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(InventoryItemCommand c) {
        if ((c instanceof InventoryItemCommand.CreateInventoryItem) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(InventoryItemState.VERSION_NULL)))
            return true;
        if ((c instanceof InventoryItemCommand.MergePatchInventoryItem))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
            if (commandType.equals("RecordInventoryEntry"))
                return false;
        }

        if (c.getVersion().equals(InventoryItemState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchInventoryItem extends InventoryItemCommand {
        String getInventoryItemTypeId();

        void setInventoryItemTypeId(String inventoryItemTypeId);

        String getProductId();

        void setProductId(String productId);

        String getPartyId();

        void setPartyId(String partyId);

        String getOwnerPartyId();

        void setOwnerPartyId(String ownerPartyId);

        String getStatusId();

        void setStatusId(String statusId);

        OffsetDateTime getDatetimeReceived();

        void setDatetimeReceived(OffsetDateTime datetimeReceived);

        OffsetDateTime getDatetimeManufactured();

        void setDatetimeManufactured(OffsetDateTime datetimeManufactured);

        OffsetDateTime getExpireDate();

        void setExpireDate(OffsetDateTime expireDate);

        String getFacilityId();

        void setFacilityId(String facilityId);

        String getContainerId();

        void setContainerId(String containerId);

        String getLotId();

        void setLotId(String lotId);

        String getUomId();

        void setUomId(String uomId);

        String getBinNumber();

        void setBinNumber(String binNumber);

        String getLocationSeqId();

        void setLocationSeqId(String locationSeqId);

        String getComments();

        void setComments(String comments);

        java.math.BigDecimal getQuantityOnHandTotal();

        void setQuantityOnHandTotal(java.math.BigDecimal quantityOnHandTotal);

        java.math.BigDecimal getAvailableToPromiseTotal();

        void setAvailableToPromiseTotal(java.math.BigDecimal availableToPromiseTotal);

        java.math.BigDecimal getAccountingQuantityTotal();

        void setAccountingQuantityTotal(java.math.BigDecimal accountingQuantityTotal);

        String getSerialNumber();

        void setSerialNumber(String serialNumber);

        String getSoftIdentifier();

        void setSoftIdentifier(String softIdentifier);

        String getActivationNumber();

        void setActivationNumber(String activationNumber);

        OffsetDateTime getActivationValidThru();

        void setActivationValidThru(OffsetDateTime activationValidThru);

        java.math.BigDecimal getUnitCost();

        void setUnitCost(java.math.BigDecimal unitCost);

        String getCurrencyUomId();

        void setCurrencyUomId(String currencyUomId);

        String getFixedAssetId();

        void setFixedAssetId(String fixedAssetId);

        String getInventoryItemAttributeHash();

        void setInventoryItemAttributeHash(String inventoryItemAttributeHash);

    }

    interface CreateInventoryItem extends CreateOrMergePatchInventoryItem {
    }

    interface MergePatchInventoryItem extends CreateOrMergePatchInventoryItem {
        Boolean getIsPropertyInventoryItemTypeIdRemoved();

        void setIsPropertyInventoryItemTypeIdRemoved(Boolean removed);

        Boolean getIsPropertyProductIdRemoved();

        void setIsPropertyProductIdRemoved(Boolean removed);

        Boolean getIsPropertyPartyIdRemoved();

        void setIsPropertyPartyIdRemoved(Boolean removed);

        Boolean getIsPropertyOwnerPartyIdRemoved();

        void setIsPropertyOwnerPartyIdRemoved(Boolean removed);

        Boolean getIsPropertyStatusIdRemoved();

        void setIsPropertyStatusIdRemoved(Boolean removed);

        Boolean getIsPropertyDatetimeReceivedRemoved();

        void setIsPropertyDatetimeReceivedRemoved(Boolean removed);

        Boolean getIsPropertyDatetimeManufacturedRemoved();

        void setIsPropertyDatetimeManufacturedRemoved(Boolean removed);

        Boolean getIsPropertyExpireDateRemoved();

        void setIsPropertyExpireDateRemoved(Boolean removed);

        Boolean getIsPropertyFacilityIdRemoved();

        void setIsPropertyFacilityIdRemoved(Boolean removed);

        Boolean getIsPropertyContainerIdRemoved();

        void setIsPropertyContainerIdRemoved(Boolean removed);

        Boolean getIsPropertyLotIdRemoved();

        void setIsPropertyLotIdRemoved(Boolean removed);

        Boolean getIsPropertyUomIdRemoved();

        void setIsPropertyUomIdRemoved(Boolean removed);

        Boolean getIsPropertyBinNumberRemoved();

        void setIsPropertyBinNumberRemoved(Boolean removed);

        Boolean getIsPropertyLocationSeqIdRemoved();

        void setIsPropertyLocationSeqIdRemoved(Boolean removed);

        Boolean getIsPropertyCommentsRemoved();

        void setIsPropertyCommentsRemoved(Boolean removed);

        Boolean getIsPropertyQuantityOnHandTotalRemoved();

        void setIsPropertyQuantityOnHandTotalRemoved(Boolean removed);

        Boolean getIsPropertyAvailableToPromiseTotalRemoved();

        void setIsPropertyAvailableToPromiseTotalRemoved(Boolean removed);

        Boolean getIsPropertyAccountingQuantityTotalRemoved();

        void setIsPropertyAccountingQuantityTotalRemoved(Boolean removed);

        Boolean getIsPropertySerialNumberRemoved();

        void setIsPropertySerialNumberRemoved(Boolean removed);

        Boolean getIsPropertySoftIdentifierRemoved();

        void setIsPropertySoftIdentifierRemoved(Boolean removed);

        Boolean getIsPropertyActivationNumberRemoved();

        void setIsPropertyActivationNumberRemoved(Boolean removed);

        Boolean getIsPropertyActivationValidThruRemoved();

        void setIsPropertyActivationValidThruRemoved(Boolean removed);

        Boolean getIsPropertyUnitCostRemoved();

        void setIsPropertyUnitCostRemoved(Boolean removed);

        Boolean getIsPropertyCurrencyUomIdRemoved();

        void setIsPropertyCurrencyUomIdRemoved(Boolean removed);

        Boolean getIsPropertyFixedAssetIdRemoved();

        void setIsPropertyFixedAssetIdRemoved(Boolean removed);

        Boolean getIsPropertyInventoryItemAttributeHashRemoved();

        void setIsPropertyInventoryItemAttributeHashRemoved(Boolean removed);


    }

    interface DeleteInventoryItem extends InventoryItemCommand {
    }

}

