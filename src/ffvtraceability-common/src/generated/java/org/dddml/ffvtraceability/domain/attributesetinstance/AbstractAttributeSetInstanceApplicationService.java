// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attributesetinstance;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractAttributeSetInstanceApplicationService implements AttributeSetInstanceApplicationService {

    private EventStore eventStore;

    protected EventStore getEventStore()
    {
        return eventStore;
    }

    private AttributeSetInstanceStateRepository stateRepository;

    protected AttributeSetInstanceStateRepository getStateRepository() {
        return stateRepository;
    }

    private AttributeSetInstanceStateQueryRepository stateQueryRepository;

    private IdGenerator<String, AttributeSetInstanceCommand.CreateAttributeSetInstance, AttributeSetInstanceState> attributeSetInstanceIdGenerator;

    protected IdGenerator<String, AttributeSetInstanceCommand.CreateAttributeSetInstance, AttributeSetInstanceState> getIdGenerator() {
        return attributeSetInstanceIdGenerator;
    }
    protected AttributeSetInstanceStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    private AggregateEventListener<AttributeSetInstanceAggregate, AttributeSetInstanceState> aggregateEventListener;

    public AggregateEventListener<AttributeSetInstanceAggregate, AttributeSetInstanceState> getAggregateEventListener() {
        return aggregateEventListener;
    }

    public void setAggregateEventListener(AggregateEventListener<AttributeSetInstanceAggregate, AttributeSetInstanceState> eventListener) {
        this.aggregateEventListener = eventListener;
    }

    public AbstractAttributeSetInstanceApplicationService(EventStore eventStore, AttributeSetInstanceStateRepository stateRepository, AttributeSetInstanceStateQueryRepository stateQueryRepository, IdGenerator<String, AttributeSetInstanceCommand.CreateAttributeSetInstance, AttributeSetInstanceState> idGenerator) {
        this.eventStore = eventStore;
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
        this.attributeSetInstanceIdGenerator = idGenerator;
    }

    public String createWithoutId(AttributeSetInstanceCommand.CreateAttributeSetInstance c) {
        String idObj = getIdGenerator().generateId(c);
        AttributeSetInstanceState state = getStateRepository().get(idObj, true);
        if (state != null) {
            if (getIdGenerator().equals(c, state)) {
                return state.getAttributeSetInstanceId();
            }

            if (getIdGenerator().isArbitraryIdEnabled()) {
                idObj = getIdGenerator().getNextId();
            } else {
                throw DomainError.named("instanceExist", "the instance already exist, Id: %1$s , aggregate name: %2$s ", idObj, "AttributeSetInstance");
            }
        }
        c.setAttributeSetInstanceId(idObj);
        when(c);
        return idObj;
   
    }

    public void when(AttributeSetInstanceCommand.CreateAttributeSetInstance c) {
        update(c, ar -> ar.create(c));
    }

    public AttributeSetInstanceState get(String id) {
        AttributeSetInstanceState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<AttributeSetInstanceState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<AttributeSetInstanceState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<AttributeSetInstanceState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<AttributeSetInstanceState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public AttributeSetInstanceEvent getEvent(String attributeSetInstanceId, long version) {
        AttributeSetInstanceEvent e = (AttributeSetInstanceEvent)getEventStore().getEvent(toEventStoreAggregateId(attributeSetInstanceId), version);
        if (e != null) {
            ((AttributeSetInstanceEvent.SqlAttributeSetInstanceEvent)e).setEventReadOnly(true); 
        } else if (version == -1) {
            return getEvent(attributeSetInstanceId, 0);
        }
        return e;
    }

    public AttributeSetInstanceState getHistoryState(String attributeSetInstanceId, long version) {
        EventStream eventStream = getEventStore().loadEventStream(AbstractAttributeSetInstanceEvent.class, toEventStoreAggregateId(attributeSetInstanceId), version - 1);
        return new AbstractAttributeSetInstanceState.SimpleAttributeSetInstanceState(eventStream.getEvents());
    }


    public AttributeSetInstanceAggregate getAttributeSetInstanceAggregate(AttributeSetInstanceState state) {
        return new AbstractAttributeSetInstanceAggregate.SimpleAttributeSetInstanceAggregate(state);
    }

    public EventStoreAggregateId toEventStoreAggregateId(String aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(AttributeSetInstanceCommand c, Consumer<AttributeSetInstanceAggregate> action) {
        String aggregateId = c.getAttributeSetInstanceId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        AttributeSetInstanceState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        AttributeSetInstanceAggregate aggregate = getAttributeSetInstanceAggregate(state);
        aggregate.throwOnInvalidStateTransition(c);
        action.accept(aggregate);
        persist(eventStoreAggregateId, c.getVersion() == null ? AttributeSetInstanceState.VERSION_NULL : c.getVersion(), aggregate, state); // State version may be null!

    }

    private DomainEventPublisher domainEventPublisher;

    public void setDomainEventPublisher(DomainEventPublisher domainEventPublisher) {
        this.domainEventPublisher = domainEventPublisher;
    }

    public DomainEventPublisher getDomainEventPublisher() {
        if (domainEventPublisher != null) { return domainEventPublisher; }
        return ApplicationContext.current.get(DomainEventPublisher.class);
    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, AttributeSetInstanceAggregate aggregate, AttributeSetInstanceState state) {
        final DomainEventPublisher ep = getDomainEventPublisher();
        getEventStore().appendEvents(eventStoreAggregateId, version, 
            aggregate.getChanges(), (events) -> { 
                if (ep != null) {
                    ep.publish(org.dddml.ffvtraceability.domain.attributesetinstance.AttributeSetInstanceAggregate.class,
                        eventStoreAggregateId.getId(),
                        (List<Event>)events);
                }
            });
        if (aggregateEventListener != null) {
            aggregateEventListener.eventAppended(new AggregateEvent<>(aggregate, state, aggregate.getChanges()));
        }
    }

    void initialize(AttributeSetInstanceEvent.AttributeSetInstanceStateCreated stateCreated) {
        String aggregateId = ((AttributeSetInstanceEvent.SqlAttributeSetInstanceEvent)stateCreated).getAttributeSetInstanceEventId().getAttributeSetInstanceId();
        AttributeSetInstanceState.SqlAttributeSetInstanceState state = new AbstractAttributeSetInstanceState.SimpleAttributeSetInstanceState();
        state.setAttributeSetInstanceId(aggregateId);

        AttributeSetInstanceAggregate aggregate = getAttributeSetInstanceAggregate(state);
        ((AbstractAttributeSetInstanceAggregate) aggregate).apply(stateCreated);

        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        persist(eventStoreAggregateId, ((AttributeSetInstanceEvent.SqlAttributeSetInstanceEvent)stateCreated).getAttributeSetInstanceEventId().getVersion(), aggregate, state);
    }

    protected boolean isDuplicateCommand(AttributeSetInstanceCommand command, EventStoreAggregateId eventStoreAggregateId, AttributeSetInstanceState state) {
        boolean duplicate = false;
        if (command.getVersion() == null) { command.setVersion(AttributeSetInstanceState.VERSION_NULL); }
        if (state.getVersion() != null && state.getVersion() > command.getVersion()) {
            Event lastEvent = getEventStore().getEvent(AbstractAttributeSetInstanceEvent.class, eventStoreAggregateId, command.getVersion());
            if (lastEvent != null && lastEvent instanceof AbstractEvent
               && command.getCommandId() != null && command.getCommandId().equals(((AbstractEvent) lastEvent).getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    public static class SimpleAttributeSetInstanceApplicationService extends AbstractAttributeSetInstanceApplicationService {
        public SimpleAttributeSetInstanceApplicationService(EventStore eventStore, AttributeSetInstanceStateRepository stateRepository, AttributeSetInstanceStateQueryRepository stateQueryRepository, IdGenerator<String, AttributeSetInstanceCommand.CreateAttributeSetInstance, AttributeSetInstanceState> idGenerator)
        {
            super(eventStore, stateRepository, stateQueryRepository, idGenerator);
        }
    }

}

