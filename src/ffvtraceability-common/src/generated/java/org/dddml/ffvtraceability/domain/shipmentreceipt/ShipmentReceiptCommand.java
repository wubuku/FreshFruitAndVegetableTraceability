// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipmentreceipt;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.partyrole.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface ShipmentReceiptCommand extends Command {

    String getReceiptId();

    void setReceiptId(String receiptId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(ShipmentReceiptState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((ShipmentReceiptCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (state.getDeleted() != null && state.getDeleted()) {
            throw DomainError.named("zombie", "Can't do anything to deleted aggregate.");
        }
        if (isCreationCommand((ShipmentReceiptCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(ShipmentReceiptCommand c) {
        if ((c instanceof ShipmentReceiptCommand.CreateShipmentReceipt) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(ShipmentReceiptState.VERSION_NULL)))
            return true;
        if ((c instanceof ShipmentReceiptCommand.MergePatchShipmentReceipt))
            return false;
        if ((c instanceof ShipmentReceiptCommand.DeleteShipmentReceipt))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(ShipmentReceiptState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchShipmentReceipt extends ShipmentReceiptCommand
    {

        String getInventoryItemId();

        void setInventoryItemId(String inventoryItemId);

        String getProductId();

        void setProductId(String productId);

        String getShipmentId();

        void setShipmentId(String shipmentId);

        String getShipmentItemSeqId();

        void setShipmentItemSeqId(String shipmentItemSeqId);

        String getShipmentPackageSeqId();

        void setShipmentPackageSeqId(String shipmentPackageSeqId);

        String getOrderId();

        void setOrderId(String orderId);

        String getOrderItemSeqId();

        void setOrderItemSeqId(String orderItemSeqId);

        String getReturnId();

        void setReturnId(String returnId);

        String getReturnItemSeqId();

        void setReturnItemSeqId(String returnItemSeqId);

        String getRejectionId();

        void setRejectionId(String rejectionId);

        String getReceivedByUserLoginId();

        void setReceivedByUserLoginId(String receivedByUserLoginId);

        OffsetDateTime getDatetimeReceived();

        void setDatetimeReceived(OffsetDateTime datetimeReceived);

        String getItemDescription();

        void setItemDescription(String itemDescription);

        java.math.BigDecimal getQuantityAccepted();

        void setQuantityAccepted(java.math.BigDecimal quantityAccepted);

        java.math.BigDecimal getQuantityRejected();

        void setQuantityRejected(java.math.BigDecimal quantityRejected);

        String getLotId();

        void setLotId(String lotId);

        String getLocationSeqId();

        void setLocationSeqId(String locationSeqId);

        Long getCasesAccepted();

        void setCasesAccepted(Long casesAccepted);

        Long getCasesRejected();

        void setCasesRejected(Long casesRejected);

        Boolean getActive();

        void setActive(Boolean active);

    }

    interface CreateShipmentReceipt extends CreateOrMergePatchShipmentReceipt
    {
        CreateShipmentReceiptRoleCommandCollection getCreateShipmentReceiptRoleCommands();

        ShipmentReceiptRoleCommand.CreateShipmentReceiptRole newCreateShipmentReceiptRole();

    }

    interface MergePatchShipmentReceipt extends CreateOrMergePatchShipmentReceipt
    {
        Boolean getIsPropertyInventoryItemIdRemoved();

        void setIsPropertyInventoryItemIdRemoved(Boolean removed);

        Boolean getIsPropertyProductIdRemoved();

        void setIsPropertyProductIdRemoved(Boolean removed);

        Boolean getIsPropertyShipmentIdRemoved();

        void setIsPropertyShipmentIdRemoved(Boolean removed);

        Boolean getIsPropertyShipmentItemSeqIdRemoved();

        void setIsPropertyShipmentItemSeqIdRemoved(Boolean removed);

        Boolean getIsPropertyShipmentPackageSeqIdRemoved();

        void setIsPropertyShipmentPackageSeqIdRemoved(Boolean removed);

        Boolean getIsPropertyOrderIdRemoved();

        void setIsPropertyOrderIdRemoved(Boolean removed);

        Boolean getIsPropertyOrderItemSeqIdRemoved();

        void setIsPropertyOrderItemSeqIdRemoved(Boolean removed);

        Boolean getIsPropertyReturnIdRemoved();

        void setIsPropertyReturnIdRemoved(Boolean removed);

        Boolean getIsPropertyReturnItemSeqIdRemoved();

        void setIsPropertyReturnItemSeqIdRemoved(Boolean removed);

        Boolean getIsPropertyRejectionIdRemoved();

        void setIsPropertyRejectionIdRemoved(Boolean removed);

        Boolean getIsPropertyReceivedByUserLoginIdRemoved();

        void setIsPropertyReceivedByUserLoginIdRemoved(Boolean removed);

        Boolean getIsPropertyDatetimeReceivedRemoved();

        void setIsPropertyDatetimeReceivedRemoved(Boolean removed);

        Boolean getIsPropertyItemDescriptionRemoved();

        void setIsPropertyItemDescriptionRemoved(Boolean removed);

        Boolean getIsPropertyQuantityAcceptedRemoved();

        void setIsPropertyQuantityAcceptedRemoved(Boolean removed);

        Boolean getIsPropertyQuantityRejectedRemoved();

        void setIsPropertyQuantityRejectedRemoved(Boolean removed);

        Boolean getIsPropertyLotIdRemoved();

        void setIsPropertyLotIdRemoved(Boolean removed);

        Boolean getIsPropertyLocationSeqIdRemoved();

        void setIsPropertyLocationSeqIdRemoved(Boolean removed);

        Boolean getIsPropertyCasesAcceptedRemoved();

        void setIsPropertyCasesAcceptedRemoved(Boolean removed);

        Boolean getIsPropertyCasesRejectedRemoved();

        void setIsPropertyCasesRejectedRemoved(Boolean removed);

        Boolean getIsPropertyActiveRemoved();

        void setIsPropertyActiveRemoved(Boolean removed);


        ShipmentReceiptRoleCommandCollection getShipmentReceiptRoleCommands();

        ShipmentReceiptRoleCommand.CreateShipmentReceiptRole newCreateShipmentReceiptRole();

        ShipmentReceiptRoleCommand.MergePatchShipmentReceiptRole newMergePatchShipmentReceiptRole();

        ShipmentReceiptRoleCommand.RemoveShipmentReceiptRole newRemoveShipmentReceiptRole();

    }

    interface DeleteShipmentReceipt extends ShipmentReceiptCommand
    {
    }

    interface CreateShipmentReceiptRoleCommandCollection extends Iterable<ShipmentReceiptRoleCommand.CreateShipmentReceiptRole>
    {
        void add(ShipmentReceiptRoleCommand.CreateShipmentReceiptRole c);

        void remove(ShipmentReceiptRoleCommand.CreateShipmentReceiptRole c);

        void clear();
    }

    interface ShipmentReceiptRoleCommandCollection extends Iterable<ShipmentReceiptRoleCommand>
    {
        void add(ShipmentReceiptRoleCommand c);

        void remove(ShipmentReceiptRoleCommand c);

        void clear();
    }

}

