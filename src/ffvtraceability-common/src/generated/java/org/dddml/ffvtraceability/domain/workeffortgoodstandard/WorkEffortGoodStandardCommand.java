// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.workeffortgoodstandard;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface WorkEffortGoodStandardCommand extends Command {

    WorkEffortGoodStandardId getWorkEffortGoodStandardId();

    void setWorkEffortGoodStandardId(WorkEffortGoodStandardId workEffortGoodStandardId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(WorkEffortGoodStandardState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((WorkEffortGoodStandardCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (isCreationCommand((WorkEffortGoodStandardCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(WorkEffortGoodStandardCommand c) {
        if ((c instanceof WorkEffortGoodStandardCommand.CreateWorkEffortGoodStandard) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(WorkEffortGoodStandardState.VERSION_NULL)))
            return true;
        if ((c instanceof WorkEffortGoodStandardCommand.MergePatchWorkEffortGoodStandard))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(WorkEffortGoodStandardState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchWorkEffortGoodStandard extends WorkEffortGoodStandardCommand {
        OffsetDateTime getThruDate();

        void setThruDate(OffsetDateTime thruDate);

        String getStatusId();

        void setStatusId(String statusId);

        java.math.BigDecimal getEstimatedQuantity();

        void setEstimatedQuantity(java.math.BigDecimal estimatedQuantity);

        java.math.BigDecimal getEstimatedCost();

        void setEstimatedCost(java.math.BigDecimal estimatedCost);

    }

    interface CreateWorkEffortGoodStandard extends CreateOrMergePatchWorkEffortGoodStandard {
    }

    interface MergePatchWorkEffortGoodStandard extends CreateOrMergePatchWorkEffortGoodStandard {
        Boolean getIsPropertyThruDateRemoved();

        void setIsPropertyThruDateRemoved(Boolean removed);

        Boolean getIsPropertyStatusIdRemoved();

        void setIsPropertyStatusIdRemoved(Boolean removed);

        Boolean getIsPropertyEstimatedQuantityRemoved();

        void setIsPropertyEstimatedQuantityRemoved(Boolean removed);

        Boolean getIsPropertyEstimatedCostRemoved();

        void setIsPropertyEstimatedCostRemoved(Boolean removed);


    }

    interface DeleteWorkEffortGoodStandard extends WorkEffortGoodStandardCommand {
    }

}

