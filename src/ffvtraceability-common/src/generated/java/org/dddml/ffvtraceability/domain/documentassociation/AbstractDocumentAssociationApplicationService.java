// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.documentassociation;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import org.dddml.ffvtraceability.domain.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractDocumentAssociationApplicationService implements DocumentAssociationApplicationService {

    private EventStore eventStore;

    protected EventStore getEventStore()
    {
        return eventStore;
    }

    private DocumentAssociationStateRepository stateRepository;

    protected DocumentAssociationStateRepository getStateRepository() {
        return stateRepository;
    }

    private DocumentAssociationStateQueryRepository stateQueryRepository;

    protected DocumentAssociationStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    private AggregateEventListener<DocumentAssociationAggregate, DocumentAssociationState> aggregateEventListener;

    public AggregateEventListener<DocumentAssociationAggregate, DocumentAssociationState> getAggregateEventListener() {
        return aggregateEventListener;
    }

    public void setAggregateEventListener(AggregateEventListener<DocumentAssociationAggregate, DocumentAssociationState> eventListener) {
        this.aggregateEventListener = eventListener;
    }

    public AbstractDocumentAssociationApplicationService(EventStore eventStore, DocumentAssociationStateRepository stateRepository, DocumentAssociationStateQueryRepository stateQueryRepository) {
        this.eventStore = eventStore;
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(DocumentAssociationCommand.CreateDocumentAssociation c) {
        update(c, ar -> ar.create(c));
    }

    public void when(DocumentAssociationCommand.MergePatchDocumentAssociation c) {
        update(c, ar -> ar.mergePatch(c));
    }

    public void when(DocumentAssociationCommand.DeleteDocumentAssociation c) {
        update(c, ar -> ar.delete(c));
    }

    public DocumentAssociationState get(DocumentAssociationId id) {
        DocumentAssociationState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<DocumentAssociationState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<DocumentAssociationState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<DocumentAssociationState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<DocumentAssociationState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public DocumentAssociationEvent getEvent(DocumentAssociationId documentAssociationId, long version) {
        DocumentAssociationEvent e = (DocumentAssociationEvent)getEventStore().getEvent(toEventStoreAggregateId(documentAssociationId), version);
        if (e != null) {
            ((DocumentAssociationEvent.SqlDocumentAssociationEvent)e).setEventReadOnly(true); 
        } else if (version == -1) {
            return getEvent(documentAssociationId, 0);
        }
        return e;
    }

    public DocumentAssociationState getHistoryState(DocumentAssociationId documentAssociationId, long version) {
        EventStream eventStream = getEventStore().loadEventStream(AbstractDocumentAssociationEvent.class, toEventStoreAggregateId(documentAssociationId), version - 1);
        return new AbstractDocumentAssociationState.SimpleDocumentAssociationState(eventStream.getEvents());
    }


    public DocumentAssociationAggregate getDocumentAssociationAggregate(DocumentAssociationState state) {
        return new AbstractDocumentAssociationAggregate.SimpleDocumentAssociationAggregate(state);
    }

    public EventStoreAggregateId toEventStoreAggregateId(DocumentAssociationId aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(DocumentAssociationCommand c, Consumer<DocumentAssociationAggregate> action) {
        DocumentAssociationId aggregateId = c.getDocumentAssociationId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        DocumentAssociationState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        DocumentAssociationAggregate aggregate = getDocumentAssociationAggregate(state);
        aggregate.throwOnInvalidStateTransition(c);
        action.accept(aggregate);
        persist(eventStoreAggregateId, c.getVersion() == null ? DocumentAssociationState.VERSION_NULL : c.getVersion(), aggregate, state); // State version may be null!

    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, DocumentAssociationAggregate aggregate, DocumentAssociationState state) {
        getEventStore().appendEvents(eventStoreAggregateId, version, 
            aggregate.getChanges(), (events) -> { 
                getStateRepository().save(state); 
            });
        if (aggregateEventListener != null) {
            aggregateEventListener.eventAppended(new AggregateEvent<>(aggregate, state, aggregate.getChanges()));
        }
    }

    public void initialize(DocumentAssociationEvent.DocumentAssociationStateCreated stateCreated) {
        DocumentAssociationId aggregateId = ((DocumentAssociationEvent.SqlDocumentAssociationEvent)stateCreated).getDocumentAssociationEventId().getDocumentAssociationId();
        DocumentAssociationState.SqlDocumentAssociationState state = new AbstractDocumentAssociationState.SimpleDocumentAssociationState();
        state.setDocumentAssociationId(aggregateId);

        DocumentAssociationAggregate aggregate = getDocumentAssociationAggregate(state);
        ((AbstractDocumentAssociationAggregate) aggregate).apply(stateCreated);

        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        persist(eventStoreAggregateId, ((DocumentAssociationEvent.SqlDocumentAssociationEvent)stateCreated).getDocumentAssociationEventId().getVersion(), aggregate, state);
    }

    protected boolean isDuplicateCommand(DocumentAssociationCommand command, EventStoreAggregateId eventStoreAggregateId, DocumentAssociationState state) {
        boolean duplicate = false;
        if (command.getVersion() == null) { command.setVersion(DocumentAssociationState.VERSION_NULL); }
        if (state.getVersion() != null && state.getVersion() > command.getVersion()) {
            Event lastEvent = getEventStore().getEvent(AbstractDocumentAssociationEvent.class, eventStoreAggregateId, command.getVersion());
            if (lastEvent != null && lastEvent instanceof AbstractEvent
               && command.getCommandId() != null && command.getCommandId().equals(((AbstractEvent) lastEvent).getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    public static class SimpleDocumentAssociationApplicationService extends AbstractDocumentAssociationApplicationService {
        public SimpleDocumentAssociationApplicationService(EventStore eventStore, DocumentAssociationStateRepository stateRepository, DocumentAssociationStateQueryRepository stateQueryRepository)
        {
            super(eventStore, stateRepository, stateQueryRepository);
        }
    }

}

