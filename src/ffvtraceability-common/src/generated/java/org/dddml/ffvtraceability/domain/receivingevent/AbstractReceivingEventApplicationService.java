// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.receivingevent;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import org.dddml.ffvtraceability.domain.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractReceivingEventApplicationService implements ReceivingEventApplicationService {
    private ReceivingEventStateRepository stateRepository;

    protected ReceivingEventStateRepository getStateRepository() {
        return stateRepository;
    }

    private ReceivingEventStateQueryRepository stateQueryRepository;

    protected ReceivingEventStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    public AbstractReceivingEventApplicationService(ReceivingEventStateRepository stateRepository, ReceivingEventStateQueryRepository stateQueryRepository) {
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(ReceivingEventCommand.CreateReceivingEvent c) {
        update(c, s -> {
        // //////////////////////////
        throwOnConcurrencyConflict(s, c);
        ReceivingEventState.SqlReceivingEventState ss = ((ReceivingEventState.SqlReceivingEventState)s);
        ss.setTraceabilityLotCode(c.getTraceabilityLotCode());
        ss.setQuantityAndUom(c.getQuantityAndUom());
        ss.setProductDescription(c.getProductDescription());
        ss.setShipToLocation(c.getShipToLocation());
        ss.setShipFromLocation(c.getShipFromLocation());
        ss.setReceiveDate(c.getReceiveDate());
        ss.setTlcSourceOrTlcSourceReference(c.getTlcSourceOrTlcSourceReference());
        ss.setReferenceDocuments(new HashSet<>(Arrays.asList(c.getReferenceDocuments())));
        ss.setCreatedBy(c.getRequesterId());
        ss.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        ss.setCommandId(c.getCommandId());
        // //////////////////////////
        });
    }

    public void when(ReceivingEventCommand.MergePatchReceivingEvent c) {
        update(c, s -> {
        // //////////////////////////////////
        throwOnConcurrencyConflict(s, c);
        ReceivingEventState.SqlReceivingEventState ss = ((ReceivingEventState.SqlReceivingEventState)s);
        if (c.getTraceabilityLotCode() == null) {
            if (c.getIsPropertyTraceabilityLotCodeRemoved() != null && c.getIsPropertyTraceabilityLotCodeRemoved()) {
                ss.setTraceabilityLotCode(null);
            }
        } else {
            ss.setTraceabilityLotCode(c.getTraceabilityLotCode());
        }
        if (c.getQuantityAndUom() == null) {
            if (c.getIsPropertyQuantityAndUomRemoved() != null && c.getIsPropertyQuantityAndUomRemoved()) {
                ss.setQuantityAndUom(null);
            }
        } else {
            ss.setQuantityAndUom(c.getQuantityAndUom());
        }
        if (c.getProductDescription() == null) {
            if (c.getIsPropertyProductDescriptionRemoved() != null && c.getIsPropertyProductDescriptionRemoved()) {
                ss.setProductDescription(null);
            }
        } else {
            ss.setProductDescription(c.getProductDescription());
        }
        if (c.getShipToLocation() == null) {
            if (c.getIsPropertyShipToLocationRemoved() != null && c.getIsPropertyShipToLocationRemoved()) {
                ss.setShipToLocation(null);
            }
        } else {
            ss.setShipToLocation(c.getShipToLocation());
        }
        if (c.getShipFromLocation() == null) {
            if (c.getIsPropertyShipFromLocationRemoved() != null && c.getIsPropertyShipFromLocationRemoved()) {
                ss.setShipFromLocation(null);
            }
        } else {
            ss.setShipFromLocation(c.getShipFromLocation());
        }
        if (c.getReceiveDate() == null) {
            if (c.getIsPropertyReceiveDateRemoved() != null && c.getIsPropertyReceiveDateRemoved()) {
                ss.setReceiveDate(null);
            }
        } else {
            ss.setReceiveDate(c.getReceiveDate());
        }
        if (c.getTlcSourceOrTlcSourceReference() == null) {
            if (c.getIsPropertyTlcSourceOrTlcSourceReferenceRemoved() != null && c.getIsPropertyTlcSourceOrTlcSourceReferenceRemoved()) {
                ss.setTlcSourceOrTlcSourceReference(null);
            }
        } else {
            ss.setTlcSourceOrTlcSourceReference(c.getTlcSourceOrTlcSourceReference());
        }
        if (c.getReferenceDocuments() == null) {
            if (c.getIsPropertyReferenceDocumentsRemoved() != null && c.getIsPropertyReferenceDocumentsRemoved()) {
                ss.setReferenceDocuments(null);
            }
        } else {
            ss.setReferenceDocuments(new HashSet<>(Arrays.asList(c.getReferenceDocuments())));
        }
        ss.setUpdatedBy(c.getRequesterId());
        ss.setUpdatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        ss.setCommandId(c.getCommandId());
        // //////////////////////////////////
        });
    }

    public ReceivingEventState get(String id) {
        ReceivingEventState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<ReceivingEventState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<ReceivingEventState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<ReceivingEventState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<ReceivingEventState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public EventStoreAggregateId toEventStoreAggregateId(String aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(ReceivingEventCommand c, Consumer<ReceivingEventState> action) {
        String aggregateId = c.getEventId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        ReceivingEventState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        ReceivingEventCommand.throwOnInvalidStateTransition(state, c);
        action.accept(state);
        persist(eventStoreAggregateId, c.getVersion() == null ? ReceivingEventState.VERSION_NULL : c.getVersion(), state); // State version may be null!

    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, ReceivingEventState state) {
        getStateRepository().save(state);
    }

    protected boolean isDuplicateCommand(ReceivingEventCommand command, EventStoreAggregateId eventStoreAggregateId, ReceivingEventState state) {
        boolean duplicate = false;
        if (command.getVersion() == null) { command.setVersion(ReceivingEventState.VERSION_NULL); }
        if (state.getVersion() != null && state.getVersion() == command.getVersion() + 1) {
            if (command.getCommandId() != null && command.getCommandId().equals(state.getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    protected static void throwOnConcurrencyConflict(ReceivingEventState s, ReceivingEventCommand c) {
        Long stateVersion = s.getVersion();
        Long commandVersion = c.getVersion();
        if (commandVersion == null) { commandVersion = ReceivingEventState.VERSION_NULL; }
        if (!(stateVersion == null && commandVersion.equals(ReceivingEventState.VERSION_NULL)) && !commandVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and command version (%2$s)", stateVersion, commandVersion);
        }
    }

    public static class SimpleReceivingEventApplicationService extends AbstractReceivingEventApplicationService {
        public SimpleReceivingEventApplicationService(ReceivingEventStateRepository stateRepository, ReceivingEventStateQueryRepository stateQueryRepository)
        {
            super(stateRepository, stateQueryRepository);
        }
    }

}

