// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.supplierproduct;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface SupplierProductCommand extends Command {

    SupplierProductAssocId getSupplierProductAssocId();

    void setSupplierProductAssocId(SupplierProductAssocId supplierProductAssocId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(SupplierProductState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((SupplierProductCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (isCreationCommand((SupplierProductCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(SupplierProductCommand c) {
        if ((c instanceof SupplierProductCommand.CreateSupplierProduct) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(SupplierProductState.VERSION_NULL)))
            return true;
        if ((c instanceof SupplierProductCommand.MergePatchSupplierProduct))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
            if (commandType.equals("UpdateAvailableThruDate"))
                return false;
            if (commandType.equals("Disable"))
                return false;
        }
        if (c.getVersion().equals(SupplierProductState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchSupplierProduct extends SupplierProductCommand
    {

        OffsetDateTime getAvailableThruDate();

        void setAvailableThruDate(OffsetDateTime availableThruDate);

        String getSupplierPrefOrderId();

        void setSupplierPrefOrderId(String supplierPrefOrderId);

        String getSupplierRatingTypeId();

        void setSupplierRatingTypeId(String supplierRatingTypeId);

        java.math.BigDecimal getStandardLeadTimeDays();

        void setStandardLeadTimeDays(java.math.BigDecimal standardLeadTimeDays);

        java.math.BigDecimal getOrderQtyIncrements();

        void setOrderQtyIncrements(java.math.BigDecimal orderQtyIncrements);

        java.math.BigDecimal getUnitsIncluded();

        void setUnitsIncluded(java.math.BigDecimal unitsIncluded);

        String getQuantityUomId();

        void setQuantityUomId(String quantityUomId);

        String getAgreementId();

        void setAgreementId(String agreementId);

        String getAgreementItemSeqId();

        void setAgreementItemSeqId(String agreementItemSeqId);

        java.math.BigDecimal getLastPrice();

        void setLastPrice(java.math.BigDecimal lastPrice);

        java.math.BigDecimal getShippingPrice();

        void setShippingPrice(java.math.BigDecimal shippingPrice);

        String getSupplierProductId();

        void setSupplierProductId(String supplierProductId);

        String getSupplierProductName();

        void setSupplierProductName(String supplierProductName);

        String getCanDropShip();

        void setCanDropShip(String canDropShip);

        String getComments();

        void setComments(String comments);

        String getTaxInPrice();

        void setTaxInPrice(String taxInPrice);

        java.math.BigDecimal getTaxAmount();

        void setTaxAmount(java.math.BigDecimal taxAmount);

        java.math.BigDecimal getTaxPercentage();

        void setTaxPercentage(java.math.BigDecimal taxPercentage);

        java.math.BigDecimal getLimitQuantityPerCustomer();

        void setLimitQuantityPerCustomer(java.math.BigDecimal limitQuantityPerCustomer);

        java.math.BigDecimal getLimitQuantityPerOrder();

        void setLimitQuantityPerOrder(java.math.BigDecimal limitQuantityPerOrder);

        String getProductPriceTypeId();

        void setProductPriceTypeId(String productPriceTypeId);

        String getShipmentMethodTypeId();

        void setShipmentMethodTypeId(String shipmentMethodTypeId);

        Boolean getActive();

        void setActive(Boolean active);

    }

    interface CreateSupplierProduct extends CreateOrMergePatchSupplierProduct
    {
    }

    interface MergePatchSupplierProduct extends CreateOrMergePatchSupplierProduct
    {
        Boolean getIsPropertyAvailableThruDateRemoved();

        void setIsPropertyAvailableThruDateRemoved(Boolean removed);

        Boolean getIsPropertySupplierPrefOrderIdRemoved();

        void setIsPropertySupplierPrefOrderIdRemoved(Boolean removed);

        Boolean getIsPropertySupplierRatingTypeIdRemoved();

        void setIsPropertySupplierRatingTypeIdRemoved(Boolean removed);

        Boolean getIsPropertyStandardLeadTimeDaysRemoved();

        void setIsPropertyStandardLeadTimeDaysRemoved(Boolean removed);

        Boolean getIsPropertyOrderQtyIncrementsRemoved();

        void setIsPropertyOrderQtyIncrementsRemoved(Boolean removed);

        Boolean getIsPropertyUnitsIncludedRemoved();

        void setIsPropertyUnitsIncludedRemoved(Boolean removed);

        Boolean getIsPropertyQuantityUomIdRemoved();

        void setIsPropertyQuantityUomIdRemoved(Boolean removed);

        Boolean getIsPropertyAgreementIdRemoved();

        void setIsPropertyAgreementIdRemoved(Boolean removed);

        Boolean getIsPropertyAgreementItemSeqIdRemoved();

        void setIsPropertyAgreementItemSeqIdRemoved(Boolean removed);

        Boolean getIsPropertyLastPriceRemoved();

        void setIsPropertyLastPriceRemoved(Boolean removed);

        Boolean getIsPropertyShippingPriceRemoved();

        void setIsPropertyShippingPriceRemoved(Boolean removed);

        Boolean getIsPropertySupplierProductIdRemoved();

        void setIsPropertySupplierProductIdRemoved(Boolean removed);

        Boolean getIsPropertySupplierProductNameRemoved();

        void setIsPropertySupplierProductNameRemoved(Boolean removed);

        Boolean getIsPropertyCanDropShipRemoved();

        void setIsPropertyCanDropShipRemoved(Boolean removed);

        Boolean getIsPropertyCommentsRemoved();

        void setIsPropertyCommentsRemoved(Boolean removed);

        Boolean getIsPropertyTaxInPriceRemoved();

        void setIsPropertyTaxInPriceRemoved(Boolean removed);

        Boolean getIsPropertyTaxAmountRemoved();

        void setIsPropertyTaxAmountRemoved(Boolean removed);

        Boolean getIsPropertyTaxPercentageRemoved();

        void setIsPropertyTaxPercentageRemoved(Boolean removed);

        Boolean getIsPropertyLimitQuantityPerCustomerRemoved();

        void setIsPropertyLimitQuantityPerCustomerRemoved(Boolean removed);

        Boolean getIsPropertyLimitQuantityPerOrderRemoved();

        void setIsPropertyLimitQuantityPerOrderRemoved(Boolean removed);

        Boolean getIsPropertyProductPriceTypeIdRemoved();

        void setIsPropertyProductPriceTypeIdRemoved(Boolean removed);

        Boolean getIsPropertyShipmentMethodTypeIdRemoved();

        void setIsPropertyShipmentMethodTypeIdRemoved(Boolean removed);

        Boolean getIsPropertyActiveRemoved();

        void setIsPropertyActiveRemoved(Boolean removed);


    }

    interface DeleteSupplierProduct extends SupplierProductCommand
    {
    }

}

