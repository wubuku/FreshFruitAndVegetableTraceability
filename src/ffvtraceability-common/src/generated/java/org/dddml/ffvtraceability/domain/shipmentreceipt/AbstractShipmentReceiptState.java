// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipmentreceipt;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.partyrole.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.shipmentreceipt.ShipmentReceiptEvent.*;

public abstract class AbstractShipmentReceiptState implements ShipmentReceiptState.SqlShipmentReceiptState, Saveable {

    private String receiptId;

    public String getReceiptId() {
        return this.receiptId;
    }

    public void setReceiptId(String receiptId) {
        this.receiptId = receiptId;
    }

    private String inventoryItemId;

    public String getInventoryItemId() {
        return this.inventoryItemId;
    }

    public void setInventoryItemId(String inventoryItemId) {
        this.inventoryItemId = inventoryItemId;
    }

    private String productId;

    public String getProductId() {
        return this.productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    private String shipmentId;

    public String getShipmentId() {
        return this.shipmentId;
    }

    public void setShipmentId(String shipmentId) {
        this.shipmentId = shipmentId;
    }

    private String shipmentItemSeqId;

    public String getShipmentItemSeqId() {
        return this.shipmentItemSeqId;
    }

    public void setShipmentItemSeqId(String shipmentItemSeqId) {
        this.shipmentItemSeqId = shipmentItemSeqId;
    }

    private String shipmentPackageSeqId;

    public String getShipmentPackageSeqId() {
        return this.shipmentPackageSeqId;
    }

    public void setShipmentPackageSeqId(String shipmentPackageSeqId) {
        this.shipmentPackageSeqId = shipmentPackageSeqId;
    }

    private String orderId;

    public String getOrderId() {
        return this.orderId;
    }

    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    private String orderItemSeqId;

    public String getOrderItemSeqId() {
        return this.orderItemSeqId;
    }

    public void setOrderItemSeqId(String orderItemSeqId) {
        this.orderItemSeqId = orderItemSeqId;
    }

    private String returnId;

    public String getReturnId() {
        return this.returnId;
    }

    public void setReturnId(String returnId) {
        this.returnId = returnId;
    }

    private String returnItemSeqId;

    public String getReturnItemSeqId() {
        return this.returnItemSeqId;
    }

    public void setReturnItemSeqId(String returnItemSeqId) {
        this.returnItemSeqId = returnItemSeqId;
    }

    private String rejectionId;

    public String getRejectionId() {
        return this.rejectionId;
    }

    public void setRejectionId(String rejectionId) {
        this.rejectionId = rejectionId;
    }

    private String receivedByUserLoginId;

    public String getReceivedByUserLoginId() {
        return this.receivedByUserLoginId;
    }

    public void setReceivedByUserLoginId(String receivedByUserLoginId) {
        this.receivedByUserLoginId = receivedByUserLoginId;
    }

    private OffsetDateTime datetimeReceived;

    public OffsetDateTime getDatetimeReceived() {
        return this.datetimeReceived;
    }

    public void setDatetimeReceived(OffsetDateTime datetimeReceived) {
        this.datetimeReceived = datetimeReceived;
    }

    private String itemDescription;

    public String getItemDescription() {
        return this.itemDescription;
    }

    public void setItemDescription(String itemDescription) {
        this.itemDescription = itemDescription;
    }

    private java.math.BigDecimal quantityAccepted;

    public java.math.BigDecimal getQuantityAccepted() {
        return this.quantityAccepted;
    }

    public void setQuantityAccepted(java.math.BigDecimal quantityAccepted) {
        this.quantityAccepted = quantityAccepted;
    }

    private java.math.BigDecimal quantityRejected;

    public java.math.BigDecimal getQuantityRejected() {
        return this.quantityRejected;
    }

    public void setQuantityRejected(java.math.BigDecimal quantityRejected) {
        this.quantityRejected = quantityRejected;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Set<ShipmentReceiptRoleState> protectedShipmentReceiptRoles = new HashSet<>();

    protected Set<ShipmentReceiptRoleState> getProtectedShipmentReceiptRoles() {
        return this.protectedShipmentReceiptRoles;
    }

    protected void setProtectedShipmentReceiptRoles(Set<ShipmentReceiptRoleState> protectedShipmentReceiptRoles) {
        this.protectedShipmentReceiptRoles = protectedShipmentReceiptRoles;
    }

    private EntityStateCollection<PartyRoleId, ShipmentReceiptRoleState> shipmentReceiptRoles;

    public EntityStateCollection<PartyRoleId, ShipmentReceiptRoleState> getShipmentReceiptRoles() {
        return this.shipmentReceiptRoles;
    }

    public void setShipmentReceiptRoles(EntityStateCollection<PartyRoleId, ShipmentReceiptRoleState> shipmentReceiptRoles) {
        this.shipmentReceiptRoles = shipmentReceiptRoles;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractShipmentReceiptState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setReceiptId(((ShipmentReceiptEvent.SqlShipmentReceiptEvent) events.get(0)).getShipmentReceiptEventId().getReceiptId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? ShipmentReceiptState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractShipmentReceiptState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        shipmentReceiptRoles = new SimpleShipmentReceiptRoleStateCollection();
    }

    @Override
    public int hashCode() {
        return getReceiptId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof ShipmentReceiptState) {
            return Objects.equals(this.getReceiptId(), ((ShipmentReceiptState)obj).getReceiptId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof ShipmentReceiptStateCreated) {
            when((ShipmentReceiptStateCreated) e);
        } else if (e instanceof ShipmentReceiptStateMergePatched) {
            when((ShipmentReceiptStateMergePatched) e);
        } else if (e instanceof ShipmentReceiptStateDeleted) {
            when((ShipmentReceiptStateDeleted) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(ShipmentReceiptStateCreated e) {
        throwOnWrongEvent(e);

        this.setInventoryItemId(e.getInventoryItemId());
        this.setProductId(e.getProductId());
        this.setShipmentId(e.getShipmentId());
        this.setShipmentItemSeqId(e.getShipmentItemSeqId());
        this.setShipmentPackageSeqId(e.getShipmentPackageSeqId());
        this.setOrderId(e.getOrderId());
        this.setOrderItemSeqId(e.getOrderItemSeqId());
        this.setReturnId(e.getReturnId());
        this.setReturnItemSeqId(e.getReturnItemSeqId());
        this.setRejectionId(e.getRejectionId());
        this.setReceivedByUserLoginId(e.getReceivedByUserLoginId());
        this.setDatetimeReceived(e.getDatetimeReceived());
        this.setItemDescription(e.getItemDescription());
        this.setQuantityAccepted(e.getQuantityAccepted());
        this.setQuantityRejected(e.getQuantityRejected());

        this.setDeleted(false);

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

        for (ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateCreated innerEvent : e.getShipmentReceiptRoleEvents()) {
            ShipmentReceiptRoleState innerState = ((EntityStateCollection.ModifiableEntityStateCollection<PartyRoleId, ShipmentReceiptRoleState>)this.getShipmentReceiptRoles()).getOrAddDefault(((ShipmentReceiptRoleEvent.SqlShipmentReceiptRoleEvent)innerEvent).getShipmentReceiptRoleEventId().getPartyRoleId());
            ((ShipmentReceiptRoleState.SqlShipmentReceiptRoleState)innerState).mutate(innerEvent);
        }
    }

    public void merge(ShipmentReceiptState s) {
        if (s == this) {
            return;
        }
        this.setInventoryItemId(s.getInventoryItemId());
        this.setProductId(s.getProductId());
        this.setShipmentId(s.getShipmentId());
        this.setShipmentItemSeqId(s.getShipmentItemSeqId());
        this.setShipmentPackageSeqId(s.getShipmentPackageSeqId());
        this.setOrderId(s.getOrderId());
        this.setOrderItemSeqId(s.getOrderItemSeqId());
        this.setReturnId(s.getReturnId());
        this.setReturnItemSeqId(s.getReturnItemSeqId());
        this.setRejectionId(s.getRejectionId());
        this.setReceivedByUserLoginId(s.getReceivedByUserLoginId());
        this.setDatetimeReceived(s.getDatetimeReceived());
        this.setItemDescription(s.getItemDescription());
        this.setQuantityAccepted(s.getQuantityAccepted());
        this.setQuantityRejected(s.getQuantityRejected());

        if (s.getShipmentReceiptRoles() != null) {
            Iterable<ShipmentReceiptRoleState> iterable;
            if (s.getShipmentReceiptRoles().isLazy()) {
                iterable = s.getShipmentReceiptRoles().getLoadedStates();
            } else {
                iterable = s.getShipmentReceiptRoles();
            }
            if (iterable != null) {
                for (ShipmentReceiptRoleState ss : iterable) {
                    ShipmentReceiptRoleState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<PartyRoleId, ShipmentReceiptRoleState>)this.getShipmentReceiptRoles()).getOrAddDefault(ss.getPartyRoleId());
                    ((AbstractShipmentReceiptRoleState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getShipmentReceiptRoles() != null) {
            if (s.getShipmentReceiptRoles() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getShipmentReceiptRoles()).getRemovedStates() != null) {
                    for (ShipmentReceiptRoleState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<PartyRoleId, ShipmentReceiptRoleState>)s.getShipmentReceiptRoles()).getRemovedStates()) {
                        ShipmentReceiptRoleState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<PartyRoleId, ShipmentReceiptRoleState>)this.getShipmentReceiptRoles()).getOrAddDefault(ss.getPartyRoleId());
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getShipmentReceiptRoles()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getShipmentReceiptRoles().isAllLoaded()) {
                    Set<PartyRoleId> removedStateIds = new HashSet<>(this.getShipmentReceiptRoles().stream().map(i -> i.getPartyRoleId()).collect(java.util.stream.Collectors.toList()));
                    s.getShipmentReceiptRoles().forEach(i -> removedStateIds.remove(i.getPartyRoleId()));
                    for (PartyRoleId i : removedStateIds) {
                        ShipmentReceiptRoleState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<PartyRoleId, ShipmentReceiptRoleState>)this.getShipmentReceiptRoles()).getOrAddDefault(i);
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getShipmentReceiptRoles()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(ShipmentReceiptStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getInventoryItemId() == null) {
            if (e.getIsPropertyInventoryItemIdRemoved() != null && e.getIsPropertyInventoryItemIdRemoved()) {
                this.setInventoryItemId(null);
            }
        } else {
            this.setInventoryItemId(e.getInventoryItemId());
        }
        if (e.getProductId() == null) {
            if (e.getIsPropertyProductIdRemoved() != null && e.getIsPropertyProductIdRemoved()) {
                this.setProductId(null);
            }
        } else {
            this.setProductId(e.getProductId());
        }
        if (e.getShipmentId() == null) {
            if (e.getIsPropertyShipmentIdRemoved() != null && e.getIsPropertyShipmentIdRemoved()) {
                this.setShipmentId(null);
            }
        } else {
            this.setShipmentId(e.getShipmentId());
        }
        if (e.getShipmentItemSeqId() == null) {
            if (e.getIsPropertyShipmentItemSeqIdRemoved() != null && e.getIsPropertyShipmentItemSeqIdRemoved()) {
                this.setShipmentItemSeqId(null);
            }
        } else {
            this.setShipmentItemSeqId(e.getShipmentItemSeqId());
        }
        if (e.getShipmentPackageSeqId() == null) {
            if (e.getIsPropertyShipmentPackageSeqIdRemoved() != null && e.getIsPropertyShipmentPackageSeqIdRemoved()) {
                this.setShipmentPackageSeqId(null);
            }
        } else {
            this.setShipmentPackageSeqId(e.getShipmentPackageSeqId());
        }
        if (e.getOrderId() == null) {
            if (e.getIsPropertyOrderIdRemoved() != null && e.getIsPropertyOrderIdRemoved()) {
                this.setOrderId(null);
            }
        } else {
            this.setOrderId(e.getOrderId());
        }
        if (e.getOrderItemSeqId() == null) {
            if (e.getIsPropertyOrderItemSeqIdRemoved() != null && e.getIsPropertyOrderItemSeqIdRemoved()) {
                this.setOrderItemSeqId(null);
            }
        } else {
            this.setOrderItemSeqId(e.getOrderItemSeqId());
        }
        if (e.getReturnId() == null) {
            if (e.getIsPropertyReturnIdRemoved() != null && e.getIsPropertyReturnIdRemoved()) {
                this.setReturnId(null);
            }
        } else {
            this.setReturnId(e.getReturnId());
        }
        if (e.getReturnItemSeqId() == null) {
            if (e.getIsPropertyReturnItemSeqIdRemoved() != null && e.getIsPropertyReturnItemSeqIdRemoved()) {
                this.setReturnItemSeqId(null);
            }
        } else {
            this.setReturnItemSeqId(e.getReturnItemSeqId());
        }
        if (e.getRejectionId() == null) {
            if (e.getIsPropertyRejectionIdRemoved() != null && e.getIsPropertyRejectionIdRemoved()) {
                this.setRejectionId(null);
            }
        } else {
            this.setRejectionId(e.getRejectionId());
        }
        if (e.getReceivedByUserLoginId() == null) {
            if (e.getIsPropertyReceivedByUserLoginIdRemoved() != null && e.getIsPropertyReceivedByUserLoginIdRemoved()) {
                this.setReceivedByUserLoginId(null);
            }
        } else {
            this.setReceivedByUserLoginId(e.getReceivedByUserLoginId());
        }
        if (e.getDatetimeReceived() == null) {
            if (e.getIsPropertyDatetimeReceivedRemoved() != null && e.getIsPropertyDatetimeReceivedRemoved()) {
                this.setDatetimeReceived(null);
            }
        } else {
            this.setDatetimeReceived(e.getDatetimeReceived());
        }
        if (e.getItemDescription() == null) {
            if (e.getIsPropertyItemDescriptionRemoved() != null && e.getIsPropertyItemDescriptionRemoved()) {
                this.setItemDescription(null);
            }
        } else {
            this.setItemDescription(e.getItemDescription());
        }
        if (e.getQuantityAccepted() == null) {
            if (e.getIsPropertyQuantityAcceptedRemoved() != null && e.getIsPropertyQuantityAcceptedRemoved()) {
                this.setQuantityAccepted(null);
            }
        } else {
            this.setQuantityAccepted(e.getQuantityAccepted());
        }
        if (e.getQuantityRejected() == null) {
            if (e.getIsPropertyQuantityRejectedRemoved() != null && e.getIsPropertyQuantityRejectedRemoved()) {
                this.setQuantityRejected(null);
            }
        } else {
            this.setQuantityRejected(e.getQuantityRejected());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (ShipmentReceiptRoleEvent innerEvent : e.getShipmentReceiptRoleEvents()) {
            ShipmentReceiptRoleState innerState = ((EntityStateCollection.ModifiableEntityStateCollection<PartyRoleId, ShipmentReceiptRoleState>)this.getShipmentReceiptRoles()).getOrAddDefault(((ShipmentReceiptRoleEvent.SqlShipmentReceiptRoleEvent)innerEvent).getShipmentReceiptRoleEventId().getPartyRoleId());
            ((ShipmentReceiptRoleState.SqlShipmentReceiptRoleState)innerState).mutate(innerEvent);
            if (innerEvent instanceof ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateRemoved) {
                //ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateRemoved removed = (ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateRemoved)innerEvent;
                ((EntityStateCollection.ModifiableEntityStateCollection)this.getShipmentReceiptRoles()).removeState(innerState);
            }
        }
    }

    public void when(ShipmentReceiptStateDeleted e) {
        throwOnWrongEvent(e);

        this.setDeleted(true);
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (ShipmentReceiptRoleState innerState : this.getShipmentReceiptRoles()) {
            ((EntityStateCollection.ModifiableEntityStateCollection)this.getShipmentReceiptRoles()).removeState(innerState);
        
            ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateRemoved innerE = e.newShipmentReceiptRoleStateRemoved(innerState.getPartyRoleId());
            innerE.setCreatedAt(e.getCreatedAt());
            innerE.setCreatedBy(e.getCreatedBy());
            ((ShipmentReceiptRoleState.MutableShipmentReceiptRoleState)innerState).mutate(innerE);
            //e.addShipmentReceiptRoleEvent(innerE);
        }
    }

    public void save() {
        if (shipmentReceiptRoles instanceof Saveable) {
            ((Saveable)shipmentReceiptRoles).save();
        }
    }

    protected void throwOnWrongEvent(ShipmentReceiptEvent event) {
        String stateEntityId = this.getReceiptId(); // Aggregate Id
        String eventEntityId = ((ShipmentReceiptEvent.SqlShipmentReceiptEvent)event).getShipmentReceiptEventId().getReceiptId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((ShipmentReceiptEvent.SqlShipmentReceiptEvent)event).getShipmentReceiptEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getShipmentReceiptEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleShipmentReceiptState extends AbstractShipmentReceiptState {

        public SimpleShipmentReceiptState() {
        }

        public SimpleShipmentReceiptState(List<Event> events) {
            super(events);
        }

        public static SimpleShipmentReceiptState newForReapplying() {
            SimpleShipmentReceiptState s = new SimpleShipmentReceiptState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleShipmentReceiptRoleStateCollection implements EntityStateCollection.ModifiableEntityStateCollection<PartyRoleId, ShipmentReceiptRoleState>, Collection<ShipmentReceiptRoleState> {

        @Override
        public ShipmentReceiptRoleState get(PartyRoleId partyRoleId) {
            return protectedShipmentReceiptRoles.stream().filter(
                            e -> e.getPartyRoleId().equals(partyRoleId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<ShipmentReceiptRoleState> getLoadedStates() {
            return protectedShipmentReceiptRoles;
        }

        @Override
        public ShipmentReceiptRoleState getOrAddDefault(PartyRoleId partyRoleId) {
            ShipmentReceiptRoleState s = get(partyRoleId);
            if (s == null) {
                ShipmentReceiptRoleId globalId = new ShipmentReceiptRoleId(getReceiptId(), partyRoleId);
                AbstractShipmentReceiptRoleState state = new AbstractShipmentReceiptRoleState.SimpleShipmentReceiptRoleState();
                state.setShipmentReceiptRoleId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedShipmentReceiptRoles.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedShipmentReceiptRoles.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedShipmentReceiptRoles.contains(o);
        }

        @Override
        public Iterator<ShipmentReceiptRoleState> iterator() {
            return protectedShipmentReceiptRoles.iterator();
        }

        @Override
        public java.util.stream.Stream<ShipmentReceiptRoleState> stream() {
            return protectedShipmentReceiptRoles.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedShipmentReceiptRoles.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedShipmentReceiptRoles.toArray(a);
        }

        @Override
        public boolean add(ShipmentReceiptRoleState s) {
            if (s instanceof AbstractShipmentReceiptRoleState) {
                AbstractShipmentReceiptRoleState state = (AbstractShipmentReceiptRoleState) s;
                state.setProtectedShipmentReceiptState(AbstractShipmentReceiptState.this);
            }
            return protectedShipmentReceiptRoles.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractShipmentReceiptRoleState) {
                AbstractShipmentReceiptRoleState s = (AbstractShipmentReceiptRoleState) o;
                s.setProtectedShipmentReceiptState(null);
            }
            return protectedShipmentReceiptRoles.remove(o);
        }

        @Override
        public boolean removeState(ShipmentReceiptRoleState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedShipmentReceiptRoles.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends ShipmentReceiptRoleState> c) {
            return protectedShipmentReceiptRoles.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedShipmentReceiptRoles.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedShipmentReceiptRoles.retainAll(c);
        }

        @Override
        public void clear() {
            protectedShipmentReceiptRoles.clear();
        }
    }


}

