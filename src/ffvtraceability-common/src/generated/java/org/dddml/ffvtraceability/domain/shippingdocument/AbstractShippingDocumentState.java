// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shippingdocument;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.shippingdocument.ShippingDocumentEvent.*;

public abstract class AbstractShippingDocumentState implements ShippingDocumentState.SqlShippingDocumentState {

    private String documentId;

    public String getDocumentId() {
        return this.documentId;
    }

    public void setDocumentId(String documentId) {
        this.documentId = documentId;
    }

    private String shipmentId;

    public String getShipmentId() {
        return this.shipmentId;
    }

    public void setShipmentId(String shipmentId) {
        this.shipmentId = shipmentId;
    }

    private String shipmentItemSeqId;

    public String getShipmentItemSeqId() {
        return this.shipmentItemSeqId;
    }

    public void setShipmentItemSeqId(String shipmentItemSeqId) {
        this.shipmentItemSeqId = shipmentItemSeqId;
    }

    private String shipmentPackageSeqId;

    public String getShipmentPackageSeqId() {
        return this.shipmentPackageSeqId;
    }

    public void setShipmentPackageSeqId(String shipmentPackageSeqId) {
        this.shipmentPackageSeqId = shipmentPackageSeqId;
    }

    private String description;

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractShippingDocumentState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setDocumentId(((ShippingDocumentEvent.SqlShippingDocumentEvent) events.get(0)).getShippingDocumentEventId().getDocumentId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? ShippingDocumentState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractShippingDocumentState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getDocumentId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof ShippingDocumentState) {
            return Objects.equals(this.getDocumentId(), ((ShippingDocumentState)obj).getDocumentId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof ShippingDocumentStateCreated) {
            when((ShippingDocumentStateCreated) e);
        } else if (e instanceof ShippingDocumentStateMergePatched) {
            when((ShippingDocumentStateMergePatched) e);
        } else if (e instanceof ShippingDocumentStateDeleted) {
            when((ShippingDocumentStateDeleted) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(ShippingDocumentStateCreated e) {
        throwOnWrongEvent(e);

        this.setShipmentId(e.getShipmentId());
        this.setShipmentItemSeqId(e.getShipmentItemSeqId());
        this.setShipmentPackageSeqId(e.getShipmentPackageSeqId());
        this.setDescription(e.getDescription());

        this.setDeleted(false);

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(ShippingDocumentState s) {
        if (s == this) {
            return;
        }
        this.setShipmentId(s.getShipmentId());
        this.setShipmentItemSeqId(s.getShipmentItemSeqId());
        this.setShipmentPackageSeqId(s.getShipmentPackageSeqId());
        this.setDescription(s.getDescription());
    }

    public void when(ShippingDocumentStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getShipmentId() == null) {
            if (e.getIsPropertyShipmentIdRemoved() != null && e.getIsPropertyShipmentIdRemoved()) {
                this.setShipmentId(null);
            }
        } else {
            this.setShipmentId(e.getShipmentId());
        }
        if (e.getShipmentItemSeqId() == null) {
            if (e.getIsPropertyShipmentItemSeqIdRemoved() != null && e.getIsPropertyShipmentItemSeqIdRemoved()) {
                this.setShipmentItemSeqId(null);
            }
        } else {
            this.setShipmentItemSeqId(e.getShipmentItemSeqId());
        }
        if (e.getShipmentPackageSeqId() == null) {
            if (e.getIsPropertyShipmentPackageSeqIdRemoved() != null && e.getIsPropertyShipmentPackageSeqIdRemoved()) {
                this.setShipmentPackageSeqId(null);
            }
        } else {
            this.setShipmentPackageSeqId(e.getShipmentPackageSeqId());
        }
        if (e.getDescription() == null) {
            if (e.getIsPropertyDescriptionRemoved() != null && e.getIsPropertyDescriptionRemoved()) {
                this.setDescription(null);
            }
        } else {
            this.setDescription(e.getDescription());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void when(ShippingDocumentStateDeleted e) {
        throwOnWrongEvent(e);

        this.setDeleted(true);
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(ShippingDocumentEvent event) {
        String stateEntityId = this.getDocumentId(); // Aggregate Id
        String eventEntityId = ((ShippingDocumentEvent.SqlShippingDocumentEvent)event).getShippingDocumentEventId().getDocumentId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((ShippingDocumentEvent.SqlShippingDocumentEvent)event).getShippingDocumentEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getShippingDocumentEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleShippingDocumentState extends AbstractShippingDocumentState {

        public SimpleShippingDocumentState() {
        }

        public SimpleShippingDocumentState(List<Event> events) {
            super(events);
        }

        public static SimpleShippingDocumentState newForReapplying() {
            SimpleShippingDocumentState s = new SimpleShippingDocumentState();
            s.initializeForReapplying();
            return s;
        }

    }



}

