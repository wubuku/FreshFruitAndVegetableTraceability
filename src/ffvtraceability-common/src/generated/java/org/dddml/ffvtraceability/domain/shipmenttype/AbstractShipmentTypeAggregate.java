// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipmenttype;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractShipmentTypeAggregate extends AbstractAggregate implements ShipmentTypeAggregate {
    private ShipmentTypeState.MutableShipmentTypeState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractShipmentTypeAggregate(ShipmentTypeState state) {
        this.state = (ShipmentTypeState.MutableShipmentTypeState)state;
    }

    public ShipmentTypeState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(ShipmentTypeCommand.CreateShipmentType c) {
        if (c.getVersion() == null) { c.setVersion(ShipmentTypeState.VERSION_NULL); }
        ShipmentTypeEvent e = map(c);
        apply(e);
    }

    public void mergePatch(ShipmentTypeCommand.MergePatchShipmentType c) {
        ShipmentTypeEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        ShipmentTypeCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected ShipmentTypeEvent map(ShipmentTypeCommand.CreateShipmentType c) {
        ShipmentTypeEventId stateEventId = new ShipmentTypeEventId(c.getShipmentTypeId(), c.getVersion());
        ShipmentTypeEvent.ShipmentTypeStateCreated e = newShipmentTypeStateCreated(stateEventId);
        e.setParentTypeId(c.getParentTypeId());
        e.setHasTable(c.getHasTable());
        e.setDescription(c.getDescription());
        ((AbstractShipmentTypeEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShipmentTypeEvent map(ShipmentTypeCommand.MergePatchShipmentType c) {
        ShipmentTypeEventId stateEventId = new ShipmentTypeEventId(c.getShipmentTypeId(), c.getVersion());
        ShipmentTypeEvent.ShipmentTypeStateMergePatched e = newShipmentTypeStateMergePatched(stateEventId);
        e.setParentTypeId(c.getParentTypeId());
        e.setHasTable(c.getHasTable());
        e.setDescription(c.getDescription());
        e.setIsPropertyParentTypeIdRemoved(c.getIsPropertyParentTypeIdRemoved());
        e.setIsPropertyHasTableRemoved(c.getIsPropertyHasTableRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        ((AbstractShipmentTypeEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected ShipmentTypeEvent.ShipmentTypeStateCreated newShipmentTypeStateCreated(Long version, String commandId, String requesterId) {
        ShipmentTypeEventId stateEventId = new ShipmentTypeEventId(this.state.getShipmentTypeId(), version);
        ShipmentTypeEvent.ShipmentTypeStateCreated e = newShipmentTypeStateCreated(stateEventId);
        ((AbstractShipmentTypeEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShipmentTypeEvent.ShipmentTypeStateMergePatched newShipmentTypeStateMergePatched(Long version, String commandId, String requesterId) {
        ShipmentTypeEventId stateEventId = new ShipmentTypeEventId(this.state.getShipmentTypeId(), version);
        ShipmentTypeEvent.ShipmentTypeStateMergePatched e = newShipmentTypeStateMergePatched(stateEventId);
        ((AbstractShipmentTypeEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShipmentTypeEvent.ShipmentTypeStateCreated newShipmentTypeStateCreated(ShipmentTypeEventId stateEventId) {
        return new AbstractShipmentTypeEvent.SimpleShipmentTypeStateCreated(stateEventId);
    }

    protected ShipmentTypeEvent.ShipmentTypeStateMergePatched newShipmentTypeStateMergePatched(ShipmentTypeEventId stateEventId) {
        return new AbstractShipmentTypeEvent.SimpleShipmentTypeStateMergePatched(stateEventId);
    }


    public static class SimpleShipmentTypeAggregate extends AbstractShipmentTypeAggregate {
        public SimpleShipmentTypeAggregate(ShipmentTypeState state) {
            super(state);
        }

    }

}

