// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipment;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractShipmentAggregate extends AbstractAggregate implements ShipmentAggregate {
    private ShipmentState.MutableShipmentState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractShipmentAggregate(ShipmentState state) {
        this.state = (ShipmentState.MutableShipmentState)state;
    }

    public ShipmentState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(ShipmentCommand.CreateShipment c) {
        if (c.getVersion() == null) { c.setVersion(ShipmentState.VERSION_NULL); }
        ShipmentEvent e = map(c);
        apply(e);
    }

    public void mergePatch(ShipmentCommand.MergePatchShipment c) {
        ShipmentEvent e = map(c);
        apply(e);
    }

    public void delete(ShipmentCommand.DeleteShipment c) {
        ShipmentEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        ShipmentCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected ShipmentEvent map(ShipmentCommand.CreateShipment c) {
        ShipmentEventId stateEventId = new ShipmentEventId(c.getShipmentId(), c.getVersion());
        ShipmentEvent.ShipmentStateCreated e = newShipmentStateCreated(stateEventId);
        e.setShipmentTypeId(c.getShipmentTypeId());
        e.setStatusId(c.getStatusId());
        e.setPrimaryOrderId(c.getPrimaryOrderId());
        e.setPrimaryReturnId(c.getPrimaryReturnId());
        e.setPrimaryShipGroupSeqId(c.getPrimaryShipGroupSeqId());
        e.setPicklistBinId(c.getPicklistBinId());
        e.setEstimatedReadyDate(c.getEstimatedReadyDate());
        e.setEstimatedShipDate(c.getEstimatedShipDate());
        e.setEstimatedShipWorkEffId(c.getEstimatedShipWorkEffId());
        e.setEstimatedArrivalDate(c.getEstimatedArrivalDate());
        e.setEstimatedArrivalWorkEffId(c.getEstimatedArrivalWorkEffId());
        e.setLatestCancelDate(c.getLatestCancelDate());
        e.setEstimatedShipCost(c.getEstimatedShipCost());
        e.setCurrencyUomId(c.getCurrencyUomId());
        e.setHandlingInstructions(c.getHandlingInstructions());
        e.setOriginFacilityId(c.getOriginFacilityId());
        e.setDestinationFacilityId(c.getDestinationFacilityId());
        e.setOriginContactMechId(c.getOriginContactMechId());
        e.setOriginTelecomNumberId(c.getOriginTelecomNumberId());
        e.setDestinationContactMechId(c.getDestinationContactMechId());
        e.setDestinationTelecomNumberId(c.getDestinationTelecomNumberId());
        e.setPartyIdTo(c.getPartyIdTo());
        e.setPartyIdFrom(c.getPartyIdFrom());
        e.setAdditionalShippingCharge(c.getAdditionalShippingCharge());
        e.setAddtlShippingChargeDesc(c.getAddtlShippingChargeDesc());
        ((AbstractShipmentEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (ShipmentItemCommand.CreateShipmentItem innerCommand : c.getCreateShipmentItemCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            ShipmentItemEvent.ShipmentItemStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addShipmentItemEvent(innerEvent);
        }

        for (ShipmentPackageCommand.CreateShipmentPackage innerCommand : c.getCreateShipmentPackageCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            ShipmentPackageEvent.ShipmentPackageStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addShipmentPackageEvent(innerEvent);
        }

        return e;
    }

    protected ShipmentEvent map(ShipmentCommand.MergePatchShipment c) {
        ShipmentEventId stateEventId = new ShipmentEventId(c.getShipmentId(), c.getVersion());
        ShipmentEvent.ShipmentStateMergePatched e = newShipmentStateMergePatched(stateEventId);
        e.setShipmentTypeId(c.getShipmentTypeId());
        e.setStatusId(c.getStatusId());
        e.setPrimaryOrderId(c.getPrimaryOrderId());
        e.setPrimaryReturnId(c.getPrimaryReturnId());
        e.setPrimaryShipGroupSeqId(c.getPrimaryShipGroupSeqId());
        e.setPicklistBinId(c.getPicklistBinId());
        e.setEstimatedReadyDate(c.getEstimatedReadyDate());
        e.setEstimatedShipDate(c.getEstimatedShipDate());
        e.setEstimatedShipWorkEffId(c.getEstimatedShipWorkEffId());
        e.setEstimatedArrivalDate(c.getEstimatedArrivalDate());
        e.setEstimatedArrivalWorkEffId(c.getEstimatedArrivalWorkEffId());
        e.setLatestCancelDate(c.getLatestCancelDate());
        e.setEstimatedShipCost(c.getEstimatedShipCost());
        e.setCurrencyUomId(c.getCurrencyUomId());
        e.setHandlingInstructions(c.getHandlingInstructions());
        e.setOriginFacilityId(c.getOriginFacilityId());
        e.setDestinationFacilityId(c.getDestinationFacilityId());
        e.setOriginContactMechId(c.getOriginContactMechId());
        e.setOriginTelecomNumberId(c.getOriginTelecomNumberId());
        e.setDestinationContactMechId(c.getDestinationContactMechId());
        e.setDestinationTelecomNumberId(c.getDestinationTelecomNumberId());
        e.setPartyIdTo(c.getPartyIdTo());
        e.setPartyIdFrom(c.getPartyIdFrom());
        e.setAdditionalShippingCharge(c.getAdditionalShippingCharge());
        e.setAddtlShippingChargeDesc(c.getAddtlShippingChargeDesc());
        e.setIsPropertyShipmentTypeIdRemoved(c.getIsPropertyShipmentTypeIdRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyPrimaryOrderIdRemoved(c.getIsPropertyPrimaryOrderIdRemoved());
        e.setIsPropertyPrimaryReturnIdRemoved(c.getIsPropertyPrimaryReturnIdRemoved());
        e.setIsPropertyPrimaryShipGroupSeqIdRemoved(c.getIsPropertyPrimaryShipGroupSeqIdRemoved());
        e.setIsPropertyPicklistBinIdRemoved(c.getIsPropertyPicklistBinIdRemoved());
        e.setIsPropertyEstimatedReadyDateRemoved(c.getIsPropertyEstimatedReadyDateRemoved());
        e.setIsPropertyEstimatedShipDateRemoved(c.getIsPropertyEstimatedShipDateRemoved());
        e.setIsPropertyEstimatedShipWorkEffIdRemoved(c.getIsPropertyEstimatedShipWorkEffIdRemoved());
        e.setIsPropertyEstimatedArrivalDateRemoved(c.getIsPropertyEstimatedArrivalDateRemoved());
        e.setIsPropertyEstimatedArrivalWorkEffIdRemoved(c.getIsPropertyEstimatedArrivalWorkEffIdRemoved());
        e.setIsPropertyLatestCancelDateRemoved(c.getIsPropertyLatestCancelDateRemoved());
        e.setIsPropertyEstimatedShipCostRemoved(c.getIsPropertyEstimatedShipCostRemoved());
        e.setIsPropertyCurrencyUomIdRemoved(c.getIsPropertyCurrencyUomIdRemoved());
        e.setIsPropertyHandlingInstructionsRemoved(c.getIsPropertyHandlingInstructionsRemoved());
        e.setIsPropertyOriginFacilityIdRemoved(c.getIsPropertyOriginFacilityIdRemoved());
        e.setIsPropertyDestinationFacilityIdRemoved(c.getIsPropertyDestinationFacilityIdRemoved());
        e.setIsPropertyOriginContactMechIdRemoved(c.getIsPropertyOriginContactMechIdRemoved());
        e.setIsPropertyOriginTelecomNumberIdRemoved(c.getIsPropertyOriginTelecomNumberIdRemoved());
        e.setIsPropertyDestinationContactMechIdRemoved(c.getIsPropertyDestinationContactMechIdRemoved());
        e.setIsPropertyDestinationTelecomNumberIdRemoved(c.getIsPropertyDestinationTelecomNumberIdRemoved());
        e.setIsPropertyPartyIdToRemoved(c.getIsPropertyPartyIdToRemoved());
        e.setIsPropertyPartyIdFromRemoved(c.getIsPropertyPartyIdFromRemoved());
        e.setIsPropertyAdditionalShippingChargeRemoved(c.getIsPropertyAdditionalShippingChargeRemoved());
        e.setIsPropertyAddtlShippingChargeDescRemoved(c.getIsPropertyAddtlShippingChargeDescRemoved());
        ((AbstractShipmentEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (ShipmentItemCommand innerCommand : c.getShipmentItemCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            ShipmentItemEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addShipmentItemEvent(innerEvent);
        }

        for (ShipmentPackageCommand innerCommand : c.getShipmentPackageCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            ShipmentPackageEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addShipmentPackageEvent(innerEvent);
        }

        return e;
    }

    protected ShipmentEvent map(ShipmentCommand.DeleteShipment c) {
        ShipmentEventId stateEventId = new ShipmentEventId(c.getShipmentId(), c.getVersion());
        ShipmentEvent.ShipmentStateDeleted e = newShipmentStateDeleted(stateEventId);
        ((AbstractShipmentEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    protected ShipmentItemEvent map(ShipmentItemCommand c, ShipmentCommand outerCommand, Long version, ShipmentState outerState) {
        ShipmentItemCommand.CreateShipmentItem create = (c.getCommandType().equals(CommandType.CREATE)) ? ((ShipmentItemCommand.CreateShipmentItem)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        ShipmentItemCommand.MergePatchShipmentItem merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((ShipmentItemCommand.MergePatchShipmentItem)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        ShipmentItemCommand.RemoveShipmentItem remove = (c.getCommandType().equals(CommandType.REMOVE)) ? ((ShipmentItemCommand.RemoveShipmentItem)c) : null;
        if (remove != null) {
            return mapRemove(remove, outerCommand, version, outerState);
        }
        throw new UnsupportedOperationException();
    }

    protected ShipmentItemEvent.ShipmentItemStateCreated mapCreate(ShipmentItemCommand.CreateShipmentItem c, ShipmentCommand outerCommand, Long version, ShipmentState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        ShipmentItemEventId stateEventId = new ShipmentItemEventId(outerState.getShipmentId(), c.getShipmentItemSeqId(), version);
        ShipmentItemEvent.ShipmentItemStateCreated e = newShipmentItemStateCreated(stateEventId);
        ShipmentItemState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, ShipmentItemState>)outerState.getShipmentItems()).getOrAddDefault(c.getShipmentItemSeqId());

        e.setProductId(c.getProductId());
        e.setQuantity(c.getQuantity());
        e.setShipmentContentDescription(c.getShipmentContentDescription());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected ShipmentItemEvent.ShipmentItemStateMergePatched mapMergePatch(ShipmentItemCommand.MergePatchShipmentItem c, ShipmentCommand outerCommand, Long version, ShipmentState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        ShipmentItemEventId stateEventId = new ShipmentItemEventId(outerState.getShipmentId(), c.getShipmentItemSeqId(), version);
        ShipmentItemEvent.ShipmentItemStateMergePatched e = newShipmentItemStateMergePatched(stateEventId);
        ShipmentItemState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, ShipmentItemState>)outerState.getShipmentItems()).getOrAddDefault(c.getShipmentItemSeqId());

        e.setProductId(c.getProductId());
        e.setQuantity(c.getQuantity());
        e.setShipmentContentDescription(c.getShipmentContentDescription());
        e.setIsPropertyProductIdRemoved(c.getIsPropertyProductIdRemoved());
        e.setIsPropertyQuantityRemoved(c.getIsPropertyQuantityRemoved());
        e.setIsPropertyShipmentContentDescriptionRemoved(c.getIsPropertyShipmentContentDescriptionRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected ShipmentItemEvent.ShipmentItemStateRemoved mapRemove(ShipmentItemCommand.RemoveShipmentItem c, ShipmentCommand outerCommand, Long version, ShipmentState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        ShipmentItemEventId stateEventId = new ShipmentItemEventId(outerState.getShipmentId(), c.getShipmentItemSeqId(), version);
        ShipmentItemEvent.ShipmentItemStateRemoved e = newShipmentItemStateRemoved(stateEventId);

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IRemove... ////////////////////////////


    protected ShipmentPackageEvent map(ShipmentPackageCommand c, ShipmentCommand outerCommand, Long version, ShipmentState outerState) {
        ShipmentPackageCommand.CreateShipmentPackage create = (c.getCommandType().equals(CommandType.CREATE)) ? ((ShipmentPackageCommand.CreateShipmentPackage)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        ShipmentPackageCommand.MergePatchShipmentPackage merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((ShipmentPackageCommand.MergePatchShipmentPackage)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        ShipmentPackageCommand.RemoveShipmentPackage remove = (c.getCommandType().equals(CommandType.REMOVE)) ? ((ShipmentPackageCommand.RemoveShipmentPackage)c) : null;
        if (remove != null) {
            return mapRemove(remove, outerCommand, version, outerState);
        }
        throw new UnsupportedOperationException();
    }

    protected ShipmentPackageEvent.ShipmentPackageStateCreated mapCreate(ShipmentPackageCommand.CreateShipmentPackage c, ShipmentCommand outerCommand, Long version, ShipmentState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        ShipmentPackageEventId stateEventId = new ShipmentPackageEventId(outerState.getShipmentId(), c.getShipmentPackageSeqId(), version);
        ShipmentPackageEvent.ShipmentPackageStateCreated e = newShipmentPackageStateCreated(stateEventId);
        ShipmentPackageState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, ShipmentPackageState>)outerState.getShipmentPackages()).getOrAddDefault(c.getShipmentPackageSeqId());

        e.setShipmentBoxTypeId(c.getShipmentBoxTypeId());
        e.setDateCreated(c.getDateCreated());
        e.setBoxLength(c.getBoxLength());
        e.setBoxHeight(c.getBoxHeight());
        e.setBoxWidth(c.getBoxWidth());
        e.setDimensionUomId(c.getDimensionUomId());
        e.setWeight(c.getWeight());
        e.setWeightUomId(c.getWeightUomId());
        e.setInsuredValue(c.getInsuredValue());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));


        for (ShipmentPackageContentCommand.CreateShipmentPackageContent innerCommand : c.getCreateShipmentPackageContentCommands()) {
            throwOnInconsistentCommands(c, innerCommand);

            ShipmentPackageContentEvent.ShipmentPackageContentStateCreated innerEvent = mapCreate(innerCommand, c, version, s);
            e.addShipmentPackageContentEvent(innerEvent);
        }

        return e;

    }// END map(ICreate... ////////////////////////////

    protected ShipmentPackageEvent.ShipmentPackageStateMergePatched mapMergePatch(ShipmentPackageCommand.MergePatchShipmentPackage c, ShipmentCommand outerCommand, Long version, ShipmentState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        ShipmentPackageEventId stateEventId = new ShipmentPackageEventId(outerState.getShipmentId(), c.getShipmentPackageSeqId(), version);
        ShipmentPackageEvent.ShipmentPackageStateMergePatched e = newShipmentPackageStateMergePatched(stateEventId);
        ShipmentPackageState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, ShipmentPackageState>)outerState.getShipmentPackages()).getOrAddDefault(c.getShipmentPackageSeqId());

        e.setShipmentBoxTypeId(c.getShipmentBoxTypeId());
        e.setDateCreated(c.getDateCreated());
        e.setBoxLength(c.getBoxLength());
        e.setBoxHeight(c.getBoxHeight());
        e.setBoxWidth(c.getBoxWidth());
        e.setDimensionUomId(c.getDimensionUomId());
        e.setWeight(c.getWeight());
        e.setWeightUomId(c.getWeightUomId());
        e.setInsuredValue(c.getInsuredValue());
        e.setIsPropertyShipmentBoxTypeIdRemoved(c.getIsPropertyShipmentBoxTypeIdRemoved());
        e.setIsPropertyDateCreatedRemoved(c.getIsPropertyDateCreatedRemoved());
        e.setIsPropertyBoxLengthRemoved(c.getIsPropertyBoxLengthRemoved());
        e.setIsPropertyBoxHeightRemoved(c.getIsPropertyBoxHeightRemoved());
        e.setIsPropertyBoxWidthRemoved(c.getIsPropertyBoxWidthRemoved());
        e.setIsPropertyDimensionUomIdRemoved(c.getIsPropertyDimensionUomIdRemoved());
        e.setIsPropertyWeightRemoved(c.getIsPropertyWeightRemoved());
        e.setIsPropertyWeightUomIdRemoved(c.getIsPropertyWeightUomIdRemoved());
        e.setIsPropertyInsuredValueRemoved(c.getIsPropertyInsuredValueRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));


        for (ShipmentPackageContentCommand innerCommand : c.getShipmentPackageContentCommands()) {
                    throwOnInconsistentCommands(c, innerCommand);

            ShipmentPackageContentEvent innerEvent = map(innerCommand, c, version, s);
            e.addShipmentPackageContentEvent(innerEvent);
        }

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected ShipmentPackageEvent.ShipmentPackageStateRemoved mapRemove(ShipmentPackageCommand.RemoveShipmentPackage c, ShipmentCommand outerCommand, Long version, ShipmentState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        ShipmentPackageEventId stateEventId = new ShipmentPackageEventId(outerState.getShipmentId(), c.getShipmentPackageSeqId(), version);
        ShipmentPackageEvent.ShipmentPackageStateRemoved e = newShipmentPackageStateRemoved(stateEventId);

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IRemove... ////////////////////////////


    protected ShipmentPackageContentEvent map(ShipmentPackageContentCommand c, ShipmentPackageCommand outerCommand, Long version, ShipmentPackageState outerState) {
        ShipmentPackageContentCommand.CreateShipmentPackageContent create = (c.getCommandType().equals(CommandType.CREATE)) ? ((ShipmentPackageContentCommand.CreateShipmentPackageContent)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        ShipmentPackageContentCommand.MergePatchShipmentPackageContent merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((ShipmentPackageContentCommand.MergePatchShipmentPackageContent)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        ShipmentPackageContentCommand.RemoveShipmentPackageContent remove = (c.getCommandType().equals(CommandType.REMOVE)) ? ((ShipmentPackageContentCommand.RemoveShipmentPackageContent)c) : null;
        if (remove != null) {
            return mapRemove(remove, outerCommand, version, outerState);
        }
        throw new UnsupportedOperationException();
    }

    protected ShipmentPackageContentEvent.ShipmentPackageContentStateCreated mapCreate(ShipmentPackageContentCommand.CreateShipmentPackageContent c, ShipmentPackageCommand outerCommand, Long version, ShipmentPackageState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        ShipmentPackageContentEventId stateEventId = new ShipmentPackageContentEventId(outerState.getShipmentId(), outerState.getShipmentPackageSeqId(), c.getShipmentItemSeqId(), version);
        ShipmentPackageContentEvent.ShipmentPackageContentStateCreated e = newShipmentPackageContentStateCreated(stateEventId);
        ShipmentPackageContentState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, ShipmentPackageContentState>)outerState.getShipmentPackageContents()).getOrAddDefault(c.getShipmentItemSeqId());

        e.setQuantity(c.getQuantity());
        e.setSubProductId(c.getSubProductId());
        e.setSubProductQuantity(c.getSubProductQuantity());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected ShipmentPackageContentEvent.ShipmentPackageContentStateMergePatched mapMergePatch(ShipmentPackageContentCommand.MergePatchShipmentPackageContent c, ShipmentPackageCommand outerCommand, Long version, ShipmentPackageState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        ShipmentPackageContentEventId stateEventId = new ShipmentPackageContentEventId(outerState.getShipmentId(), outerState.getShipmentPackageSeqId(), c.getShipmentItemSeqId(), version);
        ShipmentPackageContentEvent.ShipmentPackageContentStateMergePatched e = newShipmentPackageContentStateMergePatched(stateEventId);
        ShipmentPackageContentState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, ShipmentPackageContentState>)outerState.getShipmentPackageContents()).getOrAddDefault(c.getShipmentItemSeqId());

        e.setQuantity(c.getQuantity());
        e.setSubProductId(c.getSubProductId());
        e.setSubProductQuantity(c.getSubProductQuantity());
        e.setIsPropertyQuantityRemoved(c.getIsPropertyQuantityRemoved());
        e.setIsPropertySubProductIdRemoved(c.getIsPropertySubProductIdRemoved());
        e.setIsPropertySubProductQuantityRemoved(c.getIsPropertySubProductQuantityRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected ShipmentPackageContentEvent.ShipmentPackageContentStateRemoved mapRemove(ShipmentPackageContentCommand.RemoveShipmentPackageContent c, ShipmentPackageCommand outerCommand, Long version, ShipmentPackageState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        ShipmentPackageContentEventId stateEventId = new ShipmentPackageContentEventId(outerState.getShipmentId(), outerState.getShipmentPackageSeqId(), c.getShipmentItemSeqId(), version);
        ShipmentPackageContentEvent.ShipmentPackageContentStateRemoved e = newShipmentPackageContentStateRemoved(stateEventId);

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IRemove... ////////////////////////////

    protected void throwOnInconsistentCommands(ShipmentCommand command, ShipmentItemCommand innerCommand) {
        AbstractShipmentCommand properties = command instanceof AbstractShipmentCommand ? (AbstractShipmentCommand) command : null;
        AbstractShipmentItemCommand innerProperties = innerCommand instanceof AbstractShipmentItemCommand ? (AbstractShipmentItemCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerShipmentIdName = "ShipmentId";
        String outerShipmentIdValue = properties.getShipmentId();
        String innerShipmentIdName = "ShipmentId";
        String innerShipmentIdValue = innerProperties.getShipmentId();
        if (innerShipmentIdValue == null) {
            innerProperties.setShipmentId(outerShipmentIdValue);
        }
        else if (innerShipmentIdValue != outerShipmentIdValue 
            && (innerShipmentIdValue == null || innerShipmentIdValue != null && !innerShipmentIdValue.equals(outerShipmentIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerShipmentIdName, outerShipmentIdValue, innerShipmentIdName, innerShipmentIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////

    protected void throwOnInconsistentCommands(ShipmentCommand command, ShipmentPackageCommand innerCommand) {
        AbstractShipmentCommand properties = command instanceof AbstractShipmentCommand ? (AbstractShipmentCommand) command : null;
        AbstractShipmentPackageCommand innerProperties = innerCommand instanceof AbstractShipmentPackageCommand ? (AbstractShipmentPackageCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerShipmentIdName = "ShipmentId";
        String outerShipmentIdValue = properties.getShipmentId();
        String innerShipmentIdName = "ShipmentId";
        String innerShipmentIdValue = innerProperties.getShipmentId();
        if (innerShipmentIdValue == null) {
            innerProperties.setShipmentId(outerShipmentIdValue);
        }
        else if (innerShipmentIdValue != outerShipmentIdValue 
            && (innerShipmentIdValue == null || innerShipmentIdValue != null && !innerShipmentIdValue.equals(outerShipmentIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerShipmentIdName, outerShipmentIdValue, innerShipmentIdName, innerShipmentIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////

    protected void throwOnInconsistentCommands(ShipmentPackageCommand command, ShipmentPackageContentCommand innerCommand) {
        AbstractShipmentPackageCommand properties = command instanceof AbstractShipmentPackageCommand ? (AbstractShipmentPackageCommand) command : null;
        AbstractShipmentPackageContentCommand innerProperties = innerCommand instanceof AbstractShipmentPackageContentCommand ? (AbstractShipmentPackageContentCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerShipmentIdName = "ShipmentId";
        String outerShipmentIdValue = properties.getShipmentId();
        String innerShipmentIdName = "ShipmentId";
        String innerShipmentIdValue = innerProperties.getShipmentId();
        if (innerShipmentIdValue == null) {
            innerProperties.setShipmentId(outerShipmentIdValue);
        }
        else if (innerShipmentIdValue != outerShipmentIdValue 
            && (innerShipmentIdValue == null || innerShipmentIdValue != null && !innerShipmentIdValue.equals(outerShipmentIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerShipmentIdName, outerShipmentIdValue, innerShipmentIdName, innerShipmentIdValue);
        }
        String outerShipmentPackageSeqIdName = "ShipmentPackageSeqId";
        String outerShipmentPackageSeqIdValue = properties.getShipmentPackageSeqId();
        String innerShipmentPackageSeqIdName = "ShipmentPackageSeqId";
        String innerShipmentPackageSeqIdValue = innerProperties.getShipmentPackageSeqId();
        if (innerShipmentPackageSeqIdValue == null) {
            innerProperties.setShipmentPackageSeqId(outerShipmentPackageSeqIdValue);
        }
        else if (innerShipmentPackageSeqIdValue != outerShipmentPackageSeqIdValue 
            && (innerShipmentPackageSeqIdValue == null || innerShipmentPackageSeqIdValue != null && !innerShipmentPackageSeqIdValue.equals(outerShipmentPackageSeqIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerShipmentPackageSeqIdName, outerShipmentPackageSeqIdValue, innerShipmentPackageSeqIdName, innerShipmentPackageSeqIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////


    ////////////////////////

    protected ShipmentEvent.ShipmentStateCreated newShipmentStateCreated(Long version, String commandId, String requesterId) {
        ShipmentEventId stateEventId = new ShipmentEventId(this.state.getShipmentId(), version);
        ShipmentEvent.ShipmentStateCreated e = newShipmentStateCreated(stateEventId);
        ((AbstractShipmentEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShipmentEvent.ShipmentStateMergePatched newShipmentStateMergePatched(Long version, String commandId, String requesterId) {
        ShipmentEventId stateEventId = new ShipmentEventId(this.state.getShipmentId(), version);
        ShipmentEvent.ShipmentStateMergePatched e = newShipmentStateMergePatched(stateEventId);
        ((AbstractShipmentEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShipmentEvent.ShipmentStateDeleted newShipmentStateDeleted(Long version, String commandId, String requesterId) {
        ShipmentEventId stateEventId = new ShipmentEventId(this.state.getShipmentId(), version);
        ShipmentEvent.ShipmentStateDeleted e = newShipmentStateDeleted(stateEventId);
        ((AbstractShipmentEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShipmentEvent.ShipmentStateCreated newShipmentStateCreated(ShipmentEventId stateEventId) {
        return new AbstractShipmentEvent.SimpleShipmentStateCreated(stateEventId);
    }

    protected ShipmentEvent.ShipmentStateMergePatched newShipmentStateMergePatched(ShipmentEventId stateEventId) {
        return new AbstractShipmentEvent.SimpleShipmentStateMergePatched(stateEventId);
    }

    protected ShipmentEvent.ShipmentStateDeleted newShipmentStateDeleted(ShipmentEventId stateEventId) {
        return new AbstractShipmentEvent.SimpleShipmentStateDeleted(stateEventId);
    }

    protected ShipmentItemEvent.ShipmentItemStateCreated newShipmentItemStateCreated(ShipmentItemEventId stateEventId) {
        return new AbstractShipmentItemEvent.SimpleShipmentItemStateCreated(stateEventId);
    }

    protected ShipmentItemEvent.ShipmentItemStateMergePatched newShipmentItemStateMergePatched(ShipmentItemEventId stateEventId) {
        return new AbstractShipmentItemEvent.SimpleShipmentItemStateMergePatched(stateEventId);
    }

    protected ShipmentItemEvent.ShipmentItemStateRemoved newShipmentItemStateRemoved(ShipmentItemEventId stateEventId) {
        return new AbstractShipmentItemEvent.SimpleShipmentItemStateRemoved(stateEventId);
    }

    protected ShipmentPackageEvent.ShipmentPackageStateCreated newShipmentPackageStateCreated(ShipmentPackageEventId stateEventId) {
        return new AbstractShipmentPackageEvent.SimpleShipmentPackageStateCreated(stateEventId);
    }

    protected ShipmentPackageEvent.ShipmentPackageStateMergePatched newShipmentPackageStateMergePatched(ShipmentPackageEventId stateEventId) {
        return new AbstractShipmentPackageEvent.SimpleShipmentPackageStateMergePatched(stateEventId);
    }

    protected ShipmentPackageEvent.ShipmentPackageStateRemoved newShipmentPackageStateRemoved(ShipmentPackageEventId stateEventId) {
        return new AbstractShipmentPackageEvent.SimpleShipmentPackageStateRemoved(stateEventId);
    }

    protected ShipmentPackageContentEvent.ShipmentPackageContentStateCreated newShipmentPackageContentStateCreated(ShipmentPackageContentEventId stateEventId) {
        return new AbstractShipmentPackageContentEvent.SimpleShipmentPackageContentStateCreated(stateEventId);
    }

    protected ShipmentPackageContentEvent.ShipmentPackageContentStateMergePatched newShipmentPackageContentStateMergePatched(ShipmentPackageContentEventId stateEventId) {
        return new AbstractShipmentPackageContentEvent.SimpleShipmentPackageContentStateMergePatched(stateEventId);
    }

    protected ShipmentPackageContentEvent.ShipmentPackageContentStateRemoved newShipmentPackageContentStateRemoved(ShipmentPackageContentEventId stateEventId) {
        return new AbstractShipmentPackageContentEvent.SimpleShipmentPackageContentStateRemoved(stateEventId);
    }


    public static class SimpleShipmentAggregate extends AbstractShipmentAggregate {
        public SimpleShipmentAggregate(ShipmentState state) {
            super(state);
        }

    }

}

