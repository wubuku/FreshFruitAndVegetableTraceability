// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.article;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractCommentEvent extends AbstractEvent implements CommentEvent.SqlCommentEvent {
    private CommentEventId commentEventId = new CommentEventId();

    public CommentEventId getCommentEventId() {
        return this.commentEventId;
    }

    public void setCommentEventId(CommentEventId eventId) {
        this.commentEventId = eventId;
    }
    
    public Long getCommentSeqId() {
        return getCommentEventId().getCommentSeqId();
    }

    public void setCommentSeqId(Long commentSeqId) {
        getCommentEventId().setCommentSeqId(commentSeqId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    protected AbstractCommentEvent() {
    }

    protected AbstractCommentEvent(CommentEventId eventId) {
        this.commentEventId = eventId;
    }


    public abstract String getEventType();


    public static abstract class AbstractCommentStateEvent extends AbstractCommentEvent implements CommentEvent.CommentStateEvent {
        private Long version;

        public Long getVersion()
        {
            return this.version;
        }

        public void setVersion(Long version)
        {
            this.version = version;
        }

        private String commenter;

        public String getCommenter()
        {
            return this.commenter;
        }

        public void setCommenter(String commenter)
        {
            this.commenter = commenter;
        }

        private String body;

        public String getBody()
        {
            return this.body;
        }

        public void setBody(String body)
        {
            this.body = body;
        }

        protected AbstractCommentStateEvent(CommentEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractCommentStateCreated extends AbstractCommentStateEvent implements CommentEvent.CommentStateCreated
    {
        public AbstractCommentStateCreated() {
            this(new CommentEventId());
        }

        public AbstractCommentStateCreated(CommentEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

    }


    public static abstract class AbstractCommentStateMergePatched extends AbstractCommentStateEvent implements CommentEvent.CommentStateMergePatched
    {
        public AbstractCommentStateMergePatched() {
            this(new CommentEventId());
        }

        public AbstractCommentStateMergePatched(CommentEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyCommenterRemoved;

        public Boolean getIsPropertyCommenterRemoved() {
            return this.isPropertyCommenterRemoved;
        }

        public void setIsPropertyCommenterRemoved(Boolean removed) {
            this.isPropertyCommenterRemoved = removed;
        }

        private Boolean isPropertyBodyRemoved;

        public Boolean getIsPropertyBodyRemoved() {
            return this.isPropertyBodyRemoved;
        }

        public void setIsPropertyBodyRemoved(Boolean removed) {
            this.isPropertyBodyRemoved = removed;
        }


    }



    public static class SimpleCommentStateCreated extends AbstractCommentStateCreated
    {
        public SimpleCommentStateCreated() {
        }

        public SimpleCommentStateCreated(CommentEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleCommentStateMergePatched extends AbstractCommentStateMergePatched
    {
        public SimpleCommentStateMergePatched() {
        }

        public SimpleCommentStateMergePatched(CommentEventId eventId) {
            super(eventId);
        }
    }

}

