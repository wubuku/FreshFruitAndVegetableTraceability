// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.lot;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.Event;

public interface LotState
{
    Long VERSION_ZERO = 0L;

    Long VERSION_NULL = VERSION_ZERO - 1;

    String getLotId();

    java.math.BigDecimal getQuantity();

    OffsetDateTime getExpirationDate();

    String getLotTypeId();

    String getActive();

    String getGtin();

    String getGs1Batch();

    String getSourceFacilityId();

    String getInternalId();

    String getPalletSscc();

    OffsetDateTime getPackDate();

    OffsetDateTime getHarvestDate();

    String getSerialNumber();

    Long getVersion();

    String getCreatedBy();

    OffsetDateTime getCreatedAt();

    String getUpdatedBy();

    OffsetDateTime getUpdatedAt();

    EntityStateCollection<String, LotIdentificationState> getLotIdentifications();

    interface MutableLotState extends LotState {
        void setLotId(String lotId);

        void setQuantity(java.math.BigDecimal quantity);

        void setExpirationDate(OffsetDateTime expirationDate);

        void setLotTypeId(String lotTypeId);

        void setActive(String active);

        void setGtin(String gtin);

        void setGs1Batch(String gs1Batch);

        void setSourceFacilityId(String sourceFacilityId);

        void setInternalId(String internalId);

        void setPalletSscc(String palletSscc);

        void setPackDate(OffsetDateTime packDate);

        void setHarvestDate(OffsetDateTime harvestDate);

        void setSerialNumber(String serialNumber);

        void setVersion(Long version);

        void setCreatedBy(String createdBy);

        void setCreatedAt(OffsetDateTime createdAt);

        void setUpdatedBy(String updatedBy);

        void setUpdatedAt(OffsetDateTime updatedAt);


        void mutate(Event e);

        //void when(LotEvent.LotStateCreated e);

        //void when(LotEvent.LotStateMergePatched e);

    }

    interface SqlLotState extends MutableLotState {

        boolean isStateUnsaved();

        boolean getForReapplying();
    }
}

