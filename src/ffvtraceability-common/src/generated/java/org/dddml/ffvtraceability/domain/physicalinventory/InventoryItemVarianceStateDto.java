// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.physicalinventory;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;


public class InventoryItemVarianceStateDto {

    private String inventoryItemId;

    public String getInventoryItemId()
    {
        return this.inventoryItemId;
    }

    public void setInventoryItemId(String inventoryItemId)
    {
        this.inventoryItemId = inventoryItemId;
    }

    private String varianceReasonId;

    public String getVarianceReasonId()
    {
        return this.varianceReasonId;
    }

    public void setVarianceReasonId(String varianceReasonId)
    {
        this.varianceReasonId = varianceReasonId;
    }

    private java.math.BigDecimal availableToPromiseVar;

    public java.math.BigDecimal getAvailableToPromiseVar()
    {
        return this.availableToPromiseVar;
    }

    public void setAvailableToPromiseVar(java.math.BigDecimal availableToPromiseVar)
    {
        this.availableToPromiseVar = availableToPromiseVar;
    }

    private java.math.BigDecimal quantityOnHandVar;

    public java.math.BigDecimal getQuantityOnHandVar()
    {
        return this.quantityOnHandVar;
    }

    public void setQuantityOnHandVar(java.math.BigDecimal quantityOnHandVar)
    {
        this.quantityOnHandVar = quantityOnHandVar;
    }

    private String comments;

    public String getComments()
    {
        return this.comments;
    }

    public void setComments(String comments)
    {
        this.comments = comments;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }

    private String physicalInventoryId;

    public String getPhysicalInventoryId()
    {
        return this.physicalInventoryId;
    }

    public void setPhysicalInventoryId(String physicalInventoryId)
    {
        this.physicalInventoryId = physicalInventoryId;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt)
    {
        this.updatedAt = updatedAt;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public InventoryItemVarianceStateDto[] toInventoryItemVarianceStateDtoArray(Iterable<InventoryItemVarianceState> states) {
            return toInventoryItemVarianceStateDtoList(states).toArray(new InventoryItemVarianceStateDto[0]);
        }

        public List<InventoryItemVarianceStateDto> toInventoryItemVarianceStateDtoList(Iterable<InventoryItemVarianceState> states) {
            ArrayList<InventoryItemVarianceStateDto> stateDtos = new ArrayList();
            for (InventoryItemVarianceState s : states) {
                InventoryItemVarianceStateDto dto = toInventoryItemVarianceStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public InventoryItemVarianceStateDto toInventoryItemVarianceStateDto(InventoryItemVarianceState state)
        {
            if(state == null) {
                return null;
            }
            InventoryItemVarianceStateDto dto = new InventoryItemVarianceStateDto();
            if (returnedFieldsContains("InventoryItemId")) {
                dto.setInventoryItemId(state.getInventoryItemId());
            }
            if (returnedFieldsContains("VarianceReasonId")) {
                dto.setVarianceReasonId(state.getVarianceReasonId());
            }
            if (returnedFieldsContains("AvailableToPromiseVar")) {
                dto.setAvailableToPromiseVar(state.getAvailableToPromiseVar());
            }
            if (returnedFieldsContains("QuantityOnHandVar")) {
                dto.setQuantityOnHandVar(state.getQuantityOnHandVar());
            }
            if (returnedFieldsContains("Comments")) {
                dto.setComments(state.getComments());
            }
            if (returnedFieldsContains("Version")) {
                dto.setVersion(state.getVersion());
            }
            if (returnedFieldsContains("PhysicalInventoryId")) {
                dto.setPhysicalInventoryId(state.getPhysicalInventoryId());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            return dto;
        }

    }
}

