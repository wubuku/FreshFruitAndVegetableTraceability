// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.qainspection;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchQaInspectionDto extends AbstractQaInspectionCommandDto implements QaInspectionCommand.CreateOrMergePatchQaInspection {

    /**
     * Receipt Id
     */
    private String receiptId;

    public String getReceiptId()
    {
        return this.receiptId;
    }

    public void setReceiptId(String receiptId)
    {
        this.receiptId = receiptId;
    }

    /**
     * Inspection Type Id
     */
    private String inspectionTypeId;

    public String getInspectionTypeId()
    {
        return this.inspectionTypeId;
    }

    public void setInspectionTypeId(String inspectionTypeId)
    {
        this.inspectionTypeId = inspectionTypeId;
    }

    /**
     * Comments
     */
    private String comments;

    public String getComments()
    {
        return this.comments;
    }

    public void setComments(String comments)
    {
        this.comments = comments;
    }

    /**
     * Inspection Facility Id
     */
    private String inspectionFacilityId;

    public String getInspectionFacilityId()
    {
        return this.inspectionFacilityId;
    }

    public void setInspectionFacilityId(String inspectionFacilityId)
    {
        this.inspectionFacilityId = inspectionFacilityId;
    }

    /**
     * Inspected By
     */
    private String inspectedBy;

    public String getInspectedBy()
    {
        return this.inspectedBy;
    }

    public void setInspectedBy(String inspectedBy)
    {
        this.inspectedBy = inspectedBy;
    }

    /**
     * Inspected At
     */
    private OffsetDateTime inspectedAt;

    public OffsetDateTime getInspectedAt()
    {
        return this.inspectedAt;
    }

    public void setInspectedAt(OffsetDateTime inspectedAt)
    {
        this.inspectedAt = inspectedAt;
    }

    private String qaInspectionAction;

    public String getQaInspectionAction() {
        return this.qaInspectionAction;
    }

    public void setQaInspectionAction(String qaInspectionAction) {
        this.qaInspectionAction = qaInspectionAction;
    }


    private Boolean isPropertyReceiptIdRemoved;

    public Boolean getIsPropertyReceiptIdRemoved()
    {
        return this.isPropertyReceiptIdRemoved;
    }

    public void setIsPropertyReceiptIdRemoved(Boolean removed)
    {
        this.isPropertyReceiptIdRemoved = removed;
    }

    private Boolean isPropertyInspectionTypeIdRemoved;

    public Boolean getIsPropertyInspectionTypeIdRemoved()
    {
        return this.isPropertyInspectionTypeIdRemoved;
    }

    public void setIsPropertyInspectionTypeIdRemoved(Boolean removed)
    {
        this.isPropertyInspectionTypeIdRemoved = removed;
    }

    private Boolean isPropertyCommentsRemoved;

    public Boolean getIsPropertyCommentsRemoved()
    {
        return this.isPropertyCommentsRemoved;
    }

    public void setIsPropertyCommentsRemoved(Boolean removed)
    {
        this.isPropertyCommentsRemoved = removed;
    }

    private Boolean isPropertyInspectionFacilityIdRemoved;

    public Boolean getIsPropertyInspectionFacilityIdRemoved()
    {
        return this.isPropertyInspectionFacilityIdRemoved;
    }

    public void setIsPropertyInspectionFacilityIdRemoved(Boolean removed)
    {
        this.isPropertyInspectionFacilityIdRemoved = removed;
    }

    private Boolean isPropertyInspectedByRemoved;

    public Boolean getIsPropertyInspectedByRemoved()
    {
        return this.isPropertyInspectedByRemoved;
    }

    public void setIsPropertyInspectedByRemoved(Boolean removed)
    {
        this.isPropertyInspectedByRemoved = removed;
    }

    private Boolean isPropertyInspectedAtRemoved;

    public Boolean getIsPropertyInspectedAtRemoved()
    {
        return this.isPropertyInspectedAtRemoved;
    }

    public void setIsPropertyInspectedAtRemoved(Boolean removed)
    {
        this.isPropertyInspectedAtRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchQaInspection command)
    {
        ((AbstractQaInspectionCommandDto) this).copyTo(command);
        command.setReceiptId(this.getReceiptId());
        command.setInspectionTypeId(this.getInspectionTypeId());
        command.setComments(this.getComments());
        command.setInspectionFacilityId(this.getInspectionFacilityId());
        command.setInspectedBy(this.getInspectedBy());
        command.setInspectedAt(this.getInspectedAt());
    }

    public QaInspectionCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractQaInspectionCommand.SimpleCreateQaInspection command = new AbstractQaInspectionCommand.SimpleCreateQaInspection();
            copyTo((AbstractQaInspectionCommand.AbstractCreateQaInspection) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractQaInspectionCommand.SimpleMergePatchQaInspection command = new AbstractQaInspectionCommand.SimpleMergePatchQaInspection();
            copyTo((AbstractQaInspectionCommand.SimpleMergePatchQaInspection) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public QaInspectionCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateQaInspectionDto command = new CreateQaInspectionDto();
            copyTo((CreateQaInspection) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchQaInspectionDto command = new MergePatchQaInspectionDto();
            copyTo((MergePatchQaInspection) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateQaInspection command)
    {
        copyTo((CreateOrMergePatchQaInspection) command);
    }

    public void copyTo(MergePatchQaInspection command)
    {
        copyTo((CreateOrMergePatchQaInspection) command);
        command.setIsPropertyReceiptIdRemoved(this.getIsPropertyReceiptIdRemoved());
        command.setIsPropertyInspectionTypeIdRemoved(this.getIsPropertyInspectionTypeIdRemoved());
        command.setIsPropertyCommentsRemoved(this.getIsPropertyCommentsRemoved());
        command.setIsPropertyInspectionFacilityIdRemoved(this.getIsPropertyInspectionFacilityIdRemoved());
        command.setIsPropertyInspectedByRemoved(this.getIsPropertyInspectedByRemoved());
        command.setIsPropertyInspectedAtRemoved(this.getIsPropertyInspectedAtRemoved());
    }

    public static class CreateQaInspectionDto extends CreateOrMergePatchQaInspectionDto implements QaInspectionCommand.CreateQaInspection
    {
        public CreateQaInspectionDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public QaInspectionCommand.CreateQaInspection toCreateQaInspection()
        {
            return (QaInspectionCommand.CreateQaInspection) toCommand();
        }

    }

    public static class MergePatchQaInspectionDto extends CreateOrMergePatchQaInspectionDto implements QaInspectionCommand.MergePatchQaInspection
    {
        public MergePatchQaInspectionDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public QaInspectionCommand.MergePatchQaInspection toMergePatchQaInspection()
        {
            return (QaInspectionCommand.MergePatchQaInspection) toCommand();
        }

    }

}

