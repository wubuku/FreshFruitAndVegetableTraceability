// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.documentassociation;

import org.dddml.ffvtraceability.domain.*;
import java.time.OffsetDateTime;

public class CreateOrMergePatchDocumentAssociationDto extends AbstractDocumentAssociationCommandDto implements DocumentAssociationCommand.CreateOrMergePatchDocumentAssociation {

    /**
     * Document Id
     */
    private String documentId;

    public String getDocumentId()
    {
        return this.documentId;
    }

    public void setDocumentId(String documentId)
    {
        this.documentId = documentId;
    }

    /**
     * Document Id To
     */
    private String documentIdTo;

    public String getDocumentIdTo()
    {
        return this.documentIdTo;
    }

    public void setDocumentIdTo(String documentIdTo)
    {
        this.documentIdTo = documentIdTo;
    }

    /**
     * Document Assoc Type Id
     */
    private String documentAssocTypeId;

    public String getDocumentAssocTypeId()
    {
        return this.documentAssocTypeId;
    }

    public void setDocumentAssocTypeId(String documentAssocTypeId)
    {
        this.documentAssocTypeId = documentAssocTypeId;
    }

    /**
     * From Date
     */
    private OffsetDateTime fromDate;

    public OffsetDateTime getFromDate()
    {
        return this.fromDate;
    }

    public void setFromDate(OffsetDateTime fromDate)
    {
        this.fromDate = fromDate;
    }

    /**
     * Thru Date
     */
    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate()
    {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate)
    {
        this.thruDate = thruDate;
    }

    /**
     * Active
     */
    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }


    private Boolean isPropertyDocumentIdRemoved;

    public Boolean getIsPropertyDocumentIdRemoved()
    {
        return this.isPropertyDocumentIdRemoved;
    }

    public void setIsPropertyDocumentIdRemoved(Boolean removed)
    {
        this.isPropertyDocumentIdRemoved = removed;
    }

    private Boolean isPropertyDocumentIdToRemoved;

    public Boolean getIsPropertyDocumentIdToRemoved()
    {
        return this.isPropertyDocumentIdToRemoved;
    }

    public void setIsPropertyDocumentIdToRemoved(Boolean removed)
    {
        this.isPropertyDocumentIdToRemoved = removed;
    }

    private Boolean isPropertyDocumentAssocTypeIdRemoved;

    public Boolean getIsPropertyDocumentAssocTypeIdRemoved()
    {
        return this.isPropertyDocumentAssocTypeIdRemoved;
    }

    public void setIsPropertyDocumentAssocTypeIdRemoved(Boolean removed)
    {
        this.isPropertyDocumentAssocTypeIdRemoved = removed;
    }

    private Boolean isPropertyFromDateRemoved;

    public Boolean getIsPropertyFromDateRemoved()
    {
        return this.isPropertyFromDateRemoved;
    }

    public void setIsPropertyFromDateRemoved(Boolean removed)
    {
        this.isPropertyFromDateRemoved = removed;
    }

    private Boolean isPropertyThruDateRemoved;

    public Boolean getIsPropertyThruDateRemoved()
    {
        return this.isPropertyThruDateRemoved;
    }

    public void setIsPropertyThruDateRemoved(Boolean removed)
    {
        this.isPropertyThruDateRemoved = removed;
    }

    private Boolean isPropertyActiveRemoved;

    public Boolean getIsPropertyActiveRemoved()
    {
        return this.isPropertyActiveRemoved;
    }

    public void setIsPropertyActiveRemoved(Boolean removed)
    {
        this.isPropertyActiveRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchDocumentAssociation command)
    {
        ((AbstractDocumentAssociationCommandDto) this).copyTo(command);
        command.setDocumentId(this.getDocumentId());
        command.setDocumentIdTo(this.getDocumentIdTo());
        command.setDocumentAssocTypeId(this.getDocumentAssocTypeId());
        command.setFromDate(this.getFromDate());
        command.setThruDate(this.getThruDate());
        command.setActive(this.getActive());
    }

    public DocumentAssociationCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractDocumentAssociationCommand.SimpleCreateDocumentAssociation command = new AbstractDocumentAssociationCommand.SimpleCreateDocumentAssociation();
            copyTo((AbstractDocumentAssociationCommand.AbstractCreateDocumentAssociation) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractDocumentAssociationCommand.SimpleMergePatchDocumentAssociation command = new AbstractDocumentAssociationCommand.SimpleMergePatchDocumentAssociation();
            copyTo((AbstractDocumentAssociationCommand.SimpleMergePatchDocumentAssociation) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public DocumentAssociationCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateDocumentAssociationDto command = new CreateDocumentAssociationDto();
            copyTo((CreateDocumentAssociation) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchDocumentAssociationDto command = new MergePatchDocumentAssociationDto();
            copyTo((MergePatchDocumentAssociation) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateDocumentAssociation command)
    {
        copyTo((CreateOrMergePatchDocumentAssociation) command);
    }

    public void copyTo(MergePatchDocumentAssociation command)
    {
        copyTo((CreateOrMergePatchDocumentAssociation) command);
        command.setIsPropertyDocumentIdRemoved(this.getIsPropertyDocumentIdRemoved());
        command.setIsPropertyDocumentIdToRemoved(this.getIsPropertyDocumentIdToRemoved());
        command.setIsPropertyDocumentAssocTypeIdRemoved(this.getIsPropertyDocumentAssocTypeIdRemoved());
        command.setIsPropertyFromDateRemoved(this.getIsPropertyFromDateRemoved());
        command.setIsPropertyThruDateRemoved(this.getIsPropertyThruDateRemoved());
        command.setIsPropertyActiveRemoved(this.getIsPropertyActiveRemoved());
    }

    public static class CreateDocumentAssociationDto extends CreateOrMergePatchDocumentAssociationDto implements DocumentAssociationCommand.CreateDocumentAssociation
    {
        public CreateDocumentAssociationDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public DocumentAssociationCommand.CreateDocumentAssociation toCreateDocumentAssociation()
        {
            return (DocumentAssociationCommand.CreateDocumentAssociation) toCommand();
        }

    }

    public static class MergePatchDocumentAssociationDto extends CreateOrMergePatchDocumentAssociationDto implements DocumentAssociationCommand.MergePatchDocumentAssociation
    {
        public MergePatchDocumentAssociationDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public DocumentAssociationCommand.MergePatchDocumentAssociation toMergePatchDocumentAssociation()
        {
            return (DocumentAssociationCommand.MergePatchDocumentAssociation) toCommand();
        }

    }

}

