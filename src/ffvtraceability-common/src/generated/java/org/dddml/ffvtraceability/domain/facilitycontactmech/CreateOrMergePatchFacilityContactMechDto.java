// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facilitycontactmech;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchFacilityContactMechDto extends AbstractFacilityContactMechCommandDto implements FacilityContactMechCommand.CreateOrMergePatchFacilityContactMech {

    /**
     * Thru Date
     */
    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate()
    {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate)
    {
        this.thruDate = thruDate;
    }

    /**
     * Extension
     */
    private String extension;

    public String getExtension()
    {
        return this.extension;
    }

    public void setExtension(String extension)
    {
        this.extension = extension;
    }

    /**
     * Comments
     */
    private String comments;

    public String getComments()
    {
        return this.comments;
    }

    public void setComments(String comments)
    {
        this.comments = comments;
    }


    private CreateOrMergePatchFacilityContactMechPurposeDto[] facilityContactMechPurposes = new CreateOrMergePatchFacilityContactMechPurposeDto[0];

    public CreateOrMergePatchFacilityContactMechPurposeDto[] getFacilityContactMechPurposes()
    {
        return this.facilityContactMechPurposes;
    }

    public void setFacilityContactMechPurposes(CreateOrMergePatchFacilityContactMechPurposeDto[] facilityContactMechPurposes)
    {
        this.facilityContactMechPurposes = facilityContactMechPurposes;
    }

    private Boolean isPropertyThruDateRemoved;

    public Boolean getIsPropertyThruDateRemoved()
    {
        return this.isPropertyThruDateRemoved;
    }

    public void setIsPropertyThruDateRemoved(Boolean removed)
    {
        this.isPropertyThruDateRemoved = removed;
    }

    private Boolean isPropertyExtensionRemoved;

    public Boolean getIsPropertyExtensionRemoved()
    {
        return this.isPropertyExtensionRemoved;
    }

    public void setIsPropertyExtensionRemoved(Boolean removed)
    {
        this.isPropertyExtensionRemoved = removed;
    }

    private Boolean isPropertyCommentsRemoved;

    public Boolean getIsPropertyCommentsRemoved()
    {
        return this.isPropertyCommentsRemoved;
    }

    public void setIsPropertyCommentsRemoved(Boolean removed)
    {
        this.isPropertyCommentsRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchFacilityContactMech command)
    {
        ((AbstractFacilityContactMechCommandDto) this).copyTo(command);
        command.setThruDate(this.getThruDate());
        command.setExtension(this.getExtension());
        command.setComments(this.getComments());
    }

    public FacilityContactMechCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractFacilityContactMechCommand.SimpleCreateFacilityContactMech command = new AbstractFacilityContactMechCommand.SimpleCreateFacilityContactMech();
            copyTo((AbstractFacilityContactMechCommand.AbstractCreateFacilityContactMech) command);
            if (this.getFacilityContactMechPurposes() != null) {
                for (CreateOrMergePatchFacilityContactMechPurposeDto cmd : this.getFacilityContactMechPurposes()) {
                    command.getFacilityContactMechPurposes().add((FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose) cmd.toCommand());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractFacilityContactMechCommand.SimpleMergePatchFacilityContactMech command = new AbstractFacilityContactMechCommand.SimpleMergePatchFacilityContactMech();
            copyTo((AbstractFacilityContactMechCommand.SimpleMergePatchFacilityContactMech) command);
            if (this.getFacilityContactMechPurposes() != null) {
                for (CreateOrMergePatchFacilityContactMechPurposeDto cmd : this.getFacilityContactMechPurposes()) {
                    command.getFacilityContactMechPurposeCommands().add(cmd.toCommand());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public FacilityContactMechCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateFacilityContactMechDto command = new CreateFacilityContactMechDto();
            copyTo((CreateFacilityContactMech) command);
            if (this.getFacilityContactMechPurposes() != null) {
                for (CreateOrMergePatchFacilityContactMechPurposeDto cmd : this.getFacilityContactMechPurposes()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreateFacilityContactMechPurposeCommands().add((FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose) cmd.toSubclass());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchFacilityContactMechDto command = new MergePatchFacilityContactMechDto();
            copyTo((MergePatchFacilityContactMech) command);
            if (this.getFacilityContactMechPurposes() != null) {
                for (CreateOrMergePatchFacilityContactMechPurposeDto cmd : this.getFacilityContactMechPurposes()) {
                    command.getFacilityContactMechPurposeCommands().add(cmd.toSubclass());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateFacilityContactMech command)
    {
        copyTo((CreateOrMergePatchFacilityContactMech) command);
    }

    public void copyTo(MergePatchFacilityContactMech command)
    {
        copyTo((CreateOrMergePatchFacilityContactMech) command);
        command.setIsPropertyThruDateRemoved(this.getIsPropertyThruDateRemoved());
        command.setIsPropertyExtensionRemoved(this.getIsPropertyExtensionRemoved());
        command.setIsPropertyCommentsRemoved(this.getIsPropertyCommentsRemoved());
    }

    public static class CreateFacilityContactMechDto extends CreateOrMergePatchFacilityContactMechDto implements FacilityContactMechCommand.CreateFacilityContactMech
    {
        public CreateFacilityContactMechDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public FacilityContactMechCommand.CreateFacilityContactMech toCreateFacilityContactMech()
        {
            return (FacilityContactMechCommand.CreateFacilityContactMech) toCommand();
        }


        @Override
        public CreateFacilityContactMechPurposeCommandCollection getCreateFacilityContactMechPurposeCommands() {
            return new CreateFacilityContactMechPurposeCommandCollection() {
                @Override
                public void add(FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose c) {
                    java.util.List<CreateOrMergePatchFacilityContactMechPurposeDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getFacilityContactMechPurposes()));
                    list.add((CreateOrMergePatchFacilityContactMechPurposeDto) c);
                    setFacilityContactMechPurposes(list.toArray(new CreateOrMergePatchFacilityContactMechPurposeDto[0]));
                }

                @Override
                public void remove(FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose c) {
                    java.util.List<CreateOrMergePatchFacilityContactMechPurposeDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getFacilityContactMechPurposes()));
                    list.remove((CreateOrMergePatchFacilityContactMechPurposeDto) c);
                    setFacilityContactMechPurposes(list.toArray(new CreateOrMergePatchFacilityContactMechPurposeDto[0]));
                }

                @Override
                public void clear() {
                    setFacilityContactMechPurposes(new CreateOrMergePatchFacilityContactMechPurposeDto[]{});
                }

                @Override
                public java.util.Iterator<FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose> iterator() {
                    return java.util.Arrays.stream(getFacilityContactMechPurposes())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose newCreateFacilityContactMechPurpose() {
            return new CreateOrMergePatchFacilityContactMechPurposeDto.CreateFacilityContactMechPurposeDto();
        }

    }

    public static class MergePatchFacilityContactMechDto extends CreateOrMergePatchFacilityContactMechDto implements FacilityContactMechCommand.MergePatchFacilityContactMech
    {
        public MergePatchFacilityContactMechDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public FacilityContactMechCommand.MergePatchFacilityContactMech toMergePatchFacilityContactMech()
        {
            return (FacilityContactMechCommand.MergePatchFacilityContactMech) toCommand();
        }


        @Override
        public FacilityContactMechPurposeCommandCollection getFacilityContactMechPurposeCommands() {
            return new FacilityContactMechPurposeCommandCollection() {
                @Override
                public void add(FacilityContactMechPurposeCommand c) {
                    java.util.List<CreateOrMergePatchFacilityContactMechPurposeDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getFacilityContactMechPurposes()));
                    list.add((CreateOrMergePatchFacilityContactMechPurposeDto) c);
                    setFacilityContactMechPurposes(list.toArray(new CreateOrMergePatchFacilityContactMechPurposeDto[0]));
                }

                @Override
                public void remove(FacilityContactMechPurposeCommand c) {
                    java.util.List<CreateOrMergePatchFacilityContactMechPurposeDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getFacilityContactMechPurposes()));
                    list.remove((CreateOrMergePatchFacilityContactMechPurposeDto) c);
                    setFacilityContactMechPurposes(list.toArray(new CreateOrMergePatchFacilityContactMechPurposeDto[0]));
                }

                @Override
                public void clear() {
                    setFacilityContactMechPurposes(new CreateOrMergePatchFacilityContactMechPurposeDto[]{});
                }

                @Override
                public java.util.Iterator<FacilityContactMechPurposeCommand> iterator() {
                    return java.util.Arrays.stream(getFacilityContactMechPurposes())
                            .map(e -> (FacilityContactMechPurposeCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose newCreateFacilityContactMechPurpose() {
            return new CreateOrMergePatchFacilityContactMechPurposeDto.CreateFacilityContactMechPurposeDto();
        }

        @Override
        public FacilityContactMechPurposeCommand.MergePatchFacilityContactMechPurpose newMergePatchFacilityContactMechPurpose() {
            return new CreateOrMergePatchFacilityContactMechPurposeDto.MergePatchFacilityContactMechPurposeDto();
        }

        @Override
        public FacilityContactMechPurposeCommand.RemoveFacilityContactMechPurpose newRemoveFacilityContactMechPurpose() {
            return new RemoveFacilityContactMechPurposeDto();
        }

    }

}

