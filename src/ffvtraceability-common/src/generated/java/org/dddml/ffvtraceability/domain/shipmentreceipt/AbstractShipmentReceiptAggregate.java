// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipmentreceipt;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.partyrole.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractShipmentReceiptAggregate extends AbstractAggregate implements ShipmentReceiptAggregate {
    private ShipmentReceiptState.MutableShipmentReceiptState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractShipmentReceiptAggregate(ShipmentReceiptState state) {
        this.state = (ShipmentReceiptState.MutableShipmentReceiptState)state;
    }

    public ShipmentReceiptState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(ShipmentReceiptCommand.CreateShipmentReceipt c) {
        if (c.getVersion() == null) { c.setVersion(ShipmentReceiptState.VERSION_NULL); }
        ShipmentReceiptEvent e = map(c);
        apply(e);
    }

    public void mergePatch(ShipmentReceiptCommand.MergePatchShipmentReceipt c) {
        ShipmentReceiptEvent e = map(c);
        apply(e);
    }

    public void delete(ShipmentReceiptCommand.DeleteShipmentReceipt c) {
        ShipmentReceiptEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        ShipmentReceiptCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected ShipmentReceiptEvent map(ShipmentReceiptCommand.CreateShipmentReceipt c) {
        ShipmentReceiptEventId stateEventId = new ShipmentReceiptEventId(c.getReceiptId(), c.getVersion());
        ShipmentReceiptEvent.ShipmentReceiptStateCreated e = newShipmentReceiptStateCreated(stateEventId);
        e.setInventoryItemId(c.getInventoryItemId());
        e.setProductId(c.getProductId());
        e.setShipmentId(c.getShipmentId());
        e.setShipmentItemSeqId(c.getShipmentItemSeqId());
        e.setShipmentPackageSeqId(c.getShipmentPackageSeqId());
        e.setOrderId(c.getOrderId());
        e.setOrderItemSeqId(c.getOrderItemSeqId());
        e.setReturnId(c.getReturnId());
        e.setReturnItemSeqId(c.getReturnItemSeqId());
        e.setRejectionId(c.getRejectionId());
        e.setReceivedByUserLoginId(c.getReceivedByUserLoginId());
        e.setDatetimeReceived(c.getDatetimeReceived());
        e.setItemDescription(c.getItemDescription());
        e.setQuantityAccepted(c.getQuantityAccepted());
        e.setQuantityRejected(c.getQuantityRejected());
        ((AbstractShipmentReceiptEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (ShipmentReceiptRoleCommand.CreateShipmentReceiptRole innerCommand : c.getCreateShipmentReceiptRoleCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addShipmentReceiptRoleEvent(innerEvent);
        }

        return e;
    }

    protected ShipmentReceiptEvent map(ShipmentReceiptCommand.MergePatchShipmentReceipt c) {
        ShipmentReceiptEventId stateEventId = new ShipmentReceiptEventId(c.getReceiptId(), c.getVersion());
        ShipmentReceiptEvent.ShipmentReceiptStateMergePatched e = newShipmentReceiptStateMergePatched(stateEventId);
        e.setInventoryItemId(c.getInventoryItemId());
        e.setProductId(c.getProductId());
        e.setShipmentId(c.getShipmentId());
        e.setShipmentItemSeqId(c.getShipmentItemSeqId());
        e.setShipmentPackageSeqId(c.getShipmentPackageSeqId());
        e.setOrderId(c.getOrderId());
        e.setOrderItemSeqId(c.getOrderItemSeqId());
        e.setReturnId(c.getReturnId());
        e.setReturnItemSeqId(c.getReturnItemSeqId());
        e.setRejectionId(c.getRejectionId());
        e.setReceivedByUserLoginId(c.getReceivedByUserLoginId());
        e.setDatetimeReceived(c.getDatetimeReceived());
        e.setItemDescription(c.getItemDescription());
        e.setQuantityAccepted(c.getQuantityAccepted());
        e.setQuantityRejected(c.getQuantityRejected());
        e.setIsPropertyInventoryItemIdRemoved(c.getIsPropertyInventoryItemIdRemoved());
        e.setIsPropertyProductIdRemoved(c.getIsPropertyProductIdRemoved());
        e.setIsPropertyShipmentIdRemoved(c.getIsPropertyShipmentIdRemoved());
        e.setIsPropertyShipmentItemSeqIdRemoved(c.getIsPropertyShipmentItemSeqIdRemoved());
        e.setIsPropertyShipmentPackageSeqIdRemoved(c.getIsPropertyShipmentPackageSeqIdRemoved());
        e.setIsPropertyOrderIdRemoved(c.getIsPropertyOrderIdRemoved());
        e.setIsPropertyOrderItemSeqIdRemoved(c.getIsPropertyOrderItemSeqIdRemoved());
        e.setIsPropertyReturnIdRemoved(c.getIsPropertyReturnIdRemoved());
        e.setIsPropertyReturnItemSeqIdRemoved(c.getIsPropertyReturnItemSeqIdRemoved());
        e.setIsPropertyRejectionIdRemoved(c.getIsPropertyRejectionIdRemoved());
        e.setIsPropertyReceivedByUserLoginIdRemoved(c.getIsPropertyReceivedByUserLoginIdRemoved());
        e.setIsPropertyDatetimeReceivedRemoved(c.getIsPropertyDatetimeReceivedRemoved());
        e.setIsPropertyItemDescriptionRemoved(c.getIsPropertyItemDescriptionRemoved());
        e.setIsPropertyQuantityAcceptedRemoved(c.getIsPropertyQuantityAcceptedRemoved());
        e.setIsPropertyQuantityRejectedRemoved(c.getIsPropertyQuantityRejectedRemoved());
        ((AbstractShipmentReceiptEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (ShipmentReceiptRoleCommand innerCommand : c.getShipmentReceiptRoleCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            ShipmentReceiptRoleEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addShipmentReceiptRoleEvent(innerEvent);
        }

        return e;
    }

    protected ShipmentReceiptEvent map(ShipmentReceiptCommand.DeleteShipmentReceipt c) {
        ShipmentReceiptEventId stateEventId = new ShipmentReceiptEventId(c.getReceiptId(), c.getVersion());
        ShipmentReceiptEvent.ShipmentReceiptStateDeleted e = newShipmentReceiptStateDeleted(stateEventId);
        ((AbstractShipmentReceiptEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    protected ShipmentReceiptRoleEvent map(ShipmentReceiptRoleCommand c, ShipmentReceiptCommand outerCommand, Long version, ShipmentReceiptState outerState) {
        ShipmentReceiptRoleCommand.CreateShipmentReceiptRole create = (c.getCommandType().equals(CommandType.CREATE)) ? ((ShipmentReceiptRoleCommand.CreateShipmentReceiptRole)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        ShipmentReceiptRoleCommand.MergePatchShipmentReceiptRole merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((ShipmentReceiptRoleCommand.MergePatchShipmentReceiptRole)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        ShipmentReceiptRoleCommand.RemoveShipmentReceiptRole remove = (c.getCommandType().equals(CommandType.REMOVE)) ? ((ShipmentReceiptRoleCommand.RemoveShipmentReceiptRole)c) : null;
        if (remove != null) {
            return mapRemove(remove, outerCommand, version, outerState);
        }
        throw new UnsupportedOperationException();
    }

    protected ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateCreated mapCreate(ShipmentReceiptRoleCommand.CreateShipmentReceiptRole c, ShipmentReceiptCommand outerCommand, Long version, ShipmentReceiptState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        ShipmentReceiptRoleEventId stateEventId = new ShipmentReceiptRoleEventId(outerState.getReceiptId(), c.getPartyRoleId(), version);
        ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateCreated e = newShipmentReceiptRoleStateCreated(stateEventId);
        ShipmentReceiptRoleState s = ((EntityStateCollection.ModifiableEntityStateCollection<PartyRoleId, ShipmentReceiptRoleState>)outerState.getShipmentReceiptRoles()).getOrAddDefault(c.getPartyRoleId());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateMergePatched mapMergePatch(ShipmentReceiptRoleCommand.MergePatchShipmentReceiptRole c, ShipmentReceiptCommand outerCommand, Long version, ShipmentReceiptState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        ShipmentReceiptRoleEventId stateEventId = new ShipmentReceiptRoleEventId(outerState.getReceiptId(), c.getPartyRoleId(), version);
        ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateMergePatched e = newShipmentReceiptRoleStateMergePatched(stateEventId);
        ShipmentReceiptRoleState s = ((EntityStateCollection.ModifiableEntityStateCollection<PartyRoleId, ShipmentReceiptRoleState>)outerState.getShipmentReceiptRoles()).getOrAddDefault(c.getPartyRoleId());


        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateRemoved mapRemove(ShipmentReceiptRoleCommand.RemoveShipmentReceiptRole c, ShipmentReceiptCommand outerCommand, Long version, ShipmentReceiptState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        ShipmentReceiptRoleEventId stateEventId = new ShipmentReceiptRoleEventId(outerState.getReceiptId(), c.getPartyRoleId(), version);
        ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateRemoved e = newShipmentReceiptRoleStateRemoved(stateEventId);

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IRemove... ////////////////////////////

    protected void throwOnInconsistentCommands(ShipmentReceiptCommand command, ShipmentReceiptRoleCommand innerCommand) {
        AbstractShipmentReceiptCommand properties = command instanceof AbstractShipmentReceiptCommand ? (AbstractShipmentReceiptCommand) command : null;
        AbstractShipmentReceiptRoleCommand innerProperties = innerCommand instanceof AbstractShipmentReceiptRoleCommand ? (AbstractShipmentReceiptRoleCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerReceiptIdName = "ReceiptId";
        String outerReceiptIdValue = properties.getReceiptId();
        String innerShipmentReceiptReceiptIdName = "ShipmentReceiptReceiptId";
        String innerShipmentReceiptReceiptIdValue = innerProperties.getShipmentReceiptReceiptId();
        if (innerShipmentReceiptReceiptIdValue == null) {
            innerProperties.setShipmentReceiptReceiptId(outerReceiptIdValue);
        }
        else if (innerShipmentReceiptReceiptIdValue != outerReceiptIdValue 
            && (innerShipmentReceiptReceiptIdValue == null || innerShipmentReceiptReceiptIdValue != null && !innerShipmentReceiptReceiptIdValue.equals(outerReceiptIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerReceiptIdName, outerReceiptIdValue, innerShipmentReceiptReceiptIdName, innerShipmentReceiptReceiptIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////


    ////////////////////////

    protected ShipmentReceiptEvent.ShipmentReceiptStateCreated newShipmentReceiptStateCreated(Long version, String commandId, String requesterId) {
        ShipmentReceiptEventId stateEventId = new ShipmentReceiptEventId(this.state.getReceiptId(), version);
        ShipmentReceiptEvent.ShipmentReceiptStateCreated e = newShipmentReceiptStateCreated(stateEventId);
        ((AbstractShipmentReceiptEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShipmentReceiptEvent.ShipmentReceiptStateMergePatched newShipmentReceiptStateMergePatched(Long version, String commandId, String requesterId) {
        ShipmentReceiptEventId stateEventId = new ShipmentReceiptEventId(this.state.getReceiptId(), version);
        ShipmentReceiptEvent.ShipmentReceiptStateMergePatched e = newShipmentReceiptStateMergePatched(stateEventId);
        ((AbstractShipmentReceiptEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShipmentReceiptEvent.ShipmentReceiptStateDeleted newShipmentReceiptStateDeleted(Long version, String commandId, String requesterId) {
        ShipmentReceiptEventId stateEventId = new ShipmentReceiptEventId(this.state.getReceiptId(), version);
        ShipmentReceiptEvent.ShipmentReceiptStateDeleted e = newShipmentReceiptStateDeleted(stateEventId);
        ((AbstractShipmentReceiptEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShipmentReceiptEvent.ShipmentReceiptStateCreated newShipmentReceiptStateCreated(ShipmentReceiptEventId stateEventId) {
        return new AbstractShipmentReceiptEvent.SimpleShipmentReceiptStateCreated(stateEventId);
    }

    protected ShipmentReceiptEvent.ShipmentReceiptStateMergePatched newShipmentReceiptStateMergePatched(ShipmentReceiptEventId stateEventId) {
        return new AbstractShipmentReceiptEvent.SimpleShipmentReceiptStateMergePatched(stateEventId);
    }

    protected ShipmentReceiptEvent.ShipmentReceiptStateDeleted newShipmentReceiptStateDeleted(ShipmentReceiptEventId stateEventId) {
        return new AbstractShipmentReceiptEvent.SimpleShipmentReceiptStateDeleted(stateEventId);
    }

    protected ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateCreated newShipmentReceiptRoleStateCreated(ShipmentReceiptRoleEventId stateEventId) {
        return new AbstractShipmentReceiptRoleEvent.SimpleShipmentReceiptRoleStateCreated(stateEventId);
    }

    protected ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateMergePatched newShipmentReceiptRoleStateMergePatched(ShipmentReceiptRoleEventId stateEventId) {
        return new AbstractShipmentReceiptRoleEvent.SimpleShipmentReceiptRoleStateMergePatched(stateEventId);
    }

    protected ShipmentReceiptRoleEvent.ShipmentReceiptRoleStateRemoved newShipmentReceiptRoleStateRemoved(ShipmentReceiptRoleEventId stateEventId) {
        return new AbstractShipmentReceiptRoleEvent.SimpleShipmentReceiptRoleStateRemoved(stateEventId);
    }


    public static class SimpleShipmentReceiptAggregate extends AbstractShipmentReceiptAggregate {
        public SimpleShipmentReceiptAggregate(ShipmentReceiptState state) {
            super(state);
        }

    }

}

