// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.supplierproduct;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractSupplierProductAggregate extends AbstractAggregate implements SupplierProductAggregate {
    private SupplierProductState.MutableSupplierProductState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractSupplierProductAggregate(SupplierProductState state) {
        this.state = (SupplierProductState.MutableSupplierProductState)state;
    }

    public SupplierProductState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(SupplierProductCommand.CreateSupplierProduct c) {
        if (c.getVersion() == null) { c.setVersion(SupplierProductState.VERSION_NULL); }
        SupplierProductEvent e = map(c);
        apply(e);
    }

    public void mergePatch(SupplierProductCommand.MergePatchSupplierProduct c) {
        SupplierProductEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        SupplierProductCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected SupplierProductEvent map(SupplierProductCommand.CreateSupplierProduct c) {
        SupplierProductEventId stateEventId = new SupplierProductEventId(SupplierProductTenantizedId.toSupplierProductTenantizedId(c.getSupplierProductAssocId()), c.getVersion());
        SupplierProductEvent.SupplierProductStateCreated e = newSupplierProductStateCreated(stateEventId);
        e.setAvailableThruDate(c.getAvailableThruDate());
        e.setSupplierPrefOrderId(c.getSupplierPrefOrderId());
        e.setSupplierRatingTypeId(c.getSupplierRatingTypeId());
        e.setStandardLeadTimeDays(c.getStandardLeadTimeDays());
        e.setOrderQtyIncrements(c.getOrderQtyIncrements());
        e.setUnitsIncluded(c.getUnitsIncluded());
        e.setQuantityUomId(c.getQuantityUomId());
        e.setAgreementId(c.getAgreementId());
        e.setAgreementItemSeqId(c.getAgreementItemSeqId());
        e.setLastPrice(c.getLastPrice());
        e.setShippingPrice(c.getShippingPrice());
        e.setSupplierProductId(c.getSupplierProductId());
        e.setSupplierProductName(c.getSupplierProductName());
        e.setCanDropShip(c.getCanDropShip());
        e.setComments(c.getComments());
        e.setTaxInPrice(c.getTaxInPrice());
        e.setTaxAmount(c.getTaxAmount());
        e.setTaxPercentage(c.getTaxPercentage());
        e.setLimitQuantityPerCustomer(c.getLimitQuantityPerCustomer());
        e.setLimitQuantityPerOrder(c.getLimitQuantityPerOrder());
        e.setProductPriceTypeId(c.getProductPriceTypeId());
        e.setShipmentMethodTypeId(c.getShipmentMethodTypeId());
        ((AbstractSupplierProductEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected SupplierProductEvent map(SupplierProductCommand.MergePatchSupplierProduct c) {
        SupplierProductEventId stateEventId = new SupplierProductEventId(SupplierProductTenantizedId.toSupplierProductTenantizedId(c.getSupplierProductAssocId()), c.getVersion());
        SupplierProductEvent.SupplierProductStateMergePatched e = newSupplierProductStateMergePatched(stateEventId);
        e.setAvailableThruDate(c.getAvailableThruDate());
        e.setSupplierPrefOrderId(c.getSupplierPrefOrderId());
        e.setSupplierRatingTypeId(c.getSupplierRatingTypeId());
        e.setStandardLeadTimeDays(c.getStandardLeadTimeDays());
        e.setOrderQtyIncrements(c.getOrderQtyIncrements());
        e.setUnitsIncluded(c.getUnitsIncluded());
        e.setQuantityUomId(c.getQuantityUomId());
        e.setAgreementId(c.getAgreementId());
        e.setAgreementItemSeqId(c.getAgreementItemSeqId());
        e.setLastPrice(c.getLastPrice());
        e.setShippingPrice(c.getShippingPrice());
        e.setSupplierProductId(c.getSupplierProductId());
        e.setSupplierProductName(c.getSupplierProductName());
        e.setCanDropShip(c.getCanDropShip());
        e.setComments(c.getComments());
        e.setTaxInPrice(c.getTaxInPrice());
        e.setTaxAmount(c.getTaxAmount());
        e.setTaxPercentage(c.getTaxPercentage());
        e.setLimitQuantityPerCustomer(c.getLimitQuantityPerCustomer());
        e.setLimitQuantityPerOrder(c.getLimitQuantityPerOrder());
        e.setProductPriceTypeId(c.getProductPriceTypeId());
        e.setShipmentMethodTypeId(c.getShipmentMethodTypeId());
        e.setIsPropertyAvailableThruDateRemoved(c.getIsPropertyAvailableThruDateRemoved());
        e.setIsPropertySupplierPrefOrderIdRemoved(c.getIsPropertySupplierPrefOrderIdRemoved());
        e.setIsPropertySupplierRatingTypeIdRemoved(c.getIsPropertySupplierRatingTypeIdRemoved());
        e.setIsPropertyStandardLeadTimeDaysRemoved(c.getIsPropertyStandardLeadTimeDaysRemoved());
        e.setIsPropertyOrderQtyIncrementsRemoved(c.getIsPropertyOrderQtyIncrementsRemoved());
        e.setIsPropertyUnitsIncludedRemoved(c.getIsPropertyUnitsIncludedRemoved());
        e.setIsPropertyQuantityUomIdRemoved(c.getIsPropertyQuantityUomIdRemoved());
        e.setIsPropertyAgreementIdRemoved(c.getIsPropertyAgreementIdRemoved());
        e.setIsPropertyAgreementItemSeqIdRemoved(c.getIsPropertyAgreementItemSeqIdRemoved());
        e.setIsPropertyLastPriceRemoved(c.getIsPropertyLastPriceRemoved());
        e.setIsPropertyShippingPriceRemoved(c.getIsPropertyShippingPriceRemoved());
        e.setIsPropertySupplierProductIdRemoved(c.getIsPropertySupplierProductIdRemoved());
        e.setIsPropertySupplierProductNameRemoved(c.getIsPropertySupplierProductNameRemoved());
        e.setIsPropertyCanDropShipRemoved(c.getIsPropertyCanDropShipRemoved());
        e.setIsPropertyCommentsRemoved(c.getIsPropertyCommentsRemoved());
        e.setIsPropertyTaxInPriceRemoved(c.getIsPropertyTaxInPriceRemoved());
        e.setIsPropertyTaxAmountRemoved(c.getIsPropertyTaxAmountRemoved());
        e.setIsPropertyTaxPercentageRemoved(c.getIsPropertyTaxPercentageRemoved());
        e.setIsPropertyLimitQuantityPerCustomerRemoved(c.getIsPropertyLimitQuantityPerCustomerRemoved());
        e.setIsPropertyLimitQuantityPerOrderRemoved(c.getIsPropertyLimitQuantityPerOrderRemoved());
        e.setIsPropertyProductPriceTypeIdRemoved(c.getIsPropertyProductPriceTypeIdRemoved());
        e.setIsPropertyShipmentMethodTypeIdRemoved(c.getIsPropertyShipmentMethodTypeIdRemoved());
        ((AbstractSupplierProductEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected SupplierProductEvent.SupplierProductStateCreated newSupplierProductStateCreated(Long version, String commandId, String requesterId) {
        SupplierProductEventId stateEventId = new SupplierProductEventId(this.state.getSupplierProductAssocId(), version);
        SupplierProductEvent.SupplierProductStateCreated e = newSupplierProductStateCreated(stateEventId);
        ((AbstractSupplierProductEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected SupplierProductEvent.SupplierProductStateMergePatched newSupplierProductStateMergePatched(Long version, String commandId, String requesterId) {
        SupplierProductEventId stateEventId = new SupplierProductEventId(this.state.getSupplierProductAssocId(), version);
        SupplierProductEvent.SupplierProductStateMergePatched e = newSupplierProductStateMergePatched(stateEventId);
        ((AbstractSupplierProductEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected SupplierProductEvent.SupplierProductStateCreated newSupplierProductStateCreated(SupplierProductEventId stateEventId) {
        return new AbstractSupplierProductEvent.SimpleSupplierProductStateCreated(stateEventId);
    }

    protected SupplierProductEvent.SupplierProductStateMergePatched newSupplierProductStateMergePatched(SupplierProductEventId stateEventId) {
        return new AbstractSupplierProductEvent.SimpleSupplierProductStateMergePatched(stateEventId);
    }


    public static class SimpleSupplierProductAggregate extends AbstractSupplierProductAggregate {
        public SimpleSupplierProductAggregate(SupplierProductState state) {
            super(state);
        }

    }

}

