// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.supplierproduct;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractSupplierProductAggregate extends AbstractAggregate implements SupplierProductAggregate {
    private SupplierProductState.MutableSupplierProductState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractSupplierProductAggregate(SupplierProductState state) {
        this.state = (SupplierProductState.MutableSupplierProductState)state;
    }

    public SupplierProductState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(SupplierProductCommand.CreateSupplierProduct c) {
        if (c.getVersion() == null) { c.setVersion(SupplierProductState.VERSION_NULL); }
        SupplierProductEvent e = map(c);
        apply(e);
    }

    public void mergePatch(SupplierProductCommand.MergePatchSupplierProduct c) {
        SupplierProductEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        SupplierProductCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected SupplierProductEvent map(SupplierProductCommand.CreateSupplierProduct c) {
        SupplierProductEventId stateEventId = new SupplierProductEventId(SupplierProductTenantizedId.toSupplierProductTenantizedId(c.getSupplierProductAssocId()), c.getVersion());
        SupplierProductEvent.SupplierProductStateCreated e = newSupplierProductStateCreated(stateEventId);
        e.setAvailableThruDate(c.getAvailableThruDate());
        e.setSupplierPrefOrderId(c.getSupplierPrefOrderId());
        e.setSupplierRatingTypeId(c.getSupplierRatingTypeId());
        e.setStandardLeadTimeDays(c.getStandardLeadTimeDays());
        e.setOrderQtyIncrements(c.getOrderQtyIncrements());
        e.setUnitsIncluded(c.getUnitsIncluded());
        e.setQuantityUomId(c.getQuantityUomId());
        e.setAgreementId(c.getAgreementId());
        e.setAgreementItemSeqId(c.getAgreementItemSeqId());
        e.setLastPrice(c.getLastPrice());
        e.setShippingPrice(c.getShippingPrice());
        e.setSupplierProductId(c.getSupplierProductId());
        e.setSupplierProductName(c.getSupplierProductName());
        e.setCanDropShip(c.getCanDropShip());
        e.setComments(c.getComments());
        e.setTaxInPrice(c.getTaxInPrice());
        e.setTaxAmount(c.getTaxAmount());
        e.setTaxPercentage(c.getTaxPercentage());
        e.setLimitQuantityPerCustomer(c.getLimitQuantityPerCustomer());
        e.setLimitQuantityPerOrder(c.getLimitQuantityPerOrder());
        e.setProductPriceTypeId(c.getProductPriceTypeId());
        e.setShipmentMethodTypeId(c.getShipmentMethodTypeId());
        ((AbstractSupplierProductEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected SupplierProductEvent map(SupplierProductCommand.MergePatchSupplierProduct c) {
        SupplierProductEventId stateEventId = new SupplierProductEventId(SupplierProductTenantizedId.toSupplierProductTenantizedId(c.getSupplierProductAssocId()), c.getVersion());
        SupplierProductEvent.SupplierProductStateMergePatched e = newSupplierProductStateMergePatched(stateEventId);
        e.setAvailableThruDate(c.getAvailableThruDate());
        e.setSupplierPrefOrderId(c.getSupplierPrefOrderId());
        e.setSupplierRatingTypeId(c.getSupplierRatingTypeId());
        e.setStandardLeadTimeDays(c.getStandardLeadTimeDays());
        e.setOrderQtyIncrements(c.getOrderQtyIncrements());
        e.setUnitsIncluded(c.getUnitsIncluded());
        e.setQuantityUomId(c.getQuantityUomId());
        e.setAgreementId(c.getAgreementId());
        e.setAgreementItemSeqId(c.getAgreementItemSeqId());
        e.setLastPrice(c.getLastPrice());
        e.setShippingPrice(c.getShippingPrice());
        e.setSupplierProductId(c.getSupplierProductId());
        e.setSupplierProductName(c.getSupplierProductName());
        e.setCanDropShip(c.getCanDropShip());
        e.setComments(c.getComments());
        e.setTaxInPrice(c.getTaxInPrice());
        e.setTaxAmount(c.getTaxAmount());
        e.setTaxPercentage(c.getTaxPercentage());
        e.setLimitQuantityPerCustomer(c.getLimitQuantityPerCustomer());
        e.setLimitQuantityPerOrder(c.getLimitQuantityPerOrder());
        e.setProductPriceTypeId(c.getProductPriceTypeId());
        e.setShipmentMethodTypeId(c.getShipmentMethodTypeId());
        e.setIsPropertyAvailableThruDateRemoved(c.getIsPropertyAvailableThruDateRemoved());
        e.setIsPropertySupplierPrefOrderIdRemoved(c.getIsPropertySupplierPrefOrderIdRemoved());
        e.setIsPropertySupplierRatingTypeIdRemoved(c.getIsPropertySupplierRatingTypeIdRemoved());
        e.setIsPropertyStandardLeadTimeDaysRemoved(c.getIsPropertyStandardLeadTimeDaysRemoved());
        e.setIsPropertyOrderQtyIncrementsRemoved(c.getIsPropertyOrderQtyIncrementsRemoved());
        e.setIsPropertyUnitsIncludedRemoved(c.getIsPropertyUnitsIncludedRemoved());
        e.setIsPropertyQuantityUomIdRemoved(c.getIsPropertyQuantityUomIdRemoved());
        e.setIsPropertyAgreementIdRemoved(c.getIsPropertyAgreementIdRemoved());
        e.setIsPropertyAgreementItemSeqIdRemoved(c.getIsPropertyAgreementItemSeqIdRemoved());
        e.setIsPropertyLastPriceRemoved(c.getIsPropertyLastPriceRemoved());
        e.setIsPropertyShippingPriceRemoved(c.getIsPropertyShippingPriceRemoved());
        e.setIsPropertySupplierProductIdRemoved(c.getIsPropertySupplierProductIdRemoved());
        e.setIsPropertySupplierProductNameRemoved(c.getIsPropertySupplierProductNameRemoved());
        e.setIsPropertyCanDropShipRemoved(c.getIsPropertyCanDropShipRemoved());
        e.setIsPropertyCommentsRemoved(c.getIsPropertyCommentsRemoved());
        e.setIsPropertyTaxInPriceRemoved(c.getIsPropertyTaxInPriceRemoved());
        e.setIsPropertyTaxAmountRemoved(c.getIsPropertyTaxAmountRemoved());
        e.setIsPropertyTaxPercentageRemoved(c.getIsPropertyTaxPercentageRemoved());
        e.setIsPropertyLimitQuantityPerCustomerRemoved(c.getIsPropertyLimitQuantityPerCustomerRemoved());
        e.setIsPropertyLimitQuantityPerOrderRemoved(c.getIsPropertyLimitQuantityPerOrderRemoved());
        e.setIsPropertyProductPriceTypeIdRemoved(c.getIsPropertyProductPriceTypeIdRemoved());
        e.setIsPropertyShipmentMethodTypeIdRemoved(c.getIsPropertyShipmentMethodTypeIdRemoved());
        ((AbstractSupplierProductEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected SupplierProductEvent.SupplierProductStateCreated newSupplierProductStateCreated(Long version, String commandId, String requesterId) {
        SupplierProductEventId stateEventId = new SupplierProductEventId(this.state.getSupplierProductTenantizedId(), version);
        SupplierProductEvent.SupplierProductStateCreated e = newSupplierProductStateCreated(stateEventId);
        ((AbstractSupplierProductEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected SupplierProductEvent.SupplierProductStateMergePatched newSupplierProductStateMergePatched(Long version, String commandId, String requesterId) {
        SupplierProductEventId stateEventId = new SupplierProductEventId(this.state.getSupplierProductTenantizedId(), version);
        SupplierProductEvent.SupplierProductStateMergePatched e = newSupplierProductStateMergePatched(stateEventId);
        ((AbstractSupplierProductEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected SupplierProductEvent.SupplierProductStateCreated newSupplierProductStateCreated(SupplierProductEventId stateEventId) {
        return new AbstractSupplierProductEvent.SimpleSupplierProductStateCreated(stateEventId);
    }

    protected SupplierProductEvent.SupplierProductStateMergePatched newSupplierProductStateMergePatched(SupplierProductEventId stateEventId) {
        return new AbstractSupplierProductEvent.SimpleSupplierProductStateMergePatched(stateEventId);
    }


    public static class SimpleSupplierProductAggregate extends AbstractSupplierProductAggregate {
        public SimpleSupplierProductAggregate(SupplierProductState state) {
            super(state);
        }

        @Override
        public void updateAvailableThruDate(OffsetDateTime availableThruDate, Long version, String commandId, String requesterId, SupplierProductCommands.UpdateAvailableThruDate c) {
            java.util.function.Supplier<SupplierProductEvent.AvailableThruDateUpdated> eventFactory = () -> newAvailableThruDateUpdated(availableThruDate, version, commandId, requesterId);
            SupplierProductEvent.AvailableThruDateUpdated e;
            try {
                e = verifyUpdateAvailableThruDate(eventFactory, availableThruDate, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void disable(Long version, String commandId, String requesterId, SupplierProductCommands.Disable c) {
            java.util.function.Supplier<SupplierProductEvent.SupplierProductDisabled> eventFactory = () -> newSupplierProductDisabled(version, commandId, requesterId);
            SupplierProductEvent.SupplierProductDisabled e;
            try {
                e = verifyDisable(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected SupplierProductEvent.AvailableThruDateUpdated verifyUpdateAvailableThruDate(java.util.function.Supplier<SupplierProductEvent.AvailableThruDateUpdated> eventFactory, OffsetDateTime availableThruDate, SupplierProductCommands.UpdateAvailableThruDate c) {
            OffsetDateTime AvailableThruDate = availableThruDate;

            SupplierProductEvent.AvailableThruDateUpdated e = (SupplierProductEvent.AvailableThruDateUpdated) ((UpdateAvailableThruDateVerification) UpdateAvailableThruDateLogic::verify).verify(
                    eventFactory, getState(), availableThruDate, VerificationContext.of(c));

//package org.dddml.ffvtraceability.domain.supplierproduct;
//
//public class UpdateAvailableThruDateLogic {
//    public static SupplierProductEvent.AvailableThruDateUpdated verify(java.util.function.Supplier<SupplierProductEvent.AvailableThruDateUpdated> eventFactory, SupplierProductState supplierProductState, OffsetDateTime availableThruDate, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SupplierProductEvent.SupplierProductDisabled verifyDisable(java.util.function.Supplier<SupplierProductEvent.SupplierProductDisabled> eventFactory, SupplierProductCommands.Disable c) {

            SupplierProductEvent.SupplierProductDisabled e = (SupplierProductEvent.SupplierProductDisabled) ((DisableVerification) DisableLogic::verify).verify(
                    eventFactory, getState(), VerificationContext.of(c));

//package org.dddml.ffvtraceability.domain.supplierproduct;
//
//public class DisableLogic {
//    public static SupplierProductEvent.SupplierProductDisabled verify(java.util.function.Supplier<SupplierProductEvent.SupplierProductDisabled> eventFactory, SupplierProductState supplierProductState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        public interface UpdateAvailableThruDateVerification {
            SupplierProductEvent.AvailableThruDateUpdated verify(java.util.function.Supplier<SupplierProductEvent.AvailableThruDateUpdated> eventFactory, SupplierProductState supplierProductState, OffsetDateTime availableThruDate, VerificationContext verificationContext);
        }

        public interface DisableVerification {
            SupplierProductEvent.SupplierProductDisabled verify(java.util.function.Supplier<SupplierProductEvent.SupplierProductDisabled> eventFactory, SupplierProductState supplierProductState, VerificationContext verificationContext);
        }

        protected AbstractSupplierProductEvent.AvailableThruDateUpdated newAvailableThruDateUpdated(OffsetDateTime availableThruDate, Long version, String commandId, String requesterId) {
            SupplierProductEventId eventId = new SupplierProductEventId(getState().getSupplierProductTenantizedId(), version);
            AbstractSupplierProductEvent.AvailableThruDateUpdated e = new AbstractSupplierProductEvent.AvailableThruDateUpdated();

            e.getDynamicProperties().put("availableThruDate", availableThruDate);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

            e.setSupplierProductEventId(eventId);
            return e;
        }

        protected AbstractSupplierProductEvent.SupplierProductDisabled newSupplierProductDisabled(Long version, String commandId, String requesterId) {
            SupplierProductEventId eventId = new SupplierProductEventId(getState().getSupplierProductTenantizedId(), version);
            AbstractSupplierProductEvent.SupplierProductDisabled e = new AbstractSupplierProductEvent.SupplierProductDisabled();


            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

            e.setSupplierProductEventId(eventId);
            return e;
        }

    }

}

