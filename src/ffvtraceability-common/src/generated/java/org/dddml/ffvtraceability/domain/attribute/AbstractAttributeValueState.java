// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attribute;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.attribute.AttributeValueEvent.*;

public abstract class AbstractAttributeValueState implements AttributeValueState.SqlAttributeValueState {

    private AttributeValueId attributeValueId = new AttributeValueId();

    public AttributeValueId getAttributeValueId() {
        return this.attributeValueId;
    }

    public void setAttributeValueId(AttributeValueId attributeValueId) {
        this.attributeValueId = attributeValueId;
    }

    private transient AttributeState attributeState;

    public AttributeState getAttributeState() {
        return attributeState;
    }

    public void setAttributeState(AttributeState s) {
        attributeState = s;
    }
    
    private AttributeState protectedAttributeState;

    protected AttributeState getProtectedAttributeState() {
        return protectedAttributeState;
    }

    protected void setProtectedAttributeState(AttributeState protectedAttributeState) {
        this.protectedAttributeState = protectedAttributeState;
    }

    public String getAttributeId() {
        return this.getAttributeValueId().getAttributeId();
    }
        
    public void setAttributeId(String attributeId) {
        this.getAttributeValueId().setAttributeId(attributeId);
    }

    public String getValue() {
        return this.getAttributeValueId().getValue();
    }
        
    public void setValue(String value) {
        this.getAttributeValueId().setValue(value);
    }

    private String attributeValueName;

    public String getAttributeValueName() {
        return this.attributeValueName;
    }

    public void setAttributeValueName(String attributeValueName) {
        this.attributeValueName = attributeValueName;
    }

    private String description;

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    private String isDefault;

    public String getIsDefault() {
        return this.isDefault;
    }

    public void setIsDefault(String isDefault) {
        this.isDefault = isDefault;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractAttributeValueState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getValue().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof AttributeValueState) {
            return Objects.equals(this.getValue(), ((AttributeValueState)obj).getValue());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof AttributeValueStateCreated) {
            when((AttributeValueStateCreated) e);
        } else if (e instanceof AttributeValueStateMergePatched) {
            when((AttributeValueStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(AttributeValueStateCreated e) {
        throwOnWrongEvent(e);

        this.setAttributeValueName(e.getAttributeValueName());
        this.setDescription(e.getDescription());
        this.setIsDefault(e.getIsDefault());
        this.setActive(e.getActive());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(AttributeValueState s) {
        if (s == this) {
            return;
        }
        this.setAttributeValueName(s.getAttributeValueName());
        this.setDescription(s.getDescription());
        this.setIsDefault(s.getIsDefault());
        this.setActive(s.getActive());
    }

    public void when(AttributeValueStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getAttributeValueName() == null) {
            if (e.getIsPropertyAttributeValueNameRemoved() != null && e.getIsPropertyAttributeValueNameRemoved()) {
                this.setAttributeValueName(null);
            }
        } else {
            this.setAttributeValueName(e.getAttributeValueName());
        }
        if (e.getDescription() == null) {
            if (e.getIsPropertyDescriptionRemoved() != null && e.getIsPropertyDescriptionRemoved()) {
                this.setDescription(null);
            }
        } else {
            this.setDescription(e.getDescription());
        }
        if (e.getIsDefault() == null) {
            if (e.getIsPropertyIsDefaultRemoved() != null && e.getIsPropertyIsDefaultRemoved()) {
                this.setIsDefault(null);
            }
        } else {
            this.setIsDefault(e.getIsDefault());
        }
        if (e.getActive() == null) {
            if (e.getIsPropertyActiveRemoved() != null && e.getIsPropertyActiveRemoved()) {
                this.setActive(null);
            }
        } else {
            this.setActive(e.getActive());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(AttributeValueEvent event) {
        String stateEntityIdAttributeId = this.getAttributeValueId().getAttributeId();
        String eventEntityIdAttributeId = ((AttributeValueEvent.SqlAttributeValueEvent)event).getAttributeValueEventId().getAttributeId();
        if (!stateEntityIdAttributeId.equals(eventEntityIdAttributeId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id AttributeId %1$s in state but entity id AttributeId %2$s in event", stateEntityIdAttributeId, eventEntityIdAttributeId);
        }

        String stateEntityIdValue = this.getAttributeValueId().getValue();
        String eventEntityIdValue = ((AttributeValueEvent.SqlAttributeValueEvent)event).getAttributeValueEventId().getValue();
        if (!stateEntityIdValue.equals(eventEntityIdValue)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id Value %1$s in state but entity id Value %2$s in event", stateEntityIdValue, eventEntityIdValue);
        }


        if (getForReapplying()) { return; }
        AttributeValueStateEvent stateEvent = event instanceof AttributeValueStateEvent ? (AttributeValueStateEvent)event : null;
        if (stateEvent == null) { return; }

        Long stateVersion = this.getVersion();
        Long stateEventStateVersion = stateEvent.getVersion();
        //if (stateEventStateVersion == null) {
        stateEventStateVersion = stateVersion == null ? AttributeValueState.VERSION_NULL : stateVersion;
        stateEvent.setVersion(stateEventStateVersion);
        //}
        //if (!(stateVersion == null && stateEventStateVersion.equals(AttributeValueState.VERSION_NULL)) && !stateEventStateVersion.equals(stateVersion))
        //{
        //    throw DomainError.named("concurrencyConflict", "Conflict between stateVersion (%1$s) and stateEventStateVersion (%2$s)", stateVersion, stateEventStateVersion);
        //}

    }


    public static class SimpleAttributeValueState extends AbstractAttributeValueState {

        public SimpleAttributeValueState() {
        }

        public static SimpleAttributeValueState newForReapplying() {
            SimpleAttributeValueState s = new SimpleAttributeValueState();
            s.initializeForReapplying();
            return s;
        }

    }



}

