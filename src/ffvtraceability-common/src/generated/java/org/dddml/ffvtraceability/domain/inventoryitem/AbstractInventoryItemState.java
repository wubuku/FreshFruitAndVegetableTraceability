// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.inventoryitem;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.inventoryitem.InventoryItemEvent.*;

public abstract class AbstractInventoryItemState implements InventoryItemState.SqlInventoryItemState, Saveable {

    private String inventoryItemId;

    public String getInventoryItemId() {
        return this.inventoryItemId;
    }

    public void setInventoryItemId(String inventoryItemId) {
        this.inventoryItemId = inventoryItemId;
    }

    private String inventoryItemTypeId;

    public String getInventoryItemTypeId() {
        return this.inventoryItemTypeId;
    }

    public void setInventoryItemTypeId(String inventoryItemTypeId) {
        this.inventoryItemTypeId = inventoryItemTypeId;
    }

    private String productId;

    public String getProductId() {
        return this.productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    private String partyId;

    public String getPartyId() {
        return this.partyId;
    }

    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }

    private String ownerPartyId;

    public String getOwnerPartyId() {
        return this.ownerPartyId;
    }

    public void setOwnerPartyId(String ownerPartyId) {
        this.ownerPartyId = ownerPartyId;
    }

    private String statusId;

    public String getStatusId() {
        return this.statusId;
    }

    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }

    private OffsetDateTime datetimeReceived;

    public OffsetDateTime getDatetimeReceived() {
        return this.datetimeReceived;
    }

    public void setDatetimeReceived(OffsetDateTime datetimeReceived) {
        this.datetimeReceived = datetimeReceived;
    }

    private OffsetDateTime datetimeManufactured;

    public OffsetDateTime getDatetimeManufactured() {
        return this.datetimeManufactured;
    }

    public void setDatetimeManufactured(OffsetDateTime datetimeManufactured) {
        this.datetimeManufactured = datetimeManufactured;
    }

    private OffsetDateTime expireDate;

    public OffsetDateTime getExpireDate() {
        return this.expireDate;
    }

    public void setExpireDate(OffsetDateTime expireDate) {
        this.expireDate = expireDate;
    }

    private String facilityId;

    public String getFacilityId() {
        return this.facilityId;
    }

    public void setFacilityId(String facilityId) {
        this.facilityId = facilityId;
    }

    private String containerId;

    public String getContainerId() {
        return this.containerId;
    }

    public void setContainerId(String containerId) {
        this.containerId = containerId;
    }

    private String lotId;

    public String getLotId() {
        return this.lotId;
    }

    public void setLotId(String lotId) {
        this.lotId = lotId;
    }

    private String uomId;

    public String getUomId() {
        return this.uomId;
    }

    public void setUomId(String uomId) {
        this.uomId = uomId;
    }

    private String binNumber;

    public String getBinNumber() {
        return this.binNumber;
    }

    public void setBinNumber(String binNumber) {
        this.binNumber = binNumber;
    }

    private String locationSeqId;

    public String getLocationSeqId() {
        return this.locationSeqId;
    }

    public void setLocationSeqId(String locationSeqId) {
        this.locationSeqId = locationSeqId;
    }

    private String comments;

    public String getComments() {
        return this.comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    private java.math.BigDecimal quantityOnHandTotal;

    public java.math.BigDecimal getQuantityOnHandTotal() {
        return this.quantityOnHandTotal;
    }

    public void setQuantityOnHandTotal(java.math.BigDecimal quantityOnHandTotal) {
        this.quantityOnHandTotal = quantityOnHandTotal;
    }

    private java.math.BigDecimal availableToPromiseTotal;

    public java.math.BigDecimal getAvailableToPromiseTotal() {
        return this.availableToPromiseTotal;
    }

    public void setAvailableToPromiseTotal(java.math.BigDecimal availableToPromiseTotal) {
        this.availableToPromiseTotal = availableToPromiseTotal;
    }

    private java.math.BigDecimal accountingQuantityTotal;

    public java.math.BigDecimal getAccountingQuantityTotal() {
        return this.accountingQuantityTotal;
    }

    public void setAccountingQuantityTotal(java.math.BigDecimal accountingQuantityTotal) {
        this.accountingQuantityTotal = accountingQuantityTotal;
    }

    private String serialNumber;

    public String getSerialNumber() {
        return this.serialNumber;
    }

    public void setSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
    }

    private String softIdentifier;

    public String getSoftIdentifier() {
        return this.softIdentifier;
    }

    public void setSoftIdentifier(String softIdentifier) {
        this.softIdentifier = softIdentifier;
    }

    private String activationNumber;

    public String getActivationNumber() {
        return this.activationNumber;
    }

    public void setActivationNumber(String activationNumber) {
        this.activationNumber = activationNumber;
    }

    private OffsetDateTime activationValidThru;

    public OffsetDateTime getActivationValidThru() {
        return this.activationValidThru;
    }

    public void setActivationValidThru(OffsetDateTime activationValidThru) {
        this.activationValidThru = activationValidThru;
    }

    private java.math.BigDecimal unitCost;

    public java.math.BigDecimal getUnitCost() {
        return this.unitCost;
    }

    public void setUnitCost(java.math.BigDecimal unitCost) {
        this.unitCost = unitCost;
    }

    private String currencyUomId;

    public String getCurrencyUomId() {
        return this.currencyUomId;
    }

    public void setCurrencyUomId(String currencyUomId) {
        this.currencyUomId = currencyUomId;
    }

    private String fixedAssetId;

    public String getFixedAssetId() {
        return this.fixedAssetId;
    }

    public void setFixedAssetId(String fixedAssetId) {
        this.fixedAssetId = fixedAssetId;
    }

    private String inventoryItemAttributeHash;

    public String getInventoryItemAttributeHash() {
        return this.inventoryItemAttributeHash;
    }

    public void setInventoryItemAttributeHash(String inventoryItemAttributeHash) {
        this.inventoryItemAttributeHash = inventoryItemAttributeHash;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Set<InventoryItemDetailState> protectedDetails = new HashSet<>();

    protected Set<InventoryItemDetailState> getProtectedDetails() {
        return this.protectedDetails;
    }

    protected void setProtectedDetails(Set<InventoryItemDetailState> protectedDetails) {
        this.protectedDetails = protectedDetails;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, InventoryItemDetailState> details;

    public EntityStateCollection.MutableEntityStateCollection<String, InventoryItemDetailState> getDetails() {
        return this.details;
    }

    public void setDetails(EntityStateCollection.MutableEntityStateCollection<String, InventoryItemDetailState> details) {
        this.details = details;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractInventoryItemState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setInventoryItemId(((InventoryItemEvent.SqlInventoryItemEvent) events.get(0)).getInventoryItemEventId().getInventoryItemId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? InventoryItemState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractInventoryItemState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        details = new SimpleInventoryItemDetailStateCollection();
    }

    @Override
    public int hashCode() {
        return getInventoryItemId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof InventoryItemState) {
            return Objects.equals(this.getInventoryItemId(), ((InventoryItemState)obj).getInventoryItemId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof InventoryItemStateCreated) {
            when((InventoryItemStateCreated) e);
        } else if (e instanceof InventoryItemStateMergePatched) {
            when((InventoryItemStateMergePatched) e);
        } else if (e instanceof AbstractInventoryItemEvent.RecordInventoryEntryEvent) {
            when((AbstractInventoryItemEvent.RecordInventoryEntryEvent)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(InventoryItemStateCreated e) {
        throwOnWrongEvent(e);

        this.setInventoryItemTypeId(e.getInventoryItemTypeId());
        this.setProductId(e.getProductId());
        this.setPartyId(e.getPartyId());
        this.setOwnerPartyId(e.getOwnerPartyId());
        this.setStatusId(e.getStatusId());
        this.setDatetimeReceived(e.getDatetimeReceived());
        this.setDatetimeManufactured(e.getDatetimeManufactured());
        this.setExpireDate(e.getExpireDate());
        this.setFacilityId(e.getFacilityId());
        this.setContainerId(e.getContainerId());
        this.setLotId(e.getLotId());
        this.setUomId(e.getUomId());
        this.setBinNumber(e.getBinNumber());
        this.setLocationSeqId(e.getLocationSeqId());
        this.setComments(e.getComments());
        this.setQuantityOnHandTotal(e.getQuantityOnHandTotal());
        this.setAvailableToPromiseTotal(e.getAvailableToPromiseTotal());
        this.setAccountingQuantityTotal(e.getAccountingQuantityTotal());
        this.setSerialNumber(e.getSerialNumber());
        this.setSoftIdentifier(e.getSoftIdentifier());
        this.setActivationNumber(e.getActivationNumber());
        this.setActivationValidThru(e.getActivationValidThru());
        this.setUnitCost(e.getUnitCost());
        this.setCurrencyUomId(e.getCurrencyUomId());
        this.setFixedAssetId(e.getFixedAssetId());
        this.setInventoryItemAttributeHash(e.getInventoryItemAttributeHash());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(InventoryItemState s) {
        if (s == this) {
            return;
        }
        this.setInventoryItemTypeId(s.getInventoryItemTypeId());
        this.setProductId(s.getProductId());
        this.setPartyId(s.getPartyId());
        this.setOwnerPartyId(s.getOwnerPartyId());
        this.setStatusId(s.getStatusId());
        this.setDatetimeReceived(s.getDatetimeReceived());
        this.setDatetimeManufactured(s.getDatetimeManufactured());
        this.setExpireDate(s.getExpireDate());
        this.setFacilityId(s.getFacilityId());
        this.setContainerId(s.getContainerId());
        this.setLotId(s.getLotId());
        this.setUomId(s.getUomId());
        this.setBinNumber(s.getBinNumber());
        this.setLocationSeqId(s.getLocationSeqId());
        this.setComments(s.getComments());
        this.setQuantityOnHandTotal(s.getQuantityOnHandTotal());
        this.setAvailableToPromiseTotal(s.getAvailableToPromiseTotal());
        this.setAccountingQuantityTotal(s.getAccountingQuantityTotal());
        this.setSerialNumber(s.getSerialNumber());
        this.setSoftIdentifier(s.getSoftIdentifier());
        this.setActivationNumber(s.getActivationNumber());
        this.setActivationValidThru(s.getActivationValidThru());
        this.setUnitCost(s.getUnitCost());
        this.setCurrencyUomId(s.getCurrencyUomId());
        this.setFixedAssetId(s.getFixedAssetId());
        this.setInventoryItemAttributeHash(s.getInventoryItemAttributeHash());

        if (s.getDetails() != null) {
            Iterable<InventoryItemDetailState> iterable;
            if (s.getDetails().isLazy()) {
                iterable = s.getDetails().getLoadedStates();
            } else {
                iterable = s.getDetails();
            }
            if (iterable != null) {
                for (InventoryItemDetailState ss : iterable) {
                    InventoryItemDetailState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, InventoryItemDetailState>)this.getDetails()).getOrAddDefault(ss.getInventoryItemDetailSeqId());
                    ((AbstractInventoryItemDetailState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getDetails() != null) {
            if (s.getDetails() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getDetails()).getRemovedStates() != null) {
                    for (InventoryItemDetailState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, InventoryItemDetailState>)s.getDetails()).getRemovedStates()) {
                        InventoryItemDetailState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, InventoryItemDetailState>)this.getDetails()).getOrAddDefault(ss.getInventoryItemDetailSeqId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getDetails()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getDetails().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getDetails().stream().map(i -> i.getInventoryItemDetailSeqId()).collect(java.util.stream.Collectors.toList()));
                    s.getDetails().forEach(i -> removedStateIds.remove(i.getInventoryItemDetailSeqId()));
                    for (String i : removedStateIds) {
                        InventoryItemDetailState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, InventoryItemDetailState>)this.getDetails()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getDetails()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(InventoryItemStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getInventoryItemTypeId() == null) {
            if (e.getIsPropertyInventoryItemTypeIdRemoved() != null && e.getIsPropertyInventoryItemTypeIdRemoved()) {
                this.setInventoryItemTypeId(null);
            }
        } else {
            this.setInventoryItemTypeId(e.getInventoryItemTypeId());
        }
        if (e.getProductId() == null) {
            if (e.getIsPropertyProductIdRemoved() != null && e.getIsPropertyProductIdRemoved()) {
                this.setProductId(null);
            }
        } else {
            this.setProductId(e.getProductId());
        }
        if (e.getPartyId() == null) {
            if (e.getIsPropertyPartyIdRemoved() != null && e.getIsPropertyPartyIdRemoved()) {
                this.setPartyId(null);
            }
        } else {
            this.setPartyId(e.getPartyId());
        }
        if (e.getOwnerPartyId() == null) {
            if (e.getIsPropertyOwnerPartyIdRemoved() != null && e.getIsPropertyOwnerPartyIdRemoved()) {
                this.setOwnerPartyId(null);
            }
        } else {
            this.setOwnerPartyId(e.getOwnerPartyId());
        }
        if (e.getStatusId() == null) {
            if (e.getIsPropertyStatusIdRemoved() != null && e.getIsPropertyStatusIdRemoved()) {
                this.setStatusId(null);
            }
        } else {
            this.setStatusId(e.getStatusId());
        }
        if (e.getDatetimeReceived() == null) {
            if (e.getIsPropertyDatetimeReceivedRemoved() != null && e.getIsPropertyDatetimeReceivedRemoved()) {
                this.setDatetimeReceived(null);
            }
        } else {
            this.setDatetimeReceived(e.getDatetimeReceived());
        }
        if (e.getDatetimeManufactured() == null) {
            if (e.getIsPropertyDatetimeManufacturedRemoved() != null && e.getIsPropertyDatetimeManufacturedRemoved()) {
                this.setDatetimeManufactured(null);
            }
        } else {
            this.setDatetimeManufactured(e.getDatetimeManufactured());
        }
        if (e.getExpireDate() == null) {
            if (e.getIsPropertyExpireDateRemoved() != null && e.getIsPropertyExpireDateRemoved()) {
                this.setExpireDate(null);
            }
        } else {
            this.setExpireDate(e.getExpireDate());
        }
        if (e.getFacilityId() == null) {
            if (e.getIsPropertyFacilityIdRemoved() != null && e.getIsPropertyFacilityIdRemoved()) {
                this.setFacilityId(null);
            }
        } else {
            this.setFacilityId(e.getFacilityId());
        }
        if (e.getContainerId() == null) {
            if (e.getIsPropertyContainerIdRemoved() != null && e.getIsPropertyContainerIdRemoved()) {
                this.setContainerId(null);
            }
        } else {
            this.setContainerId(e.getContainerId());
        }
        if (e.getLotId() == null) {
            if (e.getIsPropertyLotIdRemoved() != null && e.getIsPropertyLotIdRemoved()) {
                this.setLotId(null);
            }
        } else {
            this.setLotId(e.getLotId());
        }
        if (e.getUomId() == null) {
            if (e.getIsPropertyUomIdRemoved() != null && e.getIsPropertyUomIdRemoved()) {
                this.setUomId(null);
            }
        } else {
            this.setUomId(e.getUomId());
        }
        if (e.getBinNumber() == null) {
            if (e.getIsPropertyBinNumberRemoved() != null && e.getIsPropertyBinNumberRemoved()) {
                this.setBinNumber(null);
            }
        } else {
            this.setBinNumber(e.getBinNumber());
        }
        if (e.getLocationSeqId() == null) {
            if (e.getIsPropertyLocationSeqIdRemoved() != null && e.getIsPropertyLocationSeqIdRemoved()) {
                this.setLocationSeqId(null);
            }
        } else {
            this.setLocationSeqId(e.getLocationSeqId());
        }
        if (e.getComments() == null) {
            if (e.getIsPropertyCommentsRemoved() != null && e.getIsPropertyCommentsRemoved()) {
                this.setComments(null);
            }
        } else {
            this.setComments(e.getComments());
        }
        if (e.getQuantityOnHandTotal() == null) {
            if (e.getIsPropertyQuantityOnHandTotalRemoved() != null && e.getIsPropertyQuantityOnHandTotalRemoved()) {
                this.setQuantityOnHandTotal(null);
            }
        } else {
            this.setQuantityOnHandTotal(e.getQuantityOnHandTotal());
        }
        if (e.getAvailableToPromiseTotal() == null) {
            if (e.getIsPropertyAvailableToPromiseTotalRemoved() != null && e.getIsPropertyAvailableToPromiseTotalRemoved()) {
                this.setAvailableToPromiseTotal(null);
            }
        } else {
            this.setAvailableToPromiseTotal(e.getAvailableToPromiseTotal());
        }
        if (e.getAccountingQuantityTotal() == null) {
            if (e.getIsPropertyAccountingQuantityTotalRemoved() != null && e.getIsPropertyAccountingQuantityTotalRemoved()) {
                this.setAccountingQuantityTotal(null);
            }
        } else {
            this.setAccountingQuantityTotal(e.getAccountingQuantityTotal());
        }
        if (e.getSerialNumber() == null) {
            if (e.getIsPropertySerialNumberRemoved() != null && e.getIsPropertySerialNumberRemoved()) {
                this.setSerialNumber(null);
            }
        } else {
            this.setSerialNumber(e.getSerialNumber());
        }
        if (e.getSoftIdentifier() == null) {
            if (e.getIsPropertySoftIdentifierRemoved() != null && e.getIsPropertySoftIdentifierRemoved()) {
                this.setSoftIdentifier(null);
            }
        } else {
            this.setSoftIdentifier(e.getSoftIdentifier());
        }
        if (e.getActivationNumber() == null) {
            if (e.getIsPropertyActivationNumberRemoved() != null && e.getIsPropertyActivationNumberRemoved()) {
                this.setActivationNumber(null);
            }
        } else {
            this.setActivationNumber(e.getActivationNumber());
        }
        if (e.getActivationValidThru() == null) {
            if (e.getIsPropertyActivationValidThruRemoved() != null && e.getIsPropertyActivationValidThruRemoved()) {
                this.setActivationValidThru(null);
            }
        } else {
            this.setActivationValidThru(e.getActivationValidThru());
        }
        if (e.getUnitCost() == null) {
            if (e.getIsPropertyUnitCostRemoved() != null && e.getIsPropertyUnitCostRemoved()) {
                this.setUnitCost(null);
            }
        } else {
            this.setUnitCost(e.getUnitCost());
        }
        if (e.getCurrencyUomId() == null) {
            if (e.getIsPropertyCurrencyUomIdRemoved() != null && e.getIsPropertyCurrencyUomIdRemoved()) {
                this.setCurrencyUomId(null);
            }
        } else {
            this.setCurrencyUomId(e.getCurrencyUomId());
        }
        if (e.getFixedAssetId() == null) {
            if (e.getIsPropertyFixedAssetIdRemoved() != null && e.getIsPropertyFixedAssetIdRemoved()) {
                this.setFixedAssetId(null);
            }
        } else {
            this.setFixedAssetId(e.getFixedAssetId());
        }
        if (e.getInventoryItemAttributeHash() == null) {
            if (e.getIsPropertyInventoryItemAttributeHashRemoved() != null && e.getIsPropertyInventoryItemAttributeHashRemoved()) {
                this.setInventoryItemAttributeHash(null);
            }
        } else {
            this.setInventoryItemAttributeHash(e.getInventoryItemAttributeHash());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void when(AbstractInventoryItemEvent.RecordInventoryEntryEvent e) {
        //throwOnWrongEvent(e);

        InventoryItemAttributes inventoryItemAttributes = e.getInventoryItemAttributes();
        InventoryItemAttributes InventoryItemAttributes = inventoryItemAttributes;
        InventoryItemDetailAttributes inventoryItemDetailAttributes = e.getInventoryItemDetailAttributes();
        InventoryItemDetailAttributes InventoryItemDetailAttributes = inventoryItemDetailAttributes;
        java.math.BigDecimal quantityOnHandDiff = e.getQuantityOnHandDiff();
        java.math.BigDecimal QuantityOnHandDiff = quantityOnHandDiff;
        java.math.BigDecimal availableToPromiseDiff = e.getAvailableToPromiseDiff();
        java.math.BigDecimal AvailableToPromiseDiff = availableToPromiseDiff;
        java.math.BigDecimal accountingQuantityDiff = e.getAccountingQuantityDiff();
        java.math.BigDecimal AccountingQuantityDiff = accountingQuantityDiff;
        java.math.BigDecimal unitCost = e.getUnitCost();
        java.math.BigDecimal UnitCost = unitCost;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        InventoryItemState updatedInventoryItemState = ApplicationContext.current.get(IRecordInventoryEntryLogic.class).mutate(
                this, inventoryItemAttributes, inventoryItemDetailAttributes, quantityOnHandDiff, availableToPromiseDiff, accountingQuantityDiff, unitCost, MutationContext.of(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}}));


        if (this != updatedInventoryItemState) { merge(updatedInventoryItemState); } //else do nothing
        // NOTE: If the current state object does not have an ID, then the ID needs to be set.
        if (this != updatedInventoryItemState && this.getInventoryItemId() == null) {
            this.setInventoryItemId(updatedInventoryItemState.getInventoryItemId());
        }

    }

    public void save() {
        if (details instanceof Saveable) {
            ((Saveable)details).save();
        }
    }

    protected void throwOnWrongEvent(InventoryItemEvent event) {
        String stateEntityId = this.getInventoryItemId(); // Aggregate Id
        String eventEntityId = ((InventoryItemEvent.SqlInventoryItemEvent)event).getInventoryItemEventId().getInventoryItemId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((InventoryItemEvent.SqlInventoryItemEvent)event).getInventoryItemEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getInventoryItemEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleInventoryItemState extends AbstractInventoryItemState {

        public SimpleInventoryItemState() {
        }

        public SimpleInventoryItemState(List<Event> events) {
            super(events);
        }

        public static SimpleInventoryItemState newForReapplying() {
            SimpleInventoryItemState s = new SimpleInventoryItemState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleInventoryItemDetailStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, InventoryItemDetailState>, Collection<InventoryItemDetailState> {

        @Override
        public InventoryItemDetailState get(String inventoryItemDetailSeqId) {
            return protectedDetails.stream().filter(
                            e -> e.getInventoryItemDetailSeqId().equals(inventoryItemDetailSeqId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<InventoryItemDetailState> getLoadedStates() {
            return protectedDetails;
        }

        @Override
        public InventoryItemDetailState getOrAddDefault(String inventoryItemDetailSeqId) {
            InventoryItemDetailState s = get(inventoryItemDetailSeqId);
            if (s == null) {
                InventoryItemDetailId globalId = new InventoryItemDetailId(getInventoryItemId(), inventoryItemDetailSeqId);
                AbstractInventoryItemDetailState state = new AbstractInventoryItemDetailState.SimpleInventoryItemDetailState();
                state.setInventoryItemDetailId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedDetails.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedDetails.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedDetails.contains(o);
        }

        @Override
        public Iterator<InventoryItemDetailState> iterator() {
            return protectedDetails.iterator();
        }

        @Override
        public java.util.stream.Stream<InventoryItemDetailState> stream() {
            return protectedDetails.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedDetails.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedDetails.toArray(a);
        }

        @Override
        public boolean add(InventoryItemDetailState s) {
            if (s instanceof AbstractInventoryItemDetailState) {
                AbstractInventoryItemDetailState state = (AbstractInventoryItemDetailState) s;
                state.setProtectedInventoryItemState(AbstractInventoryItemState.this);
            }
            return protectedDetails.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractInventoryItemDetailState) {
                AbstractInventoryItemDetailState s = (AbstractInventoryItemDetailState) o;
                s.setProtectedInventoryItemState(null);
            }
            return protectedDetails.remove(o);
        }

        @Override
        public boolean removeState(InventoryItemDetailState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedDetails.containsAll(c);
        }

        @Override
        public boolean addAll(Collection<? extends InventoryItemDetailState> c) {
            return protectedDetails.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedDetails.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedDetails.retainAll(c);
        }

        @Override
        public void clear() {
            protectedDetails.clear();
        }
    }


}

