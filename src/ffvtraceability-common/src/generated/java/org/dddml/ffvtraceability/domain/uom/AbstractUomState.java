// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.uom;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.uom.UomEvent.*;

public abstract class AbstractUomState implements UomState.SqlUomState {

    private String uomId;

    public String getUomId() {
        return this.uomId;
    }

    public void setUomId(String uomId) {
        this.uomId = uomId;
    }

    private String uomTypeId;

    public String getUomTypeId() {
        return this.uomTypeId;
    }

    public void setUomTypeId(String uomTypeId) {
        this.uomTypeId = uomTypeId;
    }

    private String abbreviation;

    public String getAbbreviation() {
        return this.abbreviation;
    }

    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    private Long numericCode;

    public Long getNumericCode() {
        return this.numericCode;
    }

    public void setNumericCode(Long numericCode) {
        this.numericCode = numericCode;
    }

    private String gs1AI;

    public String getGs1AI() {
        return this.gs1AI;
    }

    public void setGs1AI(String gs1AI) {
        this.gs1AI = gs1AI;
    }

    private String description;

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    private String active;

    public String getActive() {
        return this.active;
    }

    public void setActive(String active) {
        this.active = active;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractUomState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setUomId(((UomEvent.SqlUomEvent) events.get(0)).getUomEventId().getUomId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? UomState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractUomState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getUomId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof UomState) {
            return Objects.equals(this.getUomId(), ((UomState)obj).getUomId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof UomStateCreated) {
            when((UomStateCreated) e);
        } else if (e instanceof UomStateMergePatched) {
            when((UomStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(UomStateCreated e) {
        throwOnWrongEvent(e);

        this.setUomTypeId(e.getUomTypeId());
        this.setAbbreviation(e.getAbbreviation());
        this.setNumericCode(e.getNumericCode());
        this.setGs1AI(e.getGs1AI());
        this.setDescription(e.getDescription());
        this.setActive(e.getActive());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(UomState s) {
        if (s == this) {
            return;
        }
        this.setUomTypeId(s.getUomTypeId());
        this.setAbbreviation(s.getAbbreviation());
        this.setNumericCode(s.getNumericCode());
        this.setGs1AI(s.getGs1AI());
        this.setDescription(s.getDescription());
        this.setActive(s.getActive());
    }

    public void when(UomStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getUomTypeId() == null) {
            if (e.getIsPropertyUomTypeIdRemoved() != null && e.getIsPropertyUomTypeIdRemoved()) {
                this.setUomTypeId(null);
            }
        } else {
            this.setUomTypeId(e.getUomTypeId());
        }
        if (e.getAbbreviation() == null) {
            if (e.getIsPropertyAbbreviationRemoved() != null && e.getIsPropertyAbbreviationRemoved()) {
                this.setAbbreviation(null);
            }
        } else {
            this.setAbbreviation(e.getAbbreviation());
        }
        if (e.getNumericCode() == null) {
            if (e.getIsPropertyNumericCodeRemoved() != null && e.getIsPropertyNumericCodeRemoved()) {
                this.setNumericCode(null);
            }
        } else {
            this.setNumericCode(e.getNumericCode());
        }
        if (e.getGs1AI() == null) {
            if (e.getIsPropertyGs1AIRemoved() != null && e.getIsPropertyGs1AIRemoved()) {
                this.setGs1AI(null);
            }
        } else {
            this.setGs1AI(e.getGs1AI());
        }
        if (e.getDescription() == null) {
            if (e.getIsPropertyDescriptionRemoved() != null && e.getIsPropertyDescriptionRemoved()) {
                this.setDescription(null);
            }
        } else {
            this.setDescription(e.getDescription());
        }
        if (e.getActive() == null) {
            if (e.getIsPropertyActiveRemoved() != null && e.getIsPropertyActiveRemoved()) {
                this.setActive(null);
            }
        } else {
            this.setActive(e.getActive());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(UomEvent event) {
        String stateEntityId = this.getUomId(); // Aggregate Id
        String eventEntityId = ((UomEvent.SqlUomEvent)event).getUomEventId().getUomId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((UomEvent.SqlUomEvent)event).getUomEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getUomEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleUomState extends AbstractUomState {

        public SimpleUomState() {
        }

        public SimpleUomState(List<Event> events) {
            super(events);
        }

        public static SimpleUomState newForReapplying() {
            SimpleUomState s = new SimpleUomState();
            s.initializeForReapplying();
            return s;
        }

    }



}

