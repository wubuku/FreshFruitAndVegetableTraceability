// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.supplierproduct;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.supplierproduct.SupplierProductEvent.*;

public abstract class AbstractSupplierProductState implements SupplierProductState.SqlSupplierProductState {

    private SupplierProductTenantizedId supplierProductAssocId;

    public SupplierProductTenantizedId getSupplierProductAssocId() {
        return this.supplierProductAssocId;
    }

    public void setSupplierProductAssocId(SupplierProductTenantizedId supplierProductAssocId) {
        this.supplierProductAssocId = supplierProductAssocId;
    }

    private OffsetDateTime availableThruDate;

    public OffsetDateTime getAvailableThruDate() {
        return this.availableThruDate;
    }

    public void setAvailableThruDate(OffsetDateTime availableThruDate) {
        this.availableThruDate = availableThruDate;
    }

    private String supplierPrefOrderId;

    public String getSupplierPrefOrderId() {
        return this.supplierPrefOrderId;
    }

    public void setSupplierPrefOrderId(String supplierPrefOrderId) {
        this.supplierPrefOrderId = supplierPrefOrderId;
    }

    private String supplierRatingTypeId;

    public String getSupplierRatingTypeId() {
        return this.supplierRatingTypeId;
    }

    public void setSupplierRatingTypeId(String supplierRatingTypeId) {
        this.supplierRatingTypeId = supplierRatingTypeId;
    }

    private java.math.BigDecimal standardLeadTimeDays;

    public java.math.BigDecimal getStandardLeadTimeDays() {
        return this.standardLeadTimeDays;
    }

    public void setStandardLeadTimeDays(java.math.BigDecimal standardLeadTimeDays) {
        this.standardLeadTimeDays = standardLeadTimeDays;
    }

    private java.math.BigDecimal orderQtyIncrements;

    public java.math.BigDecimal getOrderQtyIncrements() {
        return this.orderQtyIncrements;
    }

    public void setOrderQtyIncrements(java.math.BigDecimal orderQtyIncrements) {
        this.orderQtyIncrements = orderQtyIncrements;
    }

    private java.math.BigDecimal unitsIncluded;

    public java.math.BigDecimal getUnitsIncluded() {
        return this.unitsIncluded;
    }

    public void setUnitsIncluded(java.math.BigDecimal unitsIncluded) {
        this.unitsIncluded = unitsIncluded;
    }

    private String quantityUomId;

    public String getQuantityUomId() {
        return this.quantityUomId;
    }

    public void setQuantityUomId(String quantityUomId) {
        this.quantityUomId = quantityUomId;
    }

    private String agreementId;

    public String getAgreementId() {
        return this.agreementId;
    }

    public void setAgreementId(String agreementId) {
        this.agreementId = agreementId;
    }

    private String agreementItemSeqId;

    public String getAgreementItemSeqId() {
        return this.agreementItemSeqId;
    }

    public void setAgreementItemSeqId(String agreementItemSeqId) {
        this.agreementItemSeqId = agreementItemSeqId;
    }

    private java.math.BigDecimal lastPrice;

    public java.math.BigDecimal getLastPrice() {
        return this.lastPrice;
    }

    public void setLastPrice(java.math.BigDecimal lastPrice) {
        this.lastPrice = lastPrice;
    }

    private java.math.BigDecimal shippingPrice;

    public java.math.BigDecimal getShippingPrice() {
        return this.shippingPrice;
    }

    public void setShippingPrice(java.math.BigDecimal shippingPrice) {
        this.shippingPrice = shippingPrice;
    }

    private String supplierProductId;

    public String getSupplierProductId() {
        return this.supplierProductId;
    }

    public void setSupplierProductId(String supplierProductId) {
        this.supplierProductId = supplierProductId;
    }

    private String supplierProductName;

    public String getSupplierProductName() {
        return this.supplierProductName;
    }

    public void setSupplierProductName(String supplierProductName) {
        this.supplierProductName = supplierProductName;
    }

    private String canDropShip;

    public String getCanDropShip() {
        return this.canDropShip;
    }

    public void setCanDropShip(String canDropShip) {
        this.canDropShip = canDropShip;
    }

    private String comments;

    public String getComments() {
        return this.comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    private String taxInPrice;

    public String getTaxInPrice() {
        return this.taxInPrice;
    }

    public void setTaxInPrice(String taxInPrice) {
        this.taxInPrice = taxInPrice;
    }

    private java.math.BigDecimal taxAmount;

    public java.math.BigDecimal getTaxAmount() {
        return this.taxAmount;
    }

    public void setTaxAmount(java.math.BigDecimal taxAmount) {
        this.taxAmount = taxAmount;
    }

    private java.math.BigDecimal taxPercentage;

    public java.math.BigDecimal getTaxPercentage() {
        return this.taxPercentage;
    }

    public void setTaxPercentage(java.math.BigDecimal taxPercentage) {
        this.taxPercentage = taxPercentage;
    }

    private java.math.BigDecimal limitQuantityPerCustomer;

    public java.math.BigDecimal getLimitQuantityPerCustomer() {
        return this.limitQuantityPerCustomer;
    }

    public void setLimitQuantityPerCustomer(java.math.BigDecimal limitQuantityPerCustomer) {
        this.limitQuantityPerCustomer = limitQuantityPerCustomer;
    }

    private java.math.BigDecimal limitQuantityPerOrder;

    public java.math.BigDecimal getLimitQuantityPerOrder() {
        return this.limitQuantityPerOrder;
    }

    public void setLimitQuantityPerOrder(java.math.BigDecimal limitQuantityPerOrder) {
        this.limitQuantityPerOrder = limitQuantityPerOrder;
    }

    private String productPriceTypeId;

    public String getProductPriceTypeId() {
        return this.productPriceTypeId;
    }

    public void setProductPriceTypeId(String productPriceTypeId) {
        this.productPriceTypeId = productPriceTypeId;
    }

    private String shipmentMethodTypeId;

    public String getShipmentMethodTypeId() {
        return this.shipmentMethodTypeId;
    }

    public void setShipmentMethodTypeId(String shipmentMethodTypeId) {
        this.shipmentMethodTypeId = shipmentMethodTypeId;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractSupplierProductState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setSupplierProductAssocId(((SupplierProductEvent.SqlSupplierProductEvent) events.get(0)).getSupplierProductEventId().getSupplierProductAssocId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? SupplierProductState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractSupplierProductState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getSupplierProductAssocId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof SupplierProductState) {
            return Objects.equals(this.getSupplierProductAssocId(), ((SupplierProductState)obj).getSupplierProductAssocId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof SupplierProductStateCreated) {
            when((SupplierProductStateCreated) e);
        } else if (e instanceof SupplierProductStateMergePatched) {
            when((SupplierProductStateMergePatched) e);
        } else if (e instanceof AbstractSupplierProductEvent.AvailableThruDateUpdated) {
            when((AbstractSupplierProductEvent.AvailableThruDateUpdated)e);
        } else if (e instanceof AbstractSupplierProductEvent.SupplierProductDisabled) {
            when((AbstractSupplierProductEvent.SupplierProductDisabled)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(SupplierProductStateCreated e) {
        throwOnWrongEvent(e);

        this.setAvailableThruDate(e.getAvailableThruDate());
        this.setSupplierPrefOrderId(e.getSupplierPrefOrderId());
        this.setSupplierRatingTypeId(e.getSupplierRatingTypeId());
        this.setStandardLeadTimeDays(e.getStandardLeadTimeDays());
        this.setOrderQtyIncrements(e.getOrderQtyIncrements());
        this.setUnitsIncluded(e.getUnitsIncluded());
        this.setQuantityUomId(e.getQuantityUomId());
        this.setAgreementId(e.getAgreementId());
        this.setAgreementItemSeqId(e.getAgreementItemSeqId());
        this.setLastPrice(e.getLastPrice());
        this.setShippingPrice(e.getShippingPrice());
        this.setSupplierProductId(e.getSupplierProductId());
        this.setSupplierProductName(e.getSupplierProductName());
        this.setCanDropShip(e.getCanDropShip());
        this.setComments(e.getComments());
        this.setTaxInPrice(e.getTaxInPrice());
        this.setTaxAmount(e.getTaxAmount());
        this.setTaxPercentage(e.getTaxPercentage());
        this.setLimitQuantityPerCustomer(e.getLimitQuantityPerCustomer());
        this.setLimitQuantityPerOrder(e.getLimitQuantityPerOrder());
        this.setProductPriceTypeId(e.getProductPriceTypeId());
        this.setShipmentMethodTypeId(e.getShipmentMethodTypeId());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(SupplierProductState s) {
        if (s == this) {
            return;
        }
        this.setAvailableThruDate(s.getAvailableThruDate());
        this.setSupplierPrefOrderId(s.getSupplierPrefOrderId());
        this.setSupplierRatingTypeId(s.getSupplierRatingTypeId());
        this.setStandardLeadTimeDays(s.getStandardLeadTimeDays());
        this.setOrderQtyIncrements(s.getOrderQtyIncrements());
        this.setUnitsIncluded(s.getUnitsIncluded());
        this.setQuantityUomId(s.getQuantityUomId());
        this.setAgreementId(s.getAgreementId());
        this.setAgreementItemSeqId(s.getAgreementItemSeqId());
        this.setLastPrice(s.getLastPrice());
        this.setShippingPrice(s.getShippingPrice());
        this.setSupplierProductId(s.getSupplierProductId());
        this.setSupplierProductName(s.getSupplierProductName());
        this.setCanDropShip(s.getCanDropShip());
        this.setComments(s.getComments());
        this.setTaxInPrice(s.getTaxInPrice());
        this.setTaxAmount(s.getTaxAmount());
        this.setTaxPercentage(s.getTaxPercentage());
        this.setLimitQuantityPerCustomer(s.getLimitQuantityPerCustomer());
        this.setLimitQuantityPerOrder(s.getLimitQuantityPerOrder());
        this.setProductPriceTypeId(s.getProductPriceTypeId());
        this.setShipmentMethodTypeId(s.getShipmentMethodTypeId());
    }

    public void when(SupplierProductStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getAvailableThruDate() == null) {
            if (e.getIsPropertyAvailableThruDateRemoved() != null && e.getIsPropertyAvailableThruDateRemoved()) {
                this.setAvailableThruDate(null);
            }
        } else {
            this.setAvailableThruDate(e.getAvailableThruDate());
        }
        if (e.getSupplierPrefOrderId() == null) {
            if (e.getIsPropertySupplierPrefOrderIdRemoved() != null && e.getIsPropertySupplierPrefOrderIdRemoved()) {
                this.setSupplierPrefOrderId(null);
            }
        } else {
            this.setSupplierPrefOrderId(e.getSupplierPrefOrderId());
        }
        if (e.getSupplierRatingTypeId() == null) {
            if (e.getIsPropertySupplierRatingTypeIdRemoved() != null && e.getIsPropertySupplierRatingTypeIdRemoved()) {
                this.setSupplierRatingTypeId(null);
            }
        } else {
            this.setSupplierRatingTypeId(e.getSupplierRatingTypeId());
        }
        if (e.getStandardLeadTimeDays() == null) {
            if (e.getIsPropertyStandardLeadTimeDaysRemoved() != null && e.getIsPropertyStandardLeadTimeDaysRemoved()) {
                this.setStandardLeadTimeDays(null);
            }
        } else {
            this.setStandardLeadTimeDays(e.getStandardLeadTimeDays());
        }
        if (e.getOrderQtyIncrements() == null) {
            if (e.getIsPropertyOrderQtyIncrementsRemoved() != null && e.getIsPropertyOrderQtyIncrementsRemoved()) {
                this.setOrderQtyIncrements(null);
            }
        } else {
            this.setOrderQtyIncrements(e.getOrderQtyIncrements());
        }
        if (e.getUnitsIncluded() == null) {
            if (e.getIsPropertyUnitsIncludedRemoved() != null && e.getIsPropertyUnitsIncludedRemoved()) {
                this.setUnitsIncluded(null);
            }
        } else {
            this.setUnitsIncluded(e.getUnitsIncluded());
        }
        if (e.getQuantityUomId() == null) {
            if (e.getIsPropertyQuantityUomIdRemoved() != null && e.getIsPropertyQuantityUomIdRemoved()) {
                this.setQuantityUomId(null);
            }
        } else {
            this.setQuantityUomId(e.getQuantityUomId());
        }
        if (e.getAgreementId() == null) {
            if (e.getIsPropertyAgreementIdRemoved() != null && e.getIsPropertyAgreementIdRemoved()) {
                this.setAgreementId(null);
            }
        } else {
            this.setAgreementId(e.getAgreementId());
        }
        if (e.getAgreementItemSeqId() == null) {
            if (e.getIsPropertyAgreementItemSeqIdRemoved() != null && e.getIsPropertyAgreementItemSeqIdRemoved()) {
                this.setAgreementItemSeqId(null);
            }
        } else {
            this.setAgreementItemSeqId(e.getAgreementItemSeqId());
        }
        if (e.getLastPrice() == null) {
            if (e.getIsPropertyLastPriceRemoved() != null && e.getIsPropertyLastPriceRemoved()) {
                this.setLastPrice(null);
            }
        } else {
            this.setLastPrice(e.getLastPrice());
        }
        if (e.getShippingPrice() == null) {
            if (e.getIsPropertyShippingPriceRemoved() != null && e.getIsPropertyShippingPriceRemoved()) {
                this.setShippingPrice(null);
            }
        } else {
            this.setShippingPrice(e.getShippingPrice());
        }
        if (e.getSupplierProductId() == null) {
            if (e.getIsPropertySupplierProductIdRemoved() != null && e.getIsPropertySupplierProductIdRemoved()) {
                this.setSupplierProductId(null);
            }
        } else {
            this.setSupplierProductId(e.getSupplierProductId());
        }
        if (e.getSupplierProductName() == null) {
            if (e.getIsPropertySupplierProductNameRemoved() != null && e.getIsPropertySupplierProductNameRemoved()) {
                this.setSupplierProductName(null);
            }
        } else {
            this.setSupplierProductName(e.getSupplierProductName());
        }
        if (e.getCanDropShip() == null) {
            if (e.getIsPropertyCanDropShipRemoved() != null && e.getIsPropertyCanDropShipRemoved()) {
                this.setCanDropShip(null);
            }
        } else {
            this.setCanDropShip(e.getCanDropShip());
        }
        if (e.getComments() == null) {
            if (e.getIsPropertyCommentsRemoved() != null && e.getIsPropertyCommentsRemoved()) {
                this.setComments(null);
            }
        } else {
            this.setComments(e.getComments());
        }
        if (e.getTaxInPrice() == null) {
            if (e.getIsPropertyTaxInPriceRemoved() != null && e.getIsPropertyTaxInPriceRemoved()) {
                this.setTaxInPrice(null);
            }
        } else {
            this.setTaxInPrice(e.getTaxInPrice());
        }
        if (e.getTaxAmount() == null) {
            if (e.getIsPropertyTaxAmountRemoved() != null && e.getIsPropertyTaxAmountRemoved()) {
                this.setTaxAmount(null);
            }
        } else {
            this.setTaxAmount(e.getTaxAmount());
        }
        if (e.getTaxPercentage() == null) {
            if (e.getIsPropertyTaxPercentageRemoved() != null && e.getIsPropertyTaxPercentageRemoved()) {
                this.setTaxPercentage(null);
            }
        } else {
            this.setTaxPercentage(e.getTaxPercentage());
        }
        if (e.getLimitQuantityPerCustomer() == null) {
            if (e.getIsPropertyLimitQuantityPerCustomerRemoved() != null && e.getIsPropertyLimitQuantityPerCustomerRemoved()) {
                this.setLimitQuantityPerCustomer(null);
            }
        } else {
            this.setLimitQuantityPerCustomer(e.getLimitQuantityPerCustomer());
        }
        if (e.getLimitQuantityPerOrder() == null) {
            if (e.getIsPropertyLimitQuantityPerOrderRemoved() != null && e.getIsPropertyLimitQuantityPerOrderRemoved()) {
                this.setLimitQuantityPerOrder(null);
            }
        } else {
            this.setLimitQuantityPerOrder(e.getLimitQuantityPerOrder());
        }
        if (e.getProductPriceTypeId() == null) {
            if (e.getIsPropertyProductPriceTypeIdRemoved() != null && e.getIsPropertyProductPriceTypeIdRemoved()) {
                this.setProductPriceTypeId(null);
            }
        } else {
            this.setProductPriceTypeId(e.getProductPriceTypeId());
        }
        if (e.getShipmentMethodTypeId() == null) {
            if (e.getIsPropertyShipmentMethodTypeIdRemoved() != null && e.getIsPropertyShipmentMethodTypeIdRemoved()) {
                this.setShipmentMethodTypeId(null);
            }
        } else {
            this.setShipmentMethodTypeId(e.getShipmentMethodTypeId());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void when(AbstractSupplierProductEvent.AvailableThruDateUpdated e) {
        throwOnWrongEvent(e);

        OffsetDateTime availableThruDate = e.getAvailableThruDate();
        OffsetDateTime AvailableThruDate = availableThruDate;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        SupplierProductState updatedSupplierProductState = ((UpdateAvailableThruDateMutation) UpdateAvailableThruDateLogic::mutate).mutate(
                this, availableThruDate, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}}));


//package org.dddml.ffvtraceability.domain.supplierproduct;
//
//public class UpdateAvailableThruDateLogic {
//    public static SupplierProductState mutate(SupplierProductState supplierProductState, OffsetDateTime availableThruDate, MutationContext<SupplierProductState, SupplierProductState.MutableSupplierProductState> mutationContext) {
//    }
//}

        if (this != updatedSupplierProductState) { merge(updatedSupplierProductState); } //else do nothing

    }

    public void when(AbstractSupplierProductEvent.SupplierProductDisabled e) {
        throwOnWrongEvent(e);


        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        SupplierProductState updatedSupplierProductState = ((DisableMutation) DisableLogic::mutate).mutate(
                this, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}}));


//package org.dddml.ffvtraceability.domain.supplierproduct;
//
//public class DisableLogic {
//    public static SupplierProductState mutate(SupplierProductState supplierProductState, MutationContext<SupplierProductState, SupplierProductState.MutableSupplierProductState> mutationContext) {
//    }
//}

        if (this != updatedSupplierProductState) { merge(updatedSupplierProductState); } //else do nothing

    }

    public interface UpdateAvailableThruDateMutation {
        SupplierProductState mutate(SupplierProductState supplierProductState, OffsetDateTime availableThruDate, MutationContext<SupplierProductState, SupplierProductState.MutableSupplierProductState> mutationContext);
    }

    public interface DisableMutation {
        SupplierProductState mutate(SupplierProductState supplierProductState, MutationContext<SupplierProductState, SupplierProductState.MutableSupplierProductState> mutationContext);
    }

    public void save() {
    }

    protected void throwOnWrongEvent(SupplierProductEvent event) {
        SupplierProductTenantizedId stateEntityId = this.getSupplierProductAssocId(); // Aggregate Id
        SupplierProductTenantizedId eventEntityId = ((SupplierProductEvent.SqlSupplierProductEvent)event).getSupplierProductEventId().getSupplierProductAssocId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((SupplierProductEvent.SqlSupplierProductEvent)event).getSupplierProductEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getSupplierProductEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(SupplierProductState.VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion);
        }

    }


    public static class SimpleSupplierProductState extends AbstractSupplierProductState {

        public SimpleSupplierProductState() {
        }

        public SimpleSupplierProductState(List<Event> events) {
            super(events);
        }

        public static SimpleSupplierProductState newForReapplying() {
            SimpleSupplierProductState s = new SimpleSupplierProductState();
            s.initializeForReapplying();
            return s;
        }

    }



}

