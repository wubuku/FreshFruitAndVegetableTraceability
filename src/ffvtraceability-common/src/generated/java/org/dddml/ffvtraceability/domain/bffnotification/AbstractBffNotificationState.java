// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.bffnotification;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.bffnotification.BffNotificationEvent.*;

public abstract class AbstractBffNotificationState implements BffNotificationState.SqlBffNotificationState {

    private String bffNotificationId;

    public String getBffNotificationId() {
        return this.bffNotificationId;
    }

    public void setBffNotificationId(String bffNotificationId) {
        this.bffNotificationId = bffNotificationId;
    }

    private String notificationTypeId;

    public String getNotificationTypeId() {
        return this.notificationTypeId;
    }

    public void setNotificationTypeId(String notificationTypeId) {
        this.notificationTypeId = notificationTypeId;
    }

    private String referenceDocumentTypeId;

    public String getReferenceDocumentTypeId() {
        return this.referenceDocumentTypeId;
    }

    public void setReferenceDocumentTypeId(String referenceDocumentTypeId) {
        this.referenceDocumentTypeId = referenceDocumentTypeId;
    }

    private String referenceDocumentId;

    public String getReferenceDocumentId() {
        return this.referenceDocumentId;
    }

    public void setReferenceDocumentId(String referenceDocumentId) {
        this.referenceDocumentId = referenceDocumentId;
    }

    private String referenceDocumentNumber;

    public String getReferenceDocumentNumber() {
        return this.referenceDocumentNumber;
    }

    public void setReferenceDocumentNumber(String referenceDocumentNumber) {
        this.referenceDocumentNumber = referenceDocumentNumber;
    }

    private String notificationContent;

    public String getNotificationContent() {
        return this.notificationContent;
    }

    public void setNotificationContent(String notificationContent) {
        this.notificationContent = notificationContent;
    }

    private String statusId;

    public String getStatusId() {
        return this.statusId;
    }

    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }

    private Long priority;

    public Long getPriority() {
        return this.priority;
    }

    public void setPriority(Long priority) {
        this.priority = priority;
    }

    private String recipientId;

    public String getRecipientId() {
        return this.recipientId;
    }

    public void setRecipientId(String recipientId) {
        this.recipientId = recipientId;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean __Deleted__;

    public Boolean get__Deleted__() {
        return this.__Deleted__;
    }

    public void set__Deleted__(Boolean __Deleted__) {
        this.__Deleted__ = __Deleted__;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractBffNotificationState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setBffNotificationId(((BffNotificationEvent.SqlBffNotificationEvent) events.get(0)).getBffNotificationEventId().getBffNotificationId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? BffNotificationState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractBffNotificationState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getBffNotificationId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof BffNotificationState) {
            return Objects.equals(this.getBffNotificationId(), ((BffNotificationState)obj).getBffNotificationId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof BffNotificationStateCreated) {
            when((BffNotificationStateCreated) e);
        } else if (e instanceof BffNotificationStateMergePatched) {
            when((BffNotificationStateMergePatched) e);
        } else if (e instanceof BffNotificationStateDeleted) {
            when((BffNotificationStateDeleted) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(BffNotificationStateCreated e) {
        throwOnWrongEvent(e);

        this.setNotificationTypeId(e.getNotificationTypeId());
        this.setReferenceDocumentTypeId(e.getReferenceDocumentTypeId());
        this.setReferenceDocumentId(e.getReferenceDocumentId());
        this.setReferenceDocumentNumber(e.getReferenceDocumentNumber());
        this.setNotificationContent(e.getNotificationContent());
        this.setStatusId(e.getStatusId());
        this.setPriority(e.getPriority());
        this.setRecipientId(e.getRecipientId());

        this.set__Deleted__(false);

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(BffNotificationState s) {
        if (s == this) {
            return;
        }
        this.setNotificationTypeId(s.getNotificationTypeId());
        this.setReferenceDocumentTypeId(s.getReferenceDocumentTypeId());
        this.setReferenceDocumentId(s.getReferenceDocumentId());
        this.setReferenceDocumentNumber(s.getReferenceDocumentNumber());
        this.setNotificationContent(s.getNotificationContent());
        this.setStatusId(s.getStatusId());
        this.setPriority(s.getPriority());
        this.setRecipientId(s.getRecipientId());
    }

    public void when(BffNotificationStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getNotificationTypeId() == null) {
            if (e.getIsPropertyNotificationTypeIdRemoved() != null && e.getIsPropertyNotificationTypeIdRemoved()) {
                this.setNotificationTypeId(null);
            }
        } else {
            this.setNotificationTypeId(e.getNotificationTypeId());
        }
        if (e.getReferenceDocumentTypeId() == null) {
            if (e.getIsPropertyReferenceDocumentTypeIdRemoved() != null && e.getIsPropertyReferenceDocumentTypeIdRemoved()) {
                this.setReferenceDocumentTypeId(null);
            }
        } else {
            this.setReferenceDocumentTypeId(e.getReferenceDocumentTypeId());
        }
        if (e.getReferenceDocumentId() == null) {
            if (e.getIsPropertyReferenceDocumentIdRemoved() != null && e.getIsPropertyReferenceDocumentIdRemoved()) {
                this.setReferenceDocumentId(null);
            }
        } else {
            this.setReferenceDocumentId(e.getReferenceDocumentId());
        }
        if (e.getReferenceDocumentNumber() == null) {
            if (e.getIsPropertyReferenceDocumentNumberRemoved() != null && e.getIsPropertyReferenceDocumentNumberRemoved()) {
                this.setReferenceDocumentNumber(null);
            }
        } else {
            this.setReferenceDocumentNumber(e.getReferenceDocumentNumber());
        }
        if (e.getNotificationContent() == null) {
            if (e.getIsPropertyNotificationContentRemoved() != null && e.getIsPropertyNotificationContentRemoved()) {
                this.setNotificationContent(null);
            }
        } else {
            this.setNotificationContent(e.getNotificationContent());
        }
        if (e.getStatusId() == null) {
            if (e.getIsPropertyStatusIdRemoved() != null && e.getIsPropertyStatusIdRemoved()) {
                this.setStatusId(null);
            }
        } else {
            this.setStatusId(e.getStatusId());
        }
        if (e.getPriority() == null) {
            if (e.getIsPropertyPriorityRemoved() != null && e.getIsPropertyPriorityRemoved()) {
                this.setPriority(null);
            }
        } else {
            this.setPriority(e.getPriority());
        }
        if (e.getRecipientId() == null) {
            if (e.getIsPropertyRecipientIdRemoved() != null && e.getIsPropertyRecipientIdRemoved()) {
                this.setRecipientId(null);
            }
        } else {
            this.setRecipientId(e.getRecipientId());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void when(BffNotificationStateDeleted e) {
        throwOnWrongEvent(e);

        this.set__Deleted__(true);
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(BffNotificationEvent event) {
        String stateEntityId = this.getBffNotificationId(); // Aggregate Id
        String eventEntityId = ((BffNotificationEvent.SqlBffNotificationEvent)event).getBffNotificationEventId().getBffNotificationId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((BffNotificationEvent.SqlBffNotificationEvent)event).getBffNotificationEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getBffNotificationEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleBffNotificationState extends AbstractBffNotificationState {

        public SimpleBffNotificationState() {
        }

        public SimpleBffNotificationState(List<Event> events) {
            super(events);
        }

        public static SimpleBffNotificationState newForReapplying() {
            SimpleBffNotificationState s = new SimpleBffNotificationState();
            s.initializeForReapplying();
            return s;
        }

    }



}

