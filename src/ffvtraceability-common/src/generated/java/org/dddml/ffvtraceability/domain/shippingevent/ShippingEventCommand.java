// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shippingevent;

import java.util.*;
import org.dddml.ffvtraceability.domain.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface ShippingEventCommand extends Command {

    Long getEventId();

    void setEventId(Long eventId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(ShippingEventState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((ShippingEventCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (state.getDeleted() != null && state.getDeleted()) {
            throw DomainError.named("zombie", "Can't do anything to deleted aggregate.");
        }
        if (isCreationCommand((ShippingEventCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(ShippingEventCommand c) {
        if ((c instanceof ShippingEventCommand.CreateShippingEvent) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(ShippingEventState.VERSION_NULL)))
            return true;
        if ((c instanceof ShippingEventCommand.MergePatchShippingEvent))
            return false;
        if ((c instanceof ShippingEventCommand.DeleteShippingEvent))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(ShippingEventState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchShippingEvent extends ShippingEventCommand
    {

        KdeTraceabilityLotCode getTraceabilityLotCode();

        void setTraceabilityLotCode(KdeTraceabilityLotCode traceabilityLotCode);

        KdeQuantityAndUom getQuantityAndUom();

        void setQuantityAndUom(KdeQuantityAndUom quantityAndUom);

        KdeProductDescription getProductDescription();

        void setProductDescription(KdeProductDescription productDescription);

        KdeLocationDescription getShipToLocation();

        void setShipToLocation(KdeLocationDescription shipToLocation);

        KdeLocationDescription getShipFromLocation();

        void setShipFromLocation(KdeLocationDescription shipFromLocation);

        String getShipDate();

        void setShipDate(String shipDate);

        KdeTlcSourceOrTlcSourceReference getTlcSourceOrTlcSourceReference();

        void setTlcSourceOrTlcSourceReference(KdeTlcSourceOrTlcSourceReference tlcSourceOrTlcSourceReference);

        KdeReferenceDocument getReferenceDocument();

        void setReferenceDocument(KdeReferenceDocument referenceDocument);

    }

    interface CreateShippingEvent extends CreateOrMergePatchShippingEvent
    {
    }

    interface MergePatchShippingEvent extends CreateOrMergePatchShippingEvent
    {
        Boolean getIsPropertyTraceabilityLotCodeRemoved();

        void setIsPropertyTraceabilityLotCodeRemoved(Boolean removed);

        Boolean getIsPropertyQuantityAndUomRemoved();

        void setIsPropertyQuantityAndUomRemoved(Boolean removed);

        Boolean getIsPropertyProductDescriptionRemoved();

        void setIsPropertyProductDescriptionRemoved(Boolean removed);

        Boolean getIsPropertyShipToLocationRemoved();

        void setIsPropertyShipToLocationRemoved(Boolean removed);

        Boolean getIsPropertyShipFromLocationRemoved();

        void setIsPropertyShipFromLocationRemoved(Boolean removed);

        Boolean getIsPropertyShipDateRemoved();

        void setIsPropertyShipDateRemoved(Boolean removed);

        Boolean getIsPropertyTlcSourceOrTlcSourceReferenceRemoved();

        void setIsPropertyTlcSourceOrTlcSourceReferenceRemoved(Boolean removed);

        Boolean getIsPropertyReferenceDocumentRemoved();

        void setIsPropertyReferenceDocumentRemoved(Boolean removed);


    }

    interface DeleteShippingEvent extends ShippingEventCommand
    {
    }

}

