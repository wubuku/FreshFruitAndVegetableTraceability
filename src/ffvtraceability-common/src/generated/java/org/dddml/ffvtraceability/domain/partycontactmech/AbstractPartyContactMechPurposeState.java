// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.partycontactmech.PartyContactMechPurposeEvent.*;

public abstract class AbstractPartyContactMechPurposeState implements PartyContactMechPurposeState.SqlPartyContactMechPurposeState {

    private PartyContactMechPurposeId partyContactMechPurposeId = new PartyContactMechPurposeId();

    public PartyContactMechPurposeId getPartyContactMechPurposeId() {
        return this.partyContactMechPurposeId;
    }

    public void setPartyContactMechPurposeId(PartyContactMechPurposeId partyContactMechPurposeId) {
        this.partyContactMechPurposeId = partyContactMechPurposeId;
    }

    private transient PartyContactMechState partyContactMechState;

    public PartyContactMechState getPartyContactMechState() {
        return partyContactMechState;
    }

    public void setPartyContactMechState(PartyContactMechState s) {
        partyContactMechState = s;
    }
    
    private PartyContactMechState protectedPartyContactMechState;

    protected PartyContactMechState getProtectedPartyContactMechState() {
        return protectedPartyContactMechState;
    }

    protected void setProtectedPartyContactMechState(PartyContactMechState protectedPartyContactMechState) {
        this.protectedPartyContactMechState = protectedPartyContactMechState;
    }

    public PartyContactMechId getPartyContactMechId() {
        return this.getPartyContactMechPurposeId().getPartyContactMechId();
    }
        
    public void setPartyContactMechId(PartyContactMechId partyContactMechId) {
        this.getPartyContactMechPurposeId().setPartyContactMechId(partyContactMechId);
    }

    public String getContactMechPurposeTypeId() {
        return this.getPartyContactMechPurposeId().getContactMechPurposeTypeId();
    }
        
    public void setContactMechPurposeTypeId(String contactMechPurposeTypeId) {
        this.getPartyContactMechPurposeId().setContactMechPurposeTypeId(contactMechPurposeTypeId);
    }

    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate() {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate) {
        this.thruDate = thruDate;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractPartyContactMechPurposeState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getContactMechPurposeTypeId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof PartyContactMechPurposeState) {
            return Objects.equals(this.getContactMechPurposeTypeId(), ((PartyContactMechPurposeState)obj).getContactMechPurposeTypeId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof PartyContactMechPurposeStateCreated) {
            when((PartyContactMechPurposeStateCreated) e);
        } else if (e instanceof PartyContactMechPurposeStateMergePatched) {
            when((PartyContactMechPurposeStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(PartyContactMechPurposeStateCreated e) {
        throwOnWrongEvent(e);

        this.setThruDate(e.getThruDate());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(PartyContactMechPurposeState s) {
        if (s == this) {
            return;
        }
        this.setThruDate(s.getThruDate());
    }

    public void when(PartyContactMechPurposeStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getThruDate() == null) {
            if (e.getIsPropertyThruDateRemoved() != null && e.getIsPropertyThruDateRemoved()) {
                this.setThruDate(null);
            }
        } else {
            this.setThruDate(e.getThruDate());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(PartyContactMechPurposeEvent event) {
        PartyContactMechId stateEntityIdPartyContactMechId = this.getPartyContactMechPurposeId().getPartyContactMechId();
        PartyContactMechId eventEntityIdPartyContactMechId = ((PartyContactMechPurposeEvent.SqlPartyContactMechPurposeEvent)event).getPartyContactMechPurposeEventId().getPartyContactMechId();
        if (!stateEntityIdPartyContactMechId.equals(eventEntityIdPartyContactMechId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id PartyContactMechId %1$s in state but entity id PartyContactMechId %2$s in event", stateEntityIdPartyContactMechId, eventEntityIdPartyContactMechId);
        }

        String stateEntityIdContactMechPurposeTypeId = this.getPartyContactMechPurposeId().getContactMechPurposeTypeId();
        String eventEntityIdContactMechPurposeTypeId = ((PartyContactMechPurposeEvent.SqlPartyContactMechPurposeEvent)event).getPartyContactMechPurposeEventId().getContactMechPurposeTypeId();
        if (!stateEntityIdContactMechPurposeTypeId.equals(eventEntityIdContactMechPurposeTypeId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id ContactMechPurposeTypeId %1$s in state but entity id ContactMechPurposeTypeId %2$s in event", stateEntityIdContactMechPurposeTypeId, eventEntityIdContactMechPurposeTypeId);
        }


        if (getForReapplying()) { return; }
        PartyContactMechPurposeStateEvent stateEvent = event instanceof PartyContactMechPurposeStateEvent ? (PartyContactMechPurposeStateEvent)event : null;
        if (stateEvent == null) { return; }

        Long stateVersion = this.getVersion();
        Long stateEventStateVersion = stateEvent.getVersion();
        //if (stateEventStateVersion == null) {
        stateEventStateVersion = stateVersion == null ? PartyContactMechPurposeState.VERSION_NULL : stateVersion;
        stateEvent.setVersion(stateEventStateVersion);
        //}
        //if (!(stateVersion == null && stateEventStateVersion.equals(PartyContactMechPurposeState.VERSION_NULL)) && !stateEventStateVersion.equals(stateVersion))
        //{
        //    throw DomainError.named("concurrencyConflict", "Conflict between stateVersion (%1$s) and stateEventStateVersion (%2$s)", stateVersion, stateEventStateVersion);
        //}

    }


    public static class SimplePartyContactMechPurposeState extends AbstractPartyContactMechPurposeState {

        public SimplePartyContactMechPurposeState() {
        }

        public static SimplePartyContactMechPurposeState newForReapplying() {
            SimplePartyContactMechPurposeState s = new SimplePartyContactMechPurposeState();
            s.initializeForReapplying();
            return s;
        }

    }



}

