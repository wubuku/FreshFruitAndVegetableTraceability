// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.lot;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface LotCommand extends Command {

    String getLotId();

    void setLotId(String lotId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(LotState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((LotCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (state.getDeleted() != null && state.getDeleted()) {
            throw DomainError.named("zombie", "Can't do anything to deleted aggregate.");
        }
        if (isCreationCommand((LotCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(LotCommand c) {
        if ((c instanceof LotCommand.CreateLot) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(LotState.VERSION_NULL)))
            return true;
        if ((c instanceof LotCommand.MergePatchLot))
            return false;
        if ((c instanceof LotCommand.DeleteLot))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(LotState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchLot extends LotCommand
    {

        java.math.BigDecimal getQuantity();

        void setQuantity(java.math.BigDecimal quantity);

        OffsetDateTime getExpirationDate();

        void setExpirationDate(OffsetDateTime expirationDate);

        Boolean getActive();

        void setActive(Boolean active);

    }

    interface CreateLot extends CreateOrMergePatchLot
    {
        CreateLotIdentificationCommandCollection getCreateLotIdentificationCommands();

        LotIdentificationCommand.CreateLotIdentification newCreateLotIdentification();

    }

    interface MergePatchLot extends CreateOrMergePatchLot
    {
        Boolean getIsPropertyQuantityRemoved();

        void setIsPropertyQuantityRemoved(Boolean removed);

        Boolean getIsPropertyExpirationDateRemoved();

        void setIsPropertyExpirationDateRemoved(Boolean removed);

        Boolean getIsPropertyActiveRemoved();

        void setIsPropertyActiveRemoved(Boolean removed);


        LotIdentificationCommandCollection getLotIdentificationCommands();

        LotIdentificationCommand.CreateLotIdentification newCreateLotIdentification();

        LotIdentificationCommand.MergePatchLotIdentification newMergePatchLotIdentification();

        LotIdentificationCommand.RemoveLotIdentification newRemoveLotIdentification();

    }

    interface DeleteLot extends LotCommand
    {
    }

    interface CreateLotIdentificationCommandCollection extends Iterable<LotIdentificationCommand.CreateLotIdentification>
    {
        void add(LotIdentificationCommand.CreateLotIdentification c);

        void remove(LotIdentificationCommand.CreateLotIdentification c);

        void clear();
    }

    interface LotIdentificationCommandCollection extends Iterable<LotIdentificationCommand>
    {
        void add(LotIdentificationCommand c);

        void remove(LotIdentificationCommand c);

        void clear();
    }

}

