// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.lot;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface LotCommand extends Command {

    String getLotId();

    void setLotId(String lotId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(LotState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((LotCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (isCreationCommand((LotCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(LotCommand c) {
        if ((c instanceof LotCommand.CreateLot) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(LotState.VERSION_NULL)))
            return true;
        if ((c instanceof LotCommand.MergePatchLot))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(LotState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchLot extends LotCommand {
        java.math.BigDecimal getQuantity();

        void setQuantity(java.math.BigDecimal quantity);

        OffsetDateTime getExpirationDate();

        void setExpirationDate(OffsetDateTime expirationDate);

        String getLotTypeId();

        void setLotTypeId(String lotTypeId);

        String getActive();

        void setActive(String active);

        String getGtin();

        void setGtin(String gtin);

        String getGs1Batch();

        void setGs1Batch(String gs1Batch);

        String getSourceFacilityId();

        void setSourceFacilityId(String sourceFacilityId);

        String getInternalId();

        void setInternalId(String internalId);

        String getPalletSscc();

        void setPalletSscc(String palletSscc);

        OffsetDateTime getPackDate();

        void setPackDate(OffsetDateTime packDate);

        OffsetDateTime getHarvestDate();

        void setHarvestDate(OffsetDateTime harvestDate);

        String getSerialNumber();

        void setSerialNumber(String serialNumber);

    }

    interface CreateLot extends CreateOrMergePatchLot {
        CreateLotIdentificationCommandCollection getCreateLotIdentificationCommands();

        LotIdentificationCommand.CreateLotIdentification newCreateLotIdentification();

    }

    interface MergePatchLot extends CreateOrMergePatchLot {
        Boolean getIsPropertyQuantityRemoved();

        void setIsPropertyQuantityRemoved(Boolean removed);

        Boolean getIsPropertyExpirationDateRemoved();

        void setIsPropertyExpirationDateRemoved(Boolean removed);

        Boolean getIsPropertyLotTypeIdRemoved();

        void setIsPropertyLotTypeIdRemoved(Boolean removed);

        Boolean getIsPropertyActiveRemoved();

        void setIsPropertyActiveRemoved(Boolean removed);

        Boolean getIsPropertyGtinRemoved();

        void setIsPropertyGtinRemoved(Boolean removed);

        Boolean getIsPropertyGs1BatchRemoved();

        void setIsPropertyGs1BatchRemoved(Boolean removed);

        Boolean getIsPropertySourceFacilityIdRemoved();

        void setIsPropertySourceFacilityIdRemoved(Boolean removed);

        Boolean getIsPropertyInternalIdRemoved();

        void setIsPropertyInternalIdRemoved(Boolean removed);

        Boolean getIsPropertyPalletSsccRemoved();

        void setIsPropertyPalletSsccRemoved(Boolean removed);

        Boolean getIsPropertyPackDateRemoved();

        void setIsPropertyPackDateRemoved(Boolean removed);

        Boolean getIsPropertyHarvestDateRemoved();

        void setIsPropertyHarvestDateRemoved(Boolean removed);

        Boolean getIsPropertySerialNumberRemoved();

        void setIsPropertySerialNumberRemoved(Boolean removed);


        LotIdentificationCommandCollection getLotIdentificationCommands();

        LotIdentificationCommand.CreateLotIdentification newCreateLotIdentification();

        LotIdentificationCommand.MergePatchLotIdentification newMergePatchLotIdentification();

        LotIdentificationCommand.RemoveLotIdentification newRemoveLotIdentification();

    }

    interface DeleteLot extends LotCommand {
    }

    interface CreateLotIdentificationCommandCollection extends Iterable<LotIdentificationCommand.CreateLotIdentification> {
        void add(LotIdentificationCommand.CreateLotIdentification c);

        void remove(LotIdentificationCommand.CreateLotIdentification c);

        void clear();
    }

    interface LotIdentificationCommandCollection extends Iterable<LotIdentificationCommand> {
        void add(LotIdentificationCommand c);

        void remove(LotIdentificationCommand c);

        void clear();
    }

}

