// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.workeffortinventoryproduced;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractWorkEffortInventoryProducedAggregate extends AbstractAggregate implements WorkEffortInventoryProducedAggregate {
    private WorkEffortInventoryProducedState.MutableWorkEffortInventoryProducedState state;

    protected List<Event> changes = new ArrayList<Event>();

    public AbstractWorkEffortInventoryProducedAggregate(WorkEffortInventoryProducedState state) {
        this.state = (WorkEffortInventoryProducedState.MutableWorkEffortInventoryProducedState)state;
    }

    public WorkEffortInventoryProducedState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(WorkEffortInventoryProducedCommand.CreateWorkEffortInventoryProduced c) {
        if (c.getVersion() == null) { c.setVersion(WorkEffortInventoryProducedState.VERSION_NULL); }
        WorkEffortInventoryProducedEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        WorkEffortInventoryProducedCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof WorkEffortInventoryProducedEvent) {
            WorkEffortInventoryProducedEvent ee = (WorkEffortInventoryProducedEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected WorkEffortInventoryProducedEvent map(WorkEffortInventoryProducedCommand.CreateWorkEffortInventoryProduced c) {
        WorkEffortInventoryProducedEventId stateEventId = new WorkEffortInventoryProducedEventId(c.getWorkEffortInventoryProducedId(), c.getVersion());
        WorkEffortInventoryProducedEvent.WorkEffortInventoryProducedStateCreated e = newWorkEffortInventoryProducedStateCreated(stateEventId);
        ((AbstractWorkEffortInventoryProducedEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected WorkEffortInventoryProducedEvent.WorkEffortInventoryProducedStateCreated newWorkEffortInventoryProducedStateCreated(Long version, String commandId, String requesterId) {
        WorkEffortInventoryProducedEventId stateEventId = new WorkEffortInventoryProducedEventId(this.state.getWorkEffortInventoryProducedId(), version);
        WorkEffortInventoryProducedEvent.WorkEffortInventoryProducedStateCreated e = newWorkEffortInventoryProducedStateCreated(stateEventId);
        ((AbstractWorkEffortInventoryProducedEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortInventoryProducedEvent.WorkEffortInventoryProducedStateCreated newWorkEffortInventoryProducedStateCreated(WorkEffortInventoryProducedEventId stateEventId) {
        return new AbstractWorkEffortInventoryProducedEvent.SimpleWorkEffortInventoryProducedStateCreated(stateEventId);
    }


    public static class SimpleWorkEffortInventoryProducedAggregate extends AbstractWorkEffortInventoryProducedAggregate {
        public SimpleWorkEffortInventoryProducedAggregate(WorkEffortInventoryProducedState state) {
            super(state);
        }

    }

}

