// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.party;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.party.DepartmentEvent.*;

public abstract class AbstractDepartmentState extends AbstractOrganizationState implements DepartmentState.SqlDepartmentState, Saveable {

    public AbstractDepartmentState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setPartyId(((PartyEvent.SqlPartyEvent) events.get(0)).getPartyEventId().getPartyId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? PartyState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractDepartmentState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        super.setForReapplying(true);

        initializeProperties();
    }
    
    protected void initializeProperties() {
        super.initializeProperties();
    }

    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof DepartmentStateCreated) {
            when((DepartmentStateCreated) e);
        } else if (e instanceof DepartmentStateMergePatched) {
            when((DepartmentStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(DepartmentStateCreated e) {
        throwOnWrongEvent(e);

        this.setPartyTypeId(e.getPartyTypeId());
        this.setPrimaryRoleTypeId(e.getPrimaryRoleTypeId());
        this.setExternalId(e.getExternalId());
        this.setPreferredCurrencyUomId(e.getPreferredCurrencyUomId());
        this.setDescription(e.getDescription());
        this.setStatusId(e.getStatusId());
        this.setOrganizationName(e.getOrganizationName());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

        for (PartyIdentificationEvent.PartyIdentificationStateCreated innerEvent : e.getPartyIdentificationEvents()) {
            PartyIdentificationState innerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(((PartyIdentificationEvent.SqlPartyIdentificationEvent)innerEvent).getPartyIdentificationEventId().getPartyIdentificationTypeId());
            ((PartyIdentificationState.SqlPartyIdentificationState)innerState).mutate(innerEvent);
        }
    }

    @Override
    public void merge(PartyState s) {
        merge((DepartmentState)s);
    }

    public void merge(DepartmentState s) {
        if (s == this) {
            return;
        }
        this.setPartyTypeId(s.getPartyTypeId());
        this.setPrimaryRoleTypeId(s.getPrimaryRoleTypeId());
        this.setExternalId(s.getExternalId());
        this.setPreferredCurrencyUomId(s.getPreferredCurrencyUomId());
        this.setDescription(s.getDescription());
        this.setStatusId(s.getStatusId());
        this.setOrganizationName(s.getOrganizationName());

        if (s.getPartyIdentifications() != null) {
            Iterable<PartyIdentificationState> iterable;
            if (s.getPartyIdentifications().isLazy()) {
                iterable = s.getPartyIdentifications().getLoadedStates();
            } else {
                iterable = s.getPartyIdentifications();
            }
            if (iterable != null) {
                for (PartyIdentificationState ss : iterable) {
                    PartyIdentificationState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(ss.getPartyIdentificationTypeId());
                    ((AbstractPartyIdentificationState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getPartyIdentifications() != null) {
            if (s.getPartyIdentifications() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getPartyIdentifications()).getRemovedStates() != null) {
                    for (PartyIdentificationState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, PartyIdentificationState>)s.getPartyIdentifications()).getRemovedStates()) {
                        PartyIdentificationState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(ss.getPartyIdentificationTypeId());
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getPartyIdentifications()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getPartyIdentifications().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getPartyIdentifications().stream().map(i -> i.getPartyIdentificationTypeId()).collect(java.util.stream.Collectors.toList()));
                    s.getPartyIdentifications().forEach(i -> removedStateIds.remove(i.getPartyIdentificationTypeId()));
                    for (String i : removedStateIds) {
                        PartyIdentificationState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(i);
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getPartyIdentifications()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(DepartmentStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getPartyTypeId() == null) {
            if (e.getIsPropertyPartyTypeIdRemoved() != null && e.getIsPropertyPartyTypeIdRemoved()) {
                this.setPartyTypeId(null);
            }
        } else {
            this.setPartyTypeId(e.getPartyTypeId());
        }
        if (e.getPrimaryRoleTypeId() == null) {
            if (e.getIsPropertyPrimaryRoleTypeIdRemoved() != null && e.getIsPropertyPrimaryRoleTypeIdRemoved()) {
                this.setPrimaryRoleTypeId(null);
            }
        } else {
            this.setPrimaryRoleTypeId(e.getPrimaryRoleTypeId());
        }
        if (e.getExternalId() == null) {
            if (e.getIsPropertyExternalIdRemoved() != null && e.getIsPropertyExternalIdRemoved()) {
                this.setExternalId(null);
            }
        } else {
            this.setExternalId(e.getExternalId());
        }
        if (e.getPreferredCurrencyUomId() == null) {
            if (e.getIsPropertyPreferredCurrencyUomIdRemoved() != null && e.getIsPropertyPreferredCurrencyUomIdRemoved()) {
                this.setPreferredCurrencyUomId(null);
            }
        } else {
            this.setPreferredCurrencyUomId(e.getPreferredCurrencyUomId());
        }
        if (e.getDescription() == null) {
            if (e.getIsPropertyDescriptionRemoved() != null && e.getIsPropertyDescriptionRemoved()) {
                this.setDescription(null);
            }
        } else {
            this.setDescription(e.getDescription());
        }
        if (e.getStatusId() == null) {
            if (e.getIsPropertyStatusIdRemoved() != null && e.getIsPropertyStatusIdRemoved()) {
                this.setStatusId(null);
            }
        } else {
            this.setStatusId(e.getStatusId());
        }
        if (e.getOrganizationName() == null) {
            if (e.getIsPropertyOrganizationNameRemoved() != null && e.getIsPropertyOrganizationNameRemoved()) {
                this.setOrganizationName(null);
            }
        } else {
            this.setOrganizationName(e.getOrganizationName());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (PartyIdentificationEvent innerEvent : e.getPartyIdentificationEvents()) {
            PartyIdentificationState innerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, PartyIdentificationState>)this.getPartyIdentifications()).getOrAddDefault(((PartyIdentificationEvent.SqlPartyIdentificationEvent)innerEvent).getPartyIdentificationEventId().getPartyIdentificationTypeId());
            ((PartyIdentificationState.SqlPartyIdentificationState)innerState).mutate(innerEvent);
        }
    }

    public void save() {
       super.save();
    }


    public static class SimpleDepartmentState extends AbstractDepartmentState {

        public SimpleDepartmentState() {
        }

        public SimpleDepartmentState(List<Event> events) {
            super(events);
        }

        public static SimpleDepartmentState newForReapplying() {
            SimpleDepartmentState s = new SimpleDepartmentState();
            s.initializeForReapplying();
            return s;
        }

    }



}

