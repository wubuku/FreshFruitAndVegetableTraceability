// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchPartyContactMechDto extends AbstractPartyContactMechCommandDto implements PartyContactMechCommand.CreateOrMergePatchPartyContactMech {

    /**
     * Thru Date
     */
    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate()
    {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate)
    {
        this.thruDate = thruDate;
    }

    /**
     * Role Type Id
     */
    private String roleTypeId;

    public String getRoleTypeId()
    {
        return this.roleTypeId;
    }

    public void setRoleTypeId(String roleTypeId)
    {
        this.roleTypeId = roleTypeId;
    }

    /**
     * Allow Solicitation
     */
    private String allowSolicitation;

    public String getAllowSolicitation()
    {
        return this.allowSolicitation;
    }

    public void setAllowSolicitation(String allowSolicitation)
    {
        this.allowSolicitation = allowSolicitation;
    }

    /**
     * Extension
     */
    private String extension;

    public String getExtension()
    {
        return this.extension;
    }

    public void setExtension(String extension)
    {
        this.extension = extension;
    }

    /**
     * Verified
     */
    private String verified;

    public String getVerified()
    {
        return this.verified;
    }

    public void setVerified(String verified)
    {
        this.verified = verified;
    }

    /**
     * Comments
     */
    private String comments;

    public String getComments()
    {
        return this.comments;
    }

    public void setComments(String comments)
    {
        this.comments = comments;
    }

    /**
     * Years With Contact Mech
     */
    private Long yearsWithContactMech;

    public Long getYearsWithContactMech()
    {
        return this.yearsWithContactMech;
    }

    public void setYearsWithContactMech(Long yearsWithContactMech)
    {
        this.yearsWithContactMech = yearsWithContactMech;
    }

    /**
     * Months With Contact Mech
     */
    private Long monthsWithContactMech;

    public Long getMonthsWithContactMech()
    {
        return this.monthsWithContactMech;
    }

    public void setMonthsWithContactMech(Long monthsWithContactMech)
    {
        this.monthsWithContactMech = monthsWithContactMech;
    }


    private CreateOrMergePatchPartyContactMechPurposeDto[] partyContactMechPurposes = new CreateOrMergePatchPartyContactMechPurposeDto[0];

    public CreateOrMergePatchPartyContactMechPurposeDto[] getPartyContactMechPurposes()
    {
        return this.partyContactMechPurposes;
    }

    public void setPartyContactMechPurposes(CreateOrMergePatchPartyContactMechPurposeDto[] partyContactMechPurposes)
    {
        this.partyContactMechPurposes = partyContactMechPurposes;
    }

    private Boolean isPropertyThruDateRemoved;

    public Boolean getIsPropertyThruDateRemoved()
    {
        return this.isPropertyThruDateRemoved;
    }

    public void setIsPropertyThruDateRemoved(Boolean removed)
    {
        this.isPropertyThruDateRemoved = removed;
    }

    private Boolean isPropertyRoleTypeIdRemoved;

    public Boolean getIsPropertyRoleTypeIdRemoved()
    {
        return this.isPropertyRoleTypeIdRemoved;
    }

    public void setIsPropertyRoleTypeIdRemoved(Boolean removed)
    {
        this.isPropertyRoleTypeIdRemoved = removed;
    }

    private Boolean isPropertyAllowSolicitationRemoved;

    public Boolean getIsPropertyAllowSolicitationRemoved()
    {
        return this.isPropertyAllowSolicitationRemoved;
    }

    public void setIsPropertyAllowSolicitationRemoved(Boolean removed)
    {
        this.isPropertyAllowSolicitationRemoved = removed;
    }

    private Boolean isPropertyExtensionRemoved;

    public Boolean getIsPropertyExtensionRemoved()
    {
        return this.isPropertyExtensionRemoved;
    }

    public void setIsPropertyExtensionRemoved(Boolean removed)
    {
        this.isPropertyExtensionRemoved = removed;
    }

    private Boolean isPropertyVerifiedRemoved;

    public Boolean getIsPropertyVerifiedRemoved()
    {
        return this.isPropertyVerifiedRemoved;
    }

    public void setIsPropertyVerifiedRemoved(Boolean removed)
    {
        this.isPropertyVerifiedRemoved = removed;
    }

    private Boolean isPropertyCommentsRemoved;

    public Boolean getIsPropertyCommentsRemoved()
    {
        return this.isPropertyCommentsRemoved;
    }

    public void setIsPropertyCommentsRemoved(Boolean removed)
    {
        this.isPropertyCommentsRemoved = removed;
    }

    private Boolean isPropertyYearsWithContactMechRemoved;

    public Boolean getIsPropertyYearsWithContactMechRemoved()
    {
        return this.isPropertyYearsWithContactMechRemoved;
    }

    public void setIsPropertyYearsWithContactMechRemoved(Boolean removed)
    {
        this.isPropertyYearsWithContactMechRemoved = removed;
    }

    private Boolean isPropertyMonthsWithContactMechRemoved;

    public Boolean getIsPropertyMonthsWithContactMechRemoved()
    {
        return this.isPropertyMonthsWithContactMechRemoved;
    }

    public void setIsPropertyMonthsWithContactMechRemoved(Boolean removed)
    {
        this.isPropertyMonthsWithContactMechRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchPartyContactMech command)
    {
        ((AbstractPartyContactMechCommandDto) this).copyTo(command);
        command.setThruDate(this.getThruDate());
        command.setRoleTypeId(this.getRoleTypeId());
        command.setAllowSolicitation(this.getAllowSolicitation());
        command.setExtension(this.getExtension());
        command.setVerified(this.getVerified());
        command.setComments(this.getComments());
        command.setYearsWithContactMech(this.getYearsWithContactMech());
        command.setMonthsWithContactMech(this.getMonthsWithContactMech());
    }

    public PartyContactMechCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractPartyContactMechCommand.SimpleCreatePartyContactMech command = new AbstractPartyContactMechCommand.SimpleCreatePartyContactMech();
            copyTo((AbstractPartyContactMechCommand.AbstractCreatePartyContactMech) command);
            if (this.getPartyContactMechPurposes() != null) {
                for (CreateOrMergePatchPartyContactMechPurposeDto cmd : this.getPartyContactMechPurposes()) {
                    cmd.setCommandType(COMMAND_TYPE_CREATE);
                    command.getPartyContactMechPurposes().add((PartyContactMechPurposeCommand.CreatePartyContactMechPurpose) cmd.toCommand());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractPartyContactMechCommand.SimpleMergePatchPartyContactMech command = new AbstractPartyContactMechCommand.SimpleMergePatchPartyContactMech();
            copyTo((AbstractPartyContactMechCommand.SimpleMergePatchPartyContactMech) command);
            if (this.getPartyContactMechPurposes() != null) {
                for (CreateOrMergePatchPartyContactMechPurposeDto cmd : this.getPartyContactMechPurposes()) {
                    command.getPartyContactMechPurposeCommands().add(cmd.toCommand());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public PartyContactMechCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreatePartyContactMechDto command = new CreatePartyContactMechDto();
            copyTo((CreatePartyContactMech) command);
            if (this.getPartyContactMechPurposes() != null) {
                for (CreateOrMergePatchPartyContactMechPurposeDto cmd : this.getPartyContactMechPurposes()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreatePartyContactMechPurposeCommands().add((PartyContactMechPurposeCommand.CreatePartyContactMechPurpose) cmd.toSubclass());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchPartyContactMechDto command = new MergePatchPartyContactMechDto();
            copyTo((MergePatchPartyContactMech) command);
            if (this.getPartyContactMechPurposes() != null) {
                for (CreateOrMergePatchPartyContactMechPurposeDto cmd : this.getPartyContactMechPurposes()) {
                    command.getPartyContactMechPurposeCommands().add(cmd.toSubclass());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreatePartyContactMech command)
    {
        copyTo((CreateOrMergePatchPartyContactMech) command);
    }

    public void copyTo(MergePatchPartyContactMech command)
    {
        copyTo((CreateOrMergePatchPartyContactMech) command);
        command.setIsPropertyThruDateRemoved(this.getIsPropertyThruDateRemoved());
        command.setIsPropertyRoleTypeIdRemoved(this.getIsPropertyRoleTypeIdRemoved());
        command.setIsPropertyAllowSolicitationRemoved(this.getIsPropertyAllowSolicitationRemoved());
        command.setIsPropertyExtensionRemoved(this.getIsPropertyExtensionRemoved());
        command.setIsPropertyVerifiedRemoved(this.getIsPropertyVerifiedRemoved());
        command.setIsPropertyCommentsRemoved(this.getIsPropertyCommentsRemoved());
        command.setIsPropertyYearsWithContactMechRemoved(this.getIsPropertyYearsWithContactMechRemoved());
        command.setIsPropertyMonthsWithContactMechRemoved(this.getIsPropertyMonthsWithContactMechRemoved());
    }

    public static class CreatePartyContactMechDto extends CreateOrMergePatchPartyContactMechDto implements PartyContactMechCommand.CreatePartyContactMech
    {
        public CreatePartyContactMechDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public PartyContactMechCommand.CreatePartyContactMech toCreatePartyContactMech()
        {
            return (PartyContactMechCommand.CreatePartyContactMech) toCommand();
        }


        @Override
        public CreatePartyContactMechPurposeCommandCollection getCreatePartyContactMechPurposeCommands() {
            return new CreatePartyContactMechPurposeCommandCollection() {
                @Override
                public void add(PartyContactMechPurposeCommand.CreatePartyContactMechPurpose c) {
                    java.util.List<CreateOrMergePatchPartyContactMechPurposeDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getPartyContactMechPurposes()));
                    list.add((CreateOrMergePatchPartyContactMechPurposeDto) c);
                    setPartyContactMechPurposes(list.toArray(new CreateOrMergePatchPartyContactMechPurposeDto[0]));
                }

                @Override
                public void remove(PartyContactMechPurposeCommand.CreatePartyContactMechPurpose c) {
                    java.util.List<CreateOrMergePatchPartyContactMechPurposeDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getPartyContactMechPurposes()));
                    list.remove((CreateOrMergePatchPartyContactMechPurposeDto) c);
                    setPartyContactMechPurposes(list.toArray(new CreateOrMergePatchPartyContactMechPurposeDto[0]));
                }

                @Override
                public void clear() {
                    setPartyContactMechPurposes(new CreateOrMergePatchPartyContactMechPurposeDto[]{});
                }

                @Override
                public java.util.Iterator<PartyContactMechPurposeCommand.CreatePartyContactMechPurpose> iterator() {
                    return java.util.Arrays.stream(getPartyContactMechPurposes())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (PartyContactMechPurposeCommand.CreatePartyContactMechPurpose) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public PartyContactMechPurposeCommand.CreatePartyContactMechPurpose newCreatePartyContactMechPurpose() {
            return new CreateOrMergePatchPartyContactMechPurposeDto.CreatePartyContactMechPurposeDto();
        }

    }

    public static class MergePatchPartyContactMechDto extends CreateOrMergePatchPartyContactMechDto implements PartyContactMechCommand.MergePatchPartyContactMech
    {
        public MergePatchPartyContactMechDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public PartyContactMechCommand.MergePatchPartyContactMech toMergePatchPartyContactMech()
        {
            return (PartyContactMechCommand.MergePatchPartyContactMech) toCommand();
        }


        @Override
        public PartyContactMechPurposeCommandCollection getPartyContactMechPurposeCommands() {
            return new PartyContactMechPurposeCommandCollection() {
                @Override
                public void add(PartyContactMechPurposeCommand c) {
                    java.util.List<CreateOrMergePatchPartyContactMechPurposeDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getPartyContactMechPurposes()));
                    list.add((CreateOrMergePatchPartyContactMechPurposeDto) c);
                    setPartyContactMechPurposes(list.toArray(new CreateOrMergePatchPartyContactMechPurposeDto[0]));
                }

                @Override
                public void remove(PartyContactMechPurposeCommand c) {
                    java.util.List<CreateOrMergePatchPartyContactMechPurposeDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getPartyContactMechPurposes()));
                    list.remove((CreateOrMergePatchPartyContactMechPurposeDto) c);
                    setPartyContactMechPurposes(list.toArray(new CreateOrMergePatchPartyContactMechPurposeDto[0]));
                }

                @Override
                public void clear() {
                    setPartyContactMechPurposes(new CreateOrMergePatchPartyContactMechPurposeDto[]{});
                }

                @Override
                public java.util.Iterator<PartyContactMechPurposeCommand> iterator() {
                    return java.util.Arrays.stream(getPartyContactMechPurposes())
                            .map(e -> (PartyContactMechPurposeCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public PartyContactMechPurposeCommand.CreatePartyContactMechPurpose newCreatePartyContactMechPurpose() {
            return new CreateOrMergePatchPartyContactMechPurposeDto.CreatePartyContactMechPurposeDto();
        }

        @Override
        public PartyContactMechPurposeCommand.MergePatchPartyContactMechPurpose newMergePatchPartyContactMechPurpose() {
            return new CreateOrMergePatchPartyContactMechPurposeDto.MergePatchPartyContactMechPurposeDto();
        }

        @Override
        public PartyContactMechPurposeCommand.RemovePartyContactMechPurpose newRemovePartyContactMechPurpose() {
            return new RemovePartyContactMechPurposeDto();
        }

    }

}

