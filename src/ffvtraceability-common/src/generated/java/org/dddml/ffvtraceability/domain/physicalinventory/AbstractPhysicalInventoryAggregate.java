// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.physicalinventory;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractPhysicalInventoryAggregate extends AbstractAggregate implements PhysicalInventoryAggregate {
    private PhysicalInventoryState.MutablePhysicalInventoryState state;

    protected List<Event> changes = new ArrayList<Event>();

    public AbstractPhysicalInventoryAggregate(PhysicalInventoryState state) {
        this.state = (PhysicalInventoryState.MutablePhysicalInventoryState)state;
    }

    public PhysicalInventoryState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(PhysicalInventoryCommand.CreatePhysicalInventory c) {
        if (c.getVersion() == null) { c.setVersion(PhysicalInventoryState.VERSION_NULL); }
        PhysicalInventoryEvent e = map(c);
        apply(e);
    }

    public void mergePatch(PhysicalInventoryCommand.MergePatchPhysicalInventory c) {
        PhysicalInventoryEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        PhysicalInventoryCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof PhysicalInventoryEvent) {
            PhysicalInventoryEvent ee = (PhysicalInventoryEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected PhysicalInventoryEvent map(PhysicalInventoryCommand.CreatePhysicalInventory c) {
        PhysicalInventoryEventId stateEventId = new PhysicalInventoryEventId(c.getPhysicalInventoryId(), c.getVersion());
        PhysicalInventoryEvent.PhysicalInventoryStateCreated e = newPhysicalInventoryStateCreated(stateEventId);
        e.setPhysicalInventoryDate(c.getPhysicalInventoryDate());
        e.setPartyId(c.getPartyId());
        e.setGeneralComments(c.getGeneralComments());
        ((AbstractPhysicalInventoryEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (InventoryItemVarianceCommand.CreateInventoryItemVariance innerCommand : c.getCreateInventoryItemVarianceCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            InventoryItemVarianceEvent.InventoryItemVarianceStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addInventoryItemVarianceEvent(innerEvent);
        }

        return e;
    }

    protected PhysicalInventoryEvent map(PhysicalInventoryCommand.MergePatchPhysicalInventory c) {
        PhysicalInventoryEventId stateEventId = new PhysicalInventoryEventId(c.getPhysicalInventoryId(), c.getVersion());
        PhysicalInventoryEvent.PhysicalInventoryStateMergePatched e = newPhysicalInventoryStateMergePatched(stateEventId);
        e.setPhysicalInventoryDate(c.getPhysicalInventoryDate());
        e.setPartyId(c.getPartyId());
        e.setGeneralComments(c.getGeneralComments());
        e.setIsPropertyPhysicalInventoryDateRemoved(c.getIsPropertyPhysicalInventoryDateRemoved());
        e.setIsPropertyPartyIdRemoved(c.getIsPropertyPartyIdRemoved());
        e.setIsPropertyGeneralCommentsRemoved(c.getIsPropertyGeneralCommentsRemoved());
        ((AbstractPhysicalInventoryEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (InventoryItemVarianceCommand innerCommand : c.getInventoryItemVarianceCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            InventoryItemVarianceEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addInventoryItemVarianceEvent(innerEvent);
        }

        return e;
    }


    protected InventoryItemVarianceEvent map(InventoryItemVarianceCommand c, PhysicalInventoryCommand outerCommand, Long version, PhysicalInventoryState outerState) {
        InventoryItemVarianceCommand.CreateInventoryItemVariance create = (c.getCommandType().equals(CommandType.CREATE)) ? ((InventoryItemVarianceCommand.CreateInventoryItemVariance)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        InventoryItemVarianceCommand.MergePatchInventoryItemVariance merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((InventoryItemVarianceCommand.MergePatchInventoryItemVariance)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        throw new UnsupportedOperationException("Unsupported command type: " + c.getCommandType() + " for " + c.getClass().getName());
    }

    protected InventoryItemVarianceEvent.InventoryItemVarianceStateCreated mapCreate(InventoryItemVarianceCommand.CreateInventoryItemVariance c, PhysicalInventoryCommand outerCommand, Long version, PhysicalInventoryState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        InventoryItemVarianceEventId stateEventId = new InventoryItemVarianceEventId(outerState.getPhysicalInventoryId(), c.getInventoryItemId(), version);
        InventoryItemVarianceEvent.InventoryItemVarianceStateCreated e = newInventoryItemVarianceStateCreated(stateEventId);
        InventoryItemVarianceState s = ((EntityStateCollection.MutableEntityStateCollection<String, InventoryItemVarianceState>)outerState.getInventoryItemVariances()).getOrAddDefault(c.getInventoryItemId());

        e.setVarianceReasonId(c.getVarianceReasonId());
        e.setAvailableToPromiseVar(c.getAvailableToPromiseVar());
        e.setQuantityOnHandVar(c.getQuantityOnHandVar());
        e.setComments(c.getComments());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected InventoryItemVarianceEvent.InventoryItemVarianceStateMergePatched mapMergePatch(InventoryItemVarianceCommand.MergePatchInventoryItemVariance c, PhysicalInventoryCommand outerCommand, Long version, PhysicalInventoryState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        InventoryItemVarianceEventId stateEventId = new InventoryItemVarianceEventId(outerState.getPhysicalInventoryId(), c.getInventoryItemId(), version);
        InventoryItemVarianceEvent.InventoryItemVarianceStateMergePatched e = newInventoryItemVarianceStateMergePatched(stateEventId);
        InventoryItemVarianceState s = ((EntityStateCollection.MutableEntityStateCollection<String, InventoryItemVarianceState>)outerState.getInventoryItemVariances()).getOrAddDefault(c.getInventoryItemId());

        e.setVarianceReasonId(c.getVarianceReasonId());
        e.setAvailableToPromiseVar(c.getAvailableToPromiseVar());
        e.setQuantityOnHandVar(c.getQuantityOnHandVar());
        e.setComments(c.getComments());
        e.setIsPropertyVarianceReasonIdRemoved(c.getIsPropertyVarianceReasonIdRemoved());
        e.setIsPropertyAvailableToPromiseVarRemoved(c.getIsPropertyAvailableToPromiseVarRemoved());
        e.setIsPropertyQuantityOnHandVarRemoved(c.getIsPropertyQuantityOnHandVarRemoved());
        e.setIsPropertyCommentsRemoved(c.getIsPropertyCommentsRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected void throwOnInconsistentCommands(PhysicalInventoryCommand command, InventoryItemVarianceCommand innerCommand) {
        AbstractPhysicalInventoryCommand properties = command instanceof AbstractPhysicalInventoryCommand ? (AbstractPhysicalInventoryCommand) command : null;
        AbstractInventoryItemVarianceCommand innerProperties = innerCommand instanceof AbstractInventoryItemVarianceCommand ? (AbstractInventoryItemVarianceCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerPhysicalInventoryIdName = "PhysicalInventoryId";
        String outerPhysicalInventoryIdValue = properties.getPhysicalInventoryId();
        String innerPhysicalInventoryIdName = "PhysicalInventoryId";
        String innerPhysicalInventoryIdValue = innerProperties.getPhysicalInventoryId();
        if (innerPhysicalInventoryIdValue == null) {
            innerProperties.setPhysicalInventoryId(outerPhysicalInventoryIdValue);
        }
        else if (innerPhysicalInventoryIdValue != outerPhysicalInventoryIdValue 
            && (innerPhysicalInventoryIdValue == null || innerPhysicalInventoryIdValue != null && !innerPhysicalInventoryIdValue.equals(outerPhysicalInventoryIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerPhysicalInventoryIdName, outerPhysicalInventoryIdValue, innerPhysicalInventoryIdName, innerPhysicalInventoryIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////


    ////////////////////////

    protected PhysicalInventoryEvent.PhysicalInventoryStateCreated newPhysicalInventoryStateCreated(Long version, String commandId, String requesterId) {
        PhysicalInventoryEventId stateEventId = new PhysicalInventoryEventId(this.state.getPhysicalInventoryId(), version);
        PhysicalInventoryEvent.PhysicalInventoryStateCreated e = newPhysicalInventoryStateCreated(stateEventId);
        ((AbstractPhysicalInventoryEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected PhysicalInventoryEvent.PhysicalInventoryStateMergePatched newPhysicalInventoryStateMergePatched(Long version, String commandId, String requesterId) {
        PhysicalInventoryEventId stateEventId = new PhysicalInventoryEventId(this.state.getPhysicalInventoryId(), version);
        PhysicalInventoryEvent.PhysicalInventoryStateMergePatched e = newPhysicalInventoryStateMergePatched(stateEventId);
        ((AbstractPhysicalInventoryEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected PhysicalInventoryEvent.PhysicalInventoryStateCreated newPhysicalInventoryStateCreated(PhysicalInventoryEventId stateEventId) {
        return new AbstractPhysicalInventoryEvent.SimplePhysicalInventoryStateCreated(stateEventId);
    }

    protected PhysicalInventoryEvent.PhysicalInventoryStateMergePatched newPhysicalInventoryStateMergePatched(PhysicalInventoryEventId stateEventId) {
        return new AbstractPhysicalInventoryEvent.SimplePhysicalInventoryStateMergePatched(stateEventId);
    }

    protected InventoryItemVarianceEvent.InventoryItemVarianceStateCreated newInventoryItemVarianceStateCreated(InventoryItemVarianceEventId stateEventId) {
        return new AbstractInventoryItemVarianceEvent.SimpleInventoryItemVarianceStateCreated(stateEventId);
    }

    protected InventoryItemVarianceEvent.InventoryItemVarianceStateMergePatched newInventoryItemVarianceStateMergePatched(InventoryItemVarianceEventId stateEventId) {
        return new AbstractInventoryItemVarianceEvent.SimpleInventoryItemVarianceStateMergePatched(stateEventId);
    }


    public static class SimplePhysicalInventoryAggregate extends AbstractPhysicalInventoryAggregate {
        public SimplePhysicalInventoryAggregate(PhysicalInventoryState state) {
            super(state);
        }

    }

}

