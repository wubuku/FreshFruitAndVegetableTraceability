// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.workeffortassoc;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractWorkEffortAssocAggregate extends AbstractAggregate implements WorkEffortAssocAggregate {
    private WorkEffortAssocState.MutableWorkEffortAssocState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractWorkEffortAssocAggregate(WorkEffortAssocState state) {
        this.state = (WorkEffortAssocState.MutableWorkEffortAssocState)state;
    }

    public WorkEffortAssocState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(WorkEffortAssocCommand.CreateWorkEffortAssoc c) {
        if (c.getVersion() == null) { c.setVersion(WorkEffortAssocState.VERSION_NULL); }
        WorkEffortAssocEvent e = map(c);
        apply(e);
    }

    public void mergePatch(WorkEffortAssocCommand.MergePatchWorkEffortAssoc c) {
        WorkEffortAssocEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        WorkEffortAssocCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof WorkEffortAssocEvent) {
            WorkEffortAssocEvent ee = (WorkEffortAssocEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected WorkEffortAssocEvent map(WorkEffortAssocCommand.CreateWorkEffortAssoc c) {
        WorkEffortAssocEventId stateEventId = new WorkEffortAssocEventId(c.getWorkEffortAssocId(), c.getVersion());
        WorkEffortAssocEvent.WorkEffortAssocStateCreated e = newWorkEffortAssocStateCreated(stateEventId);
        e.setSequenceNum(c.getSequenceNum());
        e.setThruDate(c.getThruDate());
        ((AbstractWorkEffortAssocEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortAssocEvent map(WorkEffortAssocCommand.MergePatchWorkEffortAssoc c) {
        WorkEffortAssocEventId stateEventId = new WorkEffortAssocEventId(c.getWorkEffortAssocId(), c.getVersion());
        WorkEffortAssocEvent.WorkEffortAssocStateMergePatched e = newWorkEffortAssocStateMergePatched(stateEventId);
        e.setSequenceNum(c.getSequenceNum());
        e.setThruDate(c.getThruDate());
        e.setIsPropertySequenceNumRemoved(c.getIsPropertySequenceNumRemoved());
        e.setIsPropertyThruDateRemoved(c.getIsPropertyThruDateRemoved());
        ((AbstractWorkEffortAssocEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected WorkEffortAssocEvent.WorkEffortAssocStateCreated newWorkEffortAssocStateCreated(Long version, String commandId, String requesterId) {
        WorkEffortAssocEventId stateEventId = new WorkEffortAssocEventId(this.state.getWorkEffortAssocId(), version);
        WorkEffortAssocEvent.WorkEffortAssocStateCreated e = newWorkEffortAssocStateCreated(stateEventId);
        ((AbstractWorkEffortAssocEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortAssocEvent.WorkEffortAssocStateMergePatched newWorkEffortAssocStateMergePatched(Long version, String commandId, String requesterId) {
        WorkEffortAssocEventId stateEventId = new WorkEffortAssocEventId(this.state.getWorkEffortAssocId(), version);
        WorkEffortAssocEvent.WorkEffortAssocStateMergePatched e = newWorkEffortAssocStateMergePatched(stateEventId);
        ((AbstractWorkEffortAssocEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortAssocEvent.WorkEffortAssocStateCreated newWorkEffortAssocStateCreated(WorkEffortAssocEventId stateEventId) {
        return new AbstractWorkEffortAssocEvent.SimpleWorkEffortAssocStateCreated(stateEventId);
    }

    protected WorkEffortAssocEvent.WorkEffortAssocStateMergePatched newWorkEffortAssocStateMergePatched(WorkEffortAssocEventId stateEventId) {
        return new AbstractWorkEffortAssocEvent.SimpleWorkEffortAssocStateMergePatched(stateEventId);
    }


    public static class SimpleWorkEffortAssocAggregate extends AbstractWorkEffortAssocAggregate {
        public SimpleWorkEffortAssocAggregate(WorkEffortAssocState state) {
            super(state);
        }

    }

}

