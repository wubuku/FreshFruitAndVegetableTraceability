// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.lot;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.lot.LotEvent.*;

public abstract class AbstractLotState implements LotState.SqlLotState, Saveable {

    private String lotId;

    public String getLotId() {
        return this.lotId;
    }

    public void setLotId(String lotId) {
        this.lotId = lotId;
    }

    private String supplierId;

    public String getSupplierId() {
        return this.supplierId;
    }

    public void setSupplierId(String supplierId) {
        this.supplierId = supplierId;
    }

    private java.math.BigDecimal quantity;

    public java.math.BigDecimal getQuantity() {
        return this.quantity;
    }

    public void setQuantity(java.math.BigDecimal quantity) {
        this.quantity = quantity;
    }

    private OffsetDateTime expirationDate;

    public OffsetDateTime getExpirationDate() {
        return this.expirationDate;
    }

    public void setExpirationDate(OffsetDateTime expirationDate) {
        this.expirationDate = expirationDate;
    }

    private String lotTypeId;

    public String getLotTypeId() {
        return this.lotTypeId;
    }

    public void setLotTypeId(String lotTypeId) {
        this.lotTypeId = lotTypeId;
    }

    private String active;

    public String getActive() {
        return this.active;
    }

    public void setActive(String active) {
        this.active = active;
    }

    private String gtin;

    public String getGtin() {
        return this.gtin;
    }

    public void setGtin(String gtin) {
        this.gtin = gtin;
    }

    private String gs1Batch;

    public String getGs1Batch() {
        return this.gs1Batch;
    }

    public void setGs1Batch(String gs1Batch) {
        this.gs1Batch = gs1Batch;
    }

    private String sourceFacilityId;

    public String getSourceFacilityId() {
        return this.sourceFacilityId;
    }

    public void setSourceFacilityId(String sourceFacilityId) {
        this.sourceFacilityId = sourceFacilityId;
    }

    private String internalId;

    public String getInternalId() {
        return this.internalId;
    }

    public void setInternalId(String internalId) {
        this.internalId = internalId;
    }

    private String palletSscc;

    public String getPalletSscc() {
        return this.palletSscc;
    }

    public void setPalletSscc(String palletSscc) {
        this.palletSscc = palletSscc;
    }

    private OffsetDateTime packDate;

    public OffsetDateTime getPackDate() {
        return this.packDate;
    }

    public void setPackDate(OffsetDateTime packDate) {
        this.packDate = packDate;
    }

    private OffsetDateTime harvestDate;

    public OffsetDateTime getHarvestDate() {
        return this.harvestDate;
    }

    public void setHarvestDate(OffsetDateTime harvestDate) {
        this.harvestDate = harvestDate;
    }

    private String serialNumber;

    public String getSerialNumber() {
        return this.serialNumber;
    }

    public void setSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Set<LotIdentificationState> protectedLotIdentifications = new HashSet<>();

    protected Set<LotIdentificationState> getProtectedLotIdentifications() {
        return this.protectedLotIdentifications;
    }

    protected void setProtectedLotIdentifications(Set<LotIdentificationState> protectedLotIdentifications) {
        this.protectedLotIdentifications = protectedLotIdentifications;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, LotIdentificationState> lotIdentifications;

    public EntityStateCollection.MutableEntityStateCollection<String, LotIdentificationState> getLotIdentifications() {
        return this.lotIdentifications;
    }

    public void setLotIdentifications(EntityStateCollection.MutableEntityStateCollection<String, LotIdentificationState> lotIdentifications) {
        this.lotIdentifications = lotIdentifications;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractLotState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setLotId(((LotEvent.SqlLotEvent) events.get(0)).getLotEventId().getLotId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? LotState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractLotState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        lotIdentifications = new SimpleLotIdentificationStateCollection();
    }

    @Override
    public int hashCode() {
        return getLotId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof LotState) {
            return Objects.equals(this.getLotId(), ((LotState)obj).getLotId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof LotStateCreated) {
            when((LotStateCreated) e);
        } else if (e instanceof LotStateMergePatched) {
            when((LotStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(LotStateCreated e) {
        throwOnWrongEvent(e);

        this.setSupplierId(e.getSupplierId());
        this.setQuantity(e.getQuantity());
        this.setExpirationDate(e.getExpirationDate());
        this.setLotTypeId(e.getLotTypeId());
        this.setActive(e.getActive());
        this.setGtin(e.getGtin());
        this.setGs1Batch(e.getGs1Batch());
        this.setSourceFacilityId(e.getSourceFacilityId());
        this.setInternalId(e.getInternalId());
        this.setPalletSscc(e.getPalletSscc());
        this.setPackDate(e.getPackDate());
        this.setHarvestDate(e.getHarvestDate());
        this.setSerialNumber(e.getSerialNumber());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

        for (LotIdentificationEvent.LotIdentificationStateCreated innerEvent : e.getLotIdentificationEvents()) {
            LotIdentificationState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, LotIdentificationState>)this.getLotIdentifications()).getOrAddDefault(((LotIdentificationEvent.SqlLotIdentificationEvent)innerEvent).getLotIdentificationEventId().getLotIdentificationTypeId());
            ((LotIdentificationState.SqlLotIdentificationState)innerState).mutate(innerEvent);
        }
    }

    public void merge(LotState s) {
        if (s == this) {
            return;
        }
        this.setSupplierId(s.getSupplierId());
        this.setQuantity(s.getQuantity());
        this.setExpirationDate(s.getExpirationDate());
        this.setLotTypeId(s.getLotTypeId());
        this.setActive(s.getActive());
        this.setGtin(s.getGtin());
        this.setGs1Batch(s.getGs1Batch());
        this.setSourceFacilityId(s.getSourceFacilityId());
        this.setInternalId(s.getInternalId());
        this.setPalletSscc(s.getPalletSscc());
        this.setPackDate(s.getPackDate());
        this.setHarvestDate(s.getHarvestDate());
        this.setSerialNumber(s.getSerialNumber());

        if (s.getLotIdentifications() != null) {
            Iterable<LotIdentificationState> iterable;
            if (s.getLotIdentifications().isLazy()) {
                iterable = s.getLotIdentifications().getLoadedStates();
            } else {
                iterable = s.getLotIdentifications();
            }
            if (iterable != null) {
                for (LotIdentificationState ss : iterable) {
                    LotIdentificationState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, LotIdentificationState>)this.getLotIdentifications()).getOrAddDefault(ss.getLotIdentificationTypeId());
                    ((AbstractLotIdentificationState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getLotIdentifications() != null) {
            if (s.getLotIdentifications() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getLotIdentifications()).getRemovedStates() != null) {
                    for (LotIdentificationState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, LotIdentificationState>)s.getLotIdentifications()).getRemovedStates()) {
                        LotIdentificationState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, LotIdentificationState>)this.getLotIdentifications()).getOrAddDefault(ss.getLotIdentificationTypeId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getLotIdentifications()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getLotIdentifications().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getLotIdentifications().stream().map(i -> i.getLotIdentificationTypeId()).collect(java.util.stream.Collectors.toList()));
                    s.getLotIdentifications().forEach(i -> removedStateIds.remove(i.getLotIdentificationTypeId()));
                    for (String i : removedStateIds) {
                        LotIdentificationState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, LotIdentificationState>)this.getLotIdentifications()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getLotIdentifications()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(LotStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getSupplierId() == null) {
            if (e.getIsPropertySupplierIdRemoved() != null && e.getIsPropertySupplierIdRemoved()) {
                this.setSupplierId(null);
            }
        } else {
            this.setSupplierId(e.getSupplierId());
        }
        if (e.getQuantity() == null) {
            if (e.getIsPropertyQuantityRemoved() != null && e.getIsPropertyQuantityRemoved()) {
                this.setQuantity(null);
            }
        } else {
            this.setQuantity(e.getQuantity());
        }
        if (e.getExpirationDate() == null) {
            if (e.getIsPropertyExpirationDateRemoved() != null && e.getIsPropertyExpirationDateRemoved()) {
                this.setExpirationDate(null);
            }
        } else {
            this.setExpirationDate(e.getExpirationDate());
        }
        if (e.getLotTypeId() == null) {
            if (e.getIsPropertyLotTypeIdRemoved() != null && e.getIsPropertyLotTypeIdRemoved()) {
                this.setLotTypeId(null);
            }
        } else {
            this.setLotTypeId(e.getLotTypeId());
        }
        if (e.getActive() == null) {
            if (e.getIsPropertyActiveRemoved() != null && e.getIsPropertyActiveRemoved()) {
                this.setActive(null);
            }
        } else {
            this.setActive(e.getActive());
        }
        if (e.getGtin() == null) {
            if (e.getIsPropertyGtinRemoved() != null && e.getIsPropertyGtinRemoved()) {
                this.setGtin(null);
            }
        } else {
            this.setGtin(e.getGtin());
        }
        if (e.getGs1Batch() == null) {
            if (e.getIsPropertyGs1BatchRemoved() != null && e.getIsPropertyGs1BatchRemoved()) {
                this.setGs1Batch(null);
            }
        } else {
            this.setGs1Batch(e.getGs1Batch());
        }
        if (e.getSourceFacilityId() == null) {
            if (e.getIsPropertySourceFacilityIdRemoved() != null && e.getIsPropertySourceFacilityIdRemoved()) {
                this.setSourceFacilityId(null);
            }
        } else {
            this.setSourceFacilityId(e.getSourceFacilityId());
        }
        if (e.getInternalId() == null) {
            if (e.getIsPropertyInternalIdRemoved() != null && e.getIsPropertyInternalIdRemoved()) {
                this.setInternalId(null);
            }
        } else {
            this.setInternalId(e.getInternalId());
        }
        if (e.getPalletSscc() == null) {
            if (e.getIsPropertyPalletSsccRemoved() != null && e.getIsPropertyPalletSsccRemoved()) {
                this.setPalletSscc(null);
            }
        } else {
            this.setPalletSscc(e.getPalletSscc());
        }
        if (e.getPackDate() == null) {
            if (e.getIsPropertyPackDateRemoved() != null && e.getIsPropertyPackDateRemoved()) {
                this.setPackDate(null);
            }
        } else {
            this.setPackDate(e.getPackDate());
        }
        if (e.getHarvestDate() == null) {
            if (e.getIsPropertyHarvestDateRemoved() != null && e.getIsPropertyHarvestDateRemoved()) {
                this.setHarvestDate(null);
            }
        } else {
            this.setHarvestDate(e.getHarvestDate());
        }
        if (e.getSerialNumber() == null) {
            if (e.getIsPropertySerialNumberRemoved() != null && e.getIsPropertySerialNumberRemoved()) {
                this.setSerialNumber(null);
            }
        } else {
            this.setSerialNumber(e.getSerialNumber());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (LotIdentificationEvent innerEvent : e.getLotIdentificationEvents()) {
            LotIdentificationState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, LotIdentificationState>)this.getLotIdentifications()).getOrAddDefault(((LotIdentificationEvent.SqlLotIdentificationEvent)innerEvent).getLotIdentificationEventId().getLotIdentificationTypeId());
            ((LotIdentificationState.SqlLotIdentificationState)innerState).mutate(innerEvent);
        }
    }

    public void save() {
        if (lotIdentifications instanceof Saveable) {
            ((Saveable)lotIdentifications).save();
        }
    }

    protected void throwOnWrongEvent(LotEvent event) {
        String stateEntityId = this.getLotId(); // Aggregate Id
        String eventEntityId = ((LotEvent.SqlLotEvent)event).getLotEventId().getLotId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((LotEvent.SqlLotEvent)event).getLotEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getLotEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleLotState extends AbstractLotState {

        public SimpleLotState() {
        }

        public SimpleLotState(List<Event> events) {
            super(events);
        }

        public static SimpleLotState newForReapplying() {
            SimpleLotState s = new SimpleLotState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleLotIdentificationStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, LotIdentificationState>, Collection<LotIdentificationState> {

        @Override
        public LotIdentificationState get(String lotIdentificationTypeId) {
            return protectedLotIdentifications.stream().filter(
                            e -> e.getLotIdentificationTypeId().equals(lotIdentificationTypeId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<LotIdentificationState> getLoadedStates() {
            return protectedLotIdentifications;
        }

        @Override
        public LotIdentificationState getOrAddDefault(String lotIdentificationTypeId) {
            LotIdentificationState s = get(lotIdentificationTypeId);
            if (s == null) {
                LotIdentificationId globalId = new LotIdentificationId(getLotId(), lotIdentificationTypeId);
                AbstractLotIdentificationState state = new AbstractLotIdentificationState.SimpleLotIdentificationState();
                state.setLotIdentificationId(globalId);
                state.setCreatedBy(ApplicationContext.current.getRequesterId());
                state.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
                add(state);
                s = state;
            } else {
                AbstractLotIdentificationState state = (AbstractLotIdentificationState) s;
                state.setUpdatedBy(ApplicationContext.current.getRequesterId());
                state.setUpdatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
            }
            return s;
        }

        @Override
        public int size() {
            return protectedLotIdentifications.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedLotIdentifications.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedLotIdentifications.contains(o);
        }

        @Override
        public Iterator<LotIdentificationState> iterator() {
            return protectedLotIdentifications.iterator();
        }

        @Override
        public java.util.stream.Stream<LotIdentificationState> stream() {
            return protectedLotIdentifications.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedLotIdentifications.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedLotIdentifications.toArray(a);
        }

        @Override
        public boolean add(LotIdentificationState s) {
            if (s instanceof AbstractLotIdentificationState) {
                AbstractLotIdentificationState state = (AbstractLotIdentificationState) s;
                state.setProtectedLotState(AbstractLotState.this);
            }
            return protectedLotIdentifications.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractLotIdentificationState) {
                AbstractLotIdentificationState s = (AbstractLotIdentificationState) o;
                s.setProtectedLotState(null);
            }
            return protectedLotIdentifications.remove(o);
        }

        @Override
        public boolean removeState(LotIdentificationState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedLotIdentifications.containsAll(c);
        }

        @Override
        public boolean addAll(Collection<? extends LotIdentificationState> c) {
            return protectedLotIdentifications.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedLotIdentifications.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedLotIdentifications.retainAll(c);
        }

        @Override
        public void clear() {
            protectedLotIdentifications.clear();
        }
    }


}

