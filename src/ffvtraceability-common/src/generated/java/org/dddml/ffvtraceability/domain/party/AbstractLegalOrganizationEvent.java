// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.party;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractLegalOrganizationEvent extends AbstractOrganizationEvent implements OrganizationEvent {
    protected AbstractLegalOrganizationEvent() {
    }

    protected AbstractLegalOrganizationEvent(PartyEventId eventId) {
        super(eventId);
    }

    protected PartyIdentificationEventDao getPartyIdentificationEventDao() {
        return (PartyIdentificationEventDao)ApplicationContext.current.get("partyIdentificationEventDao");
    }

    protected PartyIdentificationEventId newPartyIdentificationEventId(String partyIdentificationTypeId)
    {
        PartyIdentificationEventId eventId = new PartyIdentificationEventId(this.getPartyEventId().getPartyId(), 
            partyIdentificationTypeId, 
            this.getPartyEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(PartyIdentificationEvent.SqlPartyIdentificationEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(PartyEvent.SqlPartyEvent oe, PartyIdentificationEvent.SqlPartyIdentificationEvent e)
    {
        if (!oe.getPartyEventId().getPartyId().equals(e.getPartyIdentificationEventId().getPartyId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id PartyId %1$s but inner id PartyId %2$s", 
                oe.getPartyEventId().getPartyId(), e.getPartyIdentificationEventId().getPartyId());
        }
    }

    public PartyIdentificationEvent.PartyIdentificationStateCreated newPartyIdentificationStateCreated(String partyIdentificationTypeId) {
        return new AbstractPartyIdentificationEvent.SimplePartyIdentificationStateCreated(newPartyIdentificationEventId(partyIdentificationTypeId));
    }

    public PartyIdentificationEvent.PartyIdentificationStateMergePatched newPartyIdentificationStateMergePatched(String partyIdentificationTypeId) {
        return new AbstractPartyIdentificationEvent.SimplePartyIdentificationStateMergePatched(newPartyIdentificationEventId(partyIdentificationTypeId));
    }

    public static class PartyLobEvent extends AbstractPartyEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventType() {
            return "PartyLobEvent";
        }

    }


    public static abstract class AbstractLegalOrganizationStateEvent extends AbstractOrganizationStateEvent implements LegalOrganizationEvent.LegalOrganizationStateEvent {
        private String taxIdNum;

        public String getTaxIdNum()
        {
            return this.taxIdNum;
        }

        public void setTaxIdNum(String taxIdNum)
        {
            this.taxIdNum = taxIdNum;
        }

        protected AbstractLegalOrganizationStateEvent(PartyEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractLegalOrganizationStateCreated extends AbstractLegalOrganizationStateEvent implements LegalOrganizationEvent.LegalOrganizationStateCreated, Saveable
    {
        public AbstractLegalOrganizationStateCreated() {
            this(new PartyEventId());
        }

        public AbstractLegalOrganizationStateCreated(PartyEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

        private Map<PartyIdentificationEventId, PartyIdentificationEvent.PartyIdentificationStateCreated> partyIdentificationEvents = new HashMap<PartyIdentificationEventId, PartyIdentificationEvent.PartyIdentificationStateCreated>();
        
        private Iterable<PartyIdentificationEvent.PartyIdentificationStateCreated> readOnlyPartyIdentificationEvents;

        public Iterable<PartyIdentificationEvent.PartyIdentificationStateCreated> getPartyIdentificationEvents()
        {
            if (!getEventReadOnly())
            {
                return this.partyIdentificationEvents.values();
            }
            else
            {
                if (readOnlyPartyIdentificationEvents != null) { return readOnlyPartyIdentificationEvents; }
                PartyIdentificationEventDao eventDao = getPartyIdentificationEventDao();
                List<PartyIdentificationEvent.PartyIdentificationStateCreated> eL = new ArrayList<PartyIdentificationEvent.PartyIdentificationStateCreated>();
                for (PartyIdentificationEvent e : eventDao.findByPartyEventId(this.getPartyEventId()))
                {
                    ((PartyIdentificationEvent.SqlPartyIdentificationEvent)e).setEventReadOnly(true);
                    eL.add((PartyIdentificationEvent.PartyIdentificationStateCreated)e);
                }
                return (readOnlyPartyIdentificationEvents = eL);
            }
        }

        public void setPartyIdentificationEvents(Iterable<PartyIdentificationEvent.PartyIdentificationStateCreated> es)
        {
            if (es != null)
            {
                for (PartyIdentificationEvent.PartyIdentificationStateCreated e : es)
                {
                    addPartyIdentificationEvent(e);
                }
            }
            else { this.partyIdentificationEvents.clear(); }
        }
        
        public void addPartyIdentificationEvent(PartyIdentificationEvent.PartyIdentificationStateCreated e)
        {
            throwOnInconsistentEventIds((PartyIdentificationEvent.SqlPartyIdentificationEvent)e);
            this.partyIdentificationEvents.put(((PartyIdentificationEvent.SqlPartyIdentificationEvent)e).getPartyIdentificationEventId(), e);
        }

        public void save()
        {
            for (PartyIdentificationEvent.PartyIdentificationStateCreated e : this.getPartyIdentificationEvents()) {
                getPartyIdentificationEventDao().save(e);
            }
        }
    }


    public static abstract class AbstractLegalOrganizationStateMergePatched extends AbstractLegalOrganizationStateEvent implements LegalOrganizationEvent.LegalOrganizationStateMergePatched, Saveable
    {
        public AbstractLegalOrganizationStateMergePatched() {
            this(new PartyEventId());
        }

        public AbstractLegalOrganizationStateMergePatched(PartyEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyTaxIdNumRemoved;

        public Boolean getIsPropertyTaxIdNumRemoved() {
            return this.isPropertyTaxIdNumRemoved;
        }

        public void setIsPropertyTaxIdNumRemoved(Boolean removed) {
            this.isPropertyTaxIdNumRemoved = removed;
        }

        private Boolean isPropertyOrganizationNameRemoved;

        public Boolean getIsPropertyOrganizationNameRemoved() {
            return this.isPropertyOrganizationNameRemoved;
        }

        public void setIsPropertyOrganizationNameRemoved(Boolean removed) {
            this.isPropertyOrganizationNameRemoved = removed;
        }

        private Boolean isPropertyPartyTypeIdRemoved;

        public Boolean getIsPropertyPartyTypeIdRemoved() {
            return this.isPropertyPartyTypeIdRemoved;
        }

        public void setIsPropertyPartyTypeIdRemoved(Boolean removed) {
            this.isPropertyPartyTypeIdRemoved = removed;
        }

        private Boolean isPropertyPrimaryRoleTypeIdRemoved;

        public Boolean getIsPropertyPrimaryRoleTypeIdRemoved() {
            return this.isPropertyPrimaryRoleTypeIdRemoved;
        }

        public void setIsPropertyPrimaryRoleTypeIdRemoved(Boolean removed) {
            this.isPropertyPrimaryRoleTypeIdRemoved = removed;
        }

        private Boolean isPropertyExternalIdRemoved;

        public Boolean getIsPropertyExternalIdRemoved() {
            return this.isPropertyExternalIdRemoved;
        }

        public void setIsPropertyExternalIdRemoved(Boolean removed) {
            this.isPropertyExternalIdRemoved = removed;
        }

        private Boolean isPropertyPreferredCurrencyUomIdRemoved;

        public Boolean getIsPropertyPreferredCurrencyUomIdRemoved() {
            return this.isPropertyPreferredCurrencyUomIdRemoved;
        }

        public void setIsPropertyPreferredCurrencyUomIdRemoved(Boolean removed) {
            this.isPropertyPreferredCurrencyUomIdRemoved = removed;
        }

        private Boolean isPropertyDescriptionRemoved;

        public Boolean getIsPropertyDescriptionRemoved() {
            return this.isPropertyDescriptionRemoved;
        }

        public void setIsPropertyDescriptionRemoved(Boolean removed) {
            this.isPropertyDescriptionRemoved = removed;
        }

        private Boolean isPropertyStatusIdRemoved;

        public Boolean getIsPropertyStatusIdRemoved() {
            return this.isPropertyStatusIdRemoved;
        }

        public void setIsPropertyStatusIdRemoved(Boolean removed) {
            this.isPropertyStatusIdRemoved = removed;
        }


        private Map<PartyIdentificationEventId, PartyIdentificationEvent> partyIdentificationEvents = new HashMap<PartyIdentificationEventId, PartyIdentificationEvent>();
        
        private Iterable<PartyIdentificationEvent> readOnlyPartyIdentificationEvents;

        public Iterable<PartyIdentificationEvent> getPartyIdentificationEvents()
        {
            if (!getEventReadOnly())
            {
                return this.partyIdentificationEvents.values();
            }
            else
            {
                if (readOnlyPartyIdentificationEvents != null) { return readOnlyPartyIdentificationEvents; }
                PartyIdentificationEventDao eventDao = getPartyIdentificationEventDao();
                List<PartyIdentificationEvent> eL = new ArrayList<PartyIdentificationEvent>();
                for (PartyIdentificationEvent e : eventDao.findByPartyEventId(this.getPartyEventId()))
                {
                    ((PartyIdentificationEvent.SqlPartyIdentificationEvent)e).setEventReadOnly(true);
                    eL.add((PartyIdentificationEvent)e);
                }
                return (readOnlyPartyIdentificationEvents = eL);
            }
        }

        public void setPartyIdentificationEvents(Iterable<PartyIdentificationEvent> es)
        {
            if (es != null)
            {
                for (PartyIdentificationEvent e : es)
                {
                    addPartyIdentificationEvent(e);
                }
            }
            else { this.partyIdentificationEvents.clear(); }
        }
        
        public void addPartyIdentificationEvent(PartyIdentificationEvent e)
        {
            throwOnInconsistentEventIds((PartyIdentificationEvent.SqlPartyIdentificationEvent)e);
            this.partyIdentificationEvents.put(((PartyIdentificationEvent.SqlPartyIdentificationEvent)e).getPartyIdentificationEventId(), e);
        }

        public void save()
        {
            for (PartyIdentificationEvent e : this.getPartyIdentificationEvents()) {
                getPartyIdentificationEventDao().save(e);
            }
        }
    }



    public static class SimpleLegalOrganizationStateCreated extends AbstractLegalOrganizationStateCreated
    {
        public SimpleLegalOrganizationStateCreated() {
        }

        public SimpleLegalOrganizationStateCreated(PartyEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleLegalOrganizationStateMergePatched extends AbstractLegalOrganizationStateMergePatched
    {
        public SimpleLegalOrganizationStateMergePatched() {
        }

        public SimpleLegalOrganizationStateMergePatched(PartyEventId eventId) {
            super(eventId);
        }
    }

}

