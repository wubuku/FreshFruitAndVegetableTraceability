// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.documentnumbergenerator;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface DocumentNumberGeneratorCommand extends Command {

    String getGeneratorId();

    void setGeneratorId(String generatorId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(DocumentNumberGeneratorState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((DocumentNumberGeneratorCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (isCreationCommand((DocumentNumberGeneratorCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(DocumentNumberGeneratorCommand c) {
        if ((c instanceof DocumentNumberGeneratorCommand.CreateDocumentNumberGenerator) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(DocumentNumberGeneratorState.VERSION_NULL)))
            return true;
        if ((c instanceof DocumentNumberGeneratorCommand.MergePatchDocumentNumberGenerator))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
            if (commandType.equals("GenerateNextNumber"))
                return false;
        }

        if (c.getVersion().equals(DocumentNumberGeneratorState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchDocumentNumberGenerator extends DocumentNumberGeneratorCommand {
        String getPrefix();

        void setPrefix(String prefix);

        String getDateFormat();

        void setDateFormat(String dateFormat);

        String getTimeZoneId();

        void setTimeZoneId(String timeZoneId);

        Long getSequenceLength();

        void setSequenceLength(Long sequenceLength);

        String getLastGeneratedDate();

        void setLastGeneratedDate(String lastGeneratedDate);

        Long getCurrentSequence();

        void setCurrentSequence(Long currentSequence);

        String getDescription();

        void setDescription(String description);

    }

    interface CreateDocumentNumberGenerator extends CreateOrMergePatchDocumentNumberGenerator {
    }

    interface MergePatchDocumentNumberGenerator extends CreateOrMergePatchDocumentNumberGenerator {
        Boolean getIsPropertyPrefixRemoved();

        void setIsPropertyPrefixRemoved(Boolean removed);

        Boolean getIsPropertyDateFormatRemoved();

        void setIsPropertyDateFormatRemoved(Boolean removed);

        Boolean getIsPropertyTimeZoneIdRemoved();

        void setIsPropertyTimeZoneIdRemoved(Boolean removed);

        Boolean getIsPropertySequenceLengthRemoved();

        void setIsPropertySequenceLengthRemoved(Boolean removed);

        Boolean getIsPropertyLastGeneratedDateRemoved();

        void setIsPropertyLastGeneratedDateRemoved(Boolean removed);

        Boolean getIsPropertyCurrentSequenceRemoved();

        void setIsPropertyCurrentSequenceRemoved(Boolean removed);

        Boolean getIsPropertyDescriptionRemoved();

        void setIsPropertyDescriptionRemoved(Boolean removed);


    }

    interface DeleteDocumentNumberGenerator extends DocumentNumberGeneratorCommand {
    }

}

