// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.partycontactmech.PartyContactMechEvent.*;

public abstract class AbstractPartyContactMechState implements PartyContactMechState.SqlPartyContactMechState, Saveable {

    private PartyContactMechId partyContactMechId;

    public PartyContactMechId getPartyContactMechId() {
        return this.partyContactMechId;
    }

    public void setPartyContactMechId(PartyContactMechId partyContactMechId) {
        this.partyContactMechId = partyContactMechId;
    }

    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate() {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate) {
        this.thruDate = thruDate;
    }

    private String roleTypeId;

    public String getRoleTypeId() {
        return this.roleTypeId;
    }

    public void setRoleTypeId(String roleTypeId) {
        this.roleTypeId = roleTypeId;
    }

    private String allowSolicitation;

    public String getAllowSolicitation() {
        return this.allowSolicitation;
    }

    public void setAllowSolicitation(String allowSolicitation) {
        this.allowSolicitation = allowSolicitation;
    }

    private String extension;

    public String getExtension() {
        return this.extension;
    }

    public void setExtension(String extension) {
        this.extension = extension;
    }

    private String verified;

    public String getVerified() {
        return this.verified;
    }

    public void setVerified(String verified) {
        this.verified = verified;
    }

    private String comments;

    public String getComments() {
        return this.comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    private Long yearsWithContactMech;

    public Long getYearsWithContactMech() {
        return this.yearsWithContactMech;
    }

    public void setYearsWithContactMech(Long yearsWithContactMech) {
        this.yearsWithContactMech = yearsWithContactMech;
    }

    private Long monthsWithContactMech;

    public Long getMonthsWithContactMech() {
        return this.monthsWithContactMech;
    }

    public void setMonthsWithContactMech(Long monthsWithContactMech) {
        this.monthsWithContactMech = monthsWithContactMech;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Set<PartyContactMechPurposeState> protectedPartyContactMechPurposes = new HashSet<>();

    protected Set<PartyContactMechPurposeState> getProtectedPartyContactMechPurposes() {
        return this.protectedPartyContactMechPurposes;
    }

    protected void setProtectedPartyContactMechPurposes(Set<PartyContactMechPurposeState> protectedPartyContactMechPurposes) {
        this.protectedPartyContactMechPurposes = protectedPartyContactMechPurposes;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, PartyContactMechPurposeState> partyContactMechPurposes;

    public EntityStateCollection.MutableEntityStateCollection<String, PartyContactMechPurposeState> getPartyContactMechPurposes() {
        return this.partyContactMechPurposes;
    }

    public void setPartyContactMechPurposes(EntityStateCollection.MutableEntityStateCollection<String, PartyContactMechPurposeState> partyContactMechPurposes) {
        this.partyContactMechPurposes = partyContactMechPurposes;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractPartyContactMechState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setPartyContactMechId(((PartyContactMechEvent.SqlPartyContactMechEvent) events.get(0)).getPartyContactMechEventId().getPartyContactMechId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? PartyContactMechState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractPartyContactMechState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        partyContactMechPurposes = new SimplePartyContactMechPurposeStateCollection();
    }

    @Override
    public int hashCode() {
        return getPartyContactMechId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof PartyContactMechState) {
            return Objects.equals(this.getPartyContactMechId(), ((PartyContactMechState)obj).getPartyContactMechId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof PartyContactMechStateCreated) {
            when((PartyContactMechStateCreated) e);
        } else if (e instanceof PartyContactMechStateMergePatched) {
            when((PartyContactMechStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(PartyContactMechStateCreated e) {
        throwOnWrongEvent(e);

        this.setThruDate(e.getThruDate());
        this.setRoleTypeId(e.getRoleTypeId());
        this.setAllowSolicitation(e.getAllowSolicitation());
        this.setExtension(e.getExtension());
        this.setVerified(e.getVerified());
        this.setComments(e.getComments());
        this.setYearsWithContactMech(e.getYearsWithContactMech());
        this.setMonthsWithContactMech(e.getMonthsWithContactMech());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

        for (PartyContactMechPurposeEvent.PartyContactMechPurposeStateCreated innerEvent : e.getPartyContactMechPurposeEvents()) {
            PartyContactMechPurposeState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, PartyContactMechPurposeState>)this.getPartyContactMechPurposes()).getOrAddDefault(((PartyContactMechPurposeEvent.SqlPartyContactMechPurposeEvent)innerEvent).getPartyContactMechPurposeEventId().getContactMechPurposeTypeId());
            ((PartyContactMechPurposeState.SqlPartyContactMechPurposeState)innerState).mutate(innerEvent);
        }
    }

    public void merge(PartyContactMechState s) {
        if (s == this) {
            return;
        }
        this.setThruDate(s.getThruDate());
        this.setRoleTypeId(s.getRoleTypeId());
        this.setAllowSolicitation(s.getAllowSolicitation());
        this.setExtension(s.getExtension());
        this.setVerified(s.getVerified());
        this.setComments(s.getComments());
        this.setYearsWithContactMech(s.getYearsWithContactMech());
        this.setMonthsWithContactMech(s.getMonthsWithContactMech());

        if (s.getPartyContactMechPurposes() != null) {
            Iterable<PartyContactMechPurposeState> iterable;
            if (s.getPartyContactMechPurposes().isLazy()) {
                iterable = s.getPartyContactMechPurposes().getLoadedStates();
            } else {
                iterable = s.getPartyContactMechPurposes();
            }
            if (iterable != null) {
                for (PartyContactMechPurposeState ss : iterable) {
                    PartyContactMechPurposeState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, PartyContactMechPurposeState>)this.getPartyContactMechPurposes()).getOrAddDefault(ss.getContactMechPurposeTypeId());
                    ((AbstractPartyContactMechPurposeState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getPartyContactMechPurposes() != null) {
            if (s.getPartyContactMechPurposes() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getPartyContactMechPurposes()).getRemovedStates() != null) {
                    for (PartyContactMechPurposeState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, PartyContactMechPurposeState>)s.getPartyContactMechPurposes()).getRemovedStates()) {
                        PartyContactMechPurposeState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, PartyContactMechPurposeState>)this.getPartyContactMechPurposes()).getOrAddDefault(ss.getContactMechPurposeTypeId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getPartyContactMechPurposes()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getPartyContactMechPurposes().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getPartyContactMechPurposes().stream().map(i -> i.getContactMechPurposeTypeId()).collect(java.util.stream.Collectors.toList()));
                    s.getPartyContactMechPurposes().forEach(i -> removedStateIds.remove(i.getContactMechPurposeTypeId()));
                    for (String i : removedStateIds) {
                        PartyContactMechPurposeState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, PartyContactMechPurposeState>)this.getPartyContactMechPurposes()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getPartyContactMechPurposes()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(PartyContactMechStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getThruDate() == null) {
            if (e.getIsPropertyThruDateRemoved() != null && e.getIsPropertyThruDateRemoved()) {
                this.setThruDate(null);
            }
        } else {
            this.setThruDate(e.getThruDate());
        }
        if (e.getRoleTypeId() == null) {
            if (e.getIsPropertyRoleTypeIdRemoved() != null && e.getIsPropertyRoleTypeIdRemoved()) {
                this.setRoleTypeId(null);
            }
        } else {
            this.setRoleTypeId(e.getRoleTypeId());
        }
        if (e.getAllowSolicitation() == null) {
            if (e.getIsPropertyAllowSolicitationRemoved() != null && e.getIsPropertyAllowSolicitationRemoved()) {
                this.setAllowSolicitation(null);
            }
        } else {
            this.setAllowSolicitation(e.getAllowSolicitation());
        }
        if (e.getExtension() == null) {
            if (e.getIsPropertyExtensionRemoved() != null && e.getIsPropertyExtensionRemoved()) {
                this.setExtension(null);
            }
        } else {
            this.setExtension(e.getExtension());
        }
        if (e.getVerified() == null) {
            if (e.getIsPropertyVerifiedRemoved() != null && e.getIsPropertyVerifiedRemoved()) {
                this.setVerified(null);
            }
        } else {
            this.setVerified(e.getVerified());
        }
        if (e.getComments() == null) {
            if (e.getIsPropertyCommentsRemoved() != null && e.getIsPropertyCommentsRemoved()) {
                this.setComments(null);
            }
        } else {
            this.setComments(e.getComments());
        }
        if (e.getYearsWithContactMech() == null) {
            if (e.getIsPropertyYearsWithContactMechRemoved() != null && e.getIsPropertyYearsWithContactMechRemoved()) {
                this.setYearsWithContactMech(null);
            }
        } else {
            this.setYearsWithContactMech(e.getYearsWithContactMech());
        }
        if (e.getMonthsWithContactMech() == null) {
            if (e.getIsPropertyMonthsWithContactMechRemoved() != null && e.getIsPropertyMonthsWithContactMechRemoved()) {
                this.setMonthsWithContactMech(null);
            }
        } else {
            this.setMonthsWithContactMech(e.getMonthsWithContactMech());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (PartyContactMechPurposeEvent innerEvent : e.getPartyContactMechPurposeEvents()) {
            PartyContactMechPurposeState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, PartyContactMechPurposeState>)this.getPartyContactMechPurposes()).getOrAddDefault(((PartyContactMechPurposeEvent.SqlPartyContactMechPurposeEvent)innerEvent).getPartyContactMechPurposeEventId().getContactMechPurposeTypeId());
            ((PartyContactMechPurposeState.SqlPartyContactMechPurposeState)innerState).mutate(innerEvent);
        }
    }

    public void save() {
        if (partyContactMechPurposes instanceof Saveable) {
            ((Saveable)partyContactMechPurposes).save();
        }
    }

    protected void throwOnWrongEvent(PartyContactMechEvent event) {
        PartyContactMechId stateEntityId = this.getPartyContactMechId(); // Aggregate Id
        PartyContactMechId eventEntityId = ((PartyContactMechEvent.SqlPartyContactMechEvent)event).getPartyContactMechEventId().getPartyContactMechId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((PartyContactMechEvent.SqlPartyContactMechEvent)event).getPartyContactMechEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getPartyContactMechEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimplePartyContactMechState extends AbstractPartyContactMechState {

        public SimplePartyContactMechState() {
        }

        public SimplePartyContactMechState(List<Event> events) {
            super(events);
        }

        public static SimplePartyContactMechState newForReapplying() {
            SimplePartyContactMechState s = new SimplePartyContactMechState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimplePartyContactMechPurposeStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, PartyContactMechPurposeState>, Collection<PartyContactMechPurposeState> {

        @Override
        public PartyContactMechPurposeState get(String contactMechPurposeTypeId) {
            return protectedPartyContactMechPurposes.stream().filter(
                            e -> e.getContactMechPurposeTypeId().equals(contactMechPurposeTypeId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<PartyContactMechPurposeState> getLoadedStates() {
            return protectedPartyContactMechPurposes;
        }

        @Override
        public PartyContactMechPurposeState getOrAddDefault(String contactMechPurposeTypeId) {
            PartyContactMechPurposeState s = get(contactMechPurposeTypeId);
            if (s == null) {
                PartyContactMechPurposeId globalId = new PartyContactMechPurposeId(getPartyContactMechId(), contactMechPurposeTypeId);
                AbstractPartyContactMechPurposeState state = new AbstractPartyContactMechPurposeState.SimplePartyContactMechPurposeState();
                state.setPartyContactMechPurposeId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedPartyContactMechPurposes.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedPartyContactMechPurposes.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedPartyContactMechPurposes.contains(o);
        }

        @Override
        public Iterator<PartyContactMechPurposeState> iterator() {
            return protectedPartyContactMechPurposes.iterator();
        }

        @Override
        public java.util.stream.Stream<PartyContactMechPurposeState> stream() {
            return protectedPartyContactMechPurposes.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedPartyContactMechPurposes.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedPartyContactMechPurposes.toArray(a);
        }

        @Override
        public boolean add(PartyContactMechPurposeState s) {
            if (s instanceof AbstractPartyContactMechPurposeState) {
                AbstractPartyContactMechPurposeState state = (AbstractPartyContactMechPurposeState) s;
                state.setProtectedPartyContactMechState(AbstractPartyContactMechState.this);
            }
            return protectedPartyContactMechPurposes.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractPartyContactMechPurposeState) {
                AbstractPartyContactMechPurposeState s = (AbstractPartyContactMechPurposeState) o;
                s.setProtectedPartyContactMechState(null);
            }
            return protectedPartyContactMechPurposes.remove(o);
        }

        @Override
        public boolean removeState(PartyContactMechPurposeState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedPartyContactMechPurposes.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends PartyContactMechPurposeState> c) {
            return protectedPartyContactMechPurposes.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedPartyContactMechPurposes.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedPartyContactMechPurposes.retainAll(c);
        }

        @Override
        public void clear() {
            protectedPartyContactMechPurposes.clear();
        }
    }


}

