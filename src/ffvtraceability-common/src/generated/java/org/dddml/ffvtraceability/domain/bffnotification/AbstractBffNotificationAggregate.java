// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.bffnotification;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractBffNotificationAggregate extends AbstractAggregate implements BffNotificationAggregate {
    private BffNotificationState.MutableBffNotificationState state;

    protected List<Event> changes = new ArrayList<Event>();

    public AbstractBffNotificationAggregate(BffNotificationState state) {
        this.state = (BffNotificationState.MutableBffNotificationState)state;
    }

    public BffNotificationState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(BffNotificationCommand.CreateBffNotification c) {
        if (c.getVersion() == null) { c.setVersion(BffNotificationState.VERSION_NULL); }
        BffNotificationEvent e = map(c);
        apply(e);
    }

    public void mergePatch(BffNotificationCommand.MergePatchBffNotification c) {
        BffNotificationEvent e = map(c);
        apply(e);
    }

    public void delete(BffNotificationCommand.DeleteBffNotification c) {
        BffNotificationEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        BffNotificationCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof BffNotificationEvent) {
            BffNotificationEvent ee = (BffNotificationEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected BffNotificationEvent map(BffNotificationCommand.CreateBffNotification c) {
        BffNotificationEventId stateEventId = new BffNotificationEventId(c.getBffNotificationId(), c.getVersion());
        BffNotificationEvent.BffNotificationStateCreated e = newBffNotificationStateCreated(stateEventId);
        e.setNotificationTypeId(c.getNotificationTypeId());
        e.setReferenceDocumentTypeId(c.getReferenceDocumentTypeId());
        e.setReferenceDocumentId(c.getReferenceDocumentId());
        e.setReferenceDocumentNumber(c.getReferenceDocumentNumber());
        e.setNotificationContent(c.getNotificationContent());
        e.setStatusId(c.getStatusId());
        e.setPriority(c.getPriority());
        e.setRecipientId(c.getRecipientId());
        ((AbstractBffNotificationEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected BffNotificationEvent map(BffNotificationCommand.MergePatchBffNotification c) {
        BffNotificationEventId stateEventId = new BffNotificationEventId(c.getBffNotificationId(), c.getVersion());
        BffNotificationEvent.BffNotificationStateMergePatched e = newBffNotificationStateMergePatched(stateEventId);
        e.setNotificationTypeId(c.getNotificationTypeId());
        e.setReferenceDocumentTypeId(c.getReferenceDocumentTypeId());
        e.setReferenceDocumentId(c.getReferenceDocumentId());
        e.setReferenceDocumentNumber(c.getReferenceDocumentNumber());
        e.setNotificationContent(c.getNotificationContent());
        e.setStatusId(c.getStatusId());
        e.setPriority(c.getPriority());
        e.setRecipientId(c.getRecipientId());
        e.setIsPropertyNotificationTypeIdRemoved(c.getIsPropertyNotificationTypeIdRemoved());
        e.setIsPropertyReferenceDocumentTypeIdRemoved(c.getIsPropertyReferenceDocumentTypeIdRemoved());
        e.setIsPropertyReferenceDocumentIdRemoved(c.getIsPropertyReferenceDocumentIdRemoved());
        e.setIsPropertyReferenceDocumentNumberRemoved(c.getIsPropertyReferenceDocumentNumberRemoved());
        e.setIsPropertyNotificationContentRemoved(c.getIsPropertyNotificationContentRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyPriorityRemoved(c.getIsPropertyPriorityRemoved());
        e.setIsPropertyRecipientIdRemoved(c.getIsPropertyRecipientIdRemoved());
        ((AbstractBffNotificationEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected BffNotificationEvent map(BffNotificationCommand.DeleteBffNotification c) {
        BffNotificationEventId stateEventId = new BffNotificationEventId(c.getBffNotificationId(), c.getVersion());
        BffNotificationEvent.BffNotificationStateDeleted e = newBffNotificationStateDeleted(stateEventId);
        ((AbstractBffNotificationEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected BffNotificationEvent.BffNotificationStateCreated newBffNotificationStateCreated(Long version, String commandId, String requesterId) {
        BffNotificationEventId stateEventId = new BffNotificationEventId(this.state.getBffNotificationId(), version);
        BffNotificationEvent.BffNotificationStateCreated e = newBffNotificationStateCreated(stateEventId);
        ((AbstractBffNotificationEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected BffNotificationEvent.BffNotificationStateMergePatched newBffNotificationStateMergePatched(Long version, String commandId, String requesterId) {
        BffNotificationEventId stateEventId = new BffNotificationEventId(this.state.getBffNotificationId(), version);
        BffNotificationEvent.BffNotificationStateMergePatched e = newBffNotificationStateMergePatched(stateEventId);
        ((AbstractBffNotificationEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected BffNotificationEvent.BffNotificationStateDeleted newBffNotificationStateDeleted(Long version, String commandId, String requesterId) {
        BffNotificationEventId stateEventId = new BffNotificationEventId(this.state.getBffNotificationId(), version);
        BffNotificationEvent.BffNotificationStateDeleted e = newBffNotificationStateDeleted(stateEventId);
        ((AbstractBffNotificationEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected BffNotificationEvent.BffNotificationStateCreated newBffNotificationStateCreated(BffNotificationEventId stateEventId) {
        return new AbstractBffNotificationEvent.SimpleBffNotificationStateCreated(stateEventId);
    }

    protected BffNotificationEvent.BffNotificationStateMergePatched newBffNotificationStateMergePatched(BffNotificationEventId stateEventId) {
        return new AbstractBffNotificationEvent.SimpleBffNotificationStateMergePatched(stateEventId);
    }

    protected BffNotificationEvent.BffNotificationStateDeleted newBffNotificationStateDeleted(BffNotificationEventId stateEventId) {
        return new AbstractBffNotificationEvent.SimpleBffNotificationStateDeleted(stateEventId);
    }


    public static class SimpleBffNotificationAggregate extends AbstractBffNotificationAggregate {
        public SimpleBffNotificationAggregate(BffNotificationState state) {
            super(state);
        }

    }

}

