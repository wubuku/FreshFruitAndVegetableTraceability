// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.physicalinventory;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchPhysicalInventoryDto extends AbstractPhysicalInventoryCommandDto implements PhysicalInventoryCommand.CreateOrMergePatchPhysicalInventory {

    /**
     * Physical Inventory Date
     */
    private OffsetDateTime physicalInventoryDate;

    public OffsetDateTime getPhysicalInventoryDate()
    {
        return this.physicalInventoryDate;
    }

    public void setPhysicalInventoryDate(OffsetDateTime physicalInventoryDate)
    {
        this.physicalInventoryDate = physicalInventoryDate;
    }

    /**
     * Party Id
     */
    private String partyId;

    public String getPartyId()
    {
        return this.partyId;
    }

    public void setPartyId(String partyId)
    {
        this.partyId = partyId;
    }

    /**
     * General Comments
     */
    private String generalComments;

    public String getGeneralComments()
    {
        return this.generalComments;
    }

    public void setGeneralComments(String generalComments)
    {
        this.generalComments = generalComments;
    }


    private CreateOrMergePatchInventoryItemVarianceDto[] inventoryItemVariances = new CreateOrMergePatchInventoryItemVarianceDto[0];

    public CreateOrMergePatchInventoryItemVarianceDto[] getInventoryItemVariances()
    {
        return this.inventoryItemVariances;
    }

    public void setInventoryItemVariances(CreateOrMergePatchInventoryItemVarianceDto[] inventoryItemVariances)
    {
        this.inventoryItemVariances = inventoryItemVariances;
    }

    private Boolean isPropertyPhysicalInventoryDateRemoved;

    public Boolean getIsPropertyPhysicalInventoryDateRemoved()
    {
        return this.isPropertyPhysicalInventoryDateRemoved;
    }

    public void setIsPropertyPhysicalInventoryDateRemoved(Boolean removed)
    {
        this.isPropertyPhysicalInventoryDateRemoved = removed;
    }

    private Boolean isPropertyPartyIdRemoved;

    public Boolean getIsPropertyPartyIdRemoved()
    {
        return this.isPropertyPartyIdRemoved;
    }

    public void setIsPropertyPartyIdRemoved(Boolean removed)
    {
        this.isPropertyPartyIdRemoved = removed;
    }

    private Boolean isPropertyGeneralCommentsRemoved;

    public Boolean getIsPropertyGeneralCommentsRemoved()
    {
        return this.isPropertyGeneralCommentsRemoved;
    }

    public void setIsPropertyGeneralCommentsRemoved(Boolean removed)
    {
        this.isPropertyGeneralCommentsRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchPhysicalInventory command)
    {
        ((AbstractPhysicalInventoryCommandDto) this).copyTo(command);
        command.setPhysicalInventoryDate(this.getPhysicalInventoryDate());
        command.setPartyId(this.getPartyId());
        command.setGeneralComments(this.getGeneralComments());
    }

    public PhysicalInventoryCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractPhysicalInventoryCommand.SimpleCreatePhysicalInventory command = new AbstractPhysicalInventoryCommand.SimpleCreatePhysicalInventory();
            copyTo((AbstractPhysicalInventoryCommand.AbstractCreatePhysicalInventory) command);
            if (this.getInventoryItemVariances() != null) {
                for (CreateOrMergePatchInventoryItemVarianceDto cmd : this.getInventoryItemVariances()) {
                    cmd.setCommandType(COMMAND_TYPE_CREATE);
                    command.getInventoryItemVariances().add((InventoryItemVarianceCommand.CreateInventoryItemVariance) cmd.toCommand());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractPhysicalInventoryCommand.SimpleMergePatchPhysicalInventory command = new AbstractPhysicalInventoryCommand.SimpleMergePatchPhysicalInventory();
            copyTo((AbstractPhysicalInventoryCommand.SimpleMergePatchPhysicalInventory) command);
            if (this.getInventoryItemVariances() != null) {
                for (CreateOrMergePatchInventoryItemVarianceDto cmd : this.getInventoryItemVariances()) {
                    command.getInventoryItemVarianceCommands().add(cmd.toCommand());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public PhysicalInventoryCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreatePhysicalInventoryDto command = new CreatePhysicalInventoryDto();
            copyTo((CreatePhysicalInventory) command);
            if (this.getInventoryItemVariances() != null) {
                for (CreateOrMergePatchInventoryItemVarianceDto cmd : this.getInventoryItemVariances()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreateInventoryItemVarianceCommands().add((InventoryItemVarianceCommand.CreateInventoryItemVariance) cmd.toSubclass());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchPhysicalInventoryDto command = new MergePatchPhysicalInventoryDto();
            copyTo((MergePatchPhysicalInventory) command);
            if (this.getInventoryItemVariances() != null) {
                for (CreateOrMergePatchInventoryItemVarianceDto cmd : this.getInventoryItemVariances()) {
                    command.getInventoryItemVarianceCommands().add(cmd.toSubclass());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreatePhysicalInventory command)
    {
        copyTo((CreateOrMergePatchPhysicalInventory) command);
    }

    public void copyTo(MergePatchPhysicalInventory command)
    {
        copyTo((CreateOrMergePatchPhysicalInventory) command);
        command.setIsPropertyPhysicalInventoryDateRemoved(this.getIsPropertyPhysicalInventoryDateRemoved());
        command.setIsPropertyPartyIdRemoved(this.getIsPropertyPartyIdRemoved());
        command.setIsPropertyGeneralCommentsRemoved(this.getIsPropertyGeneralCommentsRemoved());
    }

    public static class CreatePhysicalInventoryDto extends CreateOrMergePatchPhysicalInventoryDto implements PhysicalInventoryCommand.CreatePhysicalInventory
    {
        public CreatePhysicalInventoryDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public PhysicalInventoryCommand.CreatePhysicalInventory toCreatePhysicalInventory()
        {
            return (PhysicalInventoryCommand.CreatePhysicalInventory) toCommand();
        }


        @Override
        public CreateInventoryItemVarianceCommandCollection getCreateInventoryItemVarianceCommands() {
            return new CreateInventoryItemVarianceCommandCollection() {
                @Override
                public void add(InventoryItemVarianceCommand.CreateInventoryItemVariance c) {
                    java.util.List<CreateOrMergePatchInventoryItemVarianceDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getInventoryItemVariances()));
                    list.add((CreateOrMergePatchInventoryItemVarianceDto) c);
                    setInventoryItemVariances(list.toArray(new CreateOrMergePatchInventoryItemVarianceDto[0]));
                }

                @Override
                public void remove(InventoryItemVarianceCommand.CreateInventoryItemVariance c) {
                    java.util.List<CreateOrMergePatchInventoryItemVarianceDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getInventoryItemVariances()));
                    list.remove((CreateOrMergePatchInventoryItemVarianceDto) c);
                    setInventoryItemVariances(list.toArray(new CreateOrMergePatchInventoryItemVarianceDto[0]));
                }

                @Override
                public void clear() {
                    setInventoryItemVariances(new CreateOrMergePatchInventoryItemVarianceDto[]{});
                }

                @Override
                public java.util.Iterator<InventoryItemVarianceCommand.CreateInventoryItemVariance> iterator() {
                    return java.util.Arrays.stream(getInventoryItemVariances())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (InventoryItemVarianceCommand.CreateInventoryItemVariance) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public InventoryItemVarianceCommand.CreateInventoryItemVariance newCreateInventoryItemVariance() {
            return new CreateOrMergePatchInventoryItemVarianceDto.CreateInventoryItemVarianceDto();
        }

    }

    public static class MergePatchPhysicalInventoryDto extends CreateOrMergePatchPhysicalInventoryDto implements PhysicalInventoryCommand.MergePatchPhysicalInventory
    {
        public MergePatchPhysicalInventoryDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public PhysicalInventoryCommand.MergePatchPhysicalInventory toMergePatchPhysicalInventory()
        {
            return (PhysicalInventoryCommand.MergePatchPhysicalInventory) toCommand();
        }


        @Override
        public InventoryItemVarianceCommandCollection getInventoryItemVarianceCommands() {
            return new InventoryItemVarianceCommandCollection() {
                @Override
                public void add(InventoryItemVarianceCommand c) {
                    java.util.List<CreateOrMergePatchInventoryItemVarianceDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getInventoryItemVariances()));
                    list.add((CreateOrMergePatchInventoryItemVarianceDto) c);
                    setInventoryItemVariances(list.toArray(new CreateOrMergePatchInventoryItemVarianceDto[0]));
                }

                @Override
                public void remove(InventoryItemVarianceCommand c) {
                    java.util.List<CreateOrMergePatchInventoryItemVarianceDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getInventoryItemVariances()));
                    list.remove((CreateOrMergePatchInventoryItemVarianceDto) c);
                    setInventoryItemVariances(list.toArray(new CreateOrMergePatchInventoryItemVarianceDto[0]));
                }

                @Override
                public void clear() {
                    setInventoryItemVariances(new CreateOrMergePatchInventoryItemVarianceDto[]{});
                }

                @Override
                public java.util.Iterator<InventoryItemVarianceCommand> iterator() {
                    return java.util.Arrays.stream(getInventoryItemVariances())
                            .map(e -> (InventoryItemVarianceCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public InventoryItemVarianceCommand.CreateInventoryItemVariance newCreateInventoryItemVariance() {
            return new CreateOrMergePatchInventoryItemVarianceDto.CreateInventoryItemVarianceDto();
        }

        @Override
        public InventoryItemVarianceCommand.MergePatchInventoryItemVariance newMergePatchInventoryItemVariance() {
            return new CreateOrMergePatchInventoryItemVarianceDto.MergePatchInventoryItemVarianceDto();
        }

        @Override
        public InventoryItemVarianceCommand.RemoveInventoryItemVariance newRemoveInventoryItemVariance() {
            return new RemoveInventoryItemVarianceDto();
        }

    }

}

