// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.partycontactmech.PartyContactMechBaseEvent.*;

public abstract class AbstractPartyContactMechBaseState implements PartyContactMechBaseState.SqlPartyContactMechBaseState, Saveable {

    private PartyContactMechBaseId partyContactMechBaseId;

    public PartyContactMechBaseId getPartyContactMechBaseId() {
        return this.partyContactMechBaseId;
    }

    public void setPartyContactMechBaseId(PartyContactMechBaseId partyContactMechBaseId) {
        this.partyContactMechBaseId = partyContactMechBaseId;
    }

    private OffsetDateTime activeFromDate;

    public OffsetDateTime getActiveFromDate() {
        return this.activeFromDate;
    }

    public void setActiveFromDate(OffsetDateTime activeFromDate) {
        this.activeFromDate = activeFromDate;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Set<PartyContactMechState> protectedContactMechanisms = new HashSet<>();

    protected Set<PartyContactMechState> getProtectedContactMechanisms() {
        return this.protectedContactMechanisms;
    }

    protected void setProtectedContactMechanisms(Set<PartyContactMechState> protectedContactMechanisms) {
        this.protectedContactMechanisms = protectedContactMechanisms;
    }

    private EntityStateCollection<OffsetDateTime, PartyContactMechState> contactMechanisms;

    public EntityStateCollection<OffsetDateTime, PartyContactMechState> getContactMechanisms() {
        return this.contactMechanisms;
    }

    public void setContactMechanisms(EntityStateCollection<OffsetDateTime, PartyContactMechState> contactMechanisms) {
        this.contactMechanisms = contactMechanisms;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractPartyContactMechBaseState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setPartyContactMechBaseId(((PartyContactMechBaseEvent.SqlPartyContactMechBaseEvent) events.get(0)).getPartyContactMechBaseEventId().getPartyContactMechBaseId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? PartyContactMechBaseState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractPartyContactMechBaseState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        contactMechanisms = new SimplePartyContactMechStateCollection();
    }

    @Override
    public int hashCode() {
        return getPartyContactMechBaseId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof PartyContactMechBaseState) {
            return Objects.equals(this.getPartyContactMechBaseId(), ((PartyContactMechBaseState)obj).getPartyContactMechBaseId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof PartyContactMechBaseStateCreated) {
            when((PartyContactMechBaseStateCreated) e);
        } else if (e instanceof PartyContactMechBaseStateMergePatched) {
            when((PartyContactMechBaseStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(PartyContactMechBaseStateCreated e) {
        throwOnWrongEvent(e);

        this.setActiveFromDate(e.getActiveFromDate());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

        for (PartyContactMechEvent.PartyContactMechStateCreated innerEvent : e.getPartyContactMechEvents()) {
            PartyContactMechState innerState = ((EntityStateCollection.ModifiableEntityStateCollection<OffsetDateTime, PartyContactMechState>)this.getContactMechanisms()).getOrAddDefault(((PartyContactMechEvent.SqlPartyContactMechEvent)innerEvent).getPartyContactMechEventId().getFromDate());
            ((PartyContactMechState.SqlPartyContactMechState)innerState).mutate(innerEvent);
        }
    }

    public void merge(PartyContactMechBaseState s) {
        if (s == this) {
            return;
        }
        this.setActiveFromDate(s.getActiveFromDate());

        if (s.getContactMechanisms() != null) {
            Iterable<PartyContactMechState> iterable;
            if (s.getContactMechanisms().isLazy()) {
                iterable = s.getContactMechanisms().getLoadedStates();
            } else {
                iterable = s.getContactMechanisms();
            }
            if (iterable != null) {
                for (PartyContactMechState ss : iterable) {
                    PartyContactMechState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<OffsetDateTime, PartyContactMechState>)this.getContactMechanisms()).getOrAddDefault(ss.getFromDate());
                    ((AbstractPartyContactMechState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getContactMechanisms() != null) {
            if (s.getContactMechanisms() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getContactMechanisms()).getRemovedStates() != null) {
                    for (PartyContactMechState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<OffsetDateTime, PartyContactMechState>)s.getContactMechanisms()).getRemovedStates()) {
                        PartyContactMechState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<OffsetDateTime, PartyContactMechState>)this.getContactMechanisms()).getOrAddDefault(ss.getFromDate());
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getContactMechanisms()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getContactMechanisms().isAllLoaded()) {
                    Set<OffsetDateTime> removedStateIds = new HashSet<>(this.getContactMechanisms().stream().map(i -> i.getFromDate()).collect(java.util.stream.Collectors.toList()));
                    s.getContactMechanisms().forEach(i -> removedStateIds.remove(i.getFromDate()));
                    for (OffsetDateTime i : removedStateIds) {
                        PartyContactMechState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<OffsetDateTime, PartyContactMechState>)this.getContactMechanisms()).getOrAddDefault(i);
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getContactMechanisms()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(PartyContactMechBaseStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getActiveFromDate() == null) {
            if (e.getIsPropertyActiveFromDateRemoved() != null && e.getIsPropertyActiveFromDateRemoved()) {
                this.setActiveFromDate(null);
            }
        } else {
            this.setActiveFromDate(e.getActiveFromDate());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (PartyContactMechEvent innerEvent : e.getPartyContactMechEvents()) {
            PartyContactMechState innerState = ((EntityStateCollection.ModifiableEntityStateCollection<OffsetDateTime, PartyContactMechState>)this.getContactMechanisms()).getOrAddDefault(((PartyContactMechEvent.SqlPartyContactMechEvent)innerEvent).getPartyContactMechEventId().getFromDate());
            ((PartyContactMechState.SqlPartyContactMechState)innerState).mutate(innerEvent);
        }
    }

    public void save() {
        if (contactMechanisms instanceof Saveable) {
            ((Saveable)contactMechanisms).save();
        }
    }

    protected void throwOnWrongEvent(PartyContactMechBaseEvent event) {
        PartyContactMechBaseId stateEntityId = this.getPartyContactMechBaseId(); // Aggregate Id
        PartyContactMechBaseId eventEntityId = ((PartyContactMechBaseEvent.SqlPartyContactMechBaseEvent)event).getPartyContactMechBaseEventId().getPartyContactMechBaseId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((PartyContactMechBaseEvent.SqlPartyContactMechBaseEvent)event).getPartyContactMechBaseEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getPartyContactMechBaseEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimplePartyContactMechBaseState extends AbstractPartyContactMechBaseState {

        public SimplePartyContactMechBaseState() {
        }

        public SimplePartyContactMechBaseState(List<Event> events) {
            super(events);
        }

        public static SimplePartyContactMechBaseState newForReapplying() {
            SimplePartyContactMechBaseState s = new SimplePartyContactMechBaseState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimplePartyContactMechStateCollection implements EntityStateCollection.ModifiableEntityStateCollection<OffsetDateTime, PartyContactMechState>, Collection<PartyContactMechState> {

        @Override
        public PartyContactMechState get(OffsetDateTime fromDate) {
            return protectedContactMechanisms.stream().filter(
                            e -> e.getFromDate().equals(fromDate))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<PartyContactMechState> getLoadedStates() {
            return protectedContactMechanisms;
        }

        @Override
        public PartyContactMechState getOrAddDefault(OffsetDateTime fromDate) {
            PartyContactMechState s = get(fromDate);
            if (s == null) {
                PartyContactMechId globalId = new PartyContactMechId(getPartyContactMechBaseId(), fromDate);
                AbstractPartyContactMechState state = new AbstractPartyContactMechState.SimplePartyContactMechState();
                state.setPartyContactMechId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedContactMechanisms.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedContactMechanisms.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedContactMechanisms.contains(o);
        }

        @Override
        public Iterator<PartyContactMechState> iterator() {
            return protectedContactMechanisms.iterator();
        }

        @Override
        public java.util.stream.Stream<PartyContactMechState> stream() {
            return protectedContactMechanisms.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedContactMechanisms.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedContactMechanisms.toArray(a);
        }

        @Override
        public boolean add(PartyContactMechState s) {
            if (s instanceof AbstractPartyContactMechState) {
                AbstractPartyContactMechState state = (AbstractPartyContactMechState) s;
                state.setProtectedPartyContactMechBaseState(AbstractPartyContactMechBaseState.this);
            }
            return protectedContactMechanisms.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractPartyContactMechState) {
                AbstractPartyContactMechState s = (AbstractPartyContactMechState) o;
                s.setProtectedPartyContactMechBaseState(null);
            }
            return protectedContactMechanisms.remove(o);
        }

        @Override
        public boolean removeState(PartyContactMechState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedContactMechanisms.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends PartyContactMechState> c) {
            return protectedContactMechanisms.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedContactMechanisms.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedContactMechanisms.retainAll(c);
        }

        @Override
        public void clear() {
            protectedContactMechanisms.clear();
        }
    }


}

