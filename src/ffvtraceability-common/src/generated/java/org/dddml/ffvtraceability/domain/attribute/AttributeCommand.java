// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attribute;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface AttributeCommand extends Command {

    String getAttributeId();

    void setAttributeId(String attributeId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(AttributeState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((AttributeCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (isCreationCommand((AttributeCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(AttributeCommand c) {
        if ((c instanceof AttributeCommand.CreateAttribute) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(AttributeState.VERSION_NULL)))
            return true;
        if ((c instanceof AttributeCommand.MergePatchAttribute))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(AttributeState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchAttribute extends AttributeCommand {
        String getAttributeName();

        void setAttributeName(String attributeName);

        String getDescription();

        void setDescription(String description);

        String getIsMandatory();

        void setIsMandatory(String isMandatory);

        String getAttributeType();

        void setAttributeType(String attributeType);

        Long getAttributeLength();

        void setAttributeLength(Long attributeLength);

        String getIsEnumeration();

        void setIsEnumeration(String isEnumeration);

        Boolean getActive();

        void setActive(Boolean active);

    }

    interface CreateAttribute extends CreateOrMergePatchAttribute {
        CreateAttributeValueCommandCollection getCreateAttributeValueCommands();

        AttributeValueCommand.CreateAttributeValue newCreateAttributeValue();

    }

    interface MergePatchAttribute extends CreateOrMergePatchAttribute {
        Boolean getIsPropertyAttributeNameRemoved();

        void setIsPropertyAttributeNameRemoved(Boolean removed);

        Boolean getIsPropertyDescriptionRemoved();

        void setIsPropertyDescriptionRemoved(Boolean removed);

        Boolean getIsPropertyIsMandatoryRemoved();

        void setIsPropertyIsMandatoryRemoved(Boolean removed);

        Boolean getIsPropertyAttributeTypeRemoved();

        void setIsPropertyAttributeTypeRemoved(Boolean removed);

        Boolean getIsPropertyAttributeLengthRemoved();

        void setIsPropertyAttributeLengthRemoved(Boolean removed);

        Boolean getIsPropertyIsEnumerationRemoved();

        void setIsPropertyIsEnumerationRemoved(Boolean removed);

        Boolean getIsPropertyActiveRemoved();

        void setIsPropertyActiveRemoved(Boolean removed);


        AttributeValueCommandCollection getAttributeValueCommands();

        AttributeValueCommand.CreateAttributeValue newCreateAttributeValue();

        AttributeValueCommand.MergePatchAttributeValue newMergePatchAttributeValue();

        AttributeValueCommand.RemoveAttributeValue newRemoveAttributeValue();

    }

    interface DeleteAttribute extends AttributeCommand {
    }

    interface CreateAttributeValueCommandCollection extends Iterable<AttributeValueCommand.CreateAttributeValue> {
        void add(AttributeValueCommand.CreateAttributeValue c);

        void remove(AttributeValueCommand.CreateAttributeValue c);

        void clear();
    }

    interface AttributeValueCommandCollection extends Iterable<AttributeValueCommand> {
        void add(AttributeValueCommand c);

        void remove(AttributeValueCommand c);

        void clear();
    }

}

