// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.gs1applicationidentifier;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import org.dddml.ffvtraceability.domain.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractGs1ApplicationIdentifierApplicationService implements Gs1ApplicationIdentifierApplicationService {
    private Gs1ApplicationIdentifierStateRepository stateRepository;

    protected Gs1ApplicationIdentifierStateRepository getStateRepository() {
        return stateRepository;
    }

    private Gs1ApplicationIdentifierStateQueryRepository stateQueryRepository;

    protected Gs1ApplicationIdentifierStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    public AbstractGs1ApplicationIdentifierApplicationService(Gs1ApplicationIdentifierStateRepository stateRepository, Gs1ApplicationIdentifierStateQueryRepository stateQueryRepository) {
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(Gs1ApplicationIdentifierCommand.CreateGs1ApplicationIdentifier c) {
        update(c, s -> {
        // //////////////////////////
        throwOnConcurrencyConflict(s, c);
        Gs1ApplicationIdentifierState.SqlGs1ApplicationIdentifierState ss = ((Gs1ApplicationIdentifierState.SqlGs1ApplicationIdentifierState)s);
        ss.setFormatString(c.getFormatString());
        ss.setLabel(c.getLabel());
        ss.setDescription(c.getDescription());
        ss.setFnc1required(c.getFnc1required());
        ss.setRegex(c.getRegex());
        ss.setNote(c.getNote());
        ss.setTitle(c.getTitle());
        ss.setSeparatorRequired(c.getSeparatorRequired());
        ss.setComponents(Arrays.asList(c.getComponents()));
        ss.setGs1DigitalLinkPrimaryKey(c.getGs1DigitalLinkPrimaryKey());
        ss.setGs1DigitalLinkQualifiers(c.getGs1DigitalLinkQualifiers());
        ss.setExcludes(c.getExcludes());
        ss.setRequires(c.getRequires());
        ss.setStart(c.getStart());
        ss.setEnd(c.getEnd());
        ss.setActive(c.getActive());
        ss.setDeleted(false);
        ss.setCreatedBy(c.getRequesterId());
        ss.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        ss.setCommandId(c.getCommandId());
        // //////////////////////////
        });
    }

    public void when(Gs1ApplicationIdentifierCommand.MergePatchGs1ApplicationIdentifier c) {
        update(c, s -> {
        // //////////////////////////////////
        throwOnConcurrencyConflict(s, c);
        Gs1ApplicationIdentifierState.SqlGs1ApplicationIdentifierState ss = ((Gs1ApplicationIdentifierState.SqlGs1ApplicationIdentifierState)s);
        if (c.getFormatString() == null) {
            if (c.getIsPropertyFormatStringRemoved() != null && c.getIsPropertyFormatStringRemoved()) {
                ss.setFormatString(null);
            }
        } else {
            ss.setFormatString(c.getFormatString());
        }
        if (c.getLabel() == null) {
            if (c.getIsPropertyLabelRemoved() != null && c.getIsPropertyLabelRemoved()) {
                ss.setLabel(null);
            }
        } else {
            ss.setLabel(c.getLabel());
        }
        if (c.getDescription() == null) {
            if (c.getIsPropertyDescriptionRemoved() != null && c.getIsPropertyDescriptionRemoved()) {
                ss.setDescription(null);
            }
        } else {
            ss.setDescription(c.getDescription());
        }
        if (c.getFnc1required() == null) {
            if (c.getIsPropertyFnc1requiredRemoved() != null && c.getIsPropertyFnc1requiredRemoved()) {
                ss.setFnc1required(null);
            }
        } else {
            ss.setFnc1required(c.getFnc1required());
        }
        if (c.getRegex() == null) {
            if (c.getIsPropertyRegexRemoved() != null && c.getIsPropertyRegexRemoved()) {
                ss.setRegex(null);
            }
        } else {
            ss.setRegex(c.getRegex());
        }
        if (c.getNote() == null) {
            if (c.getIsPropertyNoteRemoved() != null && c.getIsPropertyNoteRemoved()) {
                ss.setNote(null);
            }
        } else {
            ss.setNote(c.getNote());
        }
        if (c.getTitle() == null) {
            if (c.getIsPropertyTitleRemoved() != null && c.getIsPropertyTitleRemoved()) {
                ss.setTitle(null);
            }
        } else {
            ss.setTitle(c.getTitle());
        }
        if (c.getSeparatorRequired() == null) {
            if (c.getIsPropertySeparatorRequiredRemoved() != null && c.getIsPropertySeparatorRequiredRemoved()) {
                ss.setSeparatorRequired(null);
            }
        } else {
            ss.setSeparatorRequired(c.getSeparatorRequired());
        }
        if (c.getComponents() == null) {
            if (c.getIsPropertyComponentsRemoved() != null && c.getIsPropertyComponentsRemoved()) {
                ss.setComponents(null);
            }
        } else {
            ss.setComponents(Arrays.asList(c.getComponents()));
        }
        if (c.getGs1DigitalLinkPrimaryKey() == null) {
            if (c.getIsPropertyGs1DigitalLinkPrimaryKeyRemoved() != null && c.getIsPropertyGs1DigitalLinkPrimaryKeyRemoved()) {
                ss.setGs1DigitalLinkPrimaryKey(null);
            }
        } else {
            ss.setGs1DigitalLinkPrimaryKey(c.getGs1DigitalLinkPrimaryKey());
        }
        if (c.getGs1DigitalLinkQualifiers() == null) {
            if (c.getIsPropertyGs1DigitalLinkQualifiersRemoved() != null && c.getIsPropertyGs1DigitalLinkQualifiersRemoved()) {
                ss.setGs1DigitalLinkQualifiers(null);
            }
        } else {
            ss.setGs1DigitalLinkQualifiers(c.getGs1DigitalLinkQualifiers());
        }
        if (c.getExcludes() == null) {
            if (c.getIsPropertyExcludesRemoved() != null && c.getIsPropertyExcludesRemoved()) {
                ss.setExcludes(null);
            }
        } else {
            ss.setExcludes(c.getExcludes());
        }
        if (c.getRequires() == null) {
            if (c.getIsPropertyRequiresRemoved() != null && c.getIsPropertyRequiresRemoved()) {
                ss.setRequires(null);
            }
        } else {
            ss.setRequires(c.getRequires());
        }
        if (c.getStart() == null) {
            if (c.getIsPropertyStartRemoved() != null && c.getIsPropertyStartRemoved()) {
                ss.setStart(null);
            }
        } else {
            ss.setStart(c.getStart());
        }
        if (c.getEnd() == null) {
            if (c.getIsPropertyEndRemoved() != null && c.getIsPropertyEndRemoved()) {
                ss.setEnd(null);
            }
        } else {
            ss.setEnd(c.getEnd());
        }
        if (c.getActive() == null) {
            if (c.getIsPropertyActiveRemoved() != null && c.getIsPropertyActiveRemoved()) {
                ss.setActive(null);
            }
        } else {
            ss.setActive(c.getActive());
        }
        ss.setUpdatedBy(c.getRequesterId());
        ss.setUpdatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        ss.setCommandId(c.getCommandId());
        // //////////////////////////////////
        });
    }

    public void when(Gs1ApplicationIdentifierCommand.DeleteGs1ApplicationIdentifier c) {
        update(c, s -> {
        throwOnConcurrencyConflict(s, c);
        // ///////////////////////////////////
        //todo
        // ///////////////////////////////////
        });
    }

    public Gs1ApplicationIdentifierState get(String id) {
        Gs1ApplicationIdentifierState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<Gs1ApplicationIdentifierState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<Gs1ApplicationIdentifierState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<Gs1ApplicationIdentifierState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<Gs1ApplicationIdentifierState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public EventStoreAggregateId toEventStoreAggregateId(String aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(Gs1ApplicationIdentifierCommand c, Consumer<Gs1ApplicationIdentifierState> action) {
        String aggregateId = c.getApplicationIdentifier();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        Gs1ApplicationIdentifierState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        Gs1ApplicationIdentifierCommand.throwOnInvalidStateTransition(state, c);
        action.accept(state);
        persist(eventStoreAggregateId, c.getVersion() == null ? Gs1ApplicationIdentifierState.VERSION_NULL : c.getVersion(), state); // State version may be null!

    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, Gs1ApplicationIdentifierState state) {
        getStateRepository().save(state);
    }

    protected boolean isDuplicateCommand(Gs1ApplicationIdentifierCommand command, EventStoreAggregateId eventStoreAggregateId, Gs1ApplicationIdentifierState state) {
        boolean duplicate = false;
        if (command.getVersion() == null) { command.setVersion(Gs1ApplicationIdentifierState.VERSION_NULL); }
        if (state.getVersion() != null && state.getVersion() == command.getVersion() + 1) {
            if (command.getCommandId() != null && command.getCommandId().equals(state.getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    protected static void throwOnConcurrencyConflict(Gs1ApplicationIdentifierState s, Gs1ApplicationIdentifierCommand c) {
        Long stateVersion = s.getVersion();
        Long commandVersion = c.getVersion();
        if (commandVersion == null) { commandVersion = Gs1ApplicationIdentifierState.VERSION_NULL; }
        if (!(stateVersion == null && commandVersion.equals(Gs1ApplicationIdentifierState.VERSION_NULL)) && !commandVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and command version (%2$s)", stateVersion, commandVersion);
        }
    }

    public static class SimpleGs1ApplicationIdentifierApplicationService extends AbstractGs1ApplicationIdentifierApplicationService {
        public SimpleGs1ApplicationIdentifierApplicationService(Gs1ApplicationIdentifierStateRepository stateRepository, Gs1ApplicationIdentifierStateQueryRepository stateQueryRepository)
        {
            super(stateRepository, stateQueryRepository);
        }
    }

}

