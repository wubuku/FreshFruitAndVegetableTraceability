// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attribute;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractAttributeValueEvent extends AbstractEvent implements AttributeValueEvent.SqlAttributeValueEvent {
    private AttributeValueEventId attributeValueEventId = new AttributeValueEventId();

    public AttributeValueEventId getAttributeValueEventId() {
        return this.attributeValueEventId;
    }

    public void setAttributeValueEventId(AttributeValueEventId eventId) {
        this.attributeValueEventId = eventId;
    }
    
    public String getValue() {
        return getAttributeValueEventId().getValue();
    }

    public void setValue(String value) {
        getAttributeValueEventId().setValue(value);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    protected AbstractAttributeValueEvent() {
    }

    protected AbstractAttributeValueEvent(AttributeValueEventId eventId) {
        this.attributeValueEventId = eventId;
    }


    public abstract String getEventType();


    public static abstract class AbstractAttributeValueStateEvent extends AbstractAttributeValueEvent implements AttributeValueEvent.AttributeValueStateEvent {
        private Long version;

        public Long getVersion()
        {
            return this.version;
        }

        public void setVersion(Long version)
        {
            this.version = version;
        }

        private String attributeValueName;

        public String getAttributeValueName()
        {
            return this.attributeValueName;
        }

        public void setAttributeValueName(String attributeValueName)
        {
            this.attributeValueName = attributeValueName;
        }

        private String description;

        public String getDescription()
        {
            return this.description;
        }

        public void setDescription(String description)
        {
            this.description = description;
        }

        private String isDefault;

        public String getIsDefault()
        {
            return this.isDefault;
        }

        public void setIsDefault(String isDefault)
        {
            this.isDefault = isDefault;
        }

        private Boolean active;

        public Boolean getActive()
        {
            return this.active;
        }

        public void setActive(Boolean active)
        {
            this.active = active;
        }

        protected AbstractAttributeValueStateEvent(AttributeValueEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractAttributeValueStateCreated extends AbstractAttributeValueStateEvent implements AttributeValueEvent.AttributeValueStateCreated
    {
        public AbstractAttributeValueStateCreated() {
            this(new AttributeValueEventId());
        }

        public AbstractAttributeValueStateCreated(AttributeValueEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

    }


    public static abstract class AbstractAttributeValueStateMergePatched extends AbstractAttributeValueStateEvent implements AttributeValueEvent.AttributeValueStateMergePatched
    {
        public AbstractAttributeValueStateMergePatched() {
            this(new AttributeValueEventId());
        }

        public AbstractAttributeValueStateMergePatched(AttributeValueEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyAttributeValueNameRemoved;

        public Boolean getIsPropertyAttributeValueNameRemoved() {
            return this.isPropertyAttributeValueNameRemoved;
        }

        public void setIsPropertyAttributeValueNameRemoved(Boolean removed) {
            this.isPropertyAttributeValueNameRemoved = removed;
        }

        private Boolean isPropertyDescriptionRemoved;

        public Boolean getIsPropertyDescriptionRemoved() {
            return this.isPropertyDescriptionRemoved;
        }

        public void setIsPropertyDescriptionRemoved(Boolean removed) {
            this.isPropertyDescriptionRemoved = removed;
        }

        private Boolean isPropertyIsDefaultRemoved;

        public Boolean getIsPropertyIsDefaultRemoved() {
            return this.isPropertyIsDefaultRemoved;
        }

        public void setIsPropertyIsDefaultRemoved(Boolean removed) {
            this.isPropertyIsDefaultRemoved = removed;
        }

        private Boolean isPropertyActiveRemoved;

        public Boolean getIsPropertyActiveRemoved() {
            return this.isPropertyActiveRemoved;
        }

        public void setIsPropertyActiveRemoved(Boolean removed) {
            this.isPropertyActiveRemoved = removed;
        }


    }



    public static class SimpleAttributeValueStateCreated extends AbstractAttributeValueStateCreated
    {
        public SimpleAttributeValueStateCreated() {
        }

        public SimpleAttributeValueStateCreated(AttributeValueEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleAttributeValueStateMergePatched extends AbstractAttributeValueStateMergePatched
    {
        public SimpleAttributeValueStateMergePatched() {
        }

        public SimpleAttributeValueStateMergePatched(AttributeValueEventId eventId) {
            super(eventId);
        }
    }

}

