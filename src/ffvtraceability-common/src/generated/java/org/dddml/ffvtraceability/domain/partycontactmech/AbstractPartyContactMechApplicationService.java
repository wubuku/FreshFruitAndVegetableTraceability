// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractPartyContactMechApplicationService implements PartyContactMechApplicationService {

    private EventStore eventStore;

    protected EventStore getEventStore()
    {
        return eventStore;
    }

    private PartyContactMechStateRepository stateRepository;

    protected PartyContactMechStateRepository getStateRepository() {
        return stateRepository;
    }

    private PartyContactMechStateQueryRepository stateQueryRepository;

    protected PartyContactMechStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    private AggregateEventListener<PartyContactMechAggregate, PartyContactMechState> aggregateEventListener;

    public AggregateEventListener<PartyContactMechAggregate, PartyContactMechState> getAggregateEventListener() {
        return aggregateEventListener;
    }

    public void setAggregateEventListener(AggregateEventListener<PartyContactMechAggregate, PartyContactMechState> eventListener) {
        this.aggregateEventListener = eventListener;
    }

    public AbstractPartyContactMechApplicationService(EventStore eventStore, PartyContactMechStateRepository stateRepository, PartyContactMechStateQueryRepository stateQueryRepository) {
        this.eventStore = eventStore;
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(PartyContactMechCommand.CreatePartyContactMech c) {
        update(c, ar -> ar.create(c));
    }

    public void when(PartyContactMechCommand.MergePatchPartyContactMech c) {
        update(c, ar -> ar.mergePatch(c));
    }

    public PartyContactMechState get(PartyContactMechId id) {
        PartyContactMechState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<PartyContactMechState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<PartyContactMechState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<PartyContactMechState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<PartyContactMechState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public PartyContactMechEvent getEvent(PartyContactMechId partyContactMechId, long version) {
        PartyContactMechEvent e = (PartyContactMechEvent)getEventStore().getEvent(toEventStoreAggregateId(partyContactMechId), version);
        if (e != null) {
            ((PartyContactMechEvent.SqlPartyContactMechEvent)e).setEventReadOnly(true); 
        } else if (version == -1) {
            return getEvent(partyContactMechId, 0);
        }
        return e;
    }

    public PartyContactMechState getHistoryState(PartyContactMechId partyContactMechId, long version) {
        EventStream eventStream = getEventStore().loadEventStream(AbstractPartyContactMechEvent.class, toEventStoreAggregateId(partyContactMechId), version - 1);
        return new AbstractPartyContactMechState.SimplePartyContactMechState(eventStream.getEvents());
    }

    public PartyContactMechPurposeState getPartyContactMechPurpose(PartyContactMechId partyContactMechId, String contactMechPurposeTypeId) {
        return getStateQueryRepository().getPartyContactMechPurpose(partyContactMechId, contactMechPurposeTypeId);
    }

    public Iterable<PartyContactMechPurposeState> getPartyContactMechPurposes(PartyContactMechId partyContactMechId, Criterion filter, List<String> orders) {
        return getStateQueryRepository().getPartyContactMechPurposes(partyContactMechId, filter, orders);
    }


    public PartyContactMechAggregate getPartyContactMechAggregate(PartyContactMechState state) {
        return new AbstractPartyContactMechAggregate.SimplePartyContactMechAggregate(state);
    }

    public EventStoreAggregateId toEventStoreAggregateId(PartyContactMechId aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(PartyContactMechCommand c, Consumer<PartyContactMechAggregate> action) {
        PartyContactMechId aggregateId = c.getPartyContactMechId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        PartyContactMechState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        PartyContactMechAggregate aggregate = getPartyContactMechAggregate(state);
        aggregate.throwOnInvalidStateTransition(c);
        action.accept(aggregate);
        persist(eventStoreAggregateId, c.getVersion() == null ? PartyContactMechState.VERSION_NULL : c.getVersion(), aggregate, state); // State version may be null!

    }

    private DomainEventPublisher domainEventPublisher;

    public void setDomainEventPublisher(DomainEventPublisher domainEventPublisher) {
        this.domainEventPublisher = domainEventPublisher;
    }

    public DomainEventPublisher getDomainEventPublisher() {
        if (domainEventPublisher != null) { return domainEventPublisher; }
        return ApplicationContext.current.get(DomainEventPublisher.class);
    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, PartyContactMechAggregate aggregate, PartyContactMechState state) {
            final DomainEventPublisher ep = getDomainEventPublisher();
        getEventStore().appendEvents(eventStoreAggregateId, version, 
            aggregate.getChanges(), (events) -> { 
                getStateRepository().save(state); 
                if (ep != null) {
                    ep.publish(org.dddml.ffvtraceability.domain.partycontactmech.PartyContactMechAggregate.class,
                        eventStoreAggregateId.getId(),
                        (List<Event>)events);
                }
            });
        if (aggregateEventListener != null) {
            aggregateEventListener.eventAppended(new AggregateEvent<>(aggregate, state, aggregate.getChanges()));
        }
    }

    public void initialize(PartyContactMechEvent.PartyContactMechStateCreated stateCreated) {
        PartyContactMechId aggregateId = ((PartyContactMechEvent.SqlPartyContactMechEvent)stateCreated).getPartyContactMechEventId().getPartyContactMechId();
        PartyContactMechState.SqlPartyContactMechState state = new AbstractPartyContactMechState.SimplePartyContactMechState();
        state.setPartyContactMechId(aggregateId);

        PartyContactMechAggregate aggregate = getPartyContactMechAggregate(state);
        ((AbstractPartyContactMechAggregate) aggregate).apply(stateCreated);

        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        persist(eventStoreAggregateId, ((PartyContactMechEvent.SqlPartyContactMechEvent)stateCreated).getPartyContactMechEventId().getVersion(), aggregate, state);
    }

    protected boolean isDuplicateCommand(PartyContactMechCommand command, EventStoreAggregateId eventStoreAggregateId, PartyContactMechState state) {
        boolean duplicate = false;
        if (command.getVersion() == null) { command.setVersion(PartyContactMechState.VERSION_NULL); }
        if (state.getVersion() != null && state.getVersion() > command.getVersion()) {
            Event lastEvent = getEventStore().getEvent(AbstractPartyContactMechEvent.class, eventStoreAggregateId, command.getVersion());
            if (lastEvent != null && lastEvent instanceof AbstractEvent
               && command.getCommandId() != null && command.getCommandId().equals(((AbstractEvent) lastEvent).getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    public static class SimplePartyContactMechApplicationService extends AbstractPartyContactMechApplicationService {
        public SimplePartyContactMechApplicationService(EventStore eventStore, PartyContactMechStateRepository stateRepository, PartyContactMechStateQueryRepository stateQueryRepository)
        {
            super(eventStore, stateRepository, stateQueryRepository);
        }
    }

}

