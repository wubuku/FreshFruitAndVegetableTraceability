// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractPartyContactMechApplicationService implements PartyContactMechApplicationService {

    private EventStore eventStore;

    protected EventStore getEventStore()
    {
        return eventStore;
    }

    private PartyContactMechBaseStateRepository stateRepository;

    protected PartyContactMechBaseStateRepository getStateRepository() {
        return stateRepository;
    }

    private PartyContactMechBaseStateQueryRepository stateQueryRepository;

    protected PartyContactMechBaseStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    private AggregateEventListener<PartyContactMechAggregate, PartyContactMechBaseState> aggregateEventListener;

    public AggregateEventListener<PartyContactMechAggregate, PartyContactMechBaseState> getAggregateEventListener() {
        return aggregateEventListener;
    }

    public void setAggregateEventListener(AggregateEventListener<PartyContactMechAggregate, PartyContactMechBaseState> eventListener) {
        this.aggregateEventListener = eventListener;
    }

    public AbstractPartyContactMechApplicationService(EventStore eventStore, PartyContactMechBaseStateRepository stateRepository, PartyContactMechBaseStateQueryRepository stateQueryRepository) {
        this.eventStore = eventStore;
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(PartyContactMechBaseCommand.CreatePartyContactMechBase c) {
        update(c, ar -> ar.create(c));
    }

    public void when(PartyContactMechBaseCommand.MergePatchPartyContactMechBase c) {
        update(c, ar -> ar.mergePatch(c));
    }

    public PartyContactMechBaseState get(PartyContactMechBaseId id) {
        PartyContactMechBaseState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<PartyContactMechBaseState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<PartyContactMechBaseState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<PartyContactMechBaseState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<PartyContactMechBaseState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public PartyContactMechBaseEvent getEvent(PartyContactMechBaseId partyContactMechBaseId, long version) {
        PartyContactMechBaseEvent e = (PartyContactMechBaseEvent)getEventStore().getEvent(toEventStoreAggregateId(partyContactMechBaseId), version);
        if (e != null) {
            ((PartyContactMechBaseEvent.SqlPartyContactMechBaseEvent)e).setEventReadOnly(true); 
        } else if (version == -1) {
            return getEvent(partyContactMechBaseId, 0);
        }
        return e;
    }

    public PartyContactMechBaseState getHistoryState(PartyContactMechBaseId partyContactMechBaseId, long version) {
        EventStream eventStream = getEventStore().loadEventStream(AbstractPartyContactMechBaseEvent.class, toEventStoreAggregateId(partyContactMechBaseId), version - 1);
        return new AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState(eventStream.getEvents());
    }

    public PartyContactMechState getPartyContactMech(PartyContactMechBaseId partyContactMechBaseId, OffsetDateTime fromDate) {
        return getStateQueryRepository().getPartyContactMech(partyContactMechBaseId, fromDate);
    }

    public Iterable<PartyContactMechState> getPartyContactMeches(PartyContactMechBaseId partyContactMechBaseId, Criterion filter, List<String> orders) {
        return getStateQueryRepository().getPartyContactMeches(partyContactMechBaseId, filter, orders);
    }

    public PartyContactMechPurposeState getPartyContactMechPurpose(PartyContactMechBaseId partyContactMechBaseId, OffsetDateTime partyContactMechFromDate, String contactMechPurposeTypeId) {
        return getStateQueryRepository().getPartyContactMechPurpose(partyContactMechBaseId, partyContactMechFromDate, contactMechPurposeTypeId);
    }

    public Iterable<PartyContactMechPurposeState> getPartyContactMechPurposes(PartyContactMechBaseId partyContactMechBaseId, OffsetDateTime partyContactMechFromDate, Criterion filter, List<String> orders) {
        return getStateQueryRepository().getPartyContactMechPurposes(partyContactMechBaseId, partyContactMechFromDate, filter, orders);
    }


    public PartyContactMechAggregate getPartyContactMechAggregate(PartyContactMechBaseState state) {
        return new AbstractPartyContactMechAggregate.SimplePartyContactMechAggregate(state);
    }

    public EventStoreAggregateId toEventStoreAggregateId(PartyContactMechBaseId aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(PartyContactMechBaseCommand c, Consumer<PartyContactMechAggregate> action) {
        PartyContactMechBaseId aggregateId = c.getPartyContactMechBaseId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        PartyContactMechBaseState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        PartyContactMechAggregate aggregate = getPartyContactMechAggregate(state);
        aggregate.throwOnInvalidStateTransition(c);
        action.accept(aggregate);
        persist(eventStoreAggregateId, c.getVersion() == null ? PartyContactMechBaseState.VERSION_NULL : c.getVersion(), aggregate, state); // State version may be null!

    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, PartyContactMechAggregate aggregate, PartyContactMechBaseState state) {
        getEventStore().appendEvents(eventStoreAggregateId, version, 
            aggregate.getChanges(), (events) -> { 
                getStateRepository().save(state); 
            });
        if (aggregateEventListener != null) {
            aggregateEventListener.eventAppended(new AggregateEvent<>(aggregate, state, aggregate.getChanges()));
        }
    }

    public void initialize(PartyContactMechBaseEvent.PartyContactMechBaseStateCreated stateCreated) {
        PartyContactMechBaseId aggregateId = ((PartyContactMechBaseEvent.SqlPartyContactMechBaseEvent)stateCreated).getPartyContactMechBaseEventId().getPartyContactMechBaseId();
        PartyContactMechBaseState.SqlPartyContactMechBaseState state = new AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState();
        state.setPartyContactMechBaseId(aggregateId);

        PartyContactMechAggregate aggregate = getPartyContactMechAggregate(state);
        ((AbstractPartyContactMechAggregate) aggregate).apply(stateCreated);

        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        persist(eventStoreAggregateId, ((PartyContactMechBaseEvent.SqlPartyContactMechBaseEvent)stateCreated).getPartyContactMechBaseEventId().getVersion(), aggregate, state);
    }

    protected boolean isDuplicateCommand(PartyContactMechBaseCommand command, EventStoreAggregateId eventStoreAggregateId, PartyContactMechBaseState state) {
        boolean duplicate = false;
        if (command.getVersion() == null) { command.setVersion(PartyContactMechBaseState.VERSION_NULL); }
        if (state.getVersion() != null && state.getVersion() > command.getVersion()) {
            Event lastEvent = getEventStore().getEvent(AbstractPartyContactMechBaseEvent.class, eventStoreAggregateId, command.getVersion());
            if (lastEvent != null && lastEvent instanceof AbstractEvent
               && command.getCommandId() != null && command.getCommandId().equals(((AbstractEvent) lastEvent).getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    public static class SimplePartyContactMechApplicationService extends AbstractPartyContactMechApplicationService {
        public SimplePartyContactMechApplicationService(EventStore eventStore, PartyContactMechBaseStateRepository stateRepository, PartyContactMechBaseStateQueryRepository stateQueryRepository)
        {
            super(eventStore, stateRepository, stateQueryRepository);
        }
    }

}

