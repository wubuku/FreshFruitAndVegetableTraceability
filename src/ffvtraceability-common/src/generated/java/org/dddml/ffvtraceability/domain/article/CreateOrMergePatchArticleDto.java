// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.article;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchArticleDto extends AbstractArticleCommandDto implements ArticleCommand.CreateOrMergePatchArticle {

    /**
     * Title
     */
    private String title;

    public String getTitle()
    {
        return this.title;
    }

    public void setTitle(String title)
    {
        this.title = title;
    }

    /**
     * Body
     */
    private String body;

    public String getBody()
    {
        return this.body;
    }

    public void setBody(String body)
    {
        this.body = body;
    }

    /**
     * Author
     */
    private String author;

    public String getAuthor()
    {
        return this.author;
    }

    public void setAuthor(String author)
    {
        this.author = author;
    }

    /**
     * Tags
     */
    private String[] tags;

    public String[] getTags() {
        return this.tags;
    }

    public void setTags(String[] tags) {
        this.tags = tags;
    }


    private CreateOrMergePatchCommentDto[] comments = new CreateOrMergePatchCommentDto[0];

    public CreateOrMergePatchCommentDto[] getComments()
    {
        return this.comments;
    }

    public void setComments(CreateOrMergePatchCommentDto[] comments)
    {
        this.comments = comments;
    }

    private Boolean isPropertyTitleRemoved;

    public Boolean getIsPropertyTitleRemoved()
    {
        return this.isPropertyTitleRemoved;
    }

    public void setIsPropertyTitleRemoved(Boolean removed)
    {
        this.isPropertyTitleRemoved = removed;
    }

    private Boolean isPropertyBodyRemoved;

    public Boolean getIsPropertyBodyRemoved()
    {
        return this.isPropertyBodyRemoved;
    }

    public void setIsPropertyBodyRemoved(Boolean removed)
    {
        this.isPropertyBodyRemoved = removed;
    }

    private Boolean isPropertyAuthorRemoved;

    public Boolean getIsPropertyAuthorRemoved()
    {
        return this.isPropertyAuthorRemoved;
    }

    public void setIsPropertyAuthorRemoved(Boolean removed)
    {
        this.isPropertyAuthorRemoved = removed;
    }

    private Boolean isPropertyTagsRemoved;

    public Boolean getIsPropertyTagsRemoved()
    {
        return this.isPropertyTagsRemoved;
    }

    public void setIsPropertyTagsRemoved(Boolean removed)
    {
        this.isPropertyTagsRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchArticle command)
    {
        ((AbstractArticleCommandDto) this).copyTo(command);
        command.setTitle(this.getTitle());
        command.setBody(this.getBody());
        command.setAuthor(this.getAuthor());
        command.setTags(this.getTags());
    }

    public ArticleCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractArticleCommand.SimpleCreateArticle command = new AbstractArticleCommand.SimpleCreateArticle();
            copyTo((AbstractArticleCommand.AbstractCreateArticle) command);
            if (this.getComments() != null) {
                for (CreateOrMergePatchCommentDto cmd : this.getComments()) {
                    cmd.setCommandType(COMMAND_TYPE_CREATE);
                    command.getComments().add((CommentCommand.CreateComment) cmd.toCommand());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractArticleCommand.SimpleMergePatchArticle command = new AbstractArticleCommand.SimpleMergePatchArticle();
            copyTo((AbstractArticleCommand.SimpleMergePatchArticle) command);
            if (this.getComments() != null) {
                for (CreateOrMergePatchCommentDto cmd : this.getComments()) {
                    command.getCommentCommands().add(cmd.toCommand());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public ArticleCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateArticleDto command = new CreateArticleDto();
            copyTo((CreateArticle) command);
            if (this.getComments() != null) {
                for (CreateOrMergePatchCommentDto cmd : this.getComments()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreateCommentCommands().add((CommentCommand.CreateComment) cmd.toSubclass());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchArticleDto command = new MergePatchArticleDto();
            copyTo((MergePatchArticle) command);
            if (this.getComments() != null) {
                for (CreateOrMergePatchCommentDto cmd : this.getComments()) {
                    command.getCommentCommands().add(cmd.toSubclass());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateArticle command)
    {
        copyTo((CreateOrMergePatchArticle) command);
    }

    public void copyTo(MergePatchArticle command)
    {
        copyTo((CreateOrMergePatchArticle) command);
        command.setIsPropertyTitleRemoved(this.getIsPropertyTitleRemoved());
        command.setIsPropertyBodyRemoved(this.getIsPropertyBodyRemoved());
        command.setIsPropertyAuthorRemoved(this.getIsPropertyAuthorRemoved());
        command.setIsPropertyTagsRemoved(this.getIsPropertyTagsRemoved());
    }

    public static class CreateArticleDto extends CreateOrMergePatchArticleDto implements ArticleCommand.CreateArticle
    {
        public CreateArticleDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public ArticleCommand.CreateArticle toCreateArticle()
        {
            return (ArticleCommand.CreateArticle) toCommand();
        }


        @Override
        public CreateCommentCommandCollection getCreateCommentCommands() {
            return new CreateCommentCommandCollection() {
                @Override
                public void add(CommentCommand.CreateComment c) {
                    java.util.List<CreateOrMergePatchCommentDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getComments()));
                    list.add((CreateOrMergePatchCommentDto) c);
                    setComments(list.toArray(new CreateOrMergePatchCommentDto[0]));
                }

                @Override
                public void remove(CommentCommand.CreateComment c) {
                    java.util.List<CreateOrMergePatchCommentDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getComments()));
                    list.remove((CreateOrMergePatchCommentDto) c);
                    setComments(list.toArray(new CreateOrMergePatchCommentDto[0]));
                }

                @Override
                public void clear() {
                    setComments(new CreateOrMergePatchCommentDto[]{});
                }

                @Override
                public java.util.Iterator<CommentCommand.CreateComment> iterator() {
                    return java.util.Arrays.stream(getComments())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (CommentCommand.CreateComment) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public CommentCommand.CreateComment newCreateComment() {
            return new CreateOrMergePatchCommentDto.CreateCommentDto();
        }

    }

    public static class MergePatchArticleDto extends CreateOrMergePatchArticleDto implements ArticleCommand.MergePatchArticle
    {
        public MergePatchArticleDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public ArticleCommand.MergePatchArticle toMergePatchArticle()
        {
            return (ArticleCommand.MergePatchArticle) toCommand();
        }


        @Override
        public CommentCommandCollection getCommentCommands() {
            return new CommentCommandCollection() {
                @Override
                public void add(CommentCommand c) {
                    java.util.List<CreateOrMergePatchCommentDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getComments()));
                    list.add((CreateOrMergePatchCommentDto) c);
                    setComments(list.toArray(new CreateOrMergePatchCommentDto[0]));
                }

                @Override
                public void remove(CommentCommand c) {
                    java.util.List<CreateOrMergePatchCommentDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getComments()));
                    list.remove((CreateOrMergePatchCommentDto) c);
                    setComments(list.toArray(new CreateOrMergePatchCommentDto[0]));
                }

                @Override
                public void clear() {
                    setComments(new CreateOrMergePatchCommentDto[]{});
                }

                @Override
                public java.util.Iterator<CommentCommand> iterator() {
                    return java.util.Arrays.stream(getComments())
                            .map(e -> (CommentCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public CommentCommand.CreateComment newCreateComment() {
            return new CreateOrMergePatchCommentDto.CreateCommentDto();
        }

        @Override
        public CommentCommand.MergePatchComment newMergePatchComment() {
            return new CreateOrMergePatchCommentDto.MergePatchCommentDto();
        }

        @Override
        public CommentCommand.RemoveComment newRemoveComment() {
            return new RemoveCommentDto();
        }

    }

}

