// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.inventorytransfer;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractInventoryTransferAggregate extends AbstractAggregate implements InventoryTransferAggregate {
    private InventoryTransferState.MutableInventoryTransferState state;

    protected List<Event> changes = new ArrayList<Event>();

    public AbstractInventoryTransferAggregate(InventoryTransferState state) {
        this.state = (InventoryTransferState.MutableInventoryTransferState)state;
    }

    public InventoryTransferState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(InventoryTransferCommand.CreateInventoryTransfer c) {
        if (c.getVersion() == null) { c.setVersion(InventoryTransferState.VERSION_NULL); }
        InventoryTransferEvent e = map(c);
        apply(e);
    }

    public void mergePatch(InventoryTransferCommand.MergePatchInventoryTransfer c) {
        InventoryTransferEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        InventoryTransferCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof InventoryTransferEvent) {
            InventoryTransferEvent ee = (InventoryTransferEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected InventoryTransferEvent map(InventoryTransferCommand.CreateInventoryTransfer c) {
        InventoryTransferEventId stateEventId = new InventoryTransferEventId(c.getInventoryTransferId(), c.getVersion());
        InventoryTransferEvent.InventoryTransferStateCreated e = newInventoryTransferStateCreated(stateEventId);
        e.setStatusId(c.getStatusId());
        e.setInventoryItemId(c.getInventoryItemId());
        e.setFacilityId(c.getFacilityId());
        e.setLocationSeqId(c.getLocationSeqId());
        e.setContainerId(c.getContainerId());
        e.setFacilityIdTo(c.getFacilityIdTo());
        e.setLocationSeqIdTo(c.getLocationSeqIdTo());
        e.setContainerIdTo(c.getContainerIdTo());
        e.setItemIssuanceId(c.getItemIssuanceId());
        e.setSendDate(c.getSendDate());
        e.setReceiveDate(c.getReceiveDate());
        e.setComments(c.getComments());
        ((AbstractInventoryTransferEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected InventoryTransferEvent map(InventoryTransferCommand.MergePatchInventoryTransfer c) {
        InventoryTransferEventId stateEventId = new InventoryTransferEventId(c.getInventoryTransferId(), c.getVersion());
        InventoryTransferEvent.InventoryTransferStateMergePatched e = newInventoryTransferStateMergePatched(stateEventId);
        e.setStatusId(c.getStatusId());
        e.setInventoryItemId(c.getInventoryItemId());
        e.setFacilityId(c.getFacilityId());
        e.setLocationSeqId(c.getLocationSeqId());
        e.setContainerId(c.getContainerId());
        e.setFacilityIdTo(c.getFacilityIdTo());
        e.setLocationSeqIdTo(c.getLocationSeqIdTo());
        e.setContainerIdTo(c.getContainerIdTo());
        e.setItemIssuanceId(c.getItemIssuanceId());
        e.setSendDate(c.getSendDate());
        e.setReceiveDate(c.getReceiveDate());
        e.setComments(c.getComments());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyInventoryItemIdRemoved(c.getIsPropertyInventoryItemIdRemoved());
        e.setIsPropertyFacilityIdRemoved(c.getIsPropertyFacilityIdRemoved());
        e.setIsPropertyLocationSeqIdRemoved(c.getIsPropertyLocationSeqIdRemoved());
        e.setIsPropertyContainerIdRemoved(c.getIsPropertyContainerIdRemoved());
        e.setIsPropertyFacilityIdToRemoved(c.getIsPropertyFacilityIdToRemoved());
        e.setIsPropertyLocationSeqIdToRemoved(c.getIsPropertyLocationSeqIdToRemoved());
        e.setIsPropertyContainerIdToRemoved(c.getIsPropertyContainerIdToRemoved());
        e.setIsPropertyItemIssuanceIdRemoved(c.getIsPropertyItemIssuanceIdRemoved());
        e.setIsPropertySendDateRemoved(c.getIsPropertySendDateRemoved());
        e.setIsPropertyReceiveDateRemoved(c.getIsPropertyReceiveDateRemoved());
        e.setIsPropertyCommentsRemoved(c.getIsPropertyCommentsRemoved());
        ((AbstractInventoryTransferEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected InventoryTransferEvent.InventoryTransferStateCreated newInventoryTransferStateCreated(Long version, String commandId, String requesterId) {
        InventoryTransferEventId stateEventId = new InventoryTransferEventId(this.state.getInventoryTransferId(), version);
        InventoryTransferEvent.InventoryTransferStateCreated e = newInventoryTransferStateCreated(stateEventId);
        ((AbstractInventoryTransferEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected InventoryTransferEvent.InventoryTransferStateMergePatched newInventoryTransferStateMergePatched(Long version, String commandId, String requesterId) {
        InventoryTransferEventId stateEventId = new InventoryTransferEventId(this.state.getInventoryTransferId(), version);
        InventoryTransferEvent.InventoryTransferStateMergePatched e = newInventoryTransferStateMergePatched(stateEventId);
        ((AbstractInventoryTransferEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected InventoryTransferEvent.InventoryTransferStateCreated newInventoryTransferStateCreated(InventoryTransferEventId stateEventId) {
        return new AbstractInventoryTransferEvent.SimpleInventoryTransferStateCreated(stateEventId);
    }

    protected InventoryTransferEvent.InventoryTransferStateMergePatched newInventoryTransferStateMergePatched(InventoryTransferEventId stateEventId) {
        return new AbstractInventoryTransferEvent.SimpleInventoryTransferStateMergePatched(stateEventId);
    }


    public static class SimpleInventoryTransferAggregate extends AbstractInventoryTransferAggregate {
        public SimpleInventoryTransferAggregate(InventoryTransferState state) {
            super(state);
        }

    }

}

