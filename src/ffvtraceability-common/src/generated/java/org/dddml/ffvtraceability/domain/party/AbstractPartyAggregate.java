// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.party;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractPartyAggregate extends AbstractAggregate implements PartyAggregate {
    private PartyState.MutablePartyState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractPartyAggregate(PartyState state) {
        this.state = (PartyState.MutablePartyState)state;
    }

    public PartyState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(PartyCommand.CreateParty c) {
        if (c.getVersion() == null) { c.setVersion(PartyState.VERSION_NULL); }
        PartyEvent e = map(c);
        apply(e);
    }

    public void mergePatch(PartyCommand.MergePatchParty c) {
        PartyEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        PartyCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof PartyEvent) {
            PartyEvent ee = (PartyEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected PartyEvent map(PartyCommand.CreateParty c) {
        if(PartyTypeId.PARTY.equals(c.getPartyTypeId())) {
            return mapToPartyEvent(c);
        }
        if(PartyTypeId.PERSON.equals(c.getPartyTypeId())) {
            return mapToPersonEvent(c);
        }
        if(PartyTypeId.ORGANIZATION.equals(c.getPartyTypeId())) {
            return mapToOrganizationEvent(c);
        }
        if(PartyTypeId.LEGAL_ORGANIZATION.equals(c.getPartyTypeId())) {
            return mapToLegalOrganizationEvent(c);
        }
        if(PartyTypeId.COMPANY.equals(c.getPartyTypeId())) {
            return mapToCompanyEvent(c);
        }
        if(PartyTypeId.DEPARTMENT.equals(c.getPartyTypeId())) {
            return mapToDepartmentEvent(c);
        }
        if(PartyTypeId.FAMILY.equals(c.getPartyTypeId())) {
            return mapToFamilyEvent(c);
        }
        return mapToPartyEvent(c);
    }

    protected PartyEvent mapToPartyEvent(PartyCommand.CreateParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        PartyEvent.PartyStateCreated e = newPartyStateCreated(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand.CreatePartyIdentification innerCommand : c.getCreatePartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent.PartyIdentificationStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected PersonEvent mapToPersonEvent(PartyCommand.CreateParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        PersonEvent.PersonStateCreated e = newPersonStateCreated(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setSalutation(c.getSalutation());
        e.setFirstName(c.getFirstName());
        e.setMiddleName(c.getMiddleName());
        e.setLastName(c.getLastName());
        e.setPersonalTitle(c.getPersonalTitle());
        e.setNickname(c.getNickname());
        e.setGender(c.getGender());
        e.setBirthDate(c.getBirthDate());
        e.setDeceasedDate(c.getDeceasedDate());
        e.setSocialSecurityNumber(c.getSocialSecurityNumber());
        e.setPassportNumber(c.getPassportNumber());
        e.setPassportExpireDate(c.getPassportExpireDate());
        e.setExistingCustomer(c.getExistingCustomer());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand.CreatePartyIdentification innerCommand : c.getCreatePartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent.PartyIdentificationStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected OrganizationEvent mapToOrganizationEvent(PartyCommand.CreateParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        OrganizationEvent.OrganizationStateCreated e = newOrganizationStateCreated(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setOrganizationName(c.getOrganizationName());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand.CreatePartyIdentification innerCommand : c.getCreatePartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent.PartyIdentificationStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected LegalOrganizationEvent mapToLegalOrganizationEvent(PartyCommand.CreateParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        LegalOrganizationEvent.LegalOrganizationStateCreated e = newLegalOrganizationStateCreated(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setOrganizationName(c.getOrganizationName());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand.CreatePartyIdentification innerCommand : c.getCreatePartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent.PartyIdentificationStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected CompanyEvent mapToCompanyEvent(PartyCommand.CreateParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        CompanyEvent.CompanyStateCreated e = newCompanyStateCreated(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setOrganizationName(c.getOrganizationName());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand.CreatePartyIdentification innerCommand : c.getCreatePartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent.PartyIdentificationStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected DepartmentEvent mapToDepartmentEvent(PartyCommand.CreateParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        DepartmentEvent.DepartmentStateCreated e = newDepartmentStateCreated(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setOrganizationName(c.getOrganizationName());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand.CreatePartyIdentification innerCommand : c.getCreatePartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent.PartyIdentificationStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected FamilyEvent mapToFamilyEvent(PartyCommand.CreateParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        FamilyEvent.FamilyStateCreated e = newFamilyStateCreated(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setOrganizationName(c.getOrganizationName());
        e.setFamilyName(c.getFamilyName());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand.CreatePartyIdentification innerCommand : c.getCreatePartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent.PartyIdentificationStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected PartyEvent map(PartyCommand.MergePatchParty c) {
        if(c.getPartyTypeId().equals(PartyTypeId.PARTY)) {
            return mapToPartyEvent(c);
        }
        if(c.getPartyTypeId().equals(PartyTypeId.PERSON)) {
            return mapToPersonEvent(c);
        }
        if(c.getPartyTypeId().equals(PartyTypeId.ORGANIZATION)) {
            return mapToOrganizationEvent(c);
        }
        if(c.getPartyTypeId().equals(PartyTypeId.LEGAL_ORGANIZATION)) {
            return mapToLegalOrganizationEvent(c);
        }
        if(c.getPartyTypeId().equals(PartyTypeId.COMPANY)) {
            return mapToCompanyEvent(c);
        }
        if(c.getPartyTypeId().equals(PartyTypeId.DEPARTMENT)) {
            return mapToDepartmentEvent(c);
        }
        if(c.getPartyTypeId().equals(PartyTypeId.FAMILY)) {
            return mapToFamilyEvent(c);
        }
        return mapToPartyEvent(c);
    }

    protected PartyEvent mapToPartyEvent(PartyCommand.MergePatchParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        PartyEvent.PartyStateMergePatched e = newPartyStateMergePatched(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setIsPropertyPartyTypeIdRemoved(c.getIsPropertyPartyTypeIdRemoved());
        e.setIsPropertyPrimaryRoleTypeIdRemoved(c.getIsPropertyPrimaryRoleTypeIdRemoved());
        e.setIsPropertyExternalIdRemoved(c.getIsPropertyExternalIdRemoved());
        e.setIsPropertyPreferredCurrencyUomIdRemoved(c.getIsPropertyPreferredCurrencyUomIdRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyEmailRemoved(c.getIsPropertyEmailRemoved());
        e.setIsPropertyWebSiteRemoved(c.getIsPropertyWebSiteRemoved());
        e.setIsPropertyTelephoneRemoved(c.getIsPropertyTelephoneRemoved());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand innerCommand : c.getPartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected PersonEvent mapToPersonEvent(PartyCommand.MergePatchParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        PersonEvent.PersonStateMergePatched e = newPersonStateMergePatched(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setSalutation(c.getSalutation());
        e.setFirstName(c.getFirstName());
        e.setMiddleName(c.getMiddleName());
        e.setLastName(c.getLastName());
        e.setPersonalTitle(c.getPersonalTitle());
        e.setNickname(c.getNickname());
        e.setGender(c.getGender());
        e.setBirthDate(c.getBirthDate());
        e.setDeceasedDate(c.getDeceasedDate());
        e.setSocialSecurityNumber(c.getSocialSecurityNumber());
        e.setPassportNumber(c.getPassportNumber());
        e.setPassportExpireDate(c.getPassportExpireDate());
        e.setExistingCustomer(c.getExistingCustomer());
        e.setIsPropertySalutationRemoved(c.getIsPropertySalutationRemoved());
        e.setIsPropertyFirstNameRemoved(c.getIsPropertyFirstNameRemoved());
        e.setIsPropertyMiddleNameRemoved(c.getIsPropertyMiddleNameRemoved());
        e.setIsPropertyLastNameRemoved(c.getIsPropertyLastNameRemoved());
        e.setIsPropertyPersonalTitleRemoved(c.getIsPropertyPersonalTitleRemoved());
        e.setIsPropertyNicknameRemoved(c.getIsPropertyNicknameRemoved());
        e.setIsPropertyGenderRemoved(c.getIsPropertyGenderRemoved());
        e.setIsPropertyBirthDateRemoved(c.getIsPropertyBirthDateRemoved());
        e.setIsPropertyDeceasedDateRemoved(c.getIsPropertyDeceasedDateRemoved());
        e.setIsPropertySocialSecurityNumberRemoved(c.getIsPropertySocialSecurityNumberRemoved());
        e.setIsPropertyPassportNumberRemoved(c.getIsPropertyPassportNumberRemoved());
        e.setIsPropertyPassportExpireDateRemoved(c.getIsPropertyPassportExpireDateRemoved());
        e.setIsPropertyExistingCustomerRemoved(c.getIsPropertyExistingCustomerRemoved());
        e.setIsPropertyPartyTypeIdRemoved(c.getIsPropertyPartyTypeIdRemoved());
        e.setIsPropertyPrimaryRoleTypeIdRemoved(c.getIsPropertyPrimaryRoleTypeIdRemoved());
        e.setIsPropertyExternalIdRemoved(c.getIsPropertyExternalIdRemoved());
        e.setIsPropertyPreferredCurrencyUomIdRemoved(c.getIsPropertyPreferredCurrencyUomIdRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyEmailRemoved(c.getIsPropertyEmailRemoved());
        e.setIsPropertyWebSiteRemoved(c.getIsPropertyWebSiteRemoved());
        e.setIsPropertyTelephoneRemoved(c.getIsPropertyTelephoneRemoved());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand innerCommand : c.getPartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected OrganizationEvent mapToOrganizationEvent(PartyCommand.MergePatchParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        OrganizationEvent.OrganizationStateMergePatched e = newOrganizationStateMergePatched(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setOrganizationName(c.getOrganizationName());
        e.setIsPropertyOrganizationNameRemoved(c.getIsPropertyOrganizationNameRemoved());
        e.setIsPropertyPartyTypeIdRemoved(c.getIsPropertyPartyTypeIdRemoved());
        e.setIsPropertyPrimaryRoleTypeIdRemoved(c.getIsPropertyPrimaryRoleTypeIdRemoved());
        e.setIsPropertyExternalIdRemoved(c.getIsPropertyExternalIdRemoved());
        e.setIsPropertyPreferredCurrencyUomIdRemoved(c.getIsPropertyPreferredCurrencyUomIdRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyEmailRemoved(c.getIsPropertyEmailRemoved());
        e.setIsPropertyWebSiteRemoved(c.getIsPropertyWebSiteRemoved());
        e.setIsPropertyTelephoneRemoved(c.getIsPropertyTelephoneRemoved());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand innerCommand : c.getPartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected LegalOrganizationEvent mapToLegalOrganizationEvent(PartyCommand.MergePatchParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        LegalOrganizationEvent.LegalOrganizationStateMergePatched e = newLegalOrganizationStateMergePatched(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setOrganizationName(c.getOrganizationName());
        e.setIsPropertyOrganizationNameRemoved(c.getIsPropertyOrganizationNameRemoved());
        e.setIsPropertyPartyTypeIdRemoved(c.getIsPropertyPartyTypeIdRemoved());
        e.setIsPropertyPrimaryRoleTypeIdRemoved(c.getIsPropertyPrimaryRoleTypeIdRemoved());
        e.setIsPropertyExternalIdRemoved(c.getIsPropertyExternalIdRemoved());
        e.setIsPropertyPreferredCurrencyUomIdRemoved(c.getIsPropertyPreferredCurrencyUomIdRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyEmailRemoved(c.getIsPropertyEmailRemoved());
        e.setIsPropertyWebSiteRemoved(c.getIsPropertyWebSiteRemoved());
        e.setIsPropertyTelephoneRemoved(c.getIsPropertyTelephoneRemoved());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand innerCommand : c.getPartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected CompanyEvent mapToCompanyEvent(PartyCommand.MergePatchParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        CompanyEvent.CompanyStateMergePatched e = newCompanyStateMergePatched(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setOrganizationName(c.getOrganizationName());
        e.setIsPropertyOrganizationNameRemoved(c.getIsPropertyOrganizationNameRemoved());
        e.setIsPropertyPartyTypeIdRemoved(c.getIsPropertyPartyTypeIdRemoved());
        e.setIsPropertyPrimaryRoleTypeIdRemoved(c.getIsPropertyPrimaryRoleTypeIdRemoved());
        e.setIsPropertyExternalIdRemoved(c.getIsPropertyExternalIdRemoved());
        e.setIsPropertyPreferredCurrencyUomIdRemoved(c.getIsPropertyPreferredCurrencyUomIdRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyEmailRemoved(c.getIsPropertyEmailRemoved());
        e.setIsPropertyWebSiteRemoved(c.getIsPropertyWebSiteRemoved());
        e.setIsPropertyTelephoneRemoved(c.getIsPropertyTelephoneRemoved());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand innerCommand : c.getPartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected DepartmentEvent mapToDepartmentEvent(PartyCommand.MergePatchParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        DepartmentEvent.DepartmentStateMergePatched e = newDepartmentStateMergePatched(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setOrganizationName(c.getOrganizationName());
        e.setIsPropertyOrganizationNameRemoved(c.getIsPropertyOrganizationNameRemoved());
        e.setIsPropertyPartyTypeIdRemoved(c.getIsPropertyPartyTypeIdRemoved());
        e.setIsPropertyPrimaryRoleTypeIdRemoved(c.getIsPropertyPrimaryRoleTypeIdRemoved());
        e.setIsPropertyExternalIdRemoved(c.getIsPropertyExternalIdRemoved());
        e.setIsPropertyPreferredCurrencyUomIdRemoved(c.getIsPropertyPreferredCurrencyUomIdRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyEmailRemoved(c.getIsPropertyEmailRemoved());
        e.setIsPropertyWebSiteRemoved(c.getIsPropertyWebSiteRemoved());
        e.setIsPropertyTelephoneRemoved(c.getIsPropertyTelephoneRemoved());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand innerCommand : c.getPartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }

    protected FamilyEvent mapToFamilyEvent(PartyCommand.MergePatchParty c) {
        PartyEventId stateEventId = new PartyEventId(c.getPartyId(), c.getVersion());
        FamilyEvent.FamilyStateMergePatched e = newFamilyStateMergePatched(stateEventId);
        e.setPartyTypeId(c.getPartyTypeId());
        e.setPrimaryRoleTypeId(c.getPrimaryRoleTypeId());
        e.setExternalId(c.getExternalId());
        e.setPreferredCurrencyUomId(c.getPreferredCurrencyUomId());
        e.setDescription(c.getDescription());
        e.setStatusId(c.getStatusId());
        e.setEmail(c.getEmail());
        e.setWebSite(c.getWebSite());
        e.setTelephone(c.getTelephone());
        e.setOrganizationName(c.getOrganizationName());
        e.setFamilyName(c.getFamilyName());
        e.setIsPropertyFamilyNameRemoved(c.getIsPropertyFamilyNameRemoved());
        e.setIsPropertyOrganizationNameRemoved(c.getIsPropertyOrganizationNameRemoved());
        e.setIsPropertyPartyTypeIdRemoved(c.getIsPropertyPartyTypeIdRemoved());
        e.setIsPropertyPrimaryRoleTypeIdRemoved(c.getIsPropertyPrimaryRoleTypeIdRemoved());
        e.setIsPropertyExternalIdRemoved(c.getIsPropertyExternalIdRemoved());
        e.setIsPropertyPreferredCurrencyUomIdRemoved(c.getIsPropertyPreferredCurrencyUomIdRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyEmailRemoved(c.getIsPropertyEmailRemoved());
        e.setIsPropertyWebSiteRemoved(c.getIsPropertyWebSiteRemoved());
        e.setIsPropertyTelephoneRemoved(c.getIsPropertyTelephoneRemoved());
        ((AbstractPartyEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (PartyIdentificationCommand innerCommand : c.getPartyIdentificationCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            PartyIdentificationEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addPartyIdentificationEvent(innerEvent);
        }

        return e;
    }


    protected PartyIdentificationEvent map(PartyIdentificationCommand c, PartyCommand outerCommand, Long version, PartyState outerState) {
        PartyIdentificationCommand.CreatePartyIdentification create = (c.getCommandType().equals(CommandType.CREATE)) ? ((PartyIdentificationCommand.CreatePartyIdentification)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        PartyIdentificationCommand.MergePatchPartyIdentification merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((PartyIdentificationCommand.MergePatchPartyIdentification)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, version, outerState);
        }

        throw new UnsupportedOperationException("Unsupported command type: " + c.getCommandType() + " for " + c.getClass().getName());
    }

    protected PartyIdentificationEvent.PartyIdentificationStateCreated mapCreate(PartyIdentificationCommand.CreatePartyIdentification c, PartyCommand outerCommand, Long version, PartyState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        PartyIdentificationEventId stateEventId = new PartyIdentificationEventId(outerState.getPartyId(), c.getPartyIdentificationTypeId(), version);
        PartyIdentificationEvent.PartyIdentificationStateCreated e = newPartyIdentificationStateCreated(stateEventId);
        PartyIdentificationState s = ((EntityStateCollection.MutableEntityStateCollection<String, PartyIdentificationState>)outerState.getPartyIdentifications()).getOrAddDefault(c.getPartyIdentificationTypeId());

        e.setIdValue(c.getIdValue());
        e.setVerified(c.getVerified());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected PartyIdentificationEvent.PartyIdentificationStateMergePatched mapMergePatch(PartyIdentificationCommand.MergePatchPartyIdentification c, PartyCommand outerCommand, Long version, PartyState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        PartyIdentificationEventId stateEventId = new PartyIdentificationEventId(outerState.getPartyId(), c.getPartyIdentificationTypeId(), version);
        PartyIdentificationEvent.PartyIdentificationStateMergePatched e = newPartyIdentificationStateMergePatched(stateEventId);
        PartyIdentificationState s = ((EntityStateCollection.MutableEntityStateCollection<String, PartyIdentificationState>)outerState.getPartyIdentifications()).getOrAddDefault(c.getPartyIdentificationTypeId());

        e.setIdValue(c.getIdValue());
        e.setVerified(c.getVerified());
        e.setIsPropertyIdValueRemoved(c.getIsPropertyIdValueRemoved());
        e.setIsPropertyVerifiedRemoved(c.getIsPropertyVerifiedRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected void throwOnInconsistentCommands(PartyCommand command, PartyIdentificationCommand innerCommand) {
        AbstractPartyCommand properties = command instanceof AbstractPartyCommand ? (AbstractPartyCommand) command : null;
        AbstractPartyIdentificationCommand innerProperties = innerCommand instanceof AbstractPartyIdentificationCommand ? (AbstractPartyIdentificationCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerPartyIdName = "PartyId";
        String outerPartyIdValue = properties.getPartyId();
        String innerPartyIdName = "PartyId";
        String innerPartyIdValue = innerProperties.getPartyId();
        if (innerPartyIdValue == null) {
            innerProperties.setPartyId(outerPartyIdValue);
        }
        else if (innerPartyIdValue != outerPartyIdValue 
            && (innerPartyIdValue == null || innerPartyIdValue != null && !innerPartyIdValue.equals(outerPartyIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerPartyIdName, outerPartyIdValue, innerPartyIdName, innerPartyIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////


    ////////////////////////

    protected PartyEvent.PartyStateCreated newPartyStateCreated(Long version, String commandId, String requesterId) {
        PartyEventId stateEventId = new PartyEventId(this.state.getPartyId(), version);
        PartyEvent.PartyStateCreated e = newPartyStateCreated(stateEventId);
        ((AbstractPartyEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected PartyEvent.PartyStateMergePatched newPartyStateMergePatched(Long version, String commandId, String requesterId) {
        PartyEventId stateEventId = new PartyEventId(this.state.getPartyId(), version);
        PartyEvent.PartyStateMergePatched e = newPartyStateMergePatched(stateEventId);
        ((AbstractPartyEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected PartyEvent.PartyStateCreated newPartyStateCreated(PartyEventId stateEventId) {
        return new AbstractPartyEvent.SimplePartyStateCreated(stateEventId);
    }

    protected PartyEvent.PartyStateMergePatched newPartyStateMergePatched(PartyEventId stateEventId) {
        return new AbstractPartyEvent.SimplePartyStateMergePatched(stateEventId);
    }

    protected PersonEvent.PersonStateCreated newPersonStateCreated(PartyEventId stateEventId) {
        return new AbstractPersonEvent.SimplePersonStateCreated(stateEventId);
    }

    protected PersonEvent.PersonStateMergePatched newPersonStateMergePatched(PartyEventId stateEventId) {
        return new AbstractPersonEvent.SimplePersonStateMergePatched(stateEventId);
    }

    protected OrganizationEvent.OrganizationStateCreated newOrganizationStateCreated(PartyEventId stateEventId) {
        return new AbstractOrganizationEvent.SimpleOrganizationStateCreated(stateEventId);
    }

    protected OrganizationEvent.OrganizationStateMergePatched newOrganizationStateMergePatched(PartyEventId stateEventId) {
        return new AbstractOrganizationEvent.SimpleOrganizationStateMergePatched(stateEventId);
    }

    protected LegalOrganizationEvent.LegalOrganizationStateCreated newLegalOrganizationStateCreated(PartyEventId stateEventId) {
        return new AbstractLegalOrganizationEvent.SimpleLegalOrganizationStateCreated(stateEventId);
    }

    protected LegalOrganizationEvent.LegalOrganizationStateMergePatched newLegalOrganizationStateMergePatched(PartyEventId stateEventId) {
        return new AbstractLegalOrganizationEvent.SimpleLegalOrganizationStateMergePatched(stateEventId);
    }

    protected CompanyEvent.CompanyStateCreated newCompanyStateCreated(PartyEventId stateEventId) {
        return new AbstractCompanyEvent.SimpleCompanyStateCreated(stateEventId);
    }

    protected CompanyEvent.CompanyStateMergePatched newCompanyStateMergePatched(PartyEventId stateEventId) {
        return new AbstractCompanyEvent.SimpleCompanyStateMergePatched(stateEventId);
    }

    protected DepartmentEvent.DepartmentStateCreated newDepartmentStateCreated(PartyEventId stateEventId) {
        return new AbstractDepartmentEvent.SimpleDepartmentStateCreated(stateEventId);
    }

    protected DepartmentEvent.DepartmentStateMergePatched newDepartmentStateMergePatched(PartyEventId stateEventId) {
        return new AbstractDepartmentEvent.SimpleDepartmentStateMergePatched(stateEventId);
    }

    protected FamilyEvent.FamilyStateCreated newFamilyStateCreated(PartyEventId stateEventId) {
        return new AbstractFamilyEvent.SimpleFamilyStateCreated(stateEventId);
    }

    protected FamilyEvent.FamilyStateMergePatched newFamilyStateMergePatched(PartyEventId stateEventId) {
        return new AbstractFamilyEvent.SimpleFamilyStateMergePatched(stateEventId);
    }

    protected PartyIdentificationEvent.PartyIdentificationStateCreated newPartyIdentificationStateCreated(PartyIdentificationEventId stateEventId) {
        return new AbstractPartyIdentificationEvent.SimplePartyIdentificationStateCreated(stateEventId);
    }

    protected PartyIdentificationEvent.PartyIdentificationStateMergePatched newPartyIdentificationStateMergePatched(PartyIdentificationEventId stateEventId) {
        return new AbstractPartyIdentificationEvent.SimplePartyIdentificationStateMergePatched(stateEventId);
    }


    public static class SimplePartyAggregate extends AbstractPartyAggregate {
        public SimplePartyAggregate(PartyState state) {
            super(state);
        }

    }

}

