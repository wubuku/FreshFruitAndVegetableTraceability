// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attributeset;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchAttributeSetDto extends AbstractAttributeSetCommandDto implements AttributeSetCommand.CreateOrMergePatchAttributeSet {

    /**
     * Attribute Set Name
     */
    private String attributeSetName;

    public String getAttributeSetName()
    {
        return this.attributeSetName;
    }

    public void setAttributeSetName(String attributeSetName)
    {
        this.attributeSetName = attributeSetName;
    }

    /**
     * Description
     */
    private String description;

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }


    private CreateOrMergePatchAttributeUseDto[] attributeUses = new CreateOrMergePatchAttributeUseDto[0];

    public CreateOrMergePatchAttributeUseDto[] getAttributeUses()
    {
        return this.attributeUses;
    }

    public void setAttributeUses(CreateOrMergePatchAttributeUseDto[] attributeUses)
    {
        this.attributeUses = attributeUses;
    }

    private Boolean isPropertyAttributeSetNameRemoved;

    public Boolean getIsPropertyAttributeSetNameRemoved()
    {
        return this.isPropertyAttributeSetNameRemoved;
    }

    public void setIsPropertyAttributeSetNameRemoved(Boolean removed)
    {
        this.isPropertyAttributeSetNameRemoved = removed;
    }

    private Boolean isPropertyDescriptionRemoved;

    public Boolean getIsPropertyDescriptionRemoved()
    {
        return this.isPropertyDescriptionRemoved;
    }

    public void setIsPropertyDescriptionRemoved(Boolean removed)
    {
        this.isPropertyDescriptionRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchAttributeSet command)
    {
        ((AbstractAttributeSetCommandDto) this).copyTo(command);
        command.setAttributeSetName(this.getAttributeSetName());
        command.setDescription(this.getDescription());
    }

    public AttributeSetCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractAttributeSetCommand.SimpleCreateAttributeSet command = new AbstractAttributeSetCommand.SimpleCreateAttributeSet();
            copyTo((AbstractAttributeSetCommand.AbstractCreateAttributeSet) command);
            if (this.getAttributeUses() != null) {
                for (CreateOrMergePatchAttributeUseDto cmd : this.getAttributeUses()) {
                    command.getAttributeUses().add((AttributeUseCommand.CreateAttributeUse) cmd.toCommand());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractAttributeSetCommand.SimpleMergePatchAttributeSet command = new AbstractAttributeSetCommand.SimpleMergePatchAttributeSet();
            copyTo((AbstractAttributeSetCommand.SimpleMergePatchAttributeSet) command);
            if (this.getAttributeUses() != null) {
                for (CreateOrMergePatchAttributeUseDto cmd : this.getAttributeUses()) {
                    command.getAttributeUseCommands().add(cmd.toCommand());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public AttributeSetCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateAttributeSetDto command = new CreateAttributeSetDto();
            copyTo((CreateAttributeSet) command);
            if (this.getAttributeUses() != null) {
                for (CreateOrMergePatchAttributeUseDto cmd : this.getAttributeUses()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreateAttributeUseCommands().add((AttributeUseCommand.CreateAttributeUse) cmd.toSubclass());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchAttributeSetDto command = new MergePatchAttributeSetDto();
            copyTo((MergePatchAttributeSet) command);
            if (this.getAttributeUses() != null) {
                for (CreateOrMergePatchAttributeUseDto cmd : this.getAttributeUses()) {
                    command.getAttributeUseCommands().add(cmd.toSubclass());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateAttributeSet command)
    {
        copyTo((CreateOrMergePatchAttributeSet) command);
    }

    public void copyTo(MergePatchAttributeSet command)
    {
        copyTo((CreateOrMergePatchAttributeSet) command);
        command.setIsPropertyAttributeSetNameRemoved(this.getIsPropertyAttributeSetNameRemoved());
        command.setIsPropertyDescriptionRemoved(this.getIsPropertyDescriptionRemoved());
    }

    public static class CreateAttributeSetDto extends CreateOrMergePatchAttributeSetDto implements AttributeSetCommand.CreateAttributeSet
    {
        public CreateAttributeSetDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public AttributeSetCommand.CreateAttributeSet toCreateAttributeSet()
        {
            return (AttributeSetCommand.CreateAttributeSet) toCommand();
        }


        @Override
        public CreateAttributeUseCommandCollection getCreateAttributeUseCommands() {
            return new CreateAttributeUseCommandCollection() {
                @Override
                public void add(AttributeUseCommand.CreateAttributeUse c) {
                    java.util.List<CreateOrMergePatchAttributeUseDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getAttributeUses()));
                    list.add((CreateOrMergePatchAttributeUseDto) c);
                    setAttributeUses(list.toArray(new CreateOrMergePatchAttributeUseDto[0]));
                }

                @Override
                public void remove(AttributeUseCommand.CreateAttributeUse c) {
                    java.util.List<CreateOrMergePatchAttributeUseDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getAttributeUses()));
                    list.remove((CreateOrMergePatchAttributeUseDto) c);
                    setAttributeUses(list.toArray(new CreateOrMergePatchAttributeUseDto[0]));
                }

                @Override
                public void clear() {
                    setAttributeUses(new CreateOrMergePatchAttributeUseDto[]{});
                }

                @Override
                public java.util.Iterator<AttributeUseCommand.CreateAttributeUse> iterator() {
                    return java.util.Arrays.stream(getAttributeUses())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (AttributeUseCommand.CreateAttributeUse) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public AttributeUseCommand.CreateAttributeUse newCreateAttributeUse() {
            return new CreateOrMergePatchAttributeUseDto.CreateAttributeUseDto();
        }

    }

    public static class MergePatchAttributeSetDto extends CreateOrMergePatchAttributeSetDto implements AttributeSetCommand.MergePatchAttributeSet
    {
        public MergePatchAttributeSetDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public AttributeSetCommand.MergePatchAttributeSet toMergePatchAttributeSet()
        {
            return (AttributeSetCommand.MergePatchAttributeSet) toCommand();
        }


        @Override
        public AttributeUseCommandCollection getAttributeUseCommands() {
            return new AttributeUseCommandCollection() {
                @Override
                public void add(AttributeUseCommand c) {
                    java.util.List<CreateOrMergePatchAttributeUseDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getAttributeUses()));
                    list.add((CreateOrMergePatchAttributeUseDto) c);
                    setAttributeUses(list.toArray(new CreateOrMergePatchAttributeUseDto[0]));
                }

                @Override
                public void remove(AttributeUseCommand c) {
                    java.util.List<CreateOrMergePatchAttributeUseDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getAttributeUses()));
                    list.remove((CreateOrMergePatchAttributeUseDto) c);
                    setAttributeUses(list.toArray(new CreateOrMergePatchAttributeUseDto[0]));
                }

                @Override
                public void clear() {
                    setAttributeUses(new CreateOrMergePatchAttributeUseDto[]{});
                }

                @Override
                public java.util.Iterator<AttributeUseCommand> iterator() {
                    return java.util.Arrays.stream(getAttributeUses())
                            .map(e -> (AttributeUseCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public AttributeUseCommand.CreateAttributeUse newCreateAttributeUse() {
            return new CreateOrMergePatchAttributeUseDto.CreateAttributeUseDto();
        }

        @Override
        public AttributeUseCommand.MergePatchAttributeUse newMergePatchAttributeUse() {
            return new CreateOrMergePatchAttributeUseDto.MergePatchAttributeUseDto();
        }

        @Override
        public AttributeUseCommand.RemoveAttributeUse newRemoveAttributeUse() {
            return new RemoveAttributeUseDto();
        }

    }

}

