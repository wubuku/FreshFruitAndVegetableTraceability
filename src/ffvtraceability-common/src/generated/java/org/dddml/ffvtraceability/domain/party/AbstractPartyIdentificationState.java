// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.party;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.party.PartyIdentificationEvent.*;

public abstract class AbstractPartyIdentificationState implements PartyIdentificationState.SqlPartyIdentificationState {

    private PartyIdentificationId partyIdentificationId = new PartyIdentificationId();

    public PartyIdentificationId getPartyIdentificationId() {
        return this.partyIdentificationId;
    }

    public void setPartyIdentificationId(PartyIdentificationId partyIdentificationId) {
        this.partyIdentificationId = partyIdentificationId;
    }

    private transient PartyState partyState;

    public PartyState getPartyState() {
        return partyState;
    }

    public void setPartyState(PartyState s) {
        partyState = s;
    }
    
    private PartyState protectedPartyState;

    protected PartyState getProtectedPartyState() {
        return protectedPartyState;
    }

    protected void setProtectedPartyState(PartyState protectedPartyState) {
        this.protectedPartyState = protectedPartyState;
    }

    public String getPartyId() {
        return this.getPartyIdentificationId().getPartyId();
    }
        
    public void setPartyId(String partyId) {
        this.getPartyIdentificationId().setPartyId(partyId);
    }

    public String getPartyIdentificationTypeId() {
        return this.getPartyIdentificationId().getPartyIdentificationTypeId();
    }
        
    public void setPartyIdentificationTypeId(String partyIdentificationTypeId) {
        this.getPartyIdentificationId().setPartyIdentificationTypeId(partyIdentificationTypeId);
    }

    private String idValue;

    public String getIdValue() {
        return this.idValue;
    }

    public void setIdValue(String idValue) {
        this.idValue = idValue;
    }

    private String verified;

    public String getVerified() {
        return this.verified;
    }

    public void setVerified(String verified) {
        this.verified = verified;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractPartyIdentificationState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getPartyIdentificationTypeId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof PartyIdentificationState) {
            return Objects.equals(this.getPartyIdentificationTypeId(), ((PartyIdentificationState)obj).getPartyIdentificationTypeId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof PartyIdentificationStateCreated) {
            when((PartyIdentificationStateCreated) e);
        } else if (e instanceof PartyIdentificationStateMergePatched) {
            when((PartyIdentificationStateMergePatched) e);
        } else if (e instanceof PartyIdentificationStateRemoved) {
            when((PartyIdentificationStateRemoved) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(PartyIdentificationStateCreated e) {
        throwOnWrongEvent(e);

        this.setIdValue(e.getIdValue());
        this.setVerified(e.getVerified());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(PartyIdentificationState s) {
        if (s == this) {
            return;
        }
        this.setIdValue(s.getIdValue());
        this.setVerified(s.getVerified());
    }

    public void when(PartyIdentificationStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getIdValue() == null) {
            if (e.getIsPropertyIdValueRemoved() != null && e.getIsPropertyIdValueRemoved()) {
                this.setIdValue(null);
            }
        } else {
            this.setIdValue(e.getIdValue());
        }
        if (e.getVerified() == null) {
            if (e.getIsPropertyVerifiedRemoved() != null && e.getIsPropertyVerifiedRemoved()) {
                this.setVerified(null);
            }
        } else {
            this.setVerified(e.getVerified());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void when(PartyIdentificationEvent.PartyIdentificationStateRemoved e) {
        throwOnWrongEvent(e);

        //this.set__Deleted__(true);
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(PartyIdentificationEvent event) {
        String stateEntityIdPartyId = this.getPartyIdentificationId().getPartyId();
        String eventEntityIdPartyId = ((PartyIdentificationEvent.SqlPartyIdentificationEvent)event).getPartyIdentificationEventId().getPartyId();
        if (!stateEntityIdPartyId.equals(eventEntityIdPartyId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id PartyId %1$s in state but entity id PartyId %2$s in event", stateEntityIdPartyId, eventEntityIdPartyId);
        }

        String stateEntityIdPartyIdentificationTypeId = this.getPartyIdentificationId().getPartyIdentificationTypeId();
        String eventEntityIdPartyIdentificationTypeId = ((PartyIdentificationEvent.SqlPartyIdentificationEvent)event).getPartyIdentificationEventId().getPartyIdentificationTypeId();
        if (!stateEntityIdPartyIdentificationTypeId.equals(eventEntityIdPartyIdentificationTypeId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id PartyIdentificationTypeId %1$s in state but entity id PartyIdentificationTypeId %2$s in event", stateEntityIdPartyIdentificationTypeId, eventEntityIdPartyIdentificationTypeId);
        }


        if (getForReapplying()) { return; }
        PartyIdentificationStateEvent stateEvent = event instanceof PartyIdentificationStateEvent ? (PartyIdentificationStateEvent)event : null;
        if (stateEvent == null) { return; }

        Long stateVersion = this.getVersion();
        Long stateEventStateVersion = stateEvent.getVersion();
        //if (stateEventStateVersion == null) {
        stateEventStateVersion = stateVersion == null ? PartyIdentificationState.VERSION_NULL : stateVersion;
        stateEvent.setVersion(stateEventStateVersion);
        //}
        //if (!(stateVersion == null && stateEventStateVersion.equals(PartyIdentificationState.VERSION_NULL)) && !stateEventStateVersion.equals(stateVersion))
        //{
        //    throw DomainError.named("concurrencyConflict", "Conflict between stateVersion (%1$s) and stateEventStateVersion (%2$s)", stateVersion, stateEventStateVersion);
        //}

    }


    public static class SimplePartyIdentificationState extends AbstractPartyIdentificationState {

        public SimplePartyIdentificationState() {
        }

        public static SimplePartyIdentificationState newForReapplying() {
            SimplePartyIdentificationState s = new SimplePartyIdentificationState();
            s.initializeForReapplying();
            return s;
        }

    }



}

