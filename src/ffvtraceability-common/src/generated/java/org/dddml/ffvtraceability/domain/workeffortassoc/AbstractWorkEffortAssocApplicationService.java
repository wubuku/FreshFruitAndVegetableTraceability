// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.workeffortassoc;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractWorkEffortAssocApplicationService implements WorkEffortAssocApplicationService {

    private EventStore eventStore;

    protected EventStore getEventStore()
    {
        return eventStore;
    }

    private WorkEffortAssocStateRepository stateRepository;

    protected WorkEffortAssocStateRepository getStateRepository() {
        return stateRepository;
    }

    private WorkEffortAssocStateQueryRepository stateQueryRepository;

    protected WorkEffortAssocStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    private AggregateEventListener<WorkEffortAssocAggregate, WorkEffortAssocState> aggregateEventListener;

    public AggregateEventListener<WorkEffortAssocAggregate, WorkEffortAssocState> getAggregateEventListener() {
        return aggregateEventListener;
    }

    public void setAggregateEventListener(AggregateEventListener<WorkEffortAssocAggregate, WorkEffortAssocState> eventListener) {
        this.aggregateEventListener = eventListener;
    }

    public AbstractWorkEffortAssocApplicationService(EventStore eventStore, WorkEffortAssocStateRepository stateRepository, WorkEffortAssocStateQueryRepository stateQueryRepository) {
        this.eventStore = eventStore;
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(WorkEffortAssocCommand.CreateWorkEffortAssoc c) {
        update(c, ar -> ar.create(c));
    }

    public void when(WorkEffortAssocCommand.MergePatchWorkEffortAssoc c) {
        update(c, ar -> ar.mergePatch(c));
    }

    public WorkEffortAssocState get(WorkEffortAssocId id) {
        WorkEffortAssocState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<WorkEffortAssocState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<WorkEffortAssocState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<WorkEffortAssocState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<WorkEffortAssocState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public WorkEffortAssocEvent getEvent(WorkEffortAssocId workEffortAssocId, long version) {
        WorkEffortAssocEvent e = (WorkEffortAssocEvent)getEventStore().getEvent(toEventStoreAggregateId(workEffortAssocId), version);
        if (e != null) {
            ((WorkEffortAssocEvent.SqlWorkEffortAssocEvent)e).setEventReadOnly(true); 
        } else if (version == -1) {
            return getEvent(workEffortAssocId, 0);
        }
        return e;
    }

    public WorkEffortAssocState getHistoryState(WorkEffortAssocId workEffortAssocId, long version) {
        EventStream eventStream = getEventStore().loadEventStream(AbstractWorkEffortAssocEvent.class, toEventStoreAggregateId(workEffortAssocId), version - 1);
        return new AbstractWorkEffortAssocState.SimpleWorkEffortAssocState(eventStream.getEvents());
    }


    public WorkEffortAssocAggregate getWorkEffortAssocAggregate(WorkEffortAssocState state) {
        return new AbstractWorkEffortAssocAggregate.SimpleWorkEffortAssocAggregate(state);
    }

    public EventStoreAggregateId toEventStoreAggregateId(WorkEffortAssocId aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(WorkEffortAssocCommand c, Consumer<WorkEffortAssocAggregate> action) {
        WorkEffortAssocId aggregateId = c.getWorkEffortAssocId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        WorkEffortAssocState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        WorkEffortAssocAggregate aggregate = getWorkEffortAssocAggregate(state);
        aggregate.throwOnInvalidStateTransition(c);
        action.accept(aggregate);
        persist(eventStoreAggregateId, c.getVersion() == null ? WorkEffortAssocState.VERSION_NULL : c.getVersion(), aggregate, state); // State version may be null!

    }

    private DomainEventPublisher domainEventPublisher;

    public void setDomainEventPublisher(DomainEventPublisher domainEventPublisher) {
        this.domainEventPublisher = domainEventPublisher;
    }

    public DomainEventPublisher getDomainEventPublisher() {
        if (domainEventPublisher != null) { return domainEventPublisher; }
        return ApplicationContext.current.get(DomainEventPublisher.class);
    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, WorkEffortAssocAggregate aggregate, WorkEffortAssocState state) {
        final DomainEventPublisher ep = getDomainEventPublisher();
        getEventStore().appendEvents(eventStoreAggregateId, version, 
            aggregate.getChanges(), (events) -> { 
                getStateRepository().save(state); 
                if (ep != null) {
                    ep.publish(org.dddml.ffvtraceability.domain.workeffortassoc.WorkEffortAssocAggregate.class,
                        eventStoreAggregateId.getId(),
                        (List<Event>)events);
                }
            });
        if (aggregateEventListener != null) {
            aggregateEventListener.eventAppended(new AggregateEvent<>(aggregate, state, aggregate.getChanges()));
        }
    }

    void initialize(WorkEffortAssocEvent.WorkEffortAssocStateCreated stateCreated) {
        WorkEffortAssocId aggregateId = ((WorkEffortAssocEvent.SqlWorkEffortAssocEvent)stateCreated).getWorkEffortAssocEventId().getWorkEffortAssocId();
        WorkEffortAssocState.SqlWorkEffortAssocState state = new AbstractWorkEffortAssocState.SimpleWorkEffortAssocState();
        state.setWorkEffortAssocId(aggregateId);

        WorkEffortAssocAggregate aggregate = getWorkEffortAssocAggregate(state);
        ((AbstractWorkEffortAssocAggregate) aggregate).apply(stateCreated);

        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        persist(eventStoreAggregateId, ((WorkEffortAssocEvent.SqlWorkEffortAssocEvent)stateCreated).getWorkEffortAssocEventId().getVersion(), aggregate, state);
    }

    protected boolean isDuplicateCommand(WorkEffortAssocCommand command, EventStoreAggregateId eventStoreAggregateId, WorkEffortAssocState state) {
        boolean duplicate = false;
        if (command.getVersion() == null) { command.setVersion(WorkEffortAssocState.VERSION_NULL); }
        if (state.getVersion() != null && state.getVersion() > command.getVersion()) {
            Event lastEvent = getEventStore().getEvent(AbstractWorkEffortAssocEvent.class, eventStoreAggregateId, command.getVersion());
            if (lastEvent != null && lastEvent instanceof AbstractEvent
               && command.getCommandId() != null && command.getCommandId().equals(((AbstractEvent) lastEvent).getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    public static class SimpleWorkEffortAssocApplicationService extends AbstractWorkEffortAssocApplicationService {
        public SimpleWorkEffortAssocApplicationService(EventStore eventStore, WorkEffortAssocStateRepository stateRepository, WorkEffortAssocStateQueryRepository stateQueryRepository)
        {
            super(eventStore, stateRepository, stateQueryRepository);
        }
    }

}

