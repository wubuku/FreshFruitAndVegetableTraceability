// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attribute;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchAttributeDto extends AbstractAttributeCommandDto implements AttributeCommand.CreateOrMergePatchAttribute {

    /**
     * Defines the data type for the attribute's values
     */
    private String attributeType;

    public String getAttributeType()
    {
        return this.attributeType;
    }

    public void setAttributeType(String attributeType)
    {
        this.attributeType = attributeType;
    }

    /**
     * Attribute Name
     */
    private String attributeName;

    public String getAttributeName()
    {
        return this.attributeName;
    }

    public void setAttributeName(String attributeName)
    {
        this.attributeName = attributeName;
    }

    /**
     * Description
     */
    private String description;

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }

    /**
     * Indicates whether a value must be provided when saving the record
     */
    private String isMandatory;

    public String getIsMandatory()
    {
        return this.isMandatory;
    }

    public void setIsMandatory(String isMandatory)
    {
        this.isMandatory = isMandatory;
    }

    /**
     * Specifies the maximum length allowed for the attribute's value
     */
    private Long attributeLength;

    public Long getAttributeLength()
    {
        return this.attributeLength;
    }

    public void setAttributeLength(Long attributeLength)
    {
        this.attributeLength = attributeLength;
    }

    /**
     * Indicates whether the attribute represents a list of predefined values
     */
    private String isEnumeration;

    public String getIsEnumeration()
    {
        return this.isEnumeration;
    }

    public void setIsEnumeration(String isEnumeration)
    {
        this.isEnumeration = isEnumeration;
    }

    /**
     * Specifies the number of decimal places for the attribute's value
     */
    private Long scale;

    public Long getScale()
    {
        return this.scale;
    }

    public void setScale(Long scale)
    {
        this.scale = scale;
    }

    /**
     * Specifies the unit of measure for the attribute's value
     */
    private String truncatedTo;

    public String getTruncatedTo()
    {
        return this.truncatedTo;
    }

    public void setTruncatedTo(String truncatedTo)
    {
        this.truncatedTo = truncatedTo;
    }

    /**
     * Active
     */
    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }


    private CreateOrMergePatchAttributeValueDto[] attributeValues = new CreateOrMergePatchAttributeValueDto[0];

    public CreateOrMergePatchAttributeValueDto[] getAttributeValues()
    {
        return this.attributeValues;
    }

    public void setAttributeValues(CreateOrMergePatchAttributeValueDto[] attributeValues)
    {
        this.attributeValues = attributeValues;
    }

    private Boolean isPropertyAttributeTypeRemoved;

    public Boolean getIsPropertyAttributeTypeRemoved()
    {
        return this.isPropertyAttributeTypeRemoved;
    }

    public void setIsPropertyAttributeTypeRemoved(Boolean removed)
    {
        this.isPropertyAttributeTypeRemoved = removed;
    }

    private Boolean isPropertyAttributeNameRemoved;

    public Boolean getIsPropertyAttributeNameRemoved()
    {
        return this.isPropertyAttributeNameRemoved;
    }

    public void setIsPropertyAttributeNameRemoved(Boolean removed)
    {
        this.isPropertyAttributeNameRemoved = removed;
    }

    private Boolean isPropertyDescriptionRemoved;

    public Boolean getIsPropertyDescriptionRemoved()
    {
        return this.isPropertyDescriptionRemoved;
    }

    public void setIsPropertyDescriptionRemoved(Boolean removed)
    {
        this.isPropertyDescriptionRemoved = removed;
    }

    private Boolean isPropertyIsMandatoryRemoved;

    public Boolean getIsPropertyIsMandatoryRemoved()
    {
        return this.isPropertyIsMandatoryRemoved;
    }

    public void setIsPropertyIsMandatoryRemoved(Boolean removed)
    {
        this.isPropertyIsMandatoryRemoved = removed;
    }

    private Boolean isPropertyAttributeLengthRemoved;

    public Boolean getIsPropertyAttributeLengthRemoved()
    {
        return this.isPropertyAttributeLengthRemoved;
    }

    public void setIsPropertyAttributeLengthRemoved(Boolean removed)
    {
        this.isPropertyAttributeLengthRemoved = removed;
    }

    private Boolean isPropertyIsEnumerationRemoved;

    public Boolean getIsPropertyIsEnumerationRemoved()
    {
        return this.isPropertyIsEnumerationRemoved;
    }

    public void setIsPropertyIsEnumerationRemoved(Boolean removed)
    {
        this.isPropertyIsEnumerationRemoved = removed;
    }

    private Boolean isPropertyScaleRemoved;

    public Boolean getIsPropertyScaleRemoved()
    {
        return this.isPropertyScaleRemoved;
    }

    public void setIsPropertyScaleRemoved(Boolean removed)
    {
        this.isPropertyScaleRemoved = removed;
    }

    private Boolean isPropertyTruncatedToRemoved;

    public Boolean getIsPropertyTruncatedToRemoved()
    {
        return this.isPropertyTruncatedToRemoved;
    }

    public void setIsPropertyTruncatedToRemoved(Boolean removed)
    {
        this.isPropertyTruncatedToRemoved = removed;
    }

    private Boolean isPropertyActiveRemoved;

    public Boolean getIsPropertyActiveRemoved()
    {
        return this.isPropertyActiveRemoved;
    }

    public void setIsPropertyActiveRemoved(Boolean removed)
    {
        this.isPropertyActiveRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchAttribute command)
    {
        ((AbstractAttributeCommandDto) this).copyTo(command);
        command.setAttributeType(this.getAttributeType());
        command.setAttributeName(this.getAttributeName());
        command.setDescription(this.getDescription());
        command.setIsMandatory(this.getIsMandatory());
        command.setAttributeLength(this.getAttributeLength());
        command.setIsEnumeration(this.getIsEnumeration());
        command.setScale(this.getScale());
        command.setTruncatedTo(this.getTruncatedTo());
        command.setActive(this.getActive());
    }

    public AttributeCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractAttributeCommand.SimpleCreateAttribute command = new AbstractAttributeCommand.SimpleCreateAttribute();
            copyTo((AbstractAttributeCommand.AbstractCreateAttribute) command);
            if (this.getAttributeValues() != null) {
                for (CreateOrMergePatchAttributeValueDto cmd : this.getAttributeValues()) {
                    cmd.setCommandType(COMMAND_TYPE_CREATE);
                    command.getAttributeValues().add((AttributeValueCommand.CreateAttributeValue) cmd.toCommand());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractAttributeCommand.SimpleMergePatchAttribute command = new AbstractAttributeCommand.SimpleMergePatchAttribute();
            copyTo((AbstractAttributeCommand.SimpleMergePatchAttribute) command);
            if (this.getAttributeValues() != null) {
                for (CreateOrMergePatchAttributeValueDto cmd : this.getAttributeValues()) {
                    command.getAttributeValueCommands().add(cmd.toCommand());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public AttributeCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateAttributeDto command = new CreateAttributeDto();
            copyTo((CreateAttribute) command);
            if (this.getAttributeValues() != null) {
                for (CreateOrMergePatchAttributeValueDto cmd : this.getAttributeValues()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreateAttributeValueCommands().add((AttributeValueCommand.CreateAttributeValue) cmd.toSubclass());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchAttributeDto command = new MergePatchAttributeDto();
            copyTo((MergePatchAttribute) command);
            if (this.getAttributeValues() != null) {
                for (CreateOrMergePatchAttributeValueDto cmd : this.getAttributeValues()) {
                    command.getAttributeValueCommands().add(cmd.toSubclass());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateAttribute command)
    {
        copyTo((CreateOrMergePatchAttribute) command);
    }

    public void copyTo(MergePatchAttribute command)
    {
        copyTo((CreateOrMergePatchAttribute) command);
        command.setIsPropertyAttributeTypeRemoved(this.getIsPropertyAttributeTypeRemoved());
        command.setIsPropertyAttributeNameRemoved(this.getIsPropertyAttributeNameRemoved());
        command.setIsPropertyDescriptionRemoved(this.getIsPropertyDescriptionRemoved());
        command.setIsPropertyIsMandatoryRemoved(this.getIsPropertyIsMandatoryRemoved());
        command.setIsPropertyAttributeLengthRemoved(this.getIsPropertyAttributeLengthRemoved());
        command.setIsPropertyIsEnumerationRemoved(this.getIsPropertyIsEnumerationRemoved());
        command.setIsPropertyScaleRemoved(this.getIsPropertyScaleRemoved());
        command.setIsPropertyTruncatedToRemoved(this.getIsPropertyTruncatedToRemoved());
        command.setIsPropertyActiveRemoved(this.getIsPropertyActiveRemoved());
    }

    public static class CreateAttributeDto extends CreateOrMergePatchAttributeDto implements AttributeCommand.CreateAttribute
    {
        public CreateAttributeDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public AttributeCommand.CreateAttribute toCreateAttribute()
        {
            return (AttributeCommand.CreateAttribute) toCommand();
        }


        @Override
        public CreateAttributeValueCommandCollection getCreateAttributeValueCommands() {
            return new CreateAttributeValueCommandCollection() {
                @Override
                public void add(AttributeValueCommand.CreateAttributeValue c) {
                    java.util.List<CreateOrMergePatchAttributeValueDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getAttributeValues()));
                    list.add((CreateOrMergePatchAttributeValueDto) c);
                    setAttributeValues(list.toArray(new CreateOrMergePatchAttributeValueDto[0]));
                }

                @Override
                public void remove(AttributeValueCommand.CreateAttributeValue c) {
                    java.util.List<CreateOrMergePatchAttributeValueDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getAttributeValues()));
                    list.remove((CreateOrMergePatchAttributeValueDto) c);
                    setAttributeValues(list.toArray(new CreateOrMergePatchAttributeValueDto[0]));
                }

                @Override
                public void clear() {
                    setAttributeValues(new CreateOrMergePatchAttributeValueDto[]{});
                }

                @Override
                public java.util.Iterator<AttributeValueCommand.CreateAttributeValue> iterator() {
                    return java.util.Arrays.stream(getAttributeValues())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (AttributeValueCommand.CreateAttributeValue) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public AttributeValueCommand.CreateAttributeValue newCreateAttributeValue() {
            return new CreateOrMergePatchAttributeValueDto.CreateAttributeValueDto();
        }

    }

    public static class MergePatchAttributeDto extends CreateOrMergePatchAttributeDto implements AttributeCommand.MergePatchAttribute
    {
        public MergePatchAttributeDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public AttributeCommand.MergePatchAttribute toMergePatchAttribute()
        {
            return (AttributeCommand.MergePatchAttribute) toCommand();
        }


        @Override
        public AttributeValueCommandCollection getAttributeValueCommands() {
            return new AttributeValueCommandCollection() {
                @Override
                public void add(AttributeValueCommand c) {
                    java.util.List<CreateOrMergePatchAttributeValueDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getAttributeValues()));
                    list.add((CreateOrMergePatchAttributeValueDto) c);
                    setAttributeValues(list.toArray(new CreateOrMergePatchAttributeValueDto[0]));
                }

                @Override
                public void remove(AttributeValueCommand c) {
                    java.util.List<CreateOrMergePatchAttributeValueDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getAttributeValues()));
                    list.remove((CreateOrMergePatchAttributeValueDto) c);
                    setAttributeValues(list.toArray(new CreateOrMergePatchAttributeValueDto[0]));
                }

                @Override
                public void clear() {
                    setAttributeValues(new CreateOrMergePatchAttributeValueDto[]{});
                }

                @Override
                public java.util.Iterator<AttributeValueCommand> iterator() {
                    return java.util.Arrays.stream(getAttributeValues())
                            .map(e -> (AttributeValueCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public AttributeValueCommand.CreateAttributeValue newCreateAttributeValue() {
            return new CreateOrMergePatchAttributeValueDto.CreateAttributeValueDto();
        }

        @Override
        public AttributeValueCommand.MergePatchAttributeValue newMergePatchAttributeValue() {
            return new CreateOrMergePatchAttributeValueDto.MergePatchAttributeValueDto();
        }

        @Override
        public AttributeValueCommand.RemoveAttributeValue newRemoveAttributeValue() {
            return new RemoveAttributeValueDto();
        }

    }

}

