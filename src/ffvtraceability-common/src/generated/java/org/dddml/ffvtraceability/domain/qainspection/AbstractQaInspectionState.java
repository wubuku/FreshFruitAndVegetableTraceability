// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.qainspection;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.qainspection.QaInspectionEvent.*;

public abstract class AbstractQaInspectionState implements QaInspectionState.SqlQaInspectionState {

    private String qaInspectionId;

    public String getQaInspectionId() {
        return this.qaInspectionId;
    }

    public void setQaInspectionId(String qaInspectionId) {
        this.qaInspectionId = qaInspectionId;
    }

    private String receiptId;

    public String getReceiptId() {
        return this.receiptId;
    }

    public void setReceiptId(String receiptId) {
        this.receiptId = receiptId;
    }

    private String statusId;

    public String getStatusId() {
        return this.statusId;
    }

    public void setStatusId(String statusId) {
        this.statusId = statusId;
    }

    private String inspectionTypeId;

    public String getInspectionTypeId() {
        return this.inspectionTypeId;
    }

    public void setInspectionTypeId(String inspectionTypeId) {
        this.inspectionTypeId = inspectionTypeId;
    }

    private String comments;

    public String getComments() {
        return this.comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    private String inspectionFacilityId;

    public String getInspectionFacilityId() {
        return this.inspectionFacilityId;
    }

    public void setInspectionFacilityId(String inspectionFacilityId) {
        this.inspectionFacilityId = inspectionFacilityId;
    }

    private String inspectedBy;

    public String getInspectedBy() {
        return this.inspectedBy;
    }

    public void setInspectedBy(String inspectedBy) {
        this.inspectedBy = inspectedBy;
    }

    private OffsetDateTime inspectedAt;

    public OffsetDateTime getInspectedAt() {
        return this.inspectedAt;
    }

    public void setInspectedAt(OffsetDateTime inspectedAt) {
        this.inspectedAt = inspectedAt;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractQaInspectionState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setQaInspectionId(((QaInspectionEvent.SqlQaInspectionEvent) events.get(0)).getQaInspectionEventId().getQaInspectionId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? QaInspectionState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractQaInspectionState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getQaInspectionId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof QaInspectionState) {
            return Objects.equals(this.getQaInspectionId(), ((QaInspectionState)obj).getQaInspectionId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof QaInspectionStateCreated) {
            when((QaInspectionStateCreated) e);
        } else if (e instanceof QaInspectionStateMergePatched) {
            when((QaInspectionStateMergePatched) e);
        } else if (e instanceof AbstractQaInspectionEvent.QaInspectionActionEvent) {
            when((AbstractQaInspectionEvent.QaInspectionActionEvent)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(QaInspectionStateCreated e) {
        throwOnWrongEvent(e);

        this.setReceiptId(e.getReceiptId());
        this.setStatusId(e.getStatusId());
        this.setInspectionTypeId(e.getInspectionTypeId());
        this.setComments(e.getComments());
        this.setInspectionFacilityId(e.getInspectionFacilityId());
        this.setInspectedBy(e.getInspectedBy());
        this.setInspectedAt(e.getInspectedAt());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(QaInspectionState s) {
        if (s == this) {
            return;
        }
        this.setReceiptId(s.getReceiptId());
        this.setStatusId(s.getStatusId());
        this.setInspectionTypeId(s.getInspectionTypeId());
        this.setComments(s.getComments());
        this.setInspectionFacilityId(s.getInspectionFacilityId());
        this.setInspectedBy(s.getInspectedBy());
        this.setInspectedAt(s.getInspectedAt());
    }

    public void when(QaInspectionStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getReceiptId() == null) {
            if (e.getIsPropertyReceiptIdRemoved() != null && e.getIsPropertyReceiptIdRemoved()) {
                this.setReceiptId(null);
            }
        } else {
            this.setReceiptId(e.getReceiptId());
        }
        if (e.getStatusId() == null) {
            if (e.getIsPropertyStatusIdRemoved() != null && e.getIsPropertyStatusIdRemoved()) {
                this.setStatusId(null);
            }
        } else {
            this.setStatusId(e.getStatusId());
        }
        if (e.getInspectionTypeId() == null) {
            if (e.getIsPropertyInspectionTypeIdRemoved() != null && e.getIsPropertyInspectionTypeIdRemoved()) {
                this.setInspectionTypeId(null);
            }
        } else {
            this.setInspectionTypeId(e.getInspectionTypeId());
        }
        if (e.getComments() == null) {
            if (e.getIsPropertyCommentsRemoved() != null && e.getIsPropertyCommentsRemoved()) {
                this.setComments(null);
            }
        } else {
            this.setComments(e.getComments());
        }
        if (e.getInspectionFacilityId() == null) {
            if (e.getIsPropertyInspectionFacilityIdRemoved() != null && e.getIsPropertyInspectionFacilityIdRemoved()) {
                this.setInspectionFacilityId(null);
            }
        } else {
            this.setInspectionFacilityId(e.getInspectionFacilityId());
        }
        if (e.getInspectedBy() == null) {
            if (e.getIsPropertyInspectedByRemoved() != null && e.getIsPropertyInspectedByRemoved()) {
                this.setInspectedBy(null);
            }
        } else {
            this.setInspectedBy(e.getInspectedBy());
        }
        if (e.getInspectedAt() == null) {
            if (e.getIsPropertyInspectedAtRemoved() != null && e.getIsPropertyInspectedAtRemoved()) {
                this.setInspectedAt(null);
            }
        } else {
            this.setInspectedAt(e.getInspectedAt());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void when(AbstractQaInspectionEvent.QaInspectionActionEvent e) {
        throwOnWrongEvent(e);

        String value = e.getValue();
        String Value = value;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        QaInspectionState updatedQaInspectionState = ApplicationContext.current.get(IQaInspectionActionLogic.class).mutate(
                this, value, MutationContext.of(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}}));


        if (this != updatedQaInspectionState) { merge(updatedQaInspectionState); } //else do nothing

    }

    public void save() {
    }

    protected void throwOnWrongEvent(QaInspectionEvent event) {
        String stateEntityId = this.getQaInspectionId(); // Aggregate Id
        String eventEntityId = ((QaInspectionEvent.SqlQaInspectionEvent)event).getQaInspectionEventId().getQaInspectionId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((QaInspectionEvent.SqlQaInspectionEvent)event).getQaInspectionEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getQaInspectionEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleQaInspectionState extends AbstractQaInspectionState {

        public SimpleQaInspectionState() {
        }

        public SimpleQaInspectionState(List<Event> events) {
            super(events);
        }

        public static SimpleQaInspectionState newForReapplying() {
            SimpleQaInspectionState s = new SimpleQaInspectionState();
            s.initializeForReapplying();
            return s;
        }

    }



}

