// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facilitycontactmech;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface FacilityContactMechCommand extends Command {

    FacilityContactMechId getFacilityContactMechId();

    void setFacilityContactMechId(FacilityContactMechId facilityContactMechId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(FacilityContactMechState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((FacilityContactMechCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (isCreationCommand((FacilityContactMechCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(FacilityContactMechCommand c) {
        if ((c instanceof FacilityContactMechCommand.CreateFacilityContactMech) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(FacilityContactMechState.VERSION_NULL)))
            return true;
        if ((c instanceof FacilityContactMechCommand.MergePatchFacilityContactMech))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(FacilityContactMechState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchFacilityContactMech extends FacilityContactMechCommand {
        OffsetDateTime getThruDate();

        void setThruDate(OffsetDateTime thruDate);

        String getExtension();

        void setExtension(String extension);

        String getComments();

        void setComments(String comments);

    }

    interface CreateFacilityContactMech extends CreateOrMergePatchFacilityContactMech {
        CreateFacilityContactMechPurposeCommandCollection getCreateFacilityContactMechPurposeCommands();

        FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose newCreateFacilityContactMechPurpose();

    }

    interface MergePatchFacilityContactMech extends CreateOrMergePatchFacilityContactMech {
        Boolean getIsPropertyThruDateRemoved();

        void setIsPropertyThruDateRemoved(Boolean removed);

        Boolean getIsPropertyExtensionRemoved();

        void setIsPropertyExtensionRemoved(Boolean removed);

        Boolean getIsPropertyCommentsRemoved();

        void setIsPropertyCommentsRemoved(Boolean removed);


        FacilityContactMechPurposeCommandCollection getFacilityContactMechPurposeCommands();

        FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose newCreateFacilityContactMechPurpose();

        FacilityContactMechPurposeCommand.MergePatchFacilityContactMechPurpose newMergePatchFacilityContactMechPurpose();

        FacilityContactMechPurposeCommand.RemoveFacilityContactMechPurpose newRemoveFacilityContactMechPurpose();

    }

    interface DeleteFacilityContactMech extends FacilityContactMechCommand {
    }

    interface CreateFacilityContactMechPurposeCommandCollection extends Iterable<FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose> {
        void add(FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose c);

        void remove(FacilityContactMechPurposeCommand.CreateFacilityContactMechPurpose c);

        void clear();
    }

    interface FacilityContactMechPurposeCommandCollection extends Iterable<FacilityContactMechPurposeCommand> {
        void add(FacilityContactMechPurposeCommand c);

        void remove(FacilityContactMechPurposeCommand c);

        void clear();
    }

}

