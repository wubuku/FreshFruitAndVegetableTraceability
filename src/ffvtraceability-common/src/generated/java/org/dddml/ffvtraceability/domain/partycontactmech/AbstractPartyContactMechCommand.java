// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.AbstractCommand;

public abstract class AbstractPartyContactMechCommand extends AbstractCommand implements PartyContactMechCommand {

    private PartyContactMechId partyContactMechId;

    public PartyContactMechId getPartyContactMechId()
    {
        return this.partyContactMechId;
    }

    public void setPartyContactMechId(PartyContactMechId partyContactMechId)
    {
        this.partyContactMechId = partyContactMechId;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }


    public static abstract class AbstractCreateOrMergePatchPartyContactMech extends AbstractPartyContactMechCommand implements CreateOrMergePatchPartyContactMech
    {
        private OffsetDateTime thruDate;

        public OffsetDateTime getThruDate()
        {
            return this.thruDate;
        }

        public void setThruDate(OffsetDateTime thruDate)
        {
            this.thruDate = thruDate;
        }

        private String roleTypeId;

        public String getRoleTypeId()
        {
            return this.roleTypeId;
        }

        public void setRoleTypeId(String roleTypeId)
        {
            this.roleTypeId = roleTypeId;
        }

        private String allowSolicitation;

        public String getAllowSolicitation()
        {
            return this.allowSolicitation;
        }

        public void setAllowSolicitation(String allowSolicitation)
        {
            this.allowSolicitation = allowSolicitation;
        }

        private String extension;

        public String getExtension()
        {
            return this.extension;
        }

        public void setExtension(String extension)
        {
            this.extension = extension;
        }

        private String verified;

        public String getVerified()
        {
            return this.verified;
        }

        public void setVerified(String verified)
        {
            this.verified = verified;
        }

        private String comments;

        public String getComments()
        {
            return this.comments;
        }

        public void setComments(String comments)
        {
            this.comments = comments;
        }

        private Long yearsWithContactMech;

        public Long getYearsWithContactMech()
        {
            return this.yearsWithContactMech;
        }

        public void setYearsWithContactMech(Long yearsWithContactMech)
        {
            this.yearsWithContactMech = yearsWithContactMech;
        }

        private Long monthsWithContactMech;

        public Long getMonthsWithContactMech()
        {
            return this.monthsWithContactMech;
        }

        public void setMonthsWithContactMech(Long monthsWithContactMech)
        {
            this.monthsWithContactMech = monthsWithContactMech;
        }

        public PartyContactMechPurposeCommand.CreatePartyContactMechPurpose newCreatePartyContactMechPurpose()
        {
            AbstractPartyContactMechPurposeCommand.SimpleCreatePartyContactMechPurpose c = new AbstractPartyContactMechPurposeCommand.SimpleCreatePartyContactMechPurpose();
            c.setPartyContactMechId(this.getPartyContactMechId());

            return c;
        }

        public PartyContactMechPurposeCommand.MergePatchPartyContactMechPurpose newMergePatchPartyContactMechPurpose()
        {
            AbstractPartyContactMechPurposeCommand.SimpleMergePatchPartyContactMechPurpose c = new AbstractPartyContactMechPurposeCommand.SimpleMergePatchPartyContactMechPurpose();
            c.setPartyContactMechId(this.getPartyContactMechId());

            return c;
        }

        public PartyContactMechPurposeCommand.RemovePartyContactMechPurpose newRemovePartyContactMechPurpose()
        {
            AbstractPartyContactMechPurposeCommand.SimpleRemovePartyContactMechPurpose c = new AbstractPartyContactMechPurposeCommand.SimpleRemovePartyContactMechPurpose();
            c.setPartyContactMechId(this.getPartyContactMechId());

            return c;
        }

    }

    public static abstract class AbstractCreatePartyContactMech extends AbstractCreateOrMergePatchPartyContactMech implements CreatePartyContactMech
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }

        private CreatePartyContactMechPurposeCommandCollection createPartyContactMechPurposeCommands = new SimpleCreatePartyContactMechPurposeCommandCollection();

        public CreatePartyContactMechPurposeCommandCollection getCreatePartyContactMechPurposeCommands() {
            return this.createPartyContactMechPurposeCommands;
        }

        public CreatePartyContactMechPurposeCommandCollection getPartyContactMechPurposes() {
            return this.createPartyContactMechPurposeCommands; //partyContactMechPurposes;
        }

    }

    public static abstract class AbstractMergePatchPartyContactMech extends AbstractCreateOrMergePatchPartyContactMech implements MergePatchPartyContactMech
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }

        private Boolean isPropertyThruDateRemoved;

        public Boolean getIsPropertyThruDateRemoved()
        {
            return this.isPropertyThruDateRemoved;
        }

        public void setIsPropertyThruDateRemoved(Boolean removed)
        {
            this.isPropertyThruDateRemoved = removed;
        }

        private Boolean isPropertyRoleTypeIdRemoved;

        public Boolean getIsPropertyRoleTypeIdRemoved()
        {
            return this.isPropertyRoleTypeIdRemoved;
        }

        public void setIsPropertyRoleTypeIdRemoved(Boolean removed)
        {
            this.isPropertyRoleTypeIdRemoved = removed;
        }

        private Boolean isPropertyAllowSolicitationRemoved;

        public Boolean getIsPropertyAllowSolicitationRemoved()
        {
            return this.isPropertyAllowSolicitationRemoved;
        }

        public void setIsPropertyAllowSolicitationRemoved(Boolean removed)
        {
            this.isPropertyAllowSolicitationRemoved = removed;
        }

        private Boolean isPropertyExtensionRemoved;

        public Boolean getIsPropertyExtensionRemoved()
        {
            return this.isPropertyExtensionRemoved;
        }

        public void setIsPropertyExtensionRemoved(Boolean removed)
        {
            this.isPropertyExtensionRemoved = removed;
        }

        private Boolean isPropertyVerifiedRemoved;

        public Boolean getIsPropertyVerifiedRemoved()
        {
            return this.isPropertyVerifiedRemoved;
        }

        public void setIsPropertyVerifiedRemoved(Boolean removed)
        {
            this.isPropertyVerifiedRemoved = removed;
        }

        private Boolean isPropertyCommentsRemoved;

        public Boolean getIsPropertyCommentsRemoved()
        {
            return this.isPropertyCommentsRemoved;
        }

        public void setIsPropertyCommentsRemoved(Boolean removed)
        {
            this.isPropertyCommentsRemoved = removed;
        }

        private Boolean isPropertyYearsWithContactMechRemoved;

        public Boolean getIsPropertyYearsWithContactMechRemoved()
        {
            return this.isPropertyYearsWithContactMechRemoved;
        }

        public void setIsPropertyYearsWithContactMechRemoved(Boolean removed)
        {
            this.isPropertyYearsWithContactMechRemoved = removed;
        }

        private Boolean isPropertyMonthsWithContactMechRemoved;

        public Boolean getIsPropertyMonthsWithContactMechRemoved()
        {
            return this.isPropertyMonthsWithContactMechRemoved;
        }

        public void setIsPropertyMonthsWithContactMechRemoved(Boolean removed)
        {
            this.isPropertyMonthsWithContactMechRemoved = removed;
        }


        private PartyContactMechPurposeCommandCollection partyContactMechPurposeCommands = new SimplePartyContactMechPurposeCommandCollection();

        public PartyContactMechPurposeCommandCollection getPartyContactMechPurposeCommands()
        {
            return this.partyContactMechPurposeCommands;
        }

    }

    public static class SimpleCreatePartyContactMech extends AbstractCreatePartyContactMech
    {
    }

    
    public static class SimpleMergePatchPartyContactMech extends AbstractMergePatchPartyContactMech
    {
    }

    
    public static class SimpleDeletePartyContactMech extends AbstractPartyContactMechCommand implements DeletePartyContactMech
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_DELETE;
        }
    }

    
    public static class SimpleCreatePartyContactMechPurposeCommandCollection implements CreatePartyContactMechPurposeCommandCollection {
        private List<PartyContactMechPurposeCommand.CreatePartyContactMechPurpose> innerCommands = new ArrayList<PartyContactMechPurposeCommand.CreatePartyContactMechPurpose>();

        public void add(PartyContactMechPurposeCommand.CreatePartyContactMechPurpose c) {
            innerCommands.add(c);
        }

        public void remove(PartyContactMechPurposeCommand.CreatePartyContactMechPurpose c) {
            innerCommands.remove(c);
        }

        public void clear() {
            innerCommands.clear();
        }

        @Override
        public Iterator<PartyContactMechPurposeCommand.CreatePartyContactMechPurpose> iterator() {
            return innerCommands.iterator();
        }
    }

    public static class SimplePartyContactMechPurposeCommandCollection implements PartyContactMechPurposeCommandCollection {
        private List<PartyContactMechPurposeCommand> innerCommands = new ArrayList<PartyContactMechPurposeCommand>();

        public void add(PartyContactMechPurposeCommand c) {
            innerCommands.add(c);
        }

        public void remove(PartyContactMechPurposeCommand c) {
            innerCommands.remove(c);
        }

        public void clear() {
            innerCommands.clear();
        }

        @Override
        public Iterator<PartyContactMechPurposeCommand> iterator() {
            return innerCommands.iterator();
        }
    }


}

