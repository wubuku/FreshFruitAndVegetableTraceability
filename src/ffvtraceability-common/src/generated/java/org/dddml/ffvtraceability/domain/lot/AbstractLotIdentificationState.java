// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.lot;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.lot.LotIdentificationEvent.*;

public abstract class AbstractLotIdentificationState implements LotIdentificationState.SqlLotIdentificationState {

    private LotIdentificationId lotIdentificationId = new LotIdentificationId();

    public LotIdentificationId getLotIdentificationId() {
        return this.lotIdentificationId;
    }

    public void setLotIdentificationId(LotIdentificationId lotIdentificationId) {
        this.lotIdentificationId = lotIdentificationId;
    }

    private transient LotState lotState;

    public LotState getLotState() {
        return lotState;
    }

    public void setLotState(LotState s) {
        lotState = s;
    }
    
    private LotState protectedLotState;

    protected LotState getProtectedLotState() {
        return protectedLotState;
    }

    protected void setProtectedLotState(LotState protectedLotState) {
        this.protectedLotState = protectedLotState;
    }

    public String getLotId() {
        return this.getLotIdentificationId().getLotId();
    }
        
    public void setLotId(String lotId) {
        this.getLotIdentificationId().setLotId(lotId);
    }

    public String getLotIdentificationTypeId() {
        return this.getLotIdentificationId().getLotIdentificationTypeId();
    }
        
    public void setLotIdentificationTypeId(String lotIdentificationTypeId) {
        this.getLotIdentificationId().setLotIdentificationTypeId(lotIdentificationTypeId);
    }

    private String idValue;

    public String getIdValue() {
        return this.idValue;
    }

    public void setIdValue(String idValue) {
        this.idValue = idValue;
    }

    private String gtin;

    public String getGtin() {
        return this.gtin;
    }

    public void setGtin(String gtin) {
        this.gtin = gtin;
    }

    private String gs1Batch;

    public String getGs1Batch() {
        return this.gs1Batch;
    }

    public void setGs1Batch(String gs1Batch) {
        this.gs1Batch = gs1Batch;
    }

    private String sourceFacilityId;

    public String getSourceFacilityId() {
        return this.sourceFacilityId;
    }

    public void setSourceFacilityId(String sourceFacilityId) {
        this.sourceFacilityId = sourceFacilityId;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractLotIdentificationState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getLotIdentificationTypeId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof LotIdentificationState) {
            return Objects.equals(this.getLotIdentificationTypeId(), ((LotIdentificationState)obj).getLotIdentificationTypeId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof LotIdentificationStateCreated) {
            when((LotIdentificationStateCreated) e);
        } else if (e instanceof LotIdentificationStateMergePatched) {
            when((LotIdentificationStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(LotIdentificationStateCreated e) {
        throwOnWrongEvent(e);

        this.setIdValue(e.getIdValue());
        this.setGtin(e.getGtin());
        this.setGs1Batch(e.getGs1Batch());
        this.setSourceFacilityId(e.getSourceFacilityId());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(LotIdentificationState s) {
        if (s == this) {
            return;
        }
        this.setIdValue(s.getIdValue());
        this.setGtin(s.getGtin());
        this.setGs1Batch(s.getGs1Batch());
        this.setSourceFacilityId(s.getSourceFacilityId());
    }

    public void when(LotIdentificationStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getIdValue() == null) {
            if (e.getIsPropertyIdValueRemoved() != null && e.getIsPropertyIdValueRemoved()) {
                this.setIdValue(null);
            }
        } else {
            this.setIdValue(e.getIdValue());
        }
        if (e.getGtin() == null) {
            if (e.getIsPropertyGtinRemoved() != null && e.getIsPropertyGtinRemoved()) {
                this.setGtin(null);
            }
        } else {
            this.setGtin(e.getGtin());
        }
        if (e.getGs1Batch() == null) {
            if (e.getIsPropertyGs1BatchRemoved() != null && e.getIsPropertyGs1BatchRemoved()) {
                this.setGs1Batch(null);
            }
        } else {
            this.setGs1Batch(e.getGs1Batch());
        }
        if (e.getSourceFacilityId() == null) {
            if (e.getIsPropertySourceFacilityIdRemoved() != null && e.getIsPropertySourceFacilityIdRemoved()) {
                this.setSourceFacilityId(null);
            }
        } else {
            this.setSourceFacilityId(e.getSourceFacilityId());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(LotIdentificationEvent event) {
        String stateEntityIdLotId = this.getLotIdentificationId().getLotId();
        String eventEntityIdLotId = ((LotIdentificationEvent.SqlLotIdentificationEvent)event).getLotIdentificationEventId().getLotId();
        if (!stateEntityIdLotId.equals(eventEntityIdLotId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id LotId %1$s in state but entity id LotId %2$s in event", stateEntityIdLotId, eventEntityIdLotId);
        }

        String stateEntityIdLotIdentificationTypeId = this.getLotIdentificationId().getLotIdentificationTypeId();
        String eventEntityIdLotIdentificationTypeId = ((LotIdentificationEvent.SqlLotIdentificationEvent)event).getLotIdentificationEventId().getLotIdentificationTypeId();
        if (!stateEntityIdLotIdentificationTypeId.equals(eventEntityIdLotIdentificationTypeId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id LotIdentificationTypeId %1$s in state but entity id LotIdentificationTypeId %2$s in event", stateEntityIdLotIdentificationTypeId, eventEntityIdLotIdentificationTypeId);
        }


        if (getForReapplying()) { return; }
        LotIdentificationStateEvent stateEvent = event instanceof LotIdentificationStateEvent ? (LotIdentificationStateEvent)event : null;
        if (stateEvent == null) { return; }

        Long stateVersion = this.getVersion();
        Long stateEventStateVersion = stateEvent.getVersion();
        //if (stateEventStateVersion == null) {
        stateEventStateVersion = stateVersion == null ? LotIdentificationState.VERSION_NULL : stateVersion;
        stateEvent.setVersion(stateEventStateVersion);
        //}
        //if (!(stateVersion == null && stateEventStateVersion.equals(LotIdentificationState.VERSION_NULL)) && !stateEventStateVersion.equals(stateVersion))
        //{
        //    throw DomainError.named("concurrencyConflict", "Conflict between stateVersion (%1$s) and stateEventStateVersion (%2$s)", stateVersion, stateEventStateVersion);
        //}

    }


    public static class SimpleLotIdentificationState extends AbstractLotIdentificationState {

        public SimpleLotIdentificationState() {
        }

        public static SimpleLotIdentificationState newForReapplying() {
            SimpleLotIdentificationState s = new SimpleLotIdentificationState();
            s.initializeForReapplying();
            return s;
        }

    }



}

