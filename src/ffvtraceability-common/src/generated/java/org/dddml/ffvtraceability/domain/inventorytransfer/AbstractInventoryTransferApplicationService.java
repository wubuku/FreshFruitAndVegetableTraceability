// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.inventorytransfer;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractInventoryTransferApplicationService implements InventoryTransferApplicationService {

    private EventStore eventStore;

    protected EventStore getEventStore()
    {
        return eventStore;
    }

    private InventoryTransferStateRepository stateRepository;

    protected InventoryTransferStateRepository getStateRepository() {
        return stateRepository;
    }

    private InventoryTransferStateQueryRepository stateQueryRepository;

    protected InventoryTransferStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    private AggregateEventListener<InventoryTransferAggregate, InventoryTransferState> aggregateEventListener;

    public AggregateEventListener<InventoryTransferAggregate, InventoryTransferState> getAggregateEventListener() {
        return aggregateEventListener;
    }

    public void setAggregateEventListener(AggregateEventListener<InventoryTransferAggregate, InventoryTransferState> eventListener) {
        this.aggregateEventListener = eventListener;
    }

    public AbstractInventoryTransferApplicationService(EventStore eventStore, InventoryTransferStateRepository stateRepository, InventoryTransferStateQueryRepository stateQueryRepository) {
        this.eventStore = eventStore;
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(InventoryTransferCommand.CreateInventoryTransfer c) {
        update(c, ar -> ar.create(c));
    }

    public void when(InventoryTransferCommand.MergePatchInventoryTransfer c) {
        update(c, ar -> ar.mergePatch(c));
    }

    public InventoryTransferState get(String id) {
        InventoryTransferState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<InventoryTransferState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<InventoryTransferState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<InventoryTransferState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<InventoryTransferState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public InventoryTransferEvent getEvent(String inventoryTransferId, long version) {
        InventoryTransferEvent e = (InventoryTransferEvent)getEventStore().getEvent(toEventStoreAggregateId(inventoryTransferId), version);
        if (e != null) {
            ((InventoryTransferEvent.SqlInventoryTransferEvent)e).setEventReadOnly(true); 
        } else if (version == -1) {
            return getEvent(inventoryTransferId, 0);
        }
        return e;
    }

    public InventoryTransferState getHistoryState(String inventoryTransferId, long version) {
        EventStream eventStream = getEventStore().loadEventStream(AbstractInventoryTransferEvent.class, toEventStoreAggregateId(inventoryTransferId), version - 1);
        return new AbstractInventoryTransferState.SimpleInventoryTransferState(eventStream.getEvents());
    }


    public InventoryTransferAggregate getInventoryTransferAggregate(InventoryTransferState state) {
        return new AbstractInventoryTransferAggregate.SimpleInventoryTransferAggregate(state);
    }

    public EventStoreAggregateId toEventStoreAggregateId(String aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(InventoryTransferCommand c, Consumer<InventoryTransferAggregate> action) {
        String aggregateId = c.getInventoryTransferId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        InventoryTransferState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        InventoryTransferAggregate aggregate = getInventoryTransferAggregate(state);
        aggregate.throwOnInvalidStateTransition(c);
        action.accept(aggregate);
        persist(eventStoreAggregateId, c.getVersion() == null ? InventoryTransferState.VERSION_NULL : c.getVersion(), aggregate, state); // State version may be null!

    }

    private DomainEventPublisher domainEventPublisher;

    public void setDomainEventPublisher(DomainEventPublisher domainEventPublisher) {
        this.domainEventPublisher = domainEventPublisher;
    }

    public DomainEventPublisher getDomainEventPublisher() {
        if (domainEventPublisher != null) { return domainEventPublisher; }
        return ApplicationContext.current.get(DomainEventPublisher.class);
    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, InventoryTransferAggregate aggregate, InventoryTransferState state) {
        final DomainEventPublisher ep = getDomainEventPublisher();
        getEventStore().appendEvents(eventStoreAggregateId, version, 
            aggregate.getChanges(), (events) -> { 
                getStateRepository().save(state); 
                if (ep != null) {
                    ep.publish(org.dddml.ffvtraceability.domain.inventorytransfer.InventoryTransferAggregate.class,
                        eventStoreAggregateId.getId(),
                        (List<Event>)events);
                }
            });
        if (aggregateEventListener != null) {
            aggregateEventListener.eventAppended(new AggregateEvent<>(aggregate, state, aggregate.getChanges()));
        }
    }

    void initialize(InventoryTransferEvent.InventoryTransferStateCreated stateCreated) {
        String aggregateId = ((InventoryTransferEvent.SqlInventoryTransferEvent)stateCreated).getInventoryTransferEventId().getInventoryTransferId();
        InventoryTransferState.SqlInventoryTransferState state = new AbstractInventoryTransferState.SimpleInventoryTransferState();
        state.setInventoryTransferId(aggregateId);

        InventoryTransferAggregate aggregate = getInventoryTransferAggregate(state);
        ((AbstractInventoryTransferAggregate) aggregate).apply(stateCreated);

        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        persist(eventStoreAggregateId, ((InventoryTransferEvent.SqlInventoryTransferEvent)stateCreated).getInventoryTransferEventId().getVersion(), aggregate, state);
    }

    protected boolean isDuplicateCommand(InventoryTransferCommand command, EventStoreAggregateId eventStoreAggregateId, InventoryTransferState state) {
        boolean duplicate = false;
        if (command.getVersion() == null) { command.setVersion(InventoryTransferState.VERSION_NULL); }
        if (state.getVersion() != null && state.getVersion() > command.getVersion()) {
            Event lastEvent = getEventStore().getEvent(AbstractInventoryTransferEvent.class, eventStoreAggregateId, command.getVersion());
            if (lastEvent != null && lastEvent instanceof AbstractEvent
               && command.getCommandId() != null && command.getCommandId().equals(((AbstractEvent) lastEvent).getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    public static class SimpleInventoryTransferApplicationService extends AbstractInventoryTransferApplicationService {
        public SimpleInventoryTransferApplicationService(EventStore eventStore, InventoryTransferStateRepository stateRepository, InventoryTransferStateQueryRepository stateQueryRepository)
        {
            super(eventStore, stateRepository, stateQueryRepository);
        }
    }

}

