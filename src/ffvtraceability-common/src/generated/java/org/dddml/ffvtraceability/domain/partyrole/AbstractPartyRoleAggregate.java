// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partyrole;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractPartyRoleAggregate extends AbstractAggregate implements PartyRoleAggregate {
    private PartyRoleState.MutablePartyRoleState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractPartyRoleAggregate(PartyRoleState state) {
        this.state = (PartyRoleState.MutablePartyRoleState)state;
    }

    public PartyRoleState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(PartyRoleCommand.CreatePartyRole c) {
        if (c.getVersion() == null) { c.setVersion(PartyRoleState.VERSION_NULL); }
        PartyRoleEvent e = map(c);
        apply(e);
    }

    public void mergePatch(PartyRoleCommand.MergePatchPartyRole c) {
        PartyRoleEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        PartyRoleCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof PartyRoleEvent) {
            PartyRoleEvent ee = (PartyRoleEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected PartyRoleEvent map(PartyRoleCommand.CreatePartyRole c) {
        PartyRoleEventId stateEventId = new PartyRoleEventId(c.getPartyRoleId(), c.getVersion());
        PartyRoleEvent.PartyRoleStateCreated e = newPartyRoleStateCreated(stateEventId);
        e.setSupplierShortName(c.getSupplierShortName());
        e.setTpaNumber(c.getTpaNumber());
        e.setCertificationCodes(c.getCertificationCodes());
        e.setBankAccountInformation(c.getBankAccountInformation());
        e.setSupplierTypeEnumId(c.getSupplierTypeEnumId());
        e.setSupplierProductTypeDescription(c.getSupplierProductTypeDescription());
        ((AbstractPartyRoleEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected PartyRoleEvent map(PartyRoleCommand.MergePatchPartyRole c) {
        PartyRoleEventId stateEventId = new PartyRoleEventId(c.getPartyRoleId(), c.getVersion());
        PartyRoleEvent.PartyRoleStateMergePatched e = newPartyRoleStateMergePatched(stateEventId);
        e.setSupplierShortName(c.getSupplierShortName());
        e.setTpaNumber(c.getTpaNumber());
        e.setCertificationCodes(c.getCertificationCodes());
        e.setBankAccountInformation(c.getBankAccountInformation());
        e.setSupplierTypeEnumId(c.getSupplierTypeEnumId());
        e.setSupplierProductTypeDescription(c.getSupplierProductTypeDescription());
        e.setIsPropertySupplierShortNameRemoved(c.getIsPropertySupplierShortNameRemoved());
        e.setIsPropertyTpaNumberRemoved(c.getIsPropertyTpaNumberRemoved());
        e.setIsPropertyCertificationCodesRemoved(c.getIsPropertyCertificationCodesRemoved());
        e.setIsPropertyBankAccountInformationRemoved(c.getIsPropertyBankAccountInformationRemoved());
        e.setIsPropertySupplierTypeEnumIdRemoved(c.getIsPropertySupplierTypeEnumIdRemoved());
        e.setIsPropertySupplierProductTypeDescriptionRemoved(c.getIsPropertySupplierProductTypeDescriptionRemoved());
        ((AbstractPartyRoleEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected PartyRoleEvent.PartyRoleStateCreated newPartyRoleStateCreated(Long version, String commandId, String requesterId) {
        PartyRoleEventId stateEventId = new PartyRoleEventId(this.state.getPartyRoleId(), version);
        PartyRoleEvent.PartyRoleStateCreated e = newPartyRoleStateCreated(stateEventId);
        ((AbstractPartyRoleEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected PartyRoleEvent.PartyRoleStateMergePatched newPartyRoleStateMergePatched(Long version, String commandId, String requesterId) {
        PartyRoleEventId stateEventId = new PartyRoleEventId(this.state.getPartyRoleId(), version);
        PartyRoleEvent.PartyRoleStateMergePatched e = newPartyRoleStateMergePatched(stateEventId);
        ((AbstractPartyRoleEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected PartyRoleEvent.PartyRoleStateCreated newPartyRoleStateCreated(PartyRoleEventId stateEventId) {
        return new AbstractPartyRoleEvent.SimplePartyRoleStateCreated(stateEventId);
    }

    protected PartyRoleEvent.PartyRoleStateMergePatched newPartyRoleStateMergePatched(PartyRoleEventId stateEventId) {
        return new AbstractPartyRoleEvent.SimplePartyRoleStateMergePatched(stateEventId);
    }


    public static class SimplePartyRoleAggregate extends AbstractPartyRoleAggregate {
        public SimplePartyRoleAggregate(PartyRoleState state) {
            super(state);
        }

    }

}

