// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.productassoc;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.productassoc.ProductAssocEvent.*;

public abstract class AbstractProductAssocState implements ProductAssocState.SqlProductAssocState {

    private ProductAssocId productAssocId;

    public ProductAssocId getProductAssocId() {
        return this.productAssocId;
    }

    public void setProductAssocId(ProductAssocId productAssocId) {
        this.productAssocId = productAssocId;
    }

    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate() {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate) {
        this.thruDate = thruDate;
    }

    private Long sequenceNum;

    public Long getSequenceNum() {
        return this.sequenceNum;
    }

    public void setSequenceNum(Long sequenceNum) {
        this.sequenceNum = sequenceNum;
    }

    private String reason;

    public String getReason() {
        return this.reason;
    }

    public void setReason(String reason) {
        this.reason = reason;
    }

    private java.math.BigDecimal quantity;

    public java.math.BigDecimal getQuantity() {
        return this.quantity;
    }

    public void setQuantity(java.math.BigDecimal quantity) {
        this.quantity = quantity;
    }

    private java.math.BigDecimal scrapFactor;

    public java.math.BigDecimal getScrapFactor() {
        return this.scrapFactor;
    }

    public void setScrapFactor(java.math.BigDecimal scrapFactor) {
        this.scrapFactor = scrapFactor;
    }

    private String instruction;

    public String getInstruction() {
        return this.instruction;
    }

    public void setInstruction(String instruction) {
        this.instruction = instruction;
    }

    private String routingWorkEffortId;

    public String getRoutingWorkEffortId() {
        return this.routingWorkEffortId;
    }

    public void setRoutingWorkEffortId(String routingWorkEffortId) {
        this.routingWorkEffortId = routingWorkEffortId;
    }

    private String estimateCalcMethod;

    public String getEstimateCalcMethod() {
        return this.estimateCalcMethod;
    }

    public void setEstimateCalcMethod(String estimateCalcMethod) {
        this.estimateCalcMethod = estimateCalcMethod;
    }

    private String recurrenceInfoId;

    public String getRecurrenceInfoId() {
        return this.recurrenceInfoId;
    }

    public void setRecurrenceInfoId(String recurrenceInfoId) {
        this.recurrenceInfoId = recurrenceInfoId;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean __Deleted__;

    public Boolean get__Deleted__() {
        return this.__Deleted__;
    }

    public void set__Deleted__(Boolean __Deleted__) {
        this.__Deleted__ = __Deleted__;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractProductAssocState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setProductAssocId(((ProductAssocEvent.SqlProductAssocEvent) events.get(0)).getProductAssocEventId().getProductAssocId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? ProductAssocState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractProductAssocState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getProductAssocId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof ProductAssocState) {
            return Objects.equals(this.getProductAssocId(), ((ProductAssocState)obj).getProductAssocId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof ProductAssocStateCreated) {
            when((ProductAssocStateCreated) e);
        } else if (e instanceof ProductAssocStateMergePatched) {
            when((ProductAssocStateMergePatched) e);
        } else if (e instanceof ProductAssocStateDeleted) {
            when((ProductAssocStateDeleted) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(ProductAssocStateCreated e) {
        throwOnWrongEvent(e);

        this.setThruDate(e.getThruDate());
        this.setSequenceNum(e.getSequenceNum());
        this.setReason(e.getReason());
        this.setQuantity(e.getQuantity());
        this.setScrapFactor(e.getScrapFactor());
        this.setInstruction(e.getInstruction());
        this.setRoutingWorkEffortId(e.getRoutingWorkEffortId());
        this.setEstimateCalcMethod(e.getEstimateCalcMethod());
        this.setRecurrenceInfoId(e.getRecurrenceInfoId());

        this.set__Deleted__(false);

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(ProductAssocState s) {
        if (s == this) {
            return;
        }
        this.setThruDate(s.getThruDate());
        this.setSequenceNum(s.getSequenceNum());
        this.setReason(s.getReason());
        this.setQuantity(s.getQuantity());
        this.setScrapFactor(s.getScrapFactor());
        this.setInstruction(s.getInstruction());
        this.setRoutingWorkEffortId(s.getRoutingWorkEffortId());
        this.setEstimateCalcMethod(s.getEstimateCalcMethod());
        this.setRecurrenceInfoId(s.getRecurrenceInfoId());
    }

    public void when(ProductAssocStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getThruDate() == null) {
            if (e.getIsPropertyThruDateRemoved() != null && e.getIsPropertyThruDateRemoved()) {
                this.setThruDate(null);
            }
        } else {
            this.setThruDate(e.getThruDate());
        }
        if (e.getSequenceNum() == null) {
            if (e.getIsPropertySequenceNumRemoved() != null && e.getIsPropertySequenceNumRemoved()) {
                this.setSequenceNum(null);
            }
        } else {
            this.setSequenceNum(e.getSequenceNum());
        }
        if (e.getReason() == null) {
            if (e.getIsPropertyReasonRemoved() != null && e.getIsPropertyReasonRemoved()) {
                this.setReason(null);
            }
        } else {
            this.setReason(e.getReason());
        }
        if (e.getQuantity() == null) {
            if (e.getIsPropertyQuantityRemoved() != null && e.getIsPropertyQuantityRemoved()) {
                this.setQuantity(null);
            }
        } else {
            this.setQuantity(e.getQuantity());
        }
        if (e.getScrapFactor() == null) {
            if (e.getIsPropertyScrapFactorRemoved() != null && e.getIsPropertyScrapFactorRemoved()) {
                this.setScrapFactor(null);
            }
        } else {
            this.setScrapFactor(e.getScrapFactor());
        }
        if (e.getInstruction() == null) {
            if (e.getIsPropertyInstructionRemoved() != null && e.getIsPropertyInstructionRemoved()) {
                this.setInstruction(null);
            }
        } else {
            this.setInstruction(e.getInstruction());
        }
        if (e.getRoutingWorkEffortId() == null) {
            if (e.getIsPropertyRoutingWorkEffortIdRemoved() != null && e.getIsPropertyRoutingWorkEffortIdRemoved()) {
                this.setRoutingWorkEffortId(null);
            }
        } else {
            this.setRoutingWorkEffortId(e.getRoutingWorkEffortId());
        }
        if (e.getEstimateCalcMethod() == null) {
            if (e.getIsPropertyEstimateCalcMethodRemoved() != null && e.getIsPropertyEstimateCalcMethodRemoved()) {
                this.setEstimateCalcMethod(null);
            }
        } else {
            this.setEstimateCalcMethod(e.getEstimateCalcMethod());
        }
        if (e.getRecurrenceInfoId() == null) {
            if (e.getIsPropertyRecurrenceInfoIdRemoved() != null && e.getIsPropertyRecurrenceInfoIdRemoved()) {
                this.setRecurrenceInfoId(null);
            }
        } else {
            this.setRecurrenceInfoId(e.getRecurrenceInfoId());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void when(ProductAssocStateDeleted e) {
        throwOnWrongEvent(e);

        this.set__Deleted__(true);
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(ProductAssocEvent event) {
        ProductAssocId stateEntityId = this.getProductAssocId(); // Aggregate Id
        ProductAssocId eventEntityId = ((ProductAssocEvent.SqlProductAssocEvent)event).getProductAssocEventId().getProductAssocId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((ProductAssocEvent.SqlProductAssocEvent)event).getProductAssocEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getProductAssocEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleProductAssocState extends AbstractProductAssocState {

        public SimpleProductAssocState() {
        }

        public SimpleProductAssocState(List<Event> events) {
            super(events);
        }

        public static SimpleProductAssocState newForReapplying() {
            SimpleProductAssocState s = new SimpleProductAssocState();
            s.initializeForReapplying();
            return s;
        }

    }



}

