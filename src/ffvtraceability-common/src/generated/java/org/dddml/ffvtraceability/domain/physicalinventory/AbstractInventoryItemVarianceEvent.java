// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.physicalinventory;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractInventoryItemVarianceEvent extends AbstractEvent implements InventoryItemVarianceEvent.SqlInventoryItemVarianceEvent {
    private InventoryItemVarianceEventId inventoryItemVarianceEventId = new InventoryItemVarianceEventId();

    public InventoryItemVarianceEventId getInventoryItemVarianceEventId() {
        return this.inventoryItemVarianceEventId;
    }

    public void setInventoryItemVarianceEventId(InventoryItemVarianceEventId eventId) {
        this.inventoryItemVarianceEventId = eventId;
    }
    
    public String getInventoryItemId() {
        return getInventoryItemVarianceEventId().getInventoryItemId();
    }

    public void setInventoryItemId(String inventoryItemId) {
        getInventoryItemVarianceEventId().setInventoryItemId(inventoryItemId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    protected AbstractInventoryItemVarianceEvent() {
    }

    protected AbstractInventoryItemVarianceEvent(InventoryItemVarianceEventId eventId) {
        this.inventoryItemVarianceEventId = eventId;
    }


    public abstract String getEventType();


    public static abstract class AbstractInventoryItemVarianceStateEvent extends AbstractInventoryItemVarianceEvent implements InventoryItemVarianceEvent.InventoryItemVarianceStateEvent {
        private Long version;

        public Long getVersion()
        {
            return this.version;
        }

        public void setVersion(Long version)
        {
            this.version = version;
        }

        private String varianceReasonId;

        public String getVarianceReasonId()
        {
            return this.varianceReasonId;
        }

        public void setVarianceReasonId(String varianceReasonId)
        {
            this.varianceReasonId = varianceReasonId;
        }

        private java.math.BigDecimal availableToPromiseVar;

        public java.math.BigDecimal getAvailableToPromiseVar()
        {
            return this.availableToPromiseVar;
        }

        public void setAvailableToPromiseVar(java.math.BigDecimal availableToPromiseVar)
        {
            this.availableToPromiseVar = availableToPromiseVar;
        }

        private java.math.BigDecimal quantityOnHandVar;

        public java.math.BigDecimal getQuantityOnHandVar()
        {
            return this.quantityOnHandVar;
        }

        public void setQuantityOnHandVar(java.math.BigDecimal quantityOnHandVar)
        {
            this.quantityOnHandVar = quantityOnHandVar;
        }

        private String comments;

        public String getComments()
        {
            return this.comments;
        }

        public void setComments(String comments)
        {
            this.comments = comments;
        }

        protected AbstractInventoryItemVarianceStateEvent(InventoryItemVarianceEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractInventoryItemVarianceStateCreated extends AbstractInventoryItemVarianceStateEvent implements InventoryItemVarianceEvent.InventoryItemVarianceStateCreated
    {
        public AbstractInventoryItemVarianceStateCreated() {
            this(new InventoryItemVarianceEventId());
        }

        public AbstractInventoryItemVarianceStateCreated(InventoryItemVarianceEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

    }


    public static abstract class AbstractInventoryItemVarianceStateMergePatched extends AbstractInventoryItemVarianceStateEvent implements InventoryItemVarianceEvent.InventoryItemVarianceStateMergePatched
    {
        public AbstractInventoryItemVarianceStateMergePatched() {
            this(new InventoryItemVarianceEventId());
        }

        public AbstractInventoryItemVarianceStateMergePatched(InventoryItemVarianceEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyVarianceReasonIdRemoved;

        public Boolean getIsPropertyVarianceReasonIdRemoved() {
            return this.isPropertyVarianceReasonIdRemoved;
        }

        public void setIsPropertyVarianceReasonIdRemoved(Boolean removed) {
            this.isPropertyVarianceReasonIdRemoved = removed;
        }

        private Boolean isPropertyAvailableToPromiseVarRemoved;

        public Boolean getIsPropertyAvailableToPromiseVarRemoved() {
            return this.isPropertyAvailableToPromiseVarRemoved;
        }

        public void setIsPropertyAvailableToPromiseVarRemoved(Boolean removed) {
            this.isPropertyAvailableToPromiseVarRemoved = removed;
        }

        private Boolean isPropertyQuantityOnHandVarRemoved;

        public Boolean getIsPropertyQuantityOnHandVarRemoved() {
            return this.isPropertyQuantityOnHandVarRemoved;
        }

        public void setIsPropertyQuantityOnHandVarRemoved(Boolean removed) {
            this.isPropertyQuantityOnHandVarRemoved = removed;
        }

        private Boolean isPropertyCommentsRemoved;

        public Boolean getIsPropertyCommentsRemoved() {
            return this.isPropertyCommentsRemoved;
        }

        public void setIsPropertyCommentsRemoved(Boolean removed) {
            this.isPropertyCommentsRemoved = removed;
        }


    }



    public static class SimpleInventoryItemVarianceStateCreated extends AbstractInventoryItemVarianceStateCreated
    {
        public SimpleInventoryItemVarianceStateCreated() {
        }

        public SimpleInventoryItemVarianceStateCreated(InventoryItemVarianceEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleInventoryItemVarianceStateMergePatched extends AbstractInventoryItemVarianceStateMergePatched
    {
        public SimpleInventoryItemVarianceStateMergePatched() {
        }

        public SimpleInventoryItemVarianceStateMergePatched(InventoryItemVarianceEventId eventId) {
            super(eventId);
        }
    }

}

