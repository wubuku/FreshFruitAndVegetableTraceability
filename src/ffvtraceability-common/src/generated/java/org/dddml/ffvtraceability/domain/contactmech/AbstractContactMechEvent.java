// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.contactmech;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractContactMechEvent extends AbstractEvent implements ContactMechEvent.SqlContactMechEvent {
    private ContactMechEventId contactMechEventId = new ContactMechEventId();

    public ContactMechEventId getContactMechEventId() {
        return this.contactMechEventId;
    }

    public void setContactMechEventId(ContactMechEventId eventId) {
        this.contactMechEventId = eventId;
    }
    
    public String getContactMechId() {
        return getContactMechEventId().getContactMechId();
    }

    public void setContactMechId(String contactMechId) {
        getContactMechEventId().setContactMechId(contactMechId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getContactMechEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getContactMechEventId().setVersion(version);
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractContactMechEvent() {
    }

    protected AbstractContactMechEvent(ContactMechEventId eventId) {
        this.contactMechEventId = eventId;
    }


    public abstract String getEventType();

    public static class ContactMechLobEvent extends AbstractContactMechEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventType() {
            return "ContactMechLobEvent";
        }

    }


    public static abstract class AbstractContactMechStateEvent extends AbstractContactMechEvent implements ContactMechEvent.ContactMechStateEvent {
        private String contactMechTypeId;

        public String getContactMechTypeId()
        {
            return this.contactMechTypeId;
        }

        public void setContactMechTypeId(String contactMechTypeId)
        {
            this.contactMechTypeId = contactMechTypeId;
        }

        private String infoString;

        public String getInfoString()
        {
            return this.infoString;
        }

        public void setInfoString(String infoString)
        {
            this.infoString = infoString;
        }

        private String askForName;

        public String getAskForName()
        {
            return this.askForName;
        }

        public void setAskForName(String askForName)
        {
            this.askForName = askForName;
        }

        protected AbstractContactMechStateEvent(ContactMechEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractContactMechStateCreated extends AbstractContactMechStateEvent implements ContactMechEvent.ContactMechStateCreated
    {
        public AbstractContactMechStateCreated() {
            this(new ContactMechEventId());
        }

        public AbstractContactMechStateCreated(ContactMechEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

    }


    public static abstract class AbstractContactMechStateMergePatched extends AbstractContactMechStateEvent implements ContactMechEvent.ContactMechStateMergePatched
    {
        public AbstractContactMechStateMergePatched() {
            this(new ContactMechEventId());
        }

        public AbstractContactMechStateMergePatched(ContactMechEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyContactMechTypeIdRemoved;

        public Boolean getIsPropertyContactMechTypeIdRemoved() {
            return this.isPropertyContactMechTypeIdRemoved;
        }

        public void setIsPropertyContactMechTypeIdRemoved(Boolean removed) {
            this.isPropertyContactMechTypeIdRemoved = removed;
        }

        private Boolean isPropertyInfoStringRemoved;

        public Boolean getIsPropertyInfoStringRemoved() {
            return this.isPropertyInfoStringRemoved;
        }

        public void setIsPropertyInfoStringRemoved(Boolean removed) {
            this.isPropertyInfoStringRemoved = removed;
        }

        private Boolean isPropertyAskForNameRemoved;

        public Boolean getIsPropertyAskForNameRemoved() {
            return this.isPropertyAskForNameRemoved;
        }

        public void setIsPropertyAskForNameRemoved(Boolean removed) {
            this.isPropertyAskForNameRemoved = removed;
        }


    }



}

