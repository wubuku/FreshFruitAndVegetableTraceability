// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.physicalinventory;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchInventoryItemVarianceDto extends AbstractInventoryItemVarianceCommandDto implements InventoryItemVarianceCommand.CreateOrMergePatchInventoryItemVariance {

    /**
     * Variance Reason Id
     */
    private String varianceReasonId;

    public String getVarianceReasonId()
    {
        return this.varianceReasonId;
    }

    public void setVarianceReasonId(String varianceReasonId)
    {
        this.varianceReasonId = varianceReasonId;
    }

    /**
     * Available To Promise Var
     */
    private java.math.BigDecimal availableToPromiseVar;

    public java.math.BigDecimal getAvailableToPromiseVar()
    {
        return this.availableToPromiseVar;
    }

    public void setAvailableToPromiseVar(java.math.BigDecimal availableToPromiseVar)
    {
        this.availableToPromiseVar = availableToPromiseVar;
    }

    /**
     * Quantity On Hand Var
     */
    private java.math.BigDecimal quantityOnHandVar;

    public java.math.BigDecimal getQuantityOnHandVar()
    {
        return this.quantityOnHandVar;
    }

    public void setQuantityOnHandVar(java.math.BigDecimal quantityOnHandVar)
    {
        this.quantityOnHandVar = quantityOnHandVar;
    }

    /**
     * Comments
     */
    private String comments;

    public String getComments()
    {
        return this.comments;
    }

    public void setComments(String comments)
    {
        this.comments = comments;
    }


    private Boolean isPropertyVarianceReasonIdRemoved;

    public Boolean getIsPropertyVarianceReasonIdRemoved()
    {
        return this.isPropertyVarianceReasonIdRemoved;
    }

    public void setIsPropertyVarianceReasonIdRemoved(Boolean removed)
    {
        this.isPropertyVarianceReasonIdRemoved = removed;
    }

    private Boolean isPropertyAvailableToPromiseVarRemoved;

    public Boolean getIsPropertyAvailableToPromiseVarRemoved()
    {
        return this.isPropertyAvailableToPromiseVarRemoved;
    }

    public void setIsPropertyAvailableToPromiseVarRemoved(Boolean removed)
    {
        this.isPropertyAvailableToPromiseVarRemoved = removed;
    }

    private Boolean isPropertyQuantityOnHandVarRemoved;

    public Boolean getIsPropertyQuantityOnHandVarRemoved()
    {
        return this.isPropertyQuantityOnHandVarRemoved;
    }

    public void setIsPropertyQuantityOnHandVarRemoved(Boolean removed)
    {
        this.isPropertyQuantityOnHandVarRemoved = removed;
    }

    private Boolean isPropertyCommentsRemoved;

    public Boolean getIsPropertyCommentsRemoved()
    {
        return this.isPropertyCommentsRemoved;
    }

    public void setIsPropertyCommentsRemoved(Boolean removed)
    {
        this.isPropertyCommentsRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchInventoryItemVariance command)
    {
        ((AbstractInventoryItemVarianceCommandDto) this).copyTo(command);
        command.setVarianceReasonId(this.getVarianceReasonId());
        command.setAvailableToPromiseVar(this.getAvailableToPromiseVar());
        command.setQuantityOnHandVar(this.getQuantityOnHandVar());
        command.setComments(this.getComments());
    }

    public InventoryItemVarianceCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractInventoryItemVarianceCommand.SimpleCreateInventoryItemVariance command = new AbstractInventoryItemVarianceCommand.SimpleCreateInventoryItemVariance();
            copyTo((AbstractInventoryItemVarianceCommand.AbstractCreateInventoryItemVariance) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractInventoryItemVarianceCommand.SimpleMergePatchInventoryItemVariance command = new AbstractInventoryItemVarianceCommand.SimpleMergePatchInventoryItemVariance();
            copyTo((AbstractInventoryItemVarianceCommand.SimpleMergePatchInventoryItemVariance) command);
            return command;
        } 
        else if (COMMAND_TYPE_REMOVE.equals(getCommandType())) {
            AbstractInventoryItemVarianceCommand.SimpleRemoveInventoryItemVariance command = new AbstractInventoryItemVarianceCommand.SimpleRemoveInventoryItemVariance();
            ((AbstractInventoryItemVarianceCommandDto) this).copyTo(command);
            return command;
        }
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public InventoryItemVarianceCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateInventoryItemVarianceDto command = new CreateInventoryItemVarianceDto();
            copyTo((CreateInventoryItemVariance) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchInventoryItemVarianceDto command = new MergePatchInventoryItemVarianceDto();
            copyTo((MergePatchInventoryItemVariance) command);
            return command;
        } 
        else if (COMMAND_TYPE_REMOVE.equals(getCommandType())) {
            RemoveInventoryItemVarianceDto command = new RemoveInventoryItemVarianceDto();
            ((AbstractInventoryItemVarianceCommandDto) this).copyTo(command);
            return command;
        }
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateInventoryItemVariance command)
    {
        copyTo((CreateOrMergePatchInventoryItemVariance) command);
    }

    public void copyTo(MergePatchInventoryItemVariance command)
    {
        copyTo((CreateOrMergePatchInventoryItemVariance) command);
        command.setIsPropertyVarianceReasonIdRemoved(this.getIsPropertyVarianceReasonIdRemoved());
        command.setIsPropertyAvailableToPromiseVarRemoved(this.getIsPropertyAvailableToPromiseVarRemoved());
        command.setIsPropertyQuantityOnHandVarRemoved(this.getIsPropertyQuantityOnHandVarRemoved());
        command.setIsPropertyCommentsRemoved(this.getIsPropertyCommentsRemoved());
    }

    public static class CreateInventoryItemVarianceDto extends CreateOrMergePatchInventoryItemVarianceDto implements InventoryItemVarianceCommand.CreateInventoryItemVariance
    {
        public CreateInventoryItemVarianceDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public InventoryItemVarianceCommand.CreateInventoryItemVariance toCreateInventoryItemVariance()
        {
            return (InventoryItemVarianceCommand.CreateInventoryItemVariance) toCommand();
        }

    }

    public static class MergePatchInventoryItemVarianceDto extends CreateOrMergePatchInventoryItemVarianceDto implements InventoryItemVarianceCommand.MergePatchInventoryItemVariance
    {
        public MergePatchInventoryItemVarianceDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public InventoryItemVarianceCommand.MergePatchInventoryItemVariance toMergePatchInventoryItemVariance()
        {
            return (InventoryItemVarianceCommand.MergePatchInventoryItemVariance) toCommand();
        }

    }

}

