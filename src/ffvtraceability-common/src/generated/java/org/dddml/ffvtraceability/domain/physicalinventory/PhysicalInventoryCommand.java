// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.physicalinventory;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.Command;
import org.dddml.ffvtraceability.specialization.DomainError;

public interface PhysicalInventoryCommand extends Command {

    String getPhysicalInventoryId();

    void setPhysicalInventoryId(String physicalInventoryId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(PhysicalInventoryState state, Command c) {
        if (state.getVersion() == null) {
            if (isCreationCommand((PhysicalInventoryCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (isCreationCommand((PhysicalInventoryCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(PhysicalInventoryCommand c) {
        if ((c instanceof PhysicalInventoryCommand.CreatePhysicalInventory) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(PhysicalInventoryState.VERSION_NULL)))
            return true;
        if ((c instanceof PhysicalInventoryCommand.MergePatchPhysicalInventory))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getVersion().equals(PhysicalInventoryState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchPhysicalInventory extends PhysicalInventoryCommand {
        OffsetDateTime getPhysicalInventoryDate();

        void setPhysicalInventoryDate(OffsetDateTime physicalInventoryDate);

        String getPartyId();

        void setPartyId(String partyId);

        String getGeneralComments();

        void setGeneralComments(String generalComments);

    }

    interface CreatePhysicalInventory extends CreateOrMergePatchPhysicalInventory {
        CreateInventoryItemVarianceCommandCollection getCreateInventoryItemVarianceCommands();

        InventoryItemVarianceCommand.CreateInventoryItemVariance newCreateInventoryItemVariance();

    }

    interface MergePatchPhysicalInventory extends CreateOrMergePatchPhysicalInventory {
        Boolean getIsPropertyPhysicalInventoryDateRemoved();

        void setIsPropertyPhysicalInventoryDateRemoved(Boolean removed);

        Boolean getIsPropertyPartyIdRemoved();

        void setIsPropertyPartyIdRemoved(Boolean removed);

        Boolean getIsPropertyGeneralCommentsRemoved();

        void setIsPropertyGeneralCommentsRemoved(Boolean removed);


        InventoryItemVarianceCommandCollection getInventoryItemVarianceCommands();

        InventoryItemVarianceCommand.CreateInventoryItemVariance newCreateInventoryItemVariance();

        InventoryItemVarianceCommand.MergePatchInventoryItemVariance newMergePatchInventoryItemVariance();

        InventoryItemVarianceCommand.RemoveInventoryItemVariance newRemoveInventoryItemVariance();

    }

    interface DeletePhysicalInventory extends PhysicalInventoryCommand {
    }

    interface CreateInventoryItemVarianceCommandCollection extends Iterable<InventoryItemVarianceCommand.CreateInventoryItemVariance> {
        void add(InventoryItemVarianceCommand.CreateInventoryItemVariance c);

        void remove(InventoryItemVarianceCommand.CreateInventoryItemVariance c);

        void clear();
    }

    interface InventoryItemVarianceCommandCollection extends Iterable<InventoryItemVarianceCommand> {
        void add(InventoryItemVarianceCommand c);

        void remove(InventoryItemVarianceCommand c);

        void clear();
    }

}

