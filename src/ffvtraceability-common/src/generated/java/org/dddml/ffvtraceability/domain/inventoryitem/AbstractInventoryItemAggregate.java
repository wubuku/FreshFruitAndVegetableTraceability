// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.inventoryitem;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractInventoryItemAggregate extends AbstractAggregate implements InventoryItemAggregate {
    private InventoryItemState.MutableInventoryItemState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractInventoryItemAggregate(InventoryItemState state) {
        this.state = (InventoryItemState.MutableInventoryItemState)state;
    }

    public InventoryItemState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(InventoryItemCommand.CreateInventoryItem c) {
        if (c.getVersion() == null) { c.setVersion(InventoryItemState.VERSION_NULL); }
        InventoryItemEvent e = map(c);
        apply(e);
    }

    public void mergePatch(InventoryItemCommand.MergePatchInventoryItem c) {
        InventoryItemEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        InventoryItemCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected InventoryItemEvent map(InventoryItemCommand.CreateInventoryItem c) {
        InventoryItemEventId stateEventId = new InventoryItemEventId(c.getInventoryItemId(), c.getVersion());
        InventoryItemEvent.InventoryItemStateCreated e = newInventoryItemStateCreated(stateEventId);
        e.setInventoryItemTypeId(c.getInventoryItemTypeId());
        e.setProductId(c.getProductId());
        e.setPartyId(c.getPartyId());
        e.setOwnerPartyId(c.getOwnerPartyId());
        e.setStatusId(c.getStatusId());
        e.setDatetimeReceived(c.getDatetimeReceived());
        e.setDatetimeManufactured(c.getDatetimeManufactured());
        e.setExpireDate(c.getExpireDate());
        e.setFacilityId(c.getFacilityId());
        e.setContainerId(c.getContainerId());
        e.setLotId(c.getLotId());
        e.setUomId(c.getUomId());
        e.setBinNumber(c.getBinNumber());
        e.setLocationSeqId(c.getLocationSeqId());
        e.setComments(c.getComments());
        e.setQuantityOnHandTotal(c.getQuantityOnHandTotal());
        e.setAvailableToPromiseTotal(c.getAvailableToPromiseTotal());
        e.setAccountingQuantityTotal(c.getAccountingQuantityTotal());
        e.setSerialNumber(c.getSerialNumber());
        e.setSoftIdentifier(c.getSoftIdentifier());
        e.setActivationNumber(c.getActivationNumber());
        e.setActivationValidThru(c.getActivationValidThru());
        e.setUnitCost(c.getUnitCost());
        e.setCurrencyUomId(c.getCurrencyUomId());
        e.setFixedAssetId(c.getFixedAssetId());
        e.setInventoryItemAttributeHash(c.getInventoryItemAttributeHash());
        ((AbstractInventoryItemEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (InventoryItemDetailCommand.CreateInventoryItemDetail innerCommand : c.getCreateInventoryItemDetailCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            InventoryItemDetailEvent.InventoryItemDetailStateCreated innerEvent = mapCreate(innerCommand, c, version, this.state);
            e.addInventoryItemDetailEvent(innerEvent);
        }

        return e;
    }

    protected InventoryItemEvent map(InventoryItemCommand.MergePatchInventoryItem c) {
        InventoryItemEventId stateEventId = new InventoryItemEventId(c.getInventoryItemId(), c.getVersion());
        InventoryItemEvent.InventoryItemStateMergePatched e = newInventoryItemStateMergePatched(stateEventId);
        e.setInventoryItemTypeId(c.getInventoryItemTypeId());
        e.setProductId(c.getProductId());
        e.setPartyId(c.getPartyId());
        e.setOwnerPartyId(c.getOwnerPartyId());
        e.setStatusId(c.getStatusId());
        e.setDatetimeReceived(c.getDatetimeReceived());
        e.setDatetimeManufactured(c.getDatetimeManufactured());
        e.setExpireDate(c.getExpireDate());
        e.setFacilityId(c.getFacilityId());
        e.setContainerId(c.getContainerId());
        e.setLotId(c.getLotId());
        e.setUomId(c.getUomId());
        e.setBinNumber(c.getBinNumber());
        e.setLocationSeqId(c.getLocationSeqId());
        e.setComments(c.getComments());
        e.setQuantityOnHandTotal(c.getQuantityOnHandTotal());
        e.setAvailableToPromiseTotal(c.getAvailableToPromiseTotal());
        e.setAccountingQuantityTotal(c.getAccountingQuantityTotal());
        e.setSerialNumber(c.getSerialNumber());
        e.setSoftIdentifier(c.getSoftIdentifier());
        e.setActivationNumber(c.getActivationNumber());
        e.setActivationValidThru(c.getActivationValidThru());
        e.setUnitCost(c.getUnitCost());
        e.setCurrencyUomId(c.getCurrencyUomId());
        e.setFixedAssetId(c.getFixedAssetId());
        e.setInventoryItemAttributeHash(c.getInventoryItemAttributeHash());
        e.setIsPropertyInventoryItemTypeIdRemoved(c.getIsPropertyInventoryItemTypeIdRemoved());
        e.setIsPropertyProductIdRemoved(c.getIsPropertyProductIdRemoved());
        e.setIsPropertyPartyIdRemoved(c.getIsPropertyPartyIdRemoved());
        e.setIsPropertyOwnerPartyIdRemoved(c.getIsPropertyOwnerPartyIdRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyDatetimeReceivedRemoved(c.getIsPropertyDatetimeReceivedRemoved());
        e.setIsPropertyDatetimeManufacturedRemoved(c.getIsPropertyDatetimeManufacturedRemoved());
        e.setIsPropertyExpireDateRemoved(c.getIsPropertyExpireDateRemoved());
        e.setIsPropertyFacilityIdRemoved(c.getIsPropertyFacilityIdRemoved());
        e.setIsPropertyContainerIdRemoved(c.getIsPropertyContainerIdRemoved());
        e.setIsPropertyLotIdRemoved(c.getIsPropertyLotIdRemoved());
        e.setIsPropertyUomIdRemoved(c.getIsPropertyUomIdRemoved());
        e.setIsPropertyBinNumberRemoved(c.getIsPropertyBinNumberRemoved());
        e.setIsPropertyLocationSeqIdRemoved(c.getIsPropertyLocationSeqIdRemoved());
        e.setIsPropertyCommentsRemoved(c.getIsPropertyCommentsRemoved());
        e.setIsPropertyQuantityOnHandTotalRemoved(c.getIsPropertyQuantityOnHandTotalRemoved());
        e.setIsPropertyAvailableToPromiseTotalRemoved(c.getIsPropertyAvailableToPromiseTotalRemoved());
        e.setIsPropertyAccountingQuantityTotalRemoved(c.getIsPropertyAccountingQuantityTotalRemoved());
        e.setIsPropertySerialNumberRemoved(c.getIsPropertySerialNumberRemoved());
        e.setIsPropertySoftIdentifierRemoved(c.getIsPropertySoftIdentifierRemoved());
        e.setIsPropertyActivationNumberRemoved(c.getIsPropertyActivationNumberRemoved());
        e.setIsPropertyActivationValidThruRemoved(c.getIsPropertyActivationValidThruRemoved());
        e.setIsPropertyUnitCostRemoved(c.getIsPropertyUnitCostRemoved());
        e.setIsPropertyCurrencyUomIdRemoved(c.getIsPropertyCurrencyUomIdRemoved());
        e.setIsPropertyFixedAssetIdRemoved(c.getIsPropertyFixedAssetIdRemoved());
        e.setIsPropertyInventoryItemAttributeHashRemoved(c.getIsPropertyInventoryItemAttributeHashRemoved());
        ((AbstractInventoryItemEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        for (InventoryItemDetailCommand innerCommand : c.getInventoryItemDetailCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            InventoryItemDetailEvent innerEvent = map(innerCommand, c, version, this.state);
            e.addInventoryItemDetailEvent(innerEvent);
        }

        return e;
    }


    protected InventoryItemDetailEvent map(InventoryItemDetailCommand c, InventoryItemCommand outerCommand, Long version, InventoryItemState outerState) {
        InventoryItemDetailCommand.CreateInventoryItemDetail create = (c.getCommandType().equals(CommandType.CREATE)) ? ((InventoryItemDetailCommand.CreateInventoryItemDetail)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, version, outerState);
        }

        throw new UnsupportedOperationException("Unsupported command type: " + c.getCommandType() + " for " + c.getClass().getName());
    }

    protected InventoryItemDetailEvent.InventoryItemDetailStateCreated mapCreate(InventoryItemDetailCommand.CreateInventoryItemDetail c, InventoryItemCommand outerCommand, Long version, InventoryItemState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        InventoryItemDetailEventId stateEventId = new InventoryItemDetailEventId(outerState.getInventoryItemId(), c.getInventoryItemDetailSeqId(), version);
        InventoryItemDetailEvent.InventoryItemDetailStateCreated e = newInventoryItemDetailStateCreated(stateEventId);
        InventoryItemDetailState s = ((EntityStateCollection.ModifiableEntityStateCollection<String, InventoryItemDetailState>)outerState.getDetails()).getOrAddDefault(c.getInventoryItemDetailSeqId());

        e.setEffectiveDate(c.getEffectiveDate());
        e.setQuantityOnHandDiff(c.getQuantityOnHandDiff());
        e.setAvailableToPromiseDiff(c.getAvailableToPromiseDiff());
        e.setAccountingQuantityDiff(c.getAccountingQuantityDiff());
        e.setUnitCost(c.getUnitCost());
        e.setOrderId(c.getOrderId());
        e.setOrderItemSeqId(c.getOrderItemSeqId());
        e.setShipGroupSeqId(c.getShipGroupSeqId());
        e.setShipmentId(c.getShipmentId());
        e.setShipmentItemSeqId(c.getShipmentItemSeqId());
        e.setReturnId(c.getReturnId());
        e.setReturnItemSeqId(c.getReturnItemSeqId());
        e.setWorkEffortId(c.getWorkEffortId());
        e.setFixedAssetId(c.getFixedAssetId());
        e.setMaintHistSeqId(c.getMaintHistSeqId());
        e.setItemIssuanceId(c.getItemIssuanceId());
        e.setReceiptId(c.getReceiptId());
        e.setPhysicalInventoryId(c.getPhysicalInventoryId());
        e.setReasonEnumId(c.getReasonEnumId());
        e.setDescription(c.getDescription());
        e.setInventoryItemAttributeHash(c.getInventoryItemAttributeHash());
        e.setInventoryItemEntrySourceHash(c.getInventoryItemEntrySourceHash());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected void throwOnInconsistentCommands(InventoryItemCommand command, InventoryItemDetailCommand innerCommand) {
        AbstractInventoryItemCommand properties = command instanceof AbstractInventoryItemCommand ? (AbstractInventoryItemCommand) command : null;
        AbstractInventoryItemDetailCommand innerProperties = innerCommand instanceof AbstractInventoryItemDetailCommand ? (AbstractInventoryItemDetailCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerInventoryItemIdName = "InventoryItemId";
        String outerInventoryItemIdValue = properties.getInventoryItemId();
        String innerInventoryItemIdName = "InventoryItemId";
        String innerInventoryItemIdValue = innerProperties.getInventoryItemId();
        if (innerInventoryItemIdValue == null) {
            innerProperties.setInventoryItemId(outerInventoryItemIdValue);
        }
        else if (innerInventoryItemIdValue != outerInventoryItemIdValue 
            && (innerInventoryItemIdValue == null || innerInventoryItemIdValue != null && !innerInventoryItemIdValue.equals(outerInventoryItemIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerInventoryItemIdName, outerInventoryItemIdValue, innerInventoryItemIdName, innerInventoryItemIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////


    ////////////////////////

    protected InventoryItemEvent.InventoryItemStateCreated newInventoryItemStateCreated(Long version, String commandId, String requesterId) {
        InventoryItemEventId stateEventId = new InventoryItemEventId(this.state.getInventoryItemId(), version);
        InventoryItemEvent.InventoryItemStateCreated e = newInventoryItemStateCreated(stateEventId);
        ((AbstractInventoryItemEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected InventoryItemEvent.InventoryItemStateMergePatched newInventoryItemStateMergePatched(Long version, String commandId, String requesterId) {
        InventoryItemEventId stateEventId = new InventoryItemEventId(this.state.getInventoryItemId(), version);
        InventoryItemEvent.InventoryItemStateMergePatched e = newInventoryItemStateMergePatched(stateEventId);
        ((AbstractInventoryItemEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected InventoryItemEvent.InventoryItemStateCreated newInventoryItemStateCreated(InventoryItemEventId stateEventId) {
        return new AbstractInventoryItemEvent.SimpleInventoryItemStateCreated(stateEventId);
    }

    protected InventoryItemEvent.InventoryItemStateMergePatched newInventoryItemStateMergePatched(InventoryItemEventId stateEventId) {
        return new AbstractInventoryItemEvent.SimpleInventoryItemStateMergePatched(stateEventId);
    }

    protected InventoryItemDetailEvent.InventoryItemDetailStateCreated newInventoryItemDetailStateCreated(InventoryItemDetailEventId stateEventId) {
        return new AbstractInventoryItemDetailEvent.SimpleInventoryItemDetailStateCreated(stateEventId);
    }


    public static class SimpleInventoryItemAggregate extends AbstractInventoryItemAggregate {
        public SimpleInventoryItemAggregate(InventoryItemState state) {
            super(state);
        }

    }

}

