// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.inventoryitem;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractInventoryItemAggregate extends AbstractAggregate implements InventoryItemAggregate {
    private InventoryItemState.MutableInventoryItemState state;

    protected java.util.function.Function<String, InventoryItemState> stateFactory;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractInventoryItemAggregate(InventoryItemState state) {
        this.state = (InventoryItemState.MutableInventoryItemState)state;
    }

    public AbstractInventoryItemAggregate(java.util.function.Function<String, InventoryItemState> stateFactory) {
        this.stateFactory = stateFactory;
    }

    public InventoryItemState getState() {
        return this.state;
    }

    protected void setState(InventoryItemState state) {
        this.state = (InventoryItemState.MutableInventoryItemState)state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(InventoryItemCommand.CreateInventoryItem c) {
        if (c.getVersion() == null) { c.setVersion(InventoryItemState.VERSION_NULL); }
        InventoryItemEvent e = map(c);
        apply(e);
    }

    public void mergePatch(InventoryItemCommand.MergePatchInventoryItem c) {
        InventoryItemEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        InventoryItemCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof InventoryItemEvent) {
            InventoryItemEvent ee = (InventoryItemEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected InventoryItemEvent map(InventoryItemCommand.CreateInventoryItem c) {
        InventoryItemEventId stateEventId = new InventoryItemEventId(c.getInventoryItemId(), c.getVersion());
        InventoryItemEvent.InventoryItemStateCreated e = newInventoryItemStateCreated(stateEventId);
        e.setInventoryItemTypeId(c.getInventoryItemTypeId());
        e.setProductId(c.getProductId());
        e.setPartyId(c.getPartyId());
        e.setOwnerPartyId(c.getOwnerPartyId());
        e.setStatusId(c.getStatusId());
        e.setDatetimeReceived(c.getDatetimeReceived());
        e.setDatetimeManufactured(c.getDatetimeManufactured());
        e.setExpireDate(c.getExpireDate());
        e.setFacilityId(c.getFacilityId());
        e.setContainerId(c.getContainerId());
        e.setLotId(c.getLotId());
        e.setUomId(c.getUomId());
        e.setBinNumber(c.getBinNumber());
        e.setLocationSeqId(c.getLocationSeqId());
        e.setComments(c.getComments());
        e.setQuantityOnHandTotal(c.getQuantityOnHandTotal());
        e.setAvailableToPromiseTotal(c.getAvailableToPromiseTotal());
        e.setAccountingQuantityTotal(c.getAccountingQuantityTotal());
        e.setSerialNumber(c.getSerialNumber());
        e.setSoftIdentifier(c.getSoftIdentifier());
        e.setActivationNumber(c.getActivationNumber());
        e.setActivationValidThru(c.getActivationValidThru());
        e.setUnitCost(c.getUnitCost());
        e.setCurrencyUomId(c.getCurrencyUomId());
        e.setFixedAssetId(c.getFixedAssetId());
        e.setInventoryItemAttributeHash(c.getInventoryItemAttributeHash());
        ((AbstractInventoryItemEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        return e;
    }

    protected InventoryItemEvent map(InventoryItemCommand.MergePatchInventoryItem c) {
        InventoryItemEventId stateEventId = new InventoryItemEventId(c.getInventoryItemId(), c.getVersion());
        InventoryItemEvent.InventoryItemStateMergePatched e = newInventoryItemStateMergePatched(stateEventId);
        e.setInventoryItemTypeId(c.getInventoryItemTypeId());
        e.setProductId(c.getProductId());
        e.setPartyId(c.getPartyId());
        e.setOwnerPartyId(c.getOwnerPartyId());
        e.setStatusId(c.getStatusId());
        e.setDatetimeReceived(c.getDatetimeReceived());
        e.setDatetimeManufactured(c.getDatetimeManufactured());
        e.setExpireDate(c.getExpireDate());
        e.setFacilityId(c.getFacilityId());
        e.setContainerId(c.getContainerId());
        e.setLotId(c.getLotId());
        e.setUomId(c.getUomId());
        e.setBinNumber(c.getBinNumber());
        e.setLocationSeqId(c.getLocationSeqId());
        e.setComments(c.getComments());
        e.setQuantityOnHandTotal(c.getQuantityOnHandTotal());
        e.setAvailableToPromiseTotal(c.getAvailableToPromiseTotal());
        e.setAccountingQuantityTotal(c.getAccountingQuantityTotal());
        e.setSerialNumber(c.getSerialNumber());
        e.setSoftIdentifier(c.getSoftIdentifier());
        e.setActivationNumber(c.getActivationNumber());
        e.setActivationValidThru(c.getActivationValidThru());
        e.setUnitCost(c.getUnitCost());
        e.setCurrencyUomId(c.getCurrencyUomId());
        e.setFixedAssetId(c.getFixedAssetId());
        e.setInventoryItemAttributeHash(c.getInventoryItemAttributeHash());
        e.setIsPropertyInventoryItemTypeIdRemoved(c.getIsPropertyInventoryItemTypeIdRemoved());
        e.setIsPropertyProductIdRemoved(c.getIsPropertyProductIdRemoved());
        e.setIsPropertyPartyIdRemoved(c.getIsPropertyPartyIdRemoved());
        e.setIsPropertyOwnerPartyIdRemoved(c.getIsPropertyOwnerPartyIdRemoved());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyDatetimeReceivedRemoved(c.getIsPropertyDatetimeReceivedRemoved());
        e.setIsPropertyDatetimeManufacturedRemoved(c.getIsPropertyDatetimeManufacturedRemoved());
        e.setIsPropertyExpireDateRemoved(c.getIsPropertyExpireDateRemoved());
        e.setIsPropertyFacilityIdRemoved(c.getIsPropertyFacilityIdRemoved());
        e.setIsPropertyContainerIdRemoved(c.getIsPropertyContainerIdRemoved());
        e.setIsPropertyLotIdRemoved(c.getIsPropertyLotIdRemoved());
        e.setIsPropertyUomIdRemoved(c.getIsPropertyUomIdRemoved());
        e.setIsPropertyBinNumberRemoved(c.getIsPropertyBinNumberRemoved());
        e.setIsPropertyLocationSeqIdRemoved(c.getIsPropertyLocationSeqIdRemoved());
        e.setIsPropertyCommentsRemoved(c.getIsPropertyCommentsRemoved());
        e.setIsPropertyQuantityOnHandTotalRemoved(c.getIsPropertyQuantityOnHandTotalRemoved());
        e.setIsPropertyAvailableToPromiseTotalRemoved(c.getIsPropertyAvailableToPromiseTotalRemoved());
        e.setIsPropertyAccountingQuantityTotalRemoved(c.getIsPropertyAccountingQuantityTotalRemoved());
        e.setIsPropertySerialNumberRemoved(c.getIsPropertySerialNumberRemoved());
        e.setIsPropertySoftIdentifierRemoved(c.getIsPropertySoftIdentifierRemoved());
        e.setIsPropertyActivationNumberRemoved(c.getIsPropertyActivationNumberRemoved());
        e.setIsPropertyActivationValidThruRemoved(c.getIsPropertyActivationValidThruRemoved());
        e.setIsPropertyUnitCostRemoved(c.getIsPropertyUnitCostRemoved());
        e.setIsPropertyCurrencyUomIdRemoved(c.getIsPropertyCurrencyUomIdRemoved());
        e.setIsPropertyFixedAssetIdRemoved(c.getIsPropertyFixedAssetIdRemoved());
        e.setIsPropertyInventoryItemAttributeHashRemoved(c.getIsPropertyInventoryItemAttributeHashRemoved());
        ((AbstractInventoryItemEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long version = c.getVersion();
        return e;
    }

    protected void throwOnInconsistentCommands(InventoryItemCommand command, InventoryItemDetailCommand innerCommand) {
        AbstractInventoryItemCommand properties = command instanceof AbstractInventoryItemCommand ? (AbstractInventoryItemCommand) command : null;
        AbstractInventoryItemDetailCommand innerProperties = innerCommand instanceof AbstractInventoryItemDetailCommand ? (AbstractInventoryItemDetailCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerInventoryItemIdName = "InventoryItemId";
        String outerInventoryItemIdValue = properties.getInventoryItemId();
        String innerInventoryItemIdName = "InventoryItemId";
        String innerInventoryItemIdValue = innerProperties.getInventoryItemId();
        if (innerInventoryItemIdValue == null) {
            innerProperties.setInventoryItemId(outerInventoryItemIdValue);
        }
        else if (innerInventoryItemIdValue != outerInventoryItemIdValue
            && (innerInventoryItemIdValue == null || innerInventoryItemIdValue != null && !innerInventoryItemIdValue.equals(outerInventoryItemIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerInventoryItemIdName, outerInventoryItemIdValue, innerInventoryItemIdName, innerInventoryItemIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////


    ////////////////////////

    protected InventoryItemEvent.InventoryItemStateCreated newInventoryItemStateCreated(Long version, String commandId, String requesterId) {
        InventoryItemEventId stateEventId = new InventoryItemEventId(this.state.getInventoryItemId(), version);
        InventoryItemEvent.InventoryItemStateCreated e = newInventoryItemStateCreated(stateEventId);
        ((AbstractInventoryItemEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected InventoryItemEvent.InventoryItemStateMergePatched newInventoryItemStateMergePatched(Long version, String commandId, String requesterId) {
        InventoryItemEventId stateEventId = new InventoryItemEventId(this.state.getInventoryItemId(), version);
        InventoryItemEvent.InventoryItemStateMergePatched e = newInventoryItemStateMergePatched(stateEventId);
        ((AbstractInventoryItemEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected InventoryItemEvent.InventoryItemStateCreated newInventoryItemStateCreated(InventoryItemEventId stateEventId) {
        return new AbstractInventoryItemEvent.SimpleInventoryItemStateCreated(stateEventId);
    }

    protected InventoryItemEvent.InventoryItemStateMergePatched newInventoryItemStateMergePatched(InventoryItemEventId stateEventId) {
        return new AbstractInventoryItemEvent.SimpleInventoryItemStateMergePatched(stateEventId);
    }


    public static class SimpleInventoryItemAggregate extends AbstractInventoryItemAggregate {
        public SimpleInventoryItemAggregate(InventoryItemState state) {
            super(state);
        }

        public SimpleInventoryItemAggregate(java.util.function.Function<String, InventoryItemState> stateFactory) {
            super(stateFactory);
        }

        @Override
        public void recordInventoryEntry(InventoryItemAttributes inventoryItemAttributes, InventoryItemDetailAttributes inventoryItemDetailAttributes, java.math.BigDecimal quantityOnHandDiff, java.math.BigDecimal availableToPromiseDiff, java.math.BigDecimal accountingQuantityDiff, java.math.BigDecimal unitCost, Long version, String commandId, String requesterId, InventoryItemCommands.RecordInventoryEntry c) {
            java.util.function.Supplier<InventoryItemEvent.RecordInventoryEntryEvent> eventFactory = () -> newRecordInventoryEntryEvent(inventoryItemAttributes, inventoryItemDetailAttributes, quantityOnHandDiff, availableToPromiseDiff, accountingQuantityDiff, unitCost, version, commandId, requesterId);
            InventoryItemEvent.RecordInventoryEntryEvent e;
            try {
                e = verifyRecordInventoryEntry(eventFactory, inventoryItemAttributes, inventoryItemDetailAttributes, quantityOnHandDiff, availableToPromiseDiff, accountingQuantityDiff, unitCost, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }
            //NOTE: 创建状态（state）对象的实例，如果事件（e）中包含了实体 ID，那么需要使用这个 ID 来创建状态的实例。
            //  如果没有，那么需要等待 mutation 方法来生成。（给状态对象的 ID 属性赋值）
            //  不过，不管哪种方式，在调用 apply 之前都需要创建 state 的实例。
            setState(stateFactory.apply(e.getInventoryItemId()));
            apply(e);
            //在调用 apply 之后，状态对象已经存在，并且它的（实体）ID 属性应该已经有值。
            //  需要将状态对象中的实体 ID 赋予事件对象
            if (e.getInventoryItemId() == null) {
                e.setInventoryItemId(getState().getInventoryItemId());
            } else if (!e.getInventoryItemId().equals(getState().getInventoryItemId())) {
                throw DomainError.named("InconsistentId", String.format("Event entity ID '%s' does not match state entity ID '%s'",
                        e.getInventoryItemId(), getState().getInventoryItemId()
                ));
            }
        }

        protected InventoryItemEvent.RecordInventoryEntryEvent verifyRecordInventoryEntry(java.util.function.Supplier<InventoryItemEvent.RecordInventoryEntryEvent> eventFactory, InventoryItemAttributes inventoryItemAttributes, InventoryItemDetailAttributes inventoryItemDetailAttributes, java.math.BigDecimal quantityOnHandDiff, java.math.BigDecimal availableToPromiseDiff, java.math.BigDecimal accountingQuantityDiff, java.math.BigDecimal unitCost, InventoryItemCommands.RecordInventoryEntry c) {
            InventoryItemAttributes InventoryItemAttributes = inventoryItemAttributes;
            InventoryItemDetailAttributes InventoryItemDetailAttributes = inventoryItemDetailAttributes;
            java.math.BigDecimal QuantityOnHandDiff = quantityOnHandDiff;
            java.math.BigDecimal AvailableToPromiseDiff = availableToPromiseDiff;
            java.math.BigDecimal AccountingQuantityDiff = accountingQuantityDiff;
            java.math.BigDecimal UnitCost = unitCost;

            InventoryItemEvent.RecordInventoryEntryEvent e = (InventoryItemEvent.RecordInventoryEntryEvent) ApplicationContext.current.get(IRecordInventoryEntryLogic.class).verify(
                    eventFactory, getState(), inventoryItemAttributes, inventoryItemDetailAttributes, quantityOnHandDiff, availableToPromiseDiff, accountingQuantityDiff, unitCost, VerificationContext.of(c));

            return e;
        }

        protected AbstractInventoryItemEvent.RecordInventoryEntryEvent newRecordInventoryEntryEvent(InventoryItemAttributes inventoryItemAttributes, InventoryItemDetailAttributes inventoryItemDetailAttributes, java.math.BigDecimal quantityOnHandDiff, java.math.BigDecimal availableToPromiseDiff, java.math.BigDecimal accountingQuantityDiff, java.math.BigDecimal unitCost, Long version, String commandId, String requesterId) {
            InventoryItemEventId eventId = getState() != null ? new InventoryItemEventId(getState().getInventoryItemId(), version) : null;
            AbstractInventoryItemEvent.RecordInventoryEntryEvent e = new AbstractInventoryItemEvent.RecordInventoryEntryEvent();

            e.getDynamicProperties().put("inventoryItemAttributes", inventoryItemAttributes);
            e.getDynamicProperties().put("inventoryItemDetailAttributes", inventoryItemDetailAttributes);
            e.getDynamicProperties().put("quantityOnHandDiff", quantityOnHandDiff);
            e.getDynamicProperties().put("availableToPromiseDiff", availableToPromiseDiff);
            e.getDynamicProperties().put("accountingQuantityDiff", accountingQuantityDiff);
            e.getDynamicProperties().put("unitCost", unitCost);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

            if (eventId != null) {
                e.setInventoryItemEventId(eventId);
            }
            return e;
        }

    }

}

