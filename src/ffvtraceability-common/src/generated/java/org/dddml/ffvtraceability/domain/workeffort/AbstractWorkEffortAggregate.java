// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.workeffort;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractWorkEffortAggregate extends AbstractAggregate implements WorkEffortAggregate {
    private WorkEffortState.MutableWorkEffortState state;

    protected List<Event> changes = new ArrayList<Event>();

    public AbstractWorkEffortAggregate(WorkEffortState state) {
        this.state = (WorkEffortState.MutableWorkEffortState)state;
    }

    public WorkEffortState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(WorkEffortCommand.CreateWorkEffort c) {
        if (c.getVersion() == null) { c.setVersion(WorkEffortState.VERSION_NULL); }
        WorkEffortEvent e = map(c);
        apply(e);
    }

    public void mergePatch(WorkEffortCommand.MergePatchWorkEffort c) {
        WorkEffortEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        WorkEffortCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof WorkEffortEvent) {
            WorkEffortEvent ee = (WorkEffortEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected WorkEffortEvent map(WorkEffortCommand.CreateWorkEffort c) {
        WorkEffortEventId stateEventId = new WorkEffortEventId(c.getWorkEffortId(), c.getVersion());
        WorkEffortEvent.WorkEffortStateCreated e = newWorkEffortStateCreated(stateEventId);
        e.setWorkEffortTypeId(c.getWorkEffortTypeId());
        e.setCurrentStatusId(c.getCurrentStatusId());
        e.setLastStatusUpdate(c.getLastStatusUpdate());
        e.setWorkEffortPurposeTypeId(c.getWorkEffortPurposeTypeId());
        e.setWorkEffortParentId(c.getWorkEffortParentId());
        e.setScopeEnumId(c.getScopeEnumId());
        e.setPriority(c.getPriority());
        e.setPercentComplete(c.getPercentComplete());
        e.setWorkEffortName(c.getWorkEffortName());
        e.setShowAsEnumId(c.getShowAsEnumId());
        e.setSendNotificationEmail(c.getSendNotificationEmail());
        e.setDescription(c.getDescription());
        e.setLocationDesc(c.getLocationDesc());
        e.setEstimatedStartDate(c.getEstimatedStartDate());
        e.setEstimatedCompletionDate(c.getEstimatedCompletionDate());
        e.setActualStartDate(c.getActualStartDate());
        e.setActualCompletionDate(c.getActualCompletionDate());
        e.setEstimatedMilliSeconds(c.getEstimatedMilliSeconds());
        e.setEstimatedSetupMillis(c.getEstimatedSetupMillis());
        e.setEstimateCalcMethod(c.getEstimateCalcMethod());
        e.setActualMilliSeconds(c.getActualMilliSeconds());
        e.setActualSetupMillis(c.getActualSetupMillis());
        e.setTotalMilliSecondsAllowed(c.getTotalMilliSecondsAllowed());
        e.setTotalMoneyAllowed(c.getTotalMoneyAllowed());
        e.setMoneyUomId(c.getMoneyUomId());
        e.setSpecialTerms(c.getSpecialTerms());
        e.setUniversalId(c.getUniversalId());
        e.setSourceReferenceId(c.getSourceReferenceId());
        e.setFacilityId(c.getFacilityId());
        e.setInfoUrl(c.getInfoUrl());
        e.setTempExprId(c.getTempExprId());
        e.setRuntimeDataId(c.getRuntimeDataId());
        e.setNoteId(c.getNoteId());
        e.setServiceLoaderName(c.getServiceLoaderName());
        e.setQuantityToProduce(c.getQuantityToProduce());
        e.setQuantityProduced(c.getQuantityProduced());
        e.setQuantityRejected(c.getQuantityRejected());
        e.setReservPersons(c.getReservPersons());
        e.setReserv2ndPPPerc(c.getReserv2ndPPPerc());
        e.setReservNthPPPerc(c.getReservNthPPPerc());
        e.setAccommodationMapId(c.getAccommodationMapId());
        e.setAccommodationSpotId(c.getAccommodationSpotId());
        e.setRevisionNumber(c.getRevisionNumber());
        ((AbstractWorkEffortEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortEvent map(WorkEffortCommand.MergePatchWorkEffort c) {
        WorkEffortEventId stateEventId = new WorkEffortEventId(c.getWorkEffortId(), c.getVersion());
        WorkEffortEvent.WorkEffortStateMergePatched e = newWorkEffortStateMergePatched(stateEventId);
        e.setWorkEffortTypeId(c.getWorkEffortTypeId());
        e.setCurrentStatusId(c.getCurrentStatusId());
        e.setLastStatusUpdate(c.getLastStatusUpdate());
        e.setWorkEffortPurposeTypeId(c.getWorkEffortPurposeTypeId());
        e.setWorkEffortParentId(c.getWorkEffortParentId());
        e.setScopeEnumId(c.getScopeEnumId());
        e.setPriority(c.getPriority());
        e.setPercentComplete(c.getPercentComplete());
        e.setWorkEffortName(c.getWorkEffortName());
        e.setShowAsEnumId(c.getShowAsEnumId());
        e.setSendNotificationEmail(c.getSendNotificationEmail());
        e.setDescription(c.getDescription());
        e.setLocationDesc(c.getLocationDesc());
        e.setEstimatedStartDate(c.getEstimatedStartDate());
        e.setEstimatedCompletionDate(c.getEstimatedCompletionDate());
        e.setActualStartDate(c.getActualStartDate());
        e.setActualCompletionDate(c.getActualCompletionDate());
        e.setEstimatedMilliSeconds(c.getEstimatedMilliSeconds());
        e.setEstimatedSetupMillis(c.getEstimatedSetupMillis());
        e.setEstimateCalcMethod(c.getEstimateCalcMethod());
        e.setActualMilliSeconds(c.getActualMilliSeconds());
        e.setActualSetupMillis(c.getActualSetupMillis());
        e.setTotalMilliSecondsAllowed(c.getTotalMilliSecondsAllowed());
        e.setTotalMoneyAllowed(c.getTotalMoneyAllowed());
        e.setMoneyUomId(c.getMoneyUomId());
        e.setSpecialTerms(c.getSpecialTerms());
        e.setUniversalId(c.getUniversalId());
        e.setSourceReferenceId(c.getSourceReferenceId());
        e.setFacilityId(c.getFacilityId());
        e.setInfoUrl(c.getInfoUrl());
        e.setTempExprId(c.getTempExprId());
        e.setRuntimeDataId(c.getRuntimeDataId());
        e.setNoteId(c.getNoteId());
        e.setServiceLoaderName(c.getServiceLoaderName());
        e.setQuantityToProduce(c.getQuantityToProduce());
        e.setQuantityProduced(c.getQuantityProduced());
        e.setQuantityRejected(c.getQuantityRejected());
        e.setReservPersons(c.getReservPersons());
        e.setReserv2ndPPPerc(c.getReserv2ndPPPerc());
        e.setReservNthPPPerc(c.getReservNthPPPerc());
        e.setAccommodationMapId(c.getAccommodationMapId());
        e.setAccommodationSpotId(c.getAccommodationSpotId());
        e.setRevisionNumber(c.getRevisionNumber());
        e.setIsPropertyWorkEffortTypeIdRemoved(c.getIsPropertyWorkEffortTypeIdRemoved());
        e.setIsPropertyCurrentStatusIdRemoved(c.getIsPropertyCurrentStatusIdRemoved());
        e.setIsPropertyLastStatusUpdateRemoved(c.getIsPropertyLastStatusUpdateRemoved());
        e.setIsPropertyWorkEffortPurposeTypeIdRemoved(c.getIsPropertyWorkEffortPurposeTypeIdRemoved());
        e.setIsPropertyWorkEffortParentIdRemoved(c.getIsPropertyWorkEffortParentIdRemoved());
        e.setIsPropertyScopeEnumIdRemoved(c.getIsPropertyScopeEnumIdRemoved());
        e.setIsPropertyPriorityRemoved(c.getIsPropertyPriorityRemoved());
        e.setIsPropertyPercentCompleteRemoved(c.getIsPropertyPercentCompleteRemoved());
        e.setIsPropertyWorkEffortNameRemoved(c.getIsPropertyWorkEffortNameRemoved());
        e.setIsPropertyShowAsEnumIdRemoved(c.getIsPropertyShowAsEnumIdRemoved());
        e.setIsPropertySendNotificationEmailRemoved(c.getIsPropertySendNotificationEmailRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyLocationDescRemoved(c.getIsPropertyLocationDescRemoved());
        e.setIsPropertyEstimatedStartDateRemoved(c.getIsPropertyEstimatedStartDateRemoved());
        e.setIsPropertyEstimatedCompletionDateRemoved(c.getIsPropertyEstimatedCompletionDateRemoved());
        e.setIsPropertyActualStartDateRemoved(c.getIsPropertyActualStartDateRemoved());
        e.setIsPropertyActualCompletionDateRemoved(c.getIsPropertyActualCompletionDateRemoved());
        e.setIsPropertyEstimatedMilliSecondsRemoved(c.getIsPropertyEstimatedMilliSecondsRemoved());
        e.setIsPropertyEstimatedSetupMillisRemoved(c.getIsPropertyEstimatedSetupMillisRemoved());
        e.setIsPropertyEstimateCalcMethodRemoved(c.getIsPropertyEstimateCalcMethodRemoved());
        e.setIsPropertyActualMilliSecondsRemoved(c.getIsPropertyActualMilliSecondsRemoved());
        e.setIsPropertyActualSetupMillisRemoved(c.getIsPropertyActualSetupMillisRemoved());
        e.setIsPropertyTotalMilliSecondsAllowedRemoved(c.getIsPropertyTotalMilliSecondsAllowedRemoved());
        e.setIsPropertyTotalMoneyAllowedRemoved(c.getIsPropertyTotalMoneyAllowedRemoved());
        e.setIsPropertyMoneyUomIdRemoved(c.getIsPropertyMoneyUomIdRemoved());
        e.setIsPropertySpecialTermsRemoved(c.getIsPropertySpecialTermsRemoved());
        e.setIsPropertyUniversalIdRemoved(c.getIsPropertyUniversalIdRemoved());
        e.setIsPropertySourceReferenceIdRemoved(c.getIsPropertySourceReferenceIdRemoved());
        e.setIsPropertyFacilityIdRemoved(c.getIsPropertyFacilityIdRemoved());
        e.setIsPropertyInfoUrlRemoved(c.getIsPropertyInfoUrlRemoved());
        e.setIsPropertyTempExprIdRemoved(c.getIsPropertyTempExprIdRemoved());
        e.setIsPropertyRuntimeDataIdRemoved(c.getIsPropertyRuntimeDataIdRemoved());
        e.setIsPropertyNoteIdRemoved(c.getIsPropertyNoteIdRemoved());
        e.setIsPropertyServiceLoaderNameRemoved(c.getIsPropertyServiceLoaderNameRemoved());
        e.setIsPropertyQuantityToProduceRemoved(c.getIsPropertyQuantityToProduceRemoved());
        e.setIsPropertyQuantityProducedRemoved(c.getIsPropertyQuantityProducedRemoved());
        e.setIsPropertyQuantityRejectedRemoved(c.getIsPropertyQuantityRejectedRemoved());
        e.setIsPropertyReservPersonsRemoved(c.getIsPropertyReservPersonsRemoved());
        e.setIsPropertyReserv2ndPPPercRemoved(c.getIsPropertyReserv2ndPPPercRemoved());
        e.setIsPropertyReservNthPPPercRemoved(c.getIsPropertyReservNthPPPercRemoved());
        e.setIsPropertyAccommodationMapIdRemoved(c.getIsPropertyAccommodationMapIdRemoved());
        e.setIsPropertyAccommodationSpotIdRemoved(c.getIsPropertyAccommodationSpotIdRemoved());
        e.setIsPropertyRevisionNumberRemoved(c.getIsPropertyRevisionNumberRemoved());
        ((AbstractWorkEffortEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected WorkEffortEvent.WorkEffortStateCreated newWorkEffortStateCreated(Long version, String commandId, String requesterId) {
        WorkEffortEventId stateEventId = new WorkEffortEventId(this.state.getWorkEffortId(), version);
        WorkEffortEvent.WorkEffortStateCreated e = newWorkEffortStateCreated(stateEventId);
        ((AbstractWorkEffortEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortEvent.WorkEffortStateMergePatched newWorkEffortStateMergePatched(Long version, String commandId, String requesterId) {
        WorkEffortEventId stateEventId = new WorkEffortEventId(this.state.getWorkEffortId(), version);
        WorkEffortEvent.WorkEffortStateMergePatched e = newWorkEffortStateMergePatched(stateEventId);
        ((AbstractWorkEffortEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortEvent.WorkEffortStateCreated newWorkEffortStateCreated(WorkEffortEventId stateEventId) {
        return new AbstractWorkEffortEvent.SimpleWorkEffortStateCreated(stateEventId);
    }

    protected WorkEffortEvent.WorkEffortStateMergePatched newWorkEffortStateMergePatched(WorkEffortEventId stateEventId) {
        return new AbstractWorkEffortEvent.SimpleWorkEffortStateMergePatched(stateEventId);
    }


    public static class SimpleWorkEffortAggregate extends AbstractWorkEffortAggregate {
        public SimpleWorkEffortAggregate(WorkEffortState state) {
            super(state);
        }

    }

}

