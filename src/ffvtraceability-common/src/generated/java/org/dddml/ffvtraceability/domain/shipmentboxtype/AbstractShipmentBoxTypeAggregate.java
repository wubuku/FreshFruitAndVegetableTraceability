// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipmentboxtype;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractShipmentBoxTypeAggregate extends AbstractAggregate implements ShipmentBoxTypeAggregate {
    private ShipmentBoxTypeState.MutableShipmentBoxTypeState state;

    protected List<Event> changes = new ArrayList<Event>();

    public AbstractShipmentBoxTypeAggregate(ShipmentBoxTypeState state) {
        this.state = (ShipmentBoxTypeState.MutableShipmentBoxTypeState)state;
    }

    public ShipmentBoxTypeState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(ShipmentBoxTypeCommand.CreateShipmentBoxType c) {
        if (c.getVersion() == null) { c.setVersion(ShipmentBoxTypeState.VERSION_NULL); }
        ShipmentBoxTypeEvent e = map(c);
        apply(e);
    }

    public void mergePatch(ShipmentBoxTypeCommand.MergePatchShipmentBoxType c) {
        ShipmentBoxTypeEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        ShipmentBoxTypeCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof ShipmentBoxTypeEvent) {
            ShipmentBoxTypeEvent ee = (ShipmentBoxTypeEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected ShipmentBoxTypeEvent map(ShipmentBoxTypeCommand.CreateShipmentBoxType c) {
        ShipmentBoxTypeEventId stateEventId = new ShipmentBoxTypeEventId(c.getShipmentBoxTypeId(), c.getVersion());
        ShipmentBoxTypeEvent.ShipmentBoxTypeStateCreated e = newShipmentBoxTypeStateCreated(stateEventId);
        e.setDescription(c.getDescription());
        e.setDimensionUomId(c.getDimensionUomId());
        e.setBoxLength(c.getBoxLength());
        e.setBoxWidth(c.getBoxWidth());
        e.setBoxHeight(c.getBoxHeight());
        e.setWeightUomId(c.getWeightUomId());
        e.setBoxWeight(c.getBoxWeight());
        e.setActive(c.getActive());
        e.setBoxTypeName(c.getBoxTypeName());
        ((AbstractShipmentBoxTypeEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShipmentBoxTypeEvent map(ShipmentBoxTypeCommand.MergePatchShipmentBoxType c) {
        ShipmentBoxTypeEventId stateEventId = new ShipmentBoxTypeEventId(c.getShipmentBoxTypeId(), c.getVersion());
        ShipmentBoxTypeEvent.ShipmentBoxTypeStateMergePatched e = newShipmentBoxTypeStateMergePatched(stateEventId);
        e.setDescription(c.getDescription());
        e.setDimensionUomId(c.getDimensionUomId());
        e.setBoxLength(c.getBoxLength());
        e.setBoxWidth(c.getBoxWidth());
        e.setBoxHeight(c.getBoxHeight());
        e.setWeightUomId(c.getWeightUomId());
        e.setBoxWeight(c.getBoxWeight());
        e.setActive(c.getActive());
        e.setBoxTypeName(c.getBoxTypeName());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyDimensionUomIdRemoved(c.getIsPropertyDimensionUomIdRemoved());
        e.setIsPropertyBoxLengthRemoved(c.getIsPropertyBoxLengthRemoved());
        e.setIsPropertyBoxWidthRemoved(c.getIsPropertyBoxWidthRemoved());
        e.setIsPropertyBoxHeightRemoved(c.getIsPropertyBoxHeightRemoved());
        e.setIsPropertyWeightUomIdRemoved(c.getIsPropertyWeightUomIdRemoved());
        e.setIsPropertyBoxWeightRemoved(c.getIsPropertyBoxWeightRemoved());
        e.setIsPropertyActiveRemoved(c.getIsPropertyActiveRemoved());
        e.setIsPropertyBoxTypeNameRemoved(c.getIsPropertyBoxTypeNameRemoved());
        ((AbstractShipmentBoxTypeEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected ShipmentBoxTypeEvent.ShipmentBoxTypeStateCreated newShipmentBoxTypeStateCreated(Long version, String commandId, String requesterId) {
        ShipmentBoxTypeEventId stateEventId = new ShipmentBoxTypeEventId(this.state.getShipmentBoxTypeId(), version);
        ShipmentBoxTypeEvent.ShipmentBoxTypeStateCreated e = newShipmentBoxTypeStateCreated(stateEventId);
        ((AbstractShipmentBoxTypeEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShipmentBoxTypeEvent.ShipmentBoxTypeStateMergePatched newShipmentBoxTypeStateMergePatched(Long version, String commandId, String requesterId) {
        ShipmentBoxTypeEventId stateEventId = new ShipmentBoxTypeEventId(this.state.getShipmentBoxTypeId(), version);
        ShipmentBoxTypeEvent.ShipmentBoxTypeStateMergePatched e = newShipmentBoxTypeStateMergePatched(stateEventId);
        ((AbstractShipmentBoxTypeEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ShipmentBoxTypeEvent.ShipmentBoxTypeStateCreated newShipmentBoxTypeStateCreated(ShipmentBoxTypeEventId stateEventId) {
        return new AbstractShipmentBoxTypeEvent.SimpleShipmentBoxTypeStateCreated(stateEventId);
    }

    protected ShipmentBoxTypeEvent.ShipmentBoxTypeStateMergePatched newShipmentBoxTypeStateMergePatched(ShipmentBoxTypeEventId stateEventId) {
        return new AbstractShipmentBoxTypeEvent.SimpleShipmentBoxTypeStateMergePatched(stateEventId);
    }


    public static class SimpleShipmentBoxTypeAggregate extends AbstractShipmentBoxTypeAggregate {
        public SimpleShipmentBoxTypeAggregate(ShipmentBoxTypeState state) {
            super(state);
        }

    }

}

