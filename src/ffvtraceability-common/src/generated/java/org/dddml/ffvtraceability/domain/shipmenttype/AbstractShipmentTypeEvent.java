// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipmenttype;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractShipmentTypeEvent extends AbstractEvent implements ShipmentTypeEvent.SqlShipmentTypeEvent {
    private ShipmentTypeEventId shipmentTypeEventId = new ShipmentTypeEventId();

    public ShipmentTypeEventId getShipmentTypeEventId() {
        return this.shipmentTypeEventId;
    }

    public void setShipmentTypeEventId(ShipmentTypeEventId eventId) {
        this.shipmentTypeEventId = eventId;
    }
    
    public String getShipmentTypeId() {
        return getShipmentTypeEventId().getShipmentTypeId();
    }

    public void setShipmentTypeId(String shipmentTypeId) {
        getShipmentTypeEventId().setShipmentTypeId(shipmentTypeId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getShipmentTypeEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getShipmentTypeEventId().setVersion(version);
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractShipmentTypeEvent() {
    }

    protected AbstractShipmentTypeEvent(ShipmentTypeEventId eventId) {
        this.shipmentTypeEventId = eventId;
    }


    public abstract String getEventType();

    public static class ShipmentTypeLobEvent extends AbstractShipmentTypeEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventType() {
            return "ShipmentTypeLobEvent";
        }

    }


    public static abstract class AbstractShipmentTypeStateEvent extends AbstractShipmentTypeEvent implements ShipmentTypeEvent.ShipmentTypeStateEvent {
        private String parentTypeId;

        public String getParentTypeId()
        {
            return this.parentTypeId;
        }

        public void setParentTypeId(String parentTypeId)
        {
            this.parentTypeId = parentTypeId;
        }

        private String hasTable;

        public String getHasTable()
        {
            return this.hasTable;
        }

        public void setHasTable(String hasTable)
        {
            this.hasTable = hasTable;
        }

        private String description;

        public String getDescription()
        {
            return this.description;
        }

        public void setDescription(String description)
        {
            this.description = description;
        }

        protected AbstractShipmentTypeStateEvent(ShipmentTypeEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractShipmentTypeStateCreated extends AbstractShipmentTypeStateEvent implements ShipmentTypeEvent.ShipmentTypeStateCreated
    {
        public AbstractShipmentTypeStateCreated() {
            this(new ShipmentTypeEventId());
        }

        public AbstractShipmentTypeStateCreated(ShipmentTypeEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

    }


    public static abstract class AbstractShipmentTypeStateMergePatched extends AbstractShipmentTypeStateEvent implements ShipmentTypeEvent.ShipmentTypeStateMergePatched
    {
        public AbstractShipmentTypeStateMergePatched() {
            this(new ShipmentTypeEventId());
        }

        public AbstractShipmentTypeStateMergePatched(ShipmentTypeEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyParentTypeIdRemoved;

        public Boolean getIsPropertyParentTypeIdRemoved() {
            return this.isPropertyParentTypeIdRemoved;
        }

        public void setIsPropertyParentTypeIdRemoved(Boolean removed) {
            this.isPropertyParentTypeIdRemoved = removed;
        }

        private Boolean isPropertyHasTableRemoved;

        public Boolean getIsPropertyHasTableRemoved() {
            return this.isPropertyHasTableRemoved;
        }

        public void setIsPropertyHasTableRemoved(Boolean removed) {
            this.isPropertyHasTableRemoved = removed;
        }

        private Boolean isPropertyDescriptionRemoved;

        public Boolean getIsPropertyDescriptionRemoved() {
            return this.isPropertyDescriptionRemoved;
        }

        public void setIsPropertyDescriptionRemoved(Boolean removed) {
            this.isPropertyDescriptionRemoved = removed;
        }


    }


    public static abstract class AbstractShipmentTypeStateDeleted extends AbstractShipmentTypeStateEvent implements ShipmentTypeEvent.ShipmentTypeStateDeleted
    {
        public AbstractShipmentTypeStateDeleted() {
            this(new ShipmentTypeEventId());
        }

        public AbstractShipmentTypeStateDeleted(ShipmentTypeEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.DELETED;
        }

    }

    public static class SimpleShipmentTypeStateCreated extends AbstractShipmentTypeStateCreated
    {
        public SimpleShipmentTypeStateCreated() {
        }

        public SimpleShipmentTypeStateCreated(ShipmentTypeEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleShipmentTypeStateMergePatched extends AbstractShipmentTypeStateMergePatched
    {
        public SimpleShipmentTypeStateMergePatched() {
        }

        public SimpleShipmentTypeStateMergePatched(ShipmentTypeEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleShipmentTypeStateDeleted extends AbstractShipmentTypeStateDeleted
    {
        public SimpleShipmentTypeStateDeleted() {
        }

        public SimpleShipmentTypeStateDeleted(ShipmentTypeEventId eventId) {
            super(eventId);
        }
    }

}

