// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attributeset;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.AbstractCommand;

public abstract class AbstractAttributeSetCommand extends AbstractCommand implements AttributeSetCommand {

    private String attributeSetId;

    public String getAttributeSetId()
    {
        return this.attributeSetId;
    }

    public void setAttributeSetId(String attributeSetId)
    {
        this.attributeSetId = attributeSetId;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }


    public static abstract class AbstractCreateOrMergePatchAttributeSet extends AbstractAttributeSetCommand implements CreateOrMergePatchAttributeSet
    {
        private String attributeSetName;

        public String getAttributeSetName()
        {
            return this.attributeSetName;
        }

        public void setAttributeSetName(String attributeSetName)
        {
            this.attributeSetName = attributeSetName;
        }

        private String description;

        public String getDescription()
        {
            return this.description;
        }

        public void setDescription(String description)
        {
            this.description = description;
        }

        public AttributeUseCommand.CreateAttributeUse newCreateAttributeUse()
        {
            AbstractAttributeUseCommand.SimpleCreateAttributeUse c = new AbstractAttributeUseCommand.SimpleCreateAttributeUse();
            c.setAttributeSetId(this.getAttributeSetId());

            return c;
        }

        public AttributeUseCommand.MergePatchAttributeUse newMergePatchAttributeUse()
        {
            AbstractAttributeUseCommand.SimpleMergePatchAttributeUse c = new AbstractAttributeUseCommand.SimpleMergePatchAttributeUse();
            c.setAttributeSetId(this.getAttributeSetId());

            return c;
        }

        public AttributeUseCommand.RemoveAttributeUse newRemoveAttributeUse()
        {
            AbstractAttributeUseCommand.SimpleRemoveAttributeUse c = new AbstractAttributeUseCommand.SimpleRemoveAttributeUse();
            c.setAttributeSetId(this.getAttributeSetId());

            return c;
        }

    }

    public static abstract class AbstractCreateAttributeSet extends AbstractCreateOrMergePatchAttributeSet implements CreateAttributeSet
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }

        private CreateAttributeUseCommandCollection createAttributeUseCommands = new SimpleCreateAttributeUseCommandCollection();

        public CreateAttributeUseCommandCollection getCreateAttributeUseCommands() {
            return this.createAttributeUseCommands;
        }

        public CreateAttributeUseCommandCollection getAttributeUses() {
            return this.createAttributeUseCommands; //attributeUses;
        }

    }

    public static abstract class AbstractMergePatchAttributeSet extends AbstractCreateOrMergePatchAttributeSet implements MergePatchAttributeSet
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }

        private Boolean isPropertyAttributeSetNameRemoved;

        public Boolean getIsPropertyAttributeSetNameRemoved()
        {
            return this.isPropertyAttributeSetNameRemoved;
        }

        public void setIsPropertyAttributeSetNameRemoved(Boolean removed)
        {
            this.isPropertyAttributeSetNameRemoved = removed;
        }

        private Boolean isPropertyDescriptionRemoved;

        public Boolean getIsPropertyDescriptionRemoved()
        {
            return this.isPropertyDescriptionRemoved;
        }

        public void setIsPropertyDescriptionRemoved(Boolean removed)
        {
            this.isPropertyDescriptionRemoved = removed;
        }


        private AttributeUseCommandCollection attributeUseCommands = new SimpleAttributeUseCommandCollection();

        public AttributeUseCommandCollection getAttributeUseCommands()
        {
            return this.attributeUseCommands;
        }

    }

    public static class SimpleCreateAttributeSet extends AbstractCreateAttributeSet
    {
    }

    
    public static class SimpleMergePatchAttributeSet extends AbstractMergePatchAttributeSet
    {
    }

    
    public static class SimpleDeleteAttributeSet extends AbstractAttributeSetCommand implements DeleteAttributeSet
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_DELETE;
        }
    }

    
    public static class SimpleCreateAttributeUseCommandCollection implements CreateAttributeUseCommandCollection {
        private List<AttributeUseCommand.CreateAttributeUse> innerCommands = new ArrayList<AttributeUseCommand.CreateAttributeUse>();

        public void add(AttributeUseCommand.CreateAttributeUse c) {
            innerCommands.add(c);
        }

        public void remove(AttributeUseCommand.CreateAttributeUse c) {
            innerCommands.remove(c);
        }

        public void clear() {
            innerCommands.clear();
        }

        @Override
        public Iterator<AttributeUseCommand.CreateAttributeUse> iterator() {
            return innerCommands.iterator();
        }
    }

    public static class SimpleAttributeUseCommandCollection implements AttributeUseCommandCollection {
        private List<AttributeUseCommand> innerCommands = new ArrayList<AttributeUseCommand>();

        public void add(AttributeUseCommand c) {
            innerCommands.add(c);
        }

        public void remove(AttributeUseCommand c) {
            innerCommands.remove(c);
        }

        public void clear() {
            innerCommands.clear();
        }

        @Override
        public Iterator<AttributeUseCommand> iterator() {
            return innerCommands.iterator();
        }
    }


}

