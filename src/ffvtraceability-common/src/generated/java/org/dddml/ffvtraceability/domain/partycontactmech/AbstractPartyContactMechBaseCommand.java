// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.AbstractCommand;

public abstract class AbstractPartyContactMechBaseCommand extends AbstractCommand implements PartyContactMechBaseCommand {

    private PartyContactMechBaseId partyContactMechBaseId;

    public PartyContactMechBaseId getPartyContactMechBaseId()
    {
        return this.partyContactMechBaseId;
    }

    public void setPartyContactMechBaseId(PartyContactMechBaseId partyContactMechBaseId)
    {
        this.partyContactMechBaseId = partyContactMechBaseId;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }


    public static abstract class AbstractCreateOrMergePatchPartyContactMechBase extends AbstractPartyContactMechBaseCommand implements CreateOrMergePatchPartyContactMechBase
    {
        private OffsetDateTime activeFromDate;

        public OffsetDateTime getActiveFromDate()
        {
            return this.activeFromDate;
        }

        public void setActiveFromDate(OffsetDateTime activeFromDate)
        {
            this.activeFromDate = activeFromDate;
        }

        public PartyContactMechCommand.CreatePartyContactMech newCreatePartyContactMech()
        {
            AbstractPartyContactMechCommand.SimpleCreatePartyContactMech c = new AbstractPartyContactMechCommand.SimpleCreatePartyContactMech();
            c.setPartyContactMechBaseId(this.getPartyContactMechBaseId());

            return c;
        }

        public PartyContactMechCommand.MergePatchPartyContactMech newMergePatchPartyContactMech()
        {
            AbstractPartyContactMechCommand.SimpleMergePatchPartyContactMech c = new AbstractPartyContactMechCommand.SimpleMergePatchPartyContactMech();
            c.setPartyContactMechBaseId(this.getPartyContactMechBaseId());

            return c;
        }

        public PartyContactMechCommand.RemovePartyContactMech newRemovePartyContactMech()
        {
            AbstractPartyContactMechCommand.SimpleRemovePartyContactMech c = new AbstractPartyContactMechCommand.SimpleRemovePartyContactMech();
            c.setPartyContactMechBaseId(this.getPartyContactMechBaseId());

            return c;
        }

    }

    public static abstract class AbstractCreatePartyContactMechBase extends AbstractCreateOrMergePatchPartyContactMechBase implements CreatePartyContactMechBase
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }

        private CreatePartyContactMechCommandCollection createPartyContactMechCommands = new SimpleCreatePartyContactMechCommandCollection();

        public CreatePartyContactMechCommandCollection getCreatePartyContactMechCommands() {
            return this.createPartyContactMechCommands;
        }

        public CreatePartyContactMechCommandCollection getContactMechanisms() {
            return this.createPartyContactMechCommands; //contactMechanisms;
        }

    }

    public static abstract class AbstractMergePatchPartyContactMechBase extends AbstractCreateOrMergePatchPartyContactMechBase implements MergePatchPartyContactMechBase
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }

        private Boolean isPropertyActiveFromDateRemoved;

        public Boolean getIsPropertyActiveFromDateRemoved()
        {
            return this.isPropertyActiveFromDateRemoved;
        }

        public void setIsPropertyActiveFromDateRemoved(Boolean removed)
        {
            this.isPropertyActiveFromDateRemoved = removed;
        }


        private PartyContactMechCommandCollection partyContactMechCommands = new SimplePartyContactMechCommandCollection();

        public PartyContactMechCommandCollection getPartyContactMechCommands()
        {
            return this.partyContactMechCommands;
        }

    }

    public static class SimpleCreatePartyContactMechBase extends AbstractCreatePartyContactMechBase
    {
    }

    
    public static class SimpleMergePatchPartyContactMechBase extends AbstractMergePatchPartyContactMechBase
    {
    }

    
    public static class SimpleDeletePartyContactMechBase extends AbstractPartyContactMechBaseCommand implements DeletePartyContactMechBase
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_DELETE;
        }
    }

    
    public static class SimpleCreatePartyContactMechCommandCollection implements CreatePartyContactMechCommandCollection {
        private List<PartyContactMechCommand.CreatePartyContactMech> innerCommands = new ArrayList<PartyContactMechCommand.CreatePartyContactMech>();

        public void add(PartyContactMechCommand.CreatePartyContactMech c) {
            innerCommands.add(c);
        }

        public void remove(PartyContactMechCommand.CreatePartyContactMech c) {
            innerCommands.remove(c);
        }

        public void clear() {
            innerCommands.clear();
        }

        @Override
        public Iterator<PartyContactMechCommand.CreatePartyContactMech> iterator() {
            return innerCommands.iterator();
        }
    }

    public static class SimplePartyContactMechCommandCollection implements PartyContactMechCommandCollection {
        private List<PartyContactMechCommand> innerCommands = new ArrayList<PartyContactMechCommand>();

        public void add(PartyContactMechCommand c) {
            innerCommands.add(c);
        }

        public void remove(PartyContactMechCommand c) {
            innerCommands.remove(c);
        }

        public void clear() {
            innerCommands.clear();
        }

        @Override
        public Iterator<PartyContactMechCommand> iterator() {
            return innerCommands.iterator();
        }
    }


}

