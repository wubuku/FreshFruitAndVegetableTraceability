// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attribute;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.AbstractCommand;

public abstract class AbstractAttributeCommand extends AbstractCommand implements AttributeCommand {

    private String attributeId;

    public String getAttributeId()
    {
        return this.attributeId;
    }

    public void setAttributeId(String attributeId)
    {
        this.attributeId = attributeId;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }


    public static abstract class AbstractCreateOrMergePatchAttribute extends AbstractAttributeCommand implements CreateOrMergePatchAttribute
    {
        private String attributeType;

        public String getAttributeType()
        {
            return this.attributeType;
        }

        public void setAttributeType(String attributeType)
        {
            this.attributeType = attributeType;
        }

        private String attributeName;

        public String getAttributeName()
        {
            return this.attributeName;
        }

        public void setAttributeName(String attributeName)
        {
            this.attributeName = attributeName;
        }

        private String description;

        public String getDescription()
        {
            return this.description;
        }

        public void setDescription(String description)
        {
            this.description = description;
        }

        private String isMandatory;

        public String getIsMandatory()
        {
            return this.isMandatory;
        }

        public void setIsMandatory(String isMandatory)
        {
            this.isMandatory = isMandatory;
        }

        private Long attributeLength;

        public Long getAttributeLength()
        {
            return this.attributeLength;
        }

        public void setAttributeLength(Long attributeLength)
        {
            this.attributeLength = attributeLength;
        }

        private String isEnumeration;

        public String getIsEnumeration()
        {
            return this.isEnumeration;
        }

        public void setIsEnumeration(String isEnumeration)
        {
            this.isEnumeration = isEnumeration;
        }

        private Long scale;

        public Long getScale()
        {
            return this.scale;
        }

        public void setScale(Long scale)
        {
            this.scale = scale;
        }

        private String truncatedTo;

        public String getTruncatedTo()
        {
            return this.truncatedTo;
        }

        public void setTruncatedTo(String truncatedTo)
        {
            this.truncatedTo = truncatedTo;
        }

        private Boolean active;

        public Boolean getActive()
        {
            return this.active;
        }

        public void setActive(Boolean active)
        {
            this.active = active;
        }

        public AttributeValueCommand.CreateAttributeValue newCreateAttributeValue()
        {
            AbstractAttributeValueCommand.SimpleCreateAttributeValue c = new AbstractAttributeValueCommand.SimpleCreateAttributeValue();
            c.setAttributeId(this.getAttributeId());

            return c;
        }

        public AttributeValueCommand.MergePatchAttributeValue newMergePatchAttributeValue()
        {
            AbstractAttributeValueCommand.SimpleMergePatchAttributeValue c = new AbstractAttributeValueCommand.SimpleMergePatchAttributeValue();
            c.setAttributeId(this.getAttributeId());

            return c;
        }

        public AttributeValueCommand.RemoveAttributeValue newRemoveAttributeValue()
        {
            AbstractAttributeValueCommand.SimpleRemoveAttributeValue c = new AbstractAttributeValueCommand.SimpleRemoveAttributeValue();
            c.setAttributeId(this.getAttributeId());

            return c;
        }

    }

    public static abstract class AbstractCreateAttribute extends AbstractCreateOrMergePatchAttribute implements CreateAttribute
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }

        private CreateAttributeValueCommandCollection createAttributeValueCommands = new SimpleCreateAttributeValueCommandCollection();

        public CreateAttributeValueCommandCollection getCreateAttributeValueCommands() {
            return this.createAttributeValueCommands;
        }

        public CreateAttributeValueCommandCollection getAttributeValues() {
            return this.createAttributeValueCommands; //attributeValues;
        }

    }

    public static abstract class AbstractMergePatchAttribute extends AbstractCreateOrMergePatchAttribute implements MergePatchAttribute
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }

        private Boolean isPropertyAttributeTypeRemoved;

        public Boolean getIsPropertyAttributeTypeRemoved()
        {
            return this.isPropertyAttributeTypeRemoved;
        }

        public void setIsPropertyAttributeTypeRemoved(Boolean removed)
        {
            this.isPropertyAttributeTypeRemoved = removed;
        }

        private Boolean isPropertyAttributeNameRemoved;

        public Boolean getIsPropertyAttributeNameRemoved()
        {
            return this.isPropertyAttributeNameRemoved;
        }

        public void setIsPropertyAttributeNameRemoved(Boolean removed)
        {
            this.isPropertyAttributeNameRemoved = removed;
        }

        private Boolean isPropertyDescriptionRemoved;

        public Boolean getIsPropertyDescriptionRemoved()
        {
            return this.isPropertyDescriptionRemoved;
        }

        public void setIsPropertyDescriptionRemoved(Boolean removed)
        {
            this.isPropertyDescriptionRemoved = removed;
        }

        private Boolean isPropertyIsMandatoryRemoved;

        public Boolean getIsPropertyIsMandatoryRemoved()
        {
            return this.isPropertyIsMandatoryRemoved;
        }

        public void setIsPropertyIsMandatoryRemoved(Boolean removed)
        {
            this.isPropertyIsMandatoryRemoved = removed;
        }

        private Boolean isPropertyAttributeLengthRemoved;

        public Boolean getIsPropertyAttributeLengthRemoved()
        {
            return this.isPropertyAttributeLengthRemoved;
        }

        public void setIsPropertyAttributeLengthRemoved(Boolean removed)
        {
            this.isPropertyAttributeLengthRemoved = removed;
        }

        private Boolean isPropertyIsEnumerationRemoved;

        public Boolean getIsPropertyIsEnumerationRemoved()
        {
            return this.isPropertyIsEnumerationRemoved;
        }

        public void setIsPropertyIsEnumerationRemoved(Boolean removed)
        {
            this.isPropertyIsEnumerationRemoved = removed;
        }

        private Boolean isPropertyScaleRemoved;

        public Boolean getIsPropertyScaleRemoved()
        {
            return this.isPropertyScaleRemoved;
        }

        public void setIsPropertyScaleRemoved(Boolean removed)
        {
            this.isPropertyScaleRemoved = removed;
        }

        private Boolean isPropertyTruncatedToRemoved;

        public Boolean getIsPropertyTruncatedToRemoved()
        {
            return this.isPropertyTruncatedToRemoved;
        }

        public void setIsPropertyTruncatedToRemoved(Boolean removed)
        {
            this.isPropertyTruncatedToRemoved = removed;
        }

        private Boolean isPropertyActiveRemoved;

        public Boolean getIsPropertyActiveRemoved()
        {
            return this.isPropertyActiveRemoved;
        }

        public void setIsPropertyActiveRemoved(Boolean removed)
        {
            this.isPropertyActiveRemoved = removed;
        }


        private AttributeValueCommandCollection attributeValueCommands = new SimpleAttributeValueCommandCollection();

        public AttributeValueCommandCollection getAttributeValueCommands()
        {
            return this.attributeValueCommands;
        }

    }

    public static class SimpleCreateAttribute extends AbstractCreateAttribute
    {
    }

    
    public static class SimpleMergePatchAttribute extends AbstractMergePatchAttribute
    {
    }

    
    public static class SimpleDeleteAttribute extends AbstractAttributeCommand implements DeleteAttribute
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_DELETE;
        }
    }

    
    public static class SimpleCreateAttributeValueCommandCollection implements CreateAttributeValueCommandCollection {
        private List<AttributeValueCommand.CreateAttributeValue> innerCommands = new ArrayList<AttributeValueCommand.CreateAttributeValue>();

        public void add(AttributeValueCommand.CreateAttributeValue c) {
            innerCommands.add(c);
        }

        public void remove(AttributeValueCommand.CreateAttributeValue c) {
            innerCommands.remove(c);
        }

        public void clear() {
            innerCommands.clear();
        }

        @Override
        public Iterator<AttributeValueCommand.CreateAttributeValue> iterator() {
            return innerCommands.iterator();
        }
    }

    public static class SimpleAttributeValueCommandCollection implements AttributeValueCommandCollection {
        private List<AttributeValueCommand> innerCommands = new ArrayList<AttributeValueCommand>();

        public void add(AttributeValueCommand c) {
            innerCommands.add(c);
        }

        public void remove(AttributeValueCommand c) {
            innerCommands.remove(c);
        }

        public void clear() {
            innerCommands.clear();
        }

        @Override
        public Iterator<AttributeValueCommand> iterator() {
            return innerCommands.iterator();
        }
    }


}

