// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.physicalinventory;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.AbstractCommand;

public abstract class AbstractPhysicalInventoryCommand extends AbstractCommand implements PhysicalInventoryCommand {

    private String physicalInventoryId;

    public String getPhysicalInventoryId()
    {
        return this.physicalInventoryId;
    }

    public void setPhysicalInventoryId(String physicalInventoryId)
    {
        this.physicalInventoryId = physicalInventoryId;
    }

    private Long version;

    public Long getVersion()
    {
        return this.version;
    }

    public void setVersion(Long version)
    {
        this.version = version;
    }


    public static abstract class AbstractCreateOrMergePatchPhysicalInventory extends AbstractPhysicalInventoryCommand implements CreateOrMergePatchPhysicalInventory
    {
        private OffsetDateTime physicalInventoryDate;

        public OffsetDateTime getPhysicalInventoryDate()
        {
            return this.physicalInventoryDate;
        }

        public void setPhysicalInventoryDate(OffsetDateTime physicalInventoryDate)
        {
            this.physicalInventoryDate = physicalInventoryDate;
        }

        private String partyId;

        public String getPartyId()
        {
            return this.partyId;
        }

        public void setPartyId(String partyId)
        {
            this.partyId = partyId;
        }

        private String generalComments;

        public String getGeneralComments()
        {
            return this.generalComments;
        }

        public void setGeneralComments(String generalComments)
        {
            this.generalComments = generalComments;
        }

        public InventoryItemVarianceCommand.CreateInventoryItemVariance newCreateInventoryItemVariance()
        {
            AbstractInventoryItemVarianceCommand.SimpleCreateInventoryItemVariance c = new AbstractInventoryItemVarianceCommand.SimpleCreateInventoryItemVariance();
            c.setPhysicalInventoryId(this.getPhysicalInventoryId());

            return c;
        }

        public InventoryItemVarianceCommand.MergePatchInventoryItemVariance newMergePatchInventoryItemVariance()
        {
            AbstractInventoryItemVarianceCommand.SimpleMergePatchInventoryItemVariance c = new AbstractInventoryItemVarianceCommand.SimpleMergePatchInventoryItemVariance();
            c.setPhysicalInventoryId(this.getPhysicalInventoryId());

            return c;
        }

        public InventoryItemVarianceCommand.RemoveInventoryItemVariance newRemoveInventoryItemVariance()
        {
            AbstractInventoryItemVarianceCommand.SimpleRemoveInventoryItemVariance c = new AbstractInventoryItemVarianceCommand.SimpleRemoveInventoryItemVariance();
            c.setPhysicalInventoryId(this.getPhysicalInventoryId());

            return c;
        }

    }

    public static abstract class AbstractCreatePhysicalInventory extends AbstractCreateOrMergePatchPhysicalInventory implements CreatePhysicalInventory
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }

        private CreateInventoryItemVarianceCommandCollection createInventoryItemVarianceCommands = new SimpleCreateInventoryItemVarianceCommandCollection();

        public CreateInventoryItemVarianceCommandCollection getCreateInventoryItemVarianceCommands() {
            return this.createInventoryItemVarianceCommands;
        }

        public CreateInventoryItemVarianceCommandCollection getInventoryItemVariances() {
            return this.createInventoryItemVarianceCommands; //inventoryItemVariances;
        }

    }

    public static abstract class AbstractMergePatchPhysicalInventory extends AbstractCreateOrMergePatchPhysicalInventory implements MergePatchPhysicalInventory
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }

        private Boolean isPropertyPhysicalInventoryDateRemoved;

        public Boolean getIsPropertyPhysicalInventoryDateRemoved()
        {
            return this.isPropertyPhysicalInventoryDateRemoved;
        }

        public void setIsPropertyPhysicalInventoryDateRemoved(Boolean removed)
        {
            this.isPropertyPhysicalInventoryDateRemoved = removed;
        }

        private Boolean isPropertyPartyIdRemoved;

        public Boolean getIsPropertyPartyIdRemoved()
        {
            return this.isPropertyPartyIdRemoved;
        }

        public void setIsPropertyPartyIdRemoved(Boolean removed)
        {
            this.isPropertyPartyIdRemoved = removed;
        }

        private Boolean isPropertyGeneralCommentsRemoved;

        public Boolean getIsPropertyGeneralCommentsRemoved()
        {
            return this.isPropertyGeneralCommentsRemoved;
        }

        public void setIsPropertyGeneralCommentsRemoved(Boolean removed)
        {
            this.isPropertyGeneralCommentsRemoved = removed;
        }


        private InventoryItemVarianceCommandCollection inventoryItemVarianceCommands = new SimpleInventoryItemVarianceCommandCollection();

        public InventoryItemVarianceCommandCollection getInventoryItemVarianceCommands()
        {
            return this.inventoryItemVarianceCommands;
        }

    }

    public static class SimpleCreatePhysicalInventory extends AbstractCreatePhysicalInventory
    {
    }

    
    public static class SimpleMergePatchPhysicalInventory extends AbstractMergePatchPhysicalInventory
    {
    }

    
    public static class SimpleDeletePhysicalInventory extends AbstractPhysicalInventoryCommand implements DeletePhysicalInventory
    {
        @Override
        public String getCommandType() {
            return COMMAND_TYPE_DELETE;
        }
    }

    
    public static class SimpleCreateInventoryItemVarianceCommandCollection implements CreateInventoryItemVarianceCommandCollection {
        private List<InventoryItemVarianceCommand.CreateInventoryItemVariance> innerCommands = new ArrayList<InventoryItemVarianceCommand.CreateInventoryItemVariance>();

        public void add(InventoryItemVarianceCommand.CreateInventoryItemVariance c) {
            innerCommands.add(c);
        }

        public void remove(InventoryItemVarianceCommand.CreateInventoryItemVariance c) {
            innerCommands.remove(c);
        }

        public void clear() {
            innerCommands.clear();
        }

        @Override
        public Iterator<InventoryItemVarianceCommand.CreateInventoryItemVariance> iterator() {
            return innerCommands.iterator();
        }
    }

    public static class SimpleInventoryItemVarianceCommandCollection implements InventoryItemVarianceCommandCollection {
        private List<InventoryItemVarianceCommand> innerCommands = new ArrayList<InventoryItemVarianceCommand>();

        public void add(InventoryItemVarianceCommand c) {
            innerCommands.add(c);
        }

        public void remove(InventoryItemVarianceCommand c) {
            innerCommands.remove(c);
        }

        public void clear() {
            innerCommands.clear();
        }

        @Override
        public Iterator<InventoryItemVarianceCommand> iterator() {
            return innerCommands.iterator();
        }
    }


}

