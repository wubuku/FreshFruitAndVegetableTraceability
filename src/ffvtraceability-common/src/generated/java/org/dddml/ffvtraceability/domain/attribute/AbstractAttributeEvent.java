// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.attribute;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.AbstractEvent;

public abstract class AbstractAttributeEvent extends AbstractEvent implements AttributeEvent.SqlAttributeEvent {
    private AttributeEventId attributeEventId = new AttributeEventId();

    public AttributeEventId getAttributeEventId() {
        return this.attributeEventId;
    }

    public void setAttributeEventId(AttributeEventId eventId) {
        this.attributeEventId = eventId;
    }
    
    public String getAttributeId() {
        return getAttributeEventId().getAttributeId();
    }

    public void setAttributeId(String attributeId) {
        getAttributeEventId().setAttributeId(attributeId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getAttributeEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getAttributeEventId().setVersion(version);
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractAttributeEvent() {
    }

    protected AbstractAttributeEvent(AttributeEventId eventId) {
        this.attributeEventId = eventId;
    }

    protected AttributeValueEventDao getAttributeValueEventDao() {
        return (AttributeValueEventDao)ApplicationContext.current.get("attributeValueEventDao");
    }

    protected AttributeValueEventId newAttributeValueEventId(String value)
    {
        AttributeValueEventId eventId = new AttributeValueEventId(this.getAttributeEventId().getAttributeId(), 
            value, 
            this.getAttributeEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(AttributeValueEvent.SqlAttributeValueEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(AttributeEvent.SqlAttributeEvent oe, AttributeValueEvent.SqlAttributeValueEvent e)
    {
        if (!oe.getAttributeEventId().getAttributeId().equals(e.getAttributeValueEventId().getAttributeId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id AttributeId %1$s but inner id AttributeId %2$s", 
                oe.getAttributeEventId().getAttributeId(), e.getAttributeValueEventId().getAttributeId());
        }
    }

    public AttributeValueEvent.AttributeValueStateCreated newAttributeValueStateCreated(String value) {
        return new AbstractAttributeValueEvent.SimpleAttributeValueStateCreated(newAttributeValueEventId(value));
    }

    public AttributeValueEvent.AttributeValueStateMergePatched newAttributeValueStateMergePatched(String value) {
        return new AbstractAttributeValueEvent.SimpleAttributeValueStateMergePatched(newAttributeValueEventId(value));
    }


    public abstract String getEventType();

    public static class AttributeLobEvent extends AbstractAttributeEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventType() {
            return "AttributeLobEvent";
        }

    }


    public static abstract class AbstractAttributeStateEvent extends AbstractAttributeEvent implements AttributeEvent.AttributeStateEvent {
        private String attributeType;

        public String getAttributeType()
        {
            return this.attributeType;
        }

        public void setAttributeType(String attributeType)
        {
            this.attributeType = attributeType;
        }

        private String attributeName;

        public String getAttributeName()
        {
            return this.attributeName;
        }

        public void setAttributeName(String attributeName)
        {
            this.attributeName = attributeName;
        }

        private String description;

        public String getDescription()
        {
            return this.description;
        }

        public void setDescription(String description)
        {
            this.description = description;
        }

        private String isMandatory;

        public String getIsMandatory()
        {
            return this.isMandatory;
        }

        public void setIsMandatory(String isMandatory)
        {
            this.isMandatory = isMandatory;
        }

        private Long attributeLength;

        public Long getAttributeLength()
        {
            return this.attributeLength;
        }

        public void setAttributeLength(Long attributeLength)
        {
            this.attributeLength = attributeLength;
        }

        private String isEnumeration;

        public String getIsEnumeration()
        {
            return this.isEnumeration;
        }

        public void setIsEnumeration(String isEnumeration)
        {
            this.isEnumeration = isEnumeration;
        }

        private Long scale;

        public Long getScale()
        {
            return this.scale;
        }

        public void setScale(Long scale)
        {
            this.scale = scale;
        }

        private String truncatedTo;

        public String getTruncatedTo()
        {
            return this.truncatedTo;
        }

        public void setTruncatedTo(String truncatedTo)
        {
            this.truncatedTo = truncatedTo;
        }

        private Boolean active;

        public Boolean getActive()
        {
            return this.active;
        }

        public void setActive(Boolean active)
        {
            this.active = active;
        }

        protected AbstractAttributeStateEvent(AttributeEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractAttributeStateCreated extends AbstractAttributeStateEvent implements AttributeEvent.AttributeStateCreated, Saveable
    {
        public AbstractAttributeStateCreated() {
            this(new AttributeEventId());
        }

        public AbstractAttributeStateCreated(AttributeEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

        private Map<AttributeValueEventId, AttributeValueEvent.AttributeValueStateCreated> attributeValueEvents = new HashMap<AttributeValueEventId, AttributeValueEvent.AttributeValueStateCreated>();
        
        private Iterable<AttributeValueEvent.AttributeValueStateCreated> readOnlyAttributeValueEvents;

        public Iterable<AttributeValueEvent.AttributeValueStateCreated> getAttributeValueEvents()
        {
            if (!getEventReadOnly())
            {
                return this.attributeValueEvents.values();
            }
            else
            {
                if (readOnlyAttributeValueEvents != null) { return readOnlyAttributeValueEvents; }
                AttributeValueEventDao eventDao = getAttributeValueEventDao();
                List<AttributeValueEvent.AttributeValueStateCreated> eL = new ArrayList<AttributeValueEvent.AttributeValueStateCreated>();
                for (AttributeValueEvent e : eventDao.findByAttributeEventId(this.getAttributeEventId()))
                {
                    ((AttributeValueEvent.SqlAttributeValueEvent)e).setEventReadOnly(true);
                    eL.add((AttributeValueEvent.AttributeValueStateCreated)e);
                }
                return (readOnlyAttributeValueEvents = eL);
            }
        }

        public void setAttributeValueEvents(Iterable<AttributeValueEvent.AttributeValueStateCreated> es)
        {
            if (es != null)
            {
                for (AttributeValueEvent.AttributeValueStateCreated e : es)
                {
                    addAttributeValueEvent(e);
                }
            }
            else { this.attributeValueEvents.clear(); }
        }
        
        public void addAttributeValueEvent(AttributeValueEvent.AttributeValueStateCreated e)
        {
            throwOnInconsistentEventIds((AttributeValueEvent.SqlAttributeValueEvent)e);
            this.attributeValueEvents.put(((AttributeValueEvent.SqlAttributeValueEvent)e).getAttributeValueEventId(), e);
        }

        public void save()
        {
            for (AttributeValueEvent.AttributeValueStateCreated e : this.getAttributeValueEvents()) {
                getAttributeValueEventDao().save(e);
            }
        }
    }


    public static abstract class AbstractAttributeStateMergePatched extends AbstractAttributeStateEvent implements AttributeEvent.AttributeStateMergePatched, Saveable
    {
        public AbstractAttributeStateMergePatched() {
            this(new AttributeEventId());
        }

        public AbstractAttributeStateMergePatched(AttributeEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyAttributeTypeRemoved;

        public Boolean getIsPropertyAttributeTypeRemoved() {
            return this.isPropertyAttributeTypeRemoved;
        }

        public void setIsPropertyAttributeTypeRemoved(Boolean removed) {
            this.isPropertyAttributeTypeRemoved = removed;
        }

        private Boolean isPropertyAttributeNameRemoved;

        public Boolean getIsPropertyAttributeNameRemoved() {
            return this.isPropertyAttributeNameRemoved;
        }

        public void setIsPropertyAttributeNameRemoved(Boolean removed) {
            this.isPropertyAttributeNameRemoved = removed;
        }

        private Boolean isPropertyDescriptionRemoved;

        public Boolean getIsPropertyDescriptionRemoved() {
            return this.isPropertyDescriptionRemoved;
        }

        public void setIsPropertyDescriptionRemoved(Boolean removed) {
            this.isPropertyDescriptionRemoved = removed;
        }

        private Boolean isPropertyIsMandatoryRemoved;

        public Boolean getIsPropertyIsMandatoryRemoved() {
            return this.isPropertyIsMandatoryRemoved;
        }

        public void setIsPropertyIsMandatoryRemoved(Boolean removed) {
            this.isPropertyIsMandatoryRemoved = removed;
        }

        private Boolean isPropertyAttributeLengthRemoved;

        public Boolean getIsPropertyAttributeLengthRemoved() {
            return this.isPropertyAttributeLengthRemoved;
        }

        public void setIsPropertyAttributeLengthRemoved(Boolean removed) {
            this.isPropertyAttributeLengthRemoved = removed;
        }

        private Boolean isPropertyIsEnumerationRemoved;

        public Boolean getIsPropertyIsEnumerationRemoved() {
            return this.isPropertyIsEnumerationRemoved;
        }

        public void setIsPropertyIsEnumerationRemoved(Boolean removed) {
            this.isPropertyIsEnumerationRemoved = removed;
        }

        private Boolean isPropertyScaleRemoved;

        public Boolean getIsPropertyScaleRemoved() {
            return this.isPropertyScaleRemoved;
        }

        public void setIsPropertyScaleRemoved(Boolean removed) {
            this.isPropertyScaleRemoved = removed;
        }

        private Boolean isPropertyTruncatedToRemoved;

        public Boolean getIsPropertyTruncatedToRemoved() {
            return this.isPropertyTruncatedToRemoved;
        }

        public void setIsPropertyTruncatedToRemoved(Boolean removed) {
            this.isPropertyTruncatedToRemoved = removed;
        }

        private Boolean isPropertyActiveRemoved;

        public Boolean getIsPropertyActiveRemoved() {
            return this.isPropertyActiveRemoved;
        }

        public void setIsPropertyActiveRemoved(Boolean removed) {
            this.isPropertyActiveRemoved = removed;
        }


        private Map<AttributeValueEventId, AttributeValueEvent> attributeValueEvents = new HashMap<AttributeValueEventId, AttributeValueEvent>();
        
        private Iterable<AttributeValueEvent> readOnlyAttributeValueEvents;

        public Iterable<AttributeValueEvent> getAttributeValueEvents()
        {
            if (!getEventReadOnly())
            {
                return this.attributeValueEvents.values();
            }
            else
            {
                if (readOnlyAttributeValueEvents != null) { return readOnlyAttributeValueEvents; }
                AttributeValueEventDao eventDao = getAttributeValueEventDao();
                List<AttributeValueEvent> eL = new ArrayList<AttributeValueEvent>();
                for (AttributeValueEvent e : eventDao.findByAttributeEventId(this.getAttributeEventId()))
                {
                    ((AttributeValueEvent.SqlAttributeValueEvent)e).setEventReadOnly(true);
                    eL.add((AttributeValueEvent)e);
                }
                return (readOnlyAttributeValueEvents = eL);
            }
        }

        public void setAttributeValueEvents(Iterable<AttributeValueEvent> es)
        {
            if (es != null)
            {
                for (AttributeValueEvent e : es)
                {
                    addAttributeValueEvent(e);
                }
            }
            else { this.attributeValueEvents.clear(); }
        }
        
        public void addAttributeValueEvent(AttributeValueEvent e)
        {
            throwOnInconsistentEventIds((AttributeValueEvent.SqlAttributeValueEvent)e);
            this.attributeValueEvents.put(((AttributeValueEvent.SqlAttributeValueEvent)e).getAttributeValueEventId(), e);
        }

        public void save()
        {
            for (AttributeValueEvent e : this.getAttributeValueEvents()) {
                getAttributeValueEventDao().save(e);
            }
        }
    }



    public static class SimpleAttributeStateCreated extends AbstractAttributeStateCreated
    {
        public SimpleAttributeStateCreated() {
        }

        public SimpleAttributeStateCreated(AttributeEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleAttributeStateMergePatched extends AbstractAttributeStateMergePatched
    {
        public SimpleAttributeStateMergePatched() {
        }

        public SimpleAttributeStateMergePatched(AttributeEventId eventId) {
            super(eventId);
        }
    }

}

