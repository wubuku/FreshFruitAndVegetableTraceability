// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.workeffortinventoryassign;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractWorkEffortInventoryAssignAggregate extends AbstractAggregate implements WorkEffortInventoryAssignAggregate {
    private WorkEffortInventoryAssignState.MutableWorkEffortInventoryAssignState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractWorkEffortInventoryAssignAggregate(WorkEffortInventoryAssignState state) {
        this.state = (WorkEffortInventoryAssignState.MutableWorkEffortInventoryAssignState)state;
    }

    public WorkEffortInventoryAssignState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(WorkEffortInventoryAssignCommand.CreateWorkEffortInventoryAssign c) {
        if (c.getVersion() == null) { c.setVersion(WorkEffortInventoryAssignState.VERSION_NULL); }
        WorkEffortInventoryAssignEvent e = map(c);
        apply(e);
    }

    public void mergePatch(WorkEffortInventoryAssignCommand.MergePatchWorkEffortInventoryAssign c) {
        WorkEffortInventoryAssignEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        WorkEffortInventoryAssignCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    @Override
    protected void onApplying(Event e) {
        if (state.getVersion() == null) {
            state.setTenantId(TenantContext.getTenantId());
        }
        if (e instanceof WorkEffortInventoryAssignEvent) {
            WorkEffortInventoryAssignEvent ee = (WorkEffortInventoryAssignEvent) e;
            ee.setTenantId(state.getTenantId());
        }
        super.onApplying(e);
    }

    protected WorkEffortInventoryAssignEvent map(WorkEffortInventoryAssignCommand.CreateWorkEffortInventoryAssign c) {
        WorkEffortInventoryAssignEventId stateEventId = new WorkEffortInventoryAssignEventId(c.getWorkEffortInventoryAssignId(), c.getVersion());
        WorkEffortInventoryAssignEvent.WorkEffortInventoryAssignStateCreated e = newWorkEffortInventoryAssignStateCreated(stateEventId);
        e.setStatusId(c.getStatusId());
        e.setQuantity(c.getQuantity());
        ((AbstractWorkEffortInventoryAssignEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortInventoryAssignEvent map(WorkEffortInventoryAssignCommand.MergePatchWorkEffortInventoryAssign c) {
        WorkEffortInventoryAssignEventId stateEventId = new WorkEffortInventoryAssignEventId(c.getWorkEffortInventoryAssignId(), c.getVersion());
        WorkEffortInventoryAssignEvent.WorkEffortInventoryAssignStateMergePatched e = newWorkEffortInventoryAssignStateMergePatched(stateEventId);
        e.setStatusId(c.getStatusId());
        e.setQuantity(c.getQuantity());
        e.setIsPropertyStatusIdRemoved(c.getIsPropertyStatusIdRemoved());
        e.setIsPropertyQuantityRemoved(c.getIsPropertyQuantityRemoved());
        ((AbstractWorkEffortInventoryAssignEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected WorkEffortInventoryAssignEvent.WorkEffortInventoryAssignStateCreated newWorkEffortInventoryAssignStateCreated(Long version, String commandId, String requesterId) {
        WorkEffortInventoryAssignEventId stateEventId = new WorkEffortInventoryAssignEventId(this.state.getWorkEffortInventoryAssignId(), version);
        WorkEffortInventoryAssignEvent.WorkEffortInventoryAssignStateCreated e = newWorkEffortInventoryAssignStateCreated(stateEventId);
        ((AbstractWorkEffortInventoryAssignEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortInventoryAssignEvent.WorkEffortInventoryAssignStateMergePatched newWorkEffortInventoryAssignStateMergePatched(Long version, String commandId, String requesterId) {
        WorkEffortInventoryAssignEventId stateEventId = new WorkEffortInventoryAssignEventId(this.state.getWorkEffortInventoryAssignId(), version);
        WorkEffortInventoryAssignEvent.WorkEffortInventoryAssignStateMergePatched e = newWorkEffortInventoryAssignStateMergePatched(stateEventId);
        ((AbstractWorkEffortInventoryAssignEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected WorkEffortInventoryAssignEvent.WorkEffortInventoryAssignStateCreated newWorkEffortInventoryAssignStateCreated(WorkEffortInventoryAssignEventId stateEventId) {
        return new AbstractWorkEffortInventoryAssignEvent.SimpleWorkEffortInventoryAssignStateCreated(stateEventId);
    }

    protected WorkEffortInventoryAssignEvent.WorkEffortInventoryAssignStateMergePatched newWorkEffortInventoryAssignStateMergePatched(WorkEffortInventoryAssignEventId stateEventId) {
        return new AbstractWorkEffortInventoryAssignEvent.SimpleWorkEffortInventoryAssignStateMergePatched(stateEventId);
    }


    public static class SimpleWorkEffortInventoryAssignAggregate extends AbstractWorkEffortInventoryAssignAggregate {
        public SimpleWorkEffortInventoryAssignAggregate(WorkEffortInventoryAssignState state) {
            super(state);
        }

    }

}

