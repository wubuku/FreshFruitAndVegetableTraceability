// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facilitycontactmech;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.domain.facilitycontactmech.FacilityContactMechEvent.*;

public abstract class AbstractFacilityContactMechState implements FacilityContactMechState.SqlFacilityContactMechState, Saveable {

    private FacilityContactMechId facilityContactMechId;

    public FacilityContactMechId getFacilityContactMechId() {
        return this.facilityContactMechId;
    }

    public void setFacilityContactMechId(FacilityContactMechId facilityContactMechId) {
        this.facilityContactMechId = facilityContactMechId;
    }

    private OffsetDateTime thruDate;

    public OffsetDateTime getThruDate() {
        return this.thruDate;
    }

    public void setThruDate(OffsetDateTime thruDate) {
        this.thruDate = thruDate;
    }

    private String extension;

    public String getExtension() {
        return this.extension;
    }

    public void setExtension(String extension) {
        this.extension = extension;
    }

    private String comments;

    public String getComments() {
        return this.comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    private Long version;

    public Long getVersion() {
        return this.version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private String tenantId;

    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public boolean isStateUnsaved() {
        return this.getVersion() == null;
    }

    private Set<FacilityContactMechPurposeState> protectedFacilityContactMechPurposes = new HashSet<>();

    protected Set<FacilityContactMechPurposeState> getProtectedFacilityContactMechPurposes() {
        return this.protectedFacilityContactMechPurposes;
    }

    protected void setProtectedFacilityContactMechPurposes(Set<FacilityContactMechPurposeState> protectedFacilityContactMechPurposes) {
        this.protectedFacilityContactMechPurposes = protectedFacilityContactMechPurposes;
    }

    private EntityStateCollection.MutableEntityStateCollection<String, FacilityContactMechPurposeState> facilityContactMechPurposes;

    public EntityStateCollection.MutableEntityStateCollection<String, FacilityContactMechPurposeState> getFacilityContactMechPurposes() {
        return this.facilityContactMechPurposes;
    }

    public void setFacilityContactMechPurposes(EntityStateCollection.MutableEntityStateCollection<String, FacilityContactMechPurposeState> facilityContactMechPurposes) {
        this.facilityContactMechPurposes = facilityContactMechPurposes;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractFacilityContactMechState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setFacilityContactMechId(((FacilityContactMechEvent.SqlFacilityContactMechEvent) events.get(0)).getFacilityContactMechEventId().getFacilityContactMechId());
            for (Event e : events) {
                mutate(e);
                this.setVersion((this.getVersion() == null ? FacilityContactMechState.VERSION_NULL : this.getVersion()) + 1);
            }
        }
    }


    public AbstractFacilityContactMechState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        facilityContactMechPurposes = new SimpleFacilityContactMechPurposeStateCollection();
    }

    @Override
    public int hashCode() {
        return getFacilityContactMechId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof FacilityContactMechState) {
            return Objects.equals(this.getFacilityContactMechId(), ((FacilityContactMechState)obj).getFacilityContactMechId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof FacilityContactMechStateCreated) {
            when((FacilityContactMechStateCreated) e);
        } else if (e instanceof FacilityContactMechStateMergePatched) {
            when((FacilityContactMechStateMergePatched) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(FacilityContactMechStateCreated e) {
        throwOnWrongEvent(e);

        this.setThruDate(e.getThruDate());
        this.setExtension(e.getExtension());
        this.setComments(e.getComments());

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

        for (FacilityContactMechPurposeEvent.FacilityContactMechPurposeStateCreated innerEvent : e.getFacilityContactMechPurposeEvents()) {
            FacilityContactMechPurposeState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, FacilityContactMechPurposeState>)this.getFacilityContactMechPurposes()).getOrAddDefault(((FacilityContactMechPurposeEvent.SqlFacilityContactMechPurposeEvent)innerEvent).getFacilityContactMechPurposeEventId().getContactMechPurposeTypeId());
            ((FacilityContactMechPurposeState.SqlFacilityContactMechPurposeState)innerState).mutate(innerEvent);
        }
    }

    public void merge(FacilityContactMechState s) {
        if (s == this) {
            return;
        }
        this.setThruDate(s.getThruDate());
        this.setExtension(s.getExtension());
        this.setComments(s.getComments());

        if (s.getFacilityContactMechPurposes() != null) {
            Iterable<FacilityContactMechPurposeState> iterable;
            if (s.getFacilityContactMechPurposes().isLazy()) {
                iterable = s.getFacilityContactMechPurposes().getLoadedStates();
            } else {
                iterable = s.getFacilityContactMechPurposes();
            }
            if (iterable != null) {
                for (FacilityContactMechPurposeState ss : iterable) {
                    FacilityContactMechPurposeState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, FacilityContactMechPurposeState>)this.getFacilityContactMechPurposes()).getOrAddDefault(ss.getContactMechPurposeTypeId());
                    ((AbstractFacilityContactMechPurposeState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getFacilityContactMechPurposes() != null) {
            if (s.getFacilityContactMechPurposes() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getFacilityContactMechPurposes()).getRemovedStates() != null) {
                    for (FacilityContactMechPurposeState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, FacilityContactMechPurposeState>)s.getFacilityContactMechPurposes()).getRemovedStates()) {
                        FacilityContactMechPurposeState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, FacilityContactMechPurposeState>)this.getFacilityContactMechPurposes()).getOrAddDefault(ss.getContactMechPurposeTypeId());
                        ((EntityStateCollection.MutableEntityStateCollection)this.getFacilityContactMechPurposes()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getFacilityContactMechPurposes().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getFacilityContactMechPurposes().stream().map(i -> i.getContactMechPurposeTypeId()).collect(java.util.stream.Collectors.toList()));
                    s.getFacilityContactMechPurposes().forEach(i -> removedStateIds.remove(i.getContactMechPurposeTypeId()));
                    for (String i : removedStateIds) {
                        FacilityContactMechPurposeState thisInnerState = ((EntityStateCollection.MutableEntityStateCollection<String, FacilityContactMechPurposeState>)this.getFacilityContactMechPurposes()).getOrAddDefault(i);
                        ((EntityStateCollection.MutableEntityStateCollection)this.getFacilityContactMechPurposes()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(FacilityContactMechStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getThruDate() == null) {
            if (e.getIsPropertyThruDateRemoved() != null && e.getIsPropertyThruDateRemoved()) {
                this.setThruDate(null);
            }
        } else {
            this.setThruDate(e.getThruDate());
        }
        if (e.getExtension() == null) {
            if (e.getIsPropertyExtensionRemoved() != null && e.getIsPropertyExtensionRemoved()) {
                this.setExtension(null);
            }
        } else {
            this.setExtension(e.getExtension());
        }
        if (e.getComments() == null) {
            if (e.getIsPropertyCommentsRemoved() != null && e.getIsPropertyCommentsRemoved()) {
                this.setComments(null);
            }
        } else {
            this.setComments(e.getComments());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        for (FacilityContactMechPurposeEvent innerEvent : e.getFacilityContactMechPurposeEvents()) {
            FacilityContactMechPurposeState innerState = ((EntityStateCollection.MutableEntityStateCollection<String, FacilityContactMechPurposeState>)this.getFacilityContactMechPurposes()).getOrAddDefault(((FacilityContactMechPurposeEvent.SqlFacilityContactMechPurposeEvent)innerEvent).getFacilityContactMechPurposeEventId().getContactMechPurposeTypeId());
            ((FacilityContactMechPurposeState.SqlFacilityContactMechPurposeState)innerState).mutate(innerEvent);
        }
    }

    public void save() {
        if (facilityContactMechPurposes instanceof Saveable) {
            ((Saveable)facilityContactMechPurposes).save();
        }
    }

    protected void throwOnWrongEvent(FacilityContactMechEvent event) {
        FacilityContactMechId stateEntityId = this.getFacilityContactMechId(); // Aggregate Id
        FacilityContactMechId eventEntityId = ((FacilityContactMechEvent.SqlFacilityContactMechEvent)event).getFacilityContactMechEventId().getFacilityContactMechId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getVersion();
        Long eventVersion = ((FacilityContactMechEvent.SqlFacilityContactMechEvent)event).getFacilityContactMechEventId().getVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getFacilityContactMechEventId().getVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion == VERSION_NULL ? "NULL" : eventVersion + "");
        }

    }


    public static class SimpleFacilityContactMechState extends AbstractFacilityContactMechState {

        public SimpleFacilityContactMechState() {
        }

        public SimpleFacilityContactMechState(List<Event> events) {
            super(events);
        }

        public static SimpleFacilityContactMechState newForReapplying() {
            SimpleFacilityContactMechState s = new SimpleFacilityContactMechState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleFacilityContactMechPurposeStateCollection implements EntityStateCollection.MutableEntityStateCollection<String, FacilityContactMechPurposeState>, Collection<FacilityContactMechPurposeState> {

        @Override
        public FacilityContactMechPurposeState get(String contactMechPurposeTypeId) {
            return protectedFacilityContactMechPurposes.stream().filter(
                            e -> e.getContactMechPurposeTypeId().equals(contactMechPurposeTypeId))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<FacilityContactMechPurposeState> getLoadedStates() {
            return protectedFacilityContactMechPurposes;
        }

        @Override
        public FacilityContactMechPurposeState getOrAddDefault(String contactMechPurposeTypeId) {
            FacilityContactMechPurposeState s = get(contactMechPurposeTypeId);
            if (s == null) {
                FacilityContactMechPurposeId globalId = new FacilityContactMechPurposeId(getFacilityContactMechId(), contactMechPurposeTypeId);
                AbstractFacilityContactMechPurposeState state = new AbstractFacilityContactMechPurposeState.SimpleFacilityContactMechPurposeState();
                state.setFacilityContactMechPurposeId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedFacilityContactMechPurposes.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedFacilityContactMechPurposes.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedFacilityContactMechPurposes.contains(o);
        }

        @Override
        public Iterator<FacilityContactMechPurposeState> iterator() {
            return protectedFacilityContactMechPurposes.iterator();
        }

        @Override
        public java.util.stream.Stream<FacilityContactMechPurposeState> stream() {
            return protectedFacilityContactMechPurposes.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedFacilityContactMechPurposes.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedFacilityContactMechPurposes.toArray(a);
        }

        @Override
        public boolean add(FacilityContactMechPurposeState s) {
            if (s instanceof AbstractFacilityContactMechPurposeState) {
                AbstractFacilityContactMechPurposeState state = (AbstractFacilityContactMechPurposeState) s;
                state.setProtectedFacilityContactMechState(AbstractFacilityContactMechState.this);
            }
            return protectedFacilityContactMechPurposes.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractFacilityContactMechPurposeState) {
                AbstractFacilityContactMechPurposeState s = (AbstractFacilityContactMechPurposeState) o;
                s.setProtectedFacilityContactMechState(null);
            }
            return protectedFacilityContactMechPurposes.remove(o);
        }

        @Override
        public boolean removeState(FacilityContactMechPurposeState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedFacilityContactMechPurposes.containsAll(c);
        }

        @Override
        public boolean addAll(Collection<? extends FacilityContactMechPurposeState> c) {
            return protectedFacilityContactMechPurposes.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedFacilityContactMechPurposes.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedFacilityContactMechPurposes.retainAll(c);
        }

        @Override
        public void clear() {
            protectedFacilityContactMechPurposes.clear();
        }
    }


}

