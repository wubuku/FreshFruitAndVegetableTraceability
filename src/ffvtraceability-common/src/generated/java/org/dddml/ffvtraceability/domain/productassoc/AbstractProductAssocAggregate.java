// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.productassoc;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;

public abstract class AbstractProductAssocAggregate extends AbstractAggregate implements ProductAssocAggregate {
    private ProductAssocState.MutableProductAssocState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractProductAssocAggregate(ProductAssocState state) {
        this.state = (ProductAssocState.MutableProductAssocState)state;
    }

    public ProductAssocState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(ProductAssocCommand.CreateProductAssoc c) {
        if (c.getVersion() == null) { c.setVersion(ProductAssocState.VERSION_NULL); }
        ProductAssocEvent e = map(c);
        apply(e);
    }

    public void mergePatch(ProductAssocCommand.MergePatchProductAssoc c) {
        ProductAssocEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        ProductAssocCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected ProductAssocEvent map(ProductAssocCommand.CreateProductAssoc c) {
        ProductAssocEventId stateEventId = new ProductAssocEventId(c.getProductAssocId(), c.getVersion());
        ProductAssocEvent.ProductAssocStateCreated e = newProductAssocStateCreated(stateEventId);
        e.setThruDate(c.getThruDate());
        e.setSequenceNum(c.getSequenceNum());
        e.setReason(c.getReason());
        e.setQuantity(c.getQuantity());
        e.setScrapFactor(c.getScrapFactor());
        e.setInstruction(c.getInstruction());
        e.setRoutingWorkEffortId(c.getRoutingWorkEffortId());
        e.setEstimateCalcMethod(c.getEstimateCalcMethod());
        e.setRecurrenceInfoId(c.getRecurrenceInfoId());
        ((AbstractProductAssocEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ProductAssocEvent map(ProductAssocCommand.MergePatchProductAssoc c) {
        ProductAssocEventId stateEventId = new ProductAssocEventId(c.getProductAssocId(), c.getVersion());
        ProductAssocEvent.ProductAssocStateMergePatched e = newProductAssocStateMergePatched(stateEventId);
        e.setThruDate(c.getThruDate());
        e.setSequenceNum(c.getSequenceNum());
        e.setReason(c.getReason());
        e.setQuantity(c.getQuantity());
        e.setScrapFactor(c.getScrapFactor());
        e.setInstruction(c.getInstruction());
        e.setRoutingWorkEffortId(c.getRoutingWorkEffortId());
        e.setEstimateCalcMethod(c.getEstimateCalcMethod());
        e.setRecurrenceInfoId(c.getRecurrenceInfoId());
        e.setIsPropertyThruDateRemoved(c.getIsPropertyThruDateRemoved());
        e.setIsPropertySequenceNumRemoved(c.getIsPropertySequenceNumRemoved());
        e.setIsPropertyReasonRemoved(c.getIsPropertyReasonRemoved());
        e.setIsPropertyQuantityRemoved(c.getIsPropertyQuantityRemoved());
        e.setIsPropertyScrapFactorRemoved(c.getIsPropertyScrapFactorRemoved());
        e.setIsPropertyInstructionRemoved(c.getIsPropertyInstructionRemoved());
        e.setIsPropertyRoutingWorkEffortIdRemoved(c.getIsPropertyRoutingWorkEffortIdRemoved());
        e.setIsPropertyEstimateCalcMethodRemoved(c.getIsPropertyEstimateCalcMethodRemoved());
        e.setIsPropertyRecurrenceInfoIdRemoved(c.getIsPropertyRecurrenceInfoIdRemoved());
        ((AbstractProductAssocEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected ProductAssocEvent.ProductAssocStateCreated newProductAssocStateCreated(Long version, String commandId, String requesterId) {
        ProductAssocEventId stateEventId = new ProductAssocEventId(this.state.getProductAssocId(), version);
        ProductAssocEvent.ProductAssocStateCreated e = newProductAssocStateCreated(stateEventId);
        ((AbstractProductAssocEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ProductAssocEvent.ProductAssocStateMergePatched newProductAssocStateMergePatched(Long version, String commandId, String requesterId) {
        ProductAssocEventId stateEventId = new ProductAssocEventId(this.state.getProductAssocId(), version);
        ProductAssocEvent.ProductAssocStateMergePatched e = newProductAssocStateMergePatched(stateEventId);
        ((AbstractProductAssocEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected ProductAssocEvent.ProductAssocStateCreated newProductAssocStateCreated(ProductAssocEventId stateEventId) {
        return new AbstractProductAssocEvent.SimpleProductAssocStateCreated(stateEventId);
    }

    protected ProductAssocEvent.ProductAssocStateMergePatched newProductAssocStateMergePatched(ProductAssocEventId stateEventId) {
        return new AbstractProductAssocEvent.SimpleProductAssocStateMergePatched(stateEventId);
    }


    public static class SimpleProductAssocAggregate extends AbstractProductAssocAggregate {
        public SimpleProductAssocAggregate(ProductAssocState state) {
            super(state);
        }

    }

}

