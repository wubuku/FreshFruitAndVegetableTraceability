// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.order;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.partyrole.*;
import org.dddml.ffvtraceability.domain.*;

public class CreateOrMergePatchOrderDto extends AbstractOrderCommandDto implements OrderCommand.CreateOrMergePatchOrder {

    /**
     * Order Type Id
     */
    private String orderTypeId;

    public String getOrderTypeId()
    {
        return this.orderTypeId;
    }

    public void setOrderTypeId(String orderTypeId)
    {
        this.orderTypeId = orderTypeId;
    }

    /**
     * Order Name
     */
    private String orderName;

    public String getOrderName()
    {
        return this.orderName;
    }

    public void setOrderName(String orderName)
    {
        this.orderName = orderName;
    }

    /**
     * External Id
     */
    private String externalId;

    public String getExternalId()
    {
        return this.externalId;
    }

    public void setExternalId(String externalId)
    {
        this.externalId = externalId;
    }

    /**
     * Sales Channel Enum Id
     */
    private String salesChannelEnumId;

    public String getSalesChannelEnumId()
    {
        return this.salesChannelEnumId;
    }

    public void setSalesChannelEnumId(String salesChannelEnumId)
    {
        this.salesChannelEnumId = salesChannelEnumId;
    }

    /**
     * Order Date
     */
    private OffsetDateTime orderDate;

    public OffsetDateTime getOrderDate()
    {
        return this.orderDate;
    }

    public void setOrderDate(OffsetDateTime orderDate)
    {
        this.orderDate = orderDate;
    }

    /**
     * Sets priority for Inventory Reservation
     */
    private String priority;

    public String getPriority()
    {
        return this.priority;
    }

    public void setPriority(String priority)
    {
        this.priority = priority;
    }

    /**
     * Entry Date
     */
    private OffsetDateTime entryDate;

    public OffsetDateTime getEntryDate()
    {
        return this.entryDate;
    }

    public void setEntryDate(OffsetDateTime entryDate)
    {
        this.entryDate = entryDate;
    }

    /**
     * This will be set to a date when pick sheet of the order is printed
     */
    private OffsetDateTime pickSheetPrintedDate;

    public OffsetDateTime getPickSheetPrintedDate()
    {
        return this.pickSheetPrintedDate;
    }

    public void setPickSheetPrintedDate(OffsetDateTime pickSheetPrintedDate)
    {
        this.pickSheetPrintedDate = pickSheetPrintedDate;
    }

    /**
     * Visit Id
     */
    private String visitId;

    public String getVisitId()
    {
        return this.visitId;
    }

    public void setVisitId(String visitId)
    {
        this.visitId = visitId;
    }

    /**
     * Status Id
     */
    private String statusId;

    public String getStatusId()
    {
        return this.statusId;
    }

    public void setStatusId(String statusId)
    {
        this.statusId = statusId;
    }

    /**
     * First Attempt Order Id
     */
    private String firstAttemptOrderId;

    public String getFirstAttemptOrderId()
    {
        return this.firstAttemptOrderId;
    }

    public void setFirstAttemptOrderId(String firstAttemptOrderId)
    {
        this.firstAttemptOrderId = firstAttemptOrderId;
    }

    /**
     * Currency Uom Id
     */
    private String currencyUomId;

    public String getCurrencyUomId()
    {
        return this.currencyUomId;
    }

    public void setCurrencyUomId(String currencyUomId)
    {
        this.currencyUomId = currencyUomId;
    }

    /**
     * Sync Status Id
     */
    private String syncStatusId;

    public String getSyncStatusId()
    {
        return this.syncStatusId;
    }

    public void setSyncStatusId(String syncStatusId)
    {
        this.syncStatusId = syncStatusId;
    }

    /**
     * Billing Account Id
     */
    private String billingAccountId;

    public String getBillingAccountId()
    {
        return this.billingAccountId;
    }

    public void setBillingAccountId(String billingAccountId)
    {
        this.billingAccountId = billingAccountId;
    }

    /**
     * Origin Facility Id
     */
    private String originFacilityId;

    public String getOriginFacilityId()
    {
        return this.originFacilityId;
    }

    public void setOriginFacilityId(String originFacilityId)
    {
        this.originFacilityId = originFacilityId;
    }

    /**
     * Product Store Id
     */
    private String productStoreId;

    public String getProductStoreId()
    {
        return this.productStoreId;
    }

    public void setProductStoreId(String productStoreId)
    {
        this.productStoreId = productStoreId;
    }

    /**
     * Terminal Id
     */
    private String terminalId;

    public String getTerminalId()
    {
        return this.terminalId;
    }

    public void setTerminalId(String terminalId)
    {
        this.terminalId = terminalId;
    }

    /**
     * Transaction Id
     */
    private String transactionId;

    public String getTransactionId()
    {
        return this.transactionId;
    }

    public void setTransactionId(String transactionId)
    {
        this.transactionId = transactionId;
    }

    /**
     * Auto Order Shopping List Id
     */
    private String autoOrderShoppingListId;

    public String getAutoOrderShoppingListId()
    {
        return this.autoOrderShoppingListId;
    }

    public void setAutoOrderShoppingListId(String autoOrderShoppingListId)
    {
        this.autoOrderShoppingListId = autoOrderShoppingListId;
    }

    /**
     * Needs Inventory Issuance
     */
    private String needsInventoryIssuance;

    public String getNeedsInventoryIssuance()
    {
        return this.needsInventoryIssuance;
    }

    public void setNeedsInventoryIssuance(String needsInventoryIssuance)
    {
        this.needsInventoryIssuance = needsInventoryIssuance;
    }

    /**
     * Is Rush Order
     */
    private String isRushOrder;

    public String getIsRushOrder()
    {
        return this.isRushOrder;
    }

    public void setIsRushOrder(String isRushOrder)
    {
        this.isRushOrder = isRushOrder;
    }

    /**
     * Internal Code
     */
    private String internalCode;

    public String getInternalCode()
    {
        return this.internalCode;
    }

    public void setInternalCode(String internalCode)
    {
        this.internalCode = internalCode;
    }

    /**
     * Remaining Sub Total
     */
    private java.math.BigDecimal remainingSubTotal;

    public java.math.BigDecimal getRemainingSubTotal()
    {
        return this.remainingSubTotal;
    }

    public void setRemainingSubTotal(java.math.BigDecimal remainingSubTotal)
    {
        this.remainingSubTotal = remainingSubTotal;
    }

    /**
     * Grand Total
     */
    private java.math.BigDecimal grandTotal;

    public java.math.BigDecimal getGrandTotal()
    {
        return this.grandTotal;
    }

    public void setGrandTotal(java.math.BigDecimal grandTotal)
    {
        this.grandTotal = grandTotal;
    }

    /**
     * Is Viewed
     */
    private String isViewed;

    public String getIsViewed()
    {
        return this.isViewed;
    }

    public void setIsViewed(String isViewed)
    {
        this.isViewed = isViewed;
    }

    /**
     * Invoice Per Shipment
     */
    private String invoicePerShipment;

    public String getInvoicePerShipment()
    {
        return this.invoicePerShipment;
    }

    public void setInvoicePerShipment(String invoicePerShipment)
    {
        this.invoicePerShipment = invoicePerShipment;
    }

    /**
     * Memo
     */
    private String memo;

    public String getMemo()
    {
        return this.memo;
    }

    public void setMemo(String memo)
    {
        this.memo = memo;
    }

    /**
     * Fulfillment Status Id
     */
    private String fulfillmentStatusId;

    public String getFulfillmentStatusId()
    {
        return this.fulfillmentStatusId;
    }

    public void setFulfillmentStatusId(String fulfillmentStatusId)
    {
        this.fulfillmentStatusId = fulfillmentStatusId;
    }


    private CreateOrMergePatchOrderRoleDto[] orderRoles = new CreateOrMergePatchOrderRoleDto[0];

    public CreateOrMergePatchOrderRoleDto[] getOrderRoles()
    {
        return this.orderRoles;
    }

    public void setOrderRoles(CreateOrMergePatchOrderRoleDto[] orderRoles)
    {
        this.orderRoles = orderRoles;
    }

    private CreateOrMergePatchOrderContactMechDto[] orderContactMechanisms = new CreateOrMergePatchOrderContactMechDto[0];

    public CreateOrMergePatchOrderContactMechDto[] getOrderContactMechanisms()
    {
        return this.orderContactMechanisms;
    }

    public void setOrderContactMechanisms(CreateOrMergePatchOrderContactMechDto[] orderContactMechanisms)
    {
        this.orderContactMechanisms = orderContactMechanisms;
    }

    private CreateOrMergePatchOrderItemDto[] orderItems = new CreateOrMergePatchOrderItemDto[0];

    public CreateOrMergePatchOrderItemDto[] getOrderItems()
    {
        return this.orderItems;
    }

    public void setOrderItems(CreateOrMergePatchOrderItemDto[] orderItems)
    {
        this.orderItems = orderItems;
    }

    private CreateOrMergePatchOrderAdjustmentDto[] orderAdjustments = new CreateOrMergePatchOrderAdjustmentDto[0];

    public CreateOrMergePatchOrderAdjustmentDto[] getOrderAdjustments()
    {
        return this.orderAdjustments;
    }

    public void setOrderAdjustments(CreateOrMergePatchOrderAdjustmentDto[] orderAdjustments)
    {
        this.orderAdjustments = orderAdjustments;
    }

    private CreateOrMergePatchOrderShipGroupDto[] orderShipGroups = new CreateOrMergePatchOrderShipGroupDto[0];

    public CreateOrMergePatchOrderShipGroupDto[] getOrderShipGroups()
    {
        return this.orderShipGroups;
    }

    public void setOrderShipGroups(CreateOrMergePatchOrderShipGroupDto[] orderShipGroups)
    {
        this.orderShipGroups = orderShipGroups;
    }

    private Boolean isPropertyOrderTypeIdRemoved;

    public Boolean getIsPropertyOrderTypeIdRemoved()
    {
        return this.isPropertyOrderTypeIdRemoved;
    }

    public void setIsPropertyOrderTypeIdRemoved(Boolean removed)
    {
        this.isPropertyOrderTypeIdRemoved = removed;
    }

    private Boolean isPropertyOrderNameRemoved;

    public Boolean getIsPropertyOrderNameRemoved()
    {
        return this.isPropertyOrderNameRemoved;
    }

    public void setIsPropertyOrderNameRemoved(Boolean removed)
    {
        this.isPropertyOrderNameRemoved = removed;
    }

    private Boolean isPropertyExternalIdRemoved;

    public Boolean getIsPropertyExternalIdRemoved()
    {
        return this.isPropertyExternalIdRemoved;
    }

    public void setIsPropertyExternalIdRemoved(Boolean removed)
    {
        this.isPropertyExternalIdRemoved = removed;
    }

    private Boolean isPropertySalesChannelEnumIdRemoved;

    public Boolean getIsPropertySalesChannelEnumIdRemoved()
    {
        return this.isPropertySalesChannelEnumIdRemoved;
    }

    public void setIsPropertySalesChannelEnumIdRemoved(Boolean removed)
    {
        this.isPropertySalesChannelEnumIdRemoved = removed;
    }

    private Boolean isPropertyOrderDateRemoved;

    public Boolean getIsPropertyOrderDateRemoved()
    {
        return this.isPropertyOrderDateRemoved;
    }

    public void setIsPropertyOrderDateRemoved(Boolean removed)
    {
        this.isPropertyOrderDateRemoved = removed;
    }

    private Boolean isPropertyPriorityRemoved;

    public Boolean getIsPropertyPriorityRemoved()
    {
        return this.isPropertyPriorityRemoved;
    }

    public void setIsPropertyPriorityRemoved(Boolean removed)
    {
        this.isPropertyPriorityRemoved = removed;
    }

    private Boolean isPropertyEntryDateRemoved;

    public Boolean getIsPropertyEntryDateRemoved()
    {
        return this.isPropertyEntryDateRemoved;
    }

    public void setIsPropertyEntryDateRemoved(Boolean removed)
    {
        this.isPropertyEntryDateRemoved = removed;
    }

    private Boolean isPropertyPickSheetPrintedDateRemoved;

    public Boolean getIsPropertyPickSheetPrintedDateRemoved()
    {
        return this.isPropertyPickSheetPrintedDateRemoved;
    }

    public void setIsPropertyPickSheetPrintedDateRemoved(Boolean removed)
    {
        this.isPropertyPickSheetPrintedDateRemoved = removed;
    }

    private Boolean isPropertyVisitIdRemoved;

    public Boolean getIsPropertyVisitIdRemoved()
    {
        return this.isPropertyVisitIdRemoved;
    }

    public void setIsPropertyVisitIdRemoved(Boolean removed)
    {
        this.isPropertyVisitIdRemoved = removed;
    }

    private Boolean isPropertyStatusIdRemoved;

    public Boolean getIsPropertyStatusIdRemoved()
    {
        return this.isPropertyStatusIdRemoved;
    }

    public void setIsPropertyStatusIdRemoved(Boolean removed)
    {
        this.isPropertyStatusIdRemoved = removed;
    }

    private Boolean isPropertyFirstAttemptOrderIdRemoved;

    public Boolean getIsPropertyFirstAttemptOrderIdRemoved()
    {
        return this.isPropertyFirstAttemptOrderIdRemoved;
    }

    public void setIsPropertyFirstAttemptOrderIdRemoved(Boolean removed)
    {
        this.isPropertyFirstAttemptOrderIdRemoved = removed;
    }

    private Boolean isPropertyCurrencyUomIdRemoved;

    public Boolean getIsPropertyCurrencyUomIdRemoved()
    {
        return this.isPropertyCurrencyUomIdRemoved;
    }

    public void setIsPropertyCurrencyUomIdRemoved(Boolean removed)
    {
        this.isPropertyCurrencyUomIdRemoved = removed;
    }

    private Boolean isPropertySyncStatusIdRemoved;

    public Boolean getIsPropertySyncStatusIdRemoved()
    {
        return this.isPropertySyncStatusIdRemoved;
    }

    public void setIsPropertySyncStatusIdRemoved(Boolean removed)
    {
        this.isPropertySyncStatusIdRemoved = removed;
    }

    private Boolean isPropertyBillingAccountIdRemoved;

    public Boolean getIsPropertyBillingAccountIdRemoved()
    {
        return this.isPropertyBillingAccountIdRemoved;
    }

    public void setIsPropertyBillingAccountIdRemoved(Boolean removed)
    {
        this.isPropertyBillingAccountIdRemoved = removed;
    }

    private Boolean isPropertyOriginFacilityIdRemoved;

    public Boolean getIsPropertyOriginFacilityIdRemoved()
    {
        return this.isPropertyOriginFacilityIdRemoved;
    }

    public void setIsPropertyOriginFacilityIdRemoved(Boolean removed)
    {
        this.isPropertyOriginFacilityIdRemoved = removed;
    }

    private Boolean isPropertyProductStoreIdRemoved;

    public Boolean getIsPropertyProductStoreIdRemoved()
    {
        return this.isPropertyProductStoreIdRemoved;
    }

    public void setIsPropertyProductStoreIdRemoved(Boolean removed)
    {
        this.isPropertyProductStoreIdRemoved = removed;
    }

    private Boolean isPropertyTerminalIdRemoved;

    public Boolean getIsPropertyTerminalIdRemoved()
    {
        return this.isPropertyTerminalIdRemoved;
    }

    public void setIsPropertyTerminalIdRemoved(Boolean removed)
    {
        this.isPropertyTerminalIdRemoved = removed;
    }

    private Boolean isPropertyTransactionIdRemoved;

    public Boolean getIsPropertyTransactionIdRemoved()
    {
        return this.isPropertyTransactionIdRemoved;
    }

    public void setIsPropertyTransactionIdRemoved(Boolean removed)
    {
        this.isPropertyTransactionIdRemoved = removed;
    }

    private Boolean isPropertyAutoOrderShoppingListIdRemoved;

    public Boolean getIsPropertyAutoOrderShoppingListIdRemoved()
    {
        return this.isPropertyAutoOrderShoppingListIdRemoved;
    }

    public void setIsPropertyAutoOrderShoppingListIdRemoved(Boolean removed)
    {
        this.isPropertyAutoOrderShoppingListIdRemoved = removed;
    }

    private Boolean isPropertyNeedsInventoryIssuanceRemoved;

    public Boolean getIsPropertyNeedsInventoryIssuanceRemoved()
    {
        return this.isPropertyNeedsInventoryIssuanceRemoved;
    }

    public void setIsPropertyNeedsInventoryIssuanceRemoved(Boolean removed)
    {
        this.isPropertyNeedsInventoryIssuanceRemoved = removed;
    }

    private Boolean isPropertyIsRushOrderRemoved;

    public Boolean getIsPropertyIsRushOrderRemoved()
    {
        return this.isPropertyIsRushOrderRemoved;
    }

    public void setIsPropertyIsRushOrderRemoved(Boolean removed)
    {
        this.isPropertyIsRushOrderRemoved = removed;
    }

    private Boolean isPropertyInternalCodeRemoved;

    public Boolean getIsPropertyInternalCodeRemoved()
    {
        return this.isPropertyInternalCodeRemoved;
    }

    public void setIsPropertyInternalCodeRemoved(Boolean removed)
    {
        this.isPropertyInternalCodeRemoved = removed;
    }

    private Boolean isPropertyRemainingSubTotalRemoved;

    public Boolean getIsPropertyRemainingSubTotalRemoved()
    {
        return this.isPropertyRemainingSubTotalRemoved;
    }

    public void setIsPropertyRemainingSubTotalRemoved(Boolean removed)
    {
        this.isPropertyRemainingSubTotalRemoved = removed;
    }

    private Boolean isPropertyGrandTotalRemoved;

    public Boolean getIsPropertyGrandTotalRemoved()
    {
        return this.isPropertyGrandTotalRemoved;
    }

    public void setIsPropertyGrandTotalRemoved(Boolean removed)
    {
        this.isPropertyGrandTotalRemoved = removed;
    }

    private Boolean isPropertyIsViewedRemoved;

    public Boolean getIsPropertyIsViewedRemoved()
    {
        return this.isPropertyIsViewedRemoved;
    }

    public void setIsPropertyIsViewedRemoved(Boolean removed)
    {
        this.isPropertyIsViewedRemoved = removed;
    }

    private Boolean isPropertyInvoicePerShipmentRemoved;

    public Boolean getIsPropertyInvoicePerShipmentRemoved()
    {
        return this.isPropertyInvoicePerShipmentRemoved;
    }

    public void setIsPropertyInvoicePerShipmentRemoved(Boolean removed)
    {
        this.isPropertyInvoicePerShipmentRemoved = removed;
    }

    private Boolean isPropertyMemoRemoved;

    public Boolean getIsPropertyMemoRemoved()
    {
        return this.isPropertyMemoRemoved;
    }

    public void setIsPropertyMemoRemoved(Boolean removed)
    {
        this.isPropertyMemoRemoved = removed;
    }

    private Boolean isPropertyFulfillmentStatusIdRemoved;

    public Boolean getIsPropertyFulfillmentStatusIdRemoved()
    {
        return this.isPropertyFulfillmentStatusIdRemoved;
    }

    public void setIsPropertyFulfillmentStatusIdRemoved(Boolean removed)
    {
        this.isPropertyFulfillmentStatusIdRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchOrder command)
    {
        ((AbstractOrderCommandDto) this).copyTo(command);
        command.setOrderTypeId(this.getOrderTypeId());
        command.setOrderName(this.getOrderName());
        command.setExternalId(this.getExternalId());
        command.setSalesChannelEnumId(this.getSalesChannelEnumId());
        command.setOrderDate(this.getOrderDate());
        command.setPriority(this.getPriority());
        command.setEntryDate(this.getEntryDate());
        command.setPickSheetPrintedDate(this.getPickSheetPrintedDate());
        command.setVisitId(this.getVisitId());
        command.setStatusId(this.getStatusId());
        command.setFirstAttemptOrderId(this.getFirstAttemptOrderId());
        command.setCurrencyUomId(this.getCurrencyUomId());
        command.setSyncStatusId(this.getSyncStatusId());
        command.setBillingAccountId(this.getBillingAccountId());
        command.setOriginFacilityId(this.getOriginFacilityId());
        command.setProductStoreId(this.getProductStoreId());
        command.setTerminalId(this.getTerminalId());
        command.setTransactionId(this.getTransactionId());
        command.setAutoOrderShoppingListId(this.getAutoOrderShoppingListId());
        command.setNeedsInventoryIssuance(this.getNeedsInventoryIssuance());
        command.setIsRushOrder(this.getIsRushOrder());
        command.setInternalCode(this.getInternalCode());
        command.setRemainingSubTotal(this.getRemainingSubTotal());
        command.setGrandTotal(this.getGrandTotal());
        command.setIsViewed(this.getIsViewed());
        command.setInvoicePerShipment(this.getInvoicePerShipment());
        command.setMemo(this.getMemo());
        command.setFulfillmentStatusId(this.getFulfillmentStatusId());
    }

    public OrderCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractOrderCommand.SimpleCreateOrder command = new AbstractOrderCommand.SimpleCreateOrder();
            copyTo((AbstractOrderCommand.AbstractCreateOrder) command);
            if (this.getOrderRoles() != null) {
                for (CreateOrMergePatchOrderRoleDto cmd : this.getOrderRoles()) {
                    command.getOrderRoles().add((OrderRoleCommand.CreateOrderRole) cmd.toCommand());
                }
            }
            if (this.getOrderContactMechanisms() != null) {
                for (CreateOrMergePatchOrderContactMechDto cmd : this.getOrderContactMechanisms()) {
                    command.getOrderContactMechanisms().add((OrderContactMechCommand.CreateOrderContactMech) cmd.toCommand());
                }
            }
            if (this.getOrderItems() != null) {
                for (CreateOrMergePatchOrderItemDto cmd : this.getOrderItems()) {
                    command.getOrderItems().add((OrderItemCommand.CreateOrderItem) cmd.toCommand());
                }
            }
            if (this.getOrderAdjustments() != null) {
                for (CreateOrMergePatchOrderAdjustmentDto cmd : this.getOrderAdjustments()) {
                    command.getOrderAdjustments().add((OrderAdjustmentCommand.CreateOrderAdjustment) cmd.toCommand());
                }
            }
            if (this.getOrderShipGroups() != null) {
                for (CreateOrMergePatchOrderShipGroupDto cmd : this.getOrderShipGroups()) {
                    command.getOrderShipGroups().add((OrderShipGroupCommand.CreateOrderShipGroup) cmd.toCommand());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractOrderCommand.SimpleMergePatchOrder command = new AbstractOrderCommand.SimpleMergePatchOrder();
            copyTo((AbstractOrderCommand.SimpleMergePatchOrder) command);
            if (this.getOrderRoles() != null) {
                for (CreateOrMergePatchOrderRoleDto cmd : this.getOrderRoles()) {
                    command.getOrderRoleCommands().add(cmd.toCommand());
                }
            }
            if (this.getOrderContactMechanisms() != null) {
                for (CreateOrMergePatchOrderContactMechDto cmd : this.getOrderContactMechanisms()) {
                    command.getOrderContactMechCommands().add(cmd.toCommand());
                }
            }
            if (this.getOrderItems() != null) {
                for (CreateOrMergePatchOrderItemDto cmd : this.getOrderItems()) {
                    command.getOrderItemCommands().add(cmd.toCommand());
                }
            }
            if (this.getOrderAdjustments() != null) {
                for (CreateOrMergePatchOrderAdjustmentDto cmd : this.getOrderAdjustments()) {
                    command.getOrderAdjustmentCommands().add(cmd.toCommand());
                }
            }
            if (this.getOrderShipGroups() != null) {
                for (CreateOrMergePatchOrderShipGroupDto cmd : this.getOrderShipGroups()) {
                    command.getOrderShipGroupCommands().add(cmd.toCommand());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public OrderCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateOrderDto command = new CreateOrderDto();
            copyTo((CreateOrder) command);
            if (this.getOrderRoles() != null) {
                for (CreateOrMergePatchOrderRoleDto cmd : this.getOrderRoles()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreateOrderRoleCommands().add((OrderRoleCommand.CreateOrderRole) cmd.toSubclass());
                }
            }
            if (this.getOrderContactMechanisms() != null) {
                for (CreateOrMergePatchOrderContactMechDto cmd : this.getOrderContactMechanisms()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreateOrderContactMechCommands().add((OrderContactMechCommand.CreateOrderContactMech) cmd.toSubclass());
                }
            }
            if (this.getOrderItems() != null) {
                for (CreateOrMergePatchOrderItemDto cmd : this.getOrderItems()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreateOrderItemCommands().add((OrderItemCommand.CreateOrderItem) cmd.toSubclass());
                }
            }
            if (this.getOrderAdjustments() != null) {
                for (CreateOrMergePatchOrderAdjustmentDto cmd : this.getOrderAdjustments()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreateOrderAdjustmentCommands().add((OrderAdjustmentCommand.CreateOrderAdjustment) cmd.toSubclass());
                }
            }
            if (this.getOrderShipGroups() != null) {
                for (CreateOrMergePatchOrderShipGroupDto cmd : this.getOrderShipGroups()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreateOrderShipGroupCommands().add((OrderShipGroupCommand.CreateOrderShipGroup) cmd.toSubclass());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchOrderDto command = new MergePatchOrderDto();
            copyTo((MergePatchOrder) command);
            if (this.getOrderRoles() != null) {
                for (CreateOrMergePatchOrderRoleDto cmd : this.getOrderRoles()) {
                    command.getOrderRoleCommands().add(cmd.toSubclass());
                }
            }
            if (this.getOrderContactMechanisms() != null) {
                for (CreateOrMergePatchOrderContactMechDto cmd : this.getOrderContactMechanisms()) {
                    command.getOrderContactMechCommands().add(cmd.toSubclass());
                }
            }
            if (this.getOrderItems() != null) {
                for (CreateOrMergePatchOrderItemDto cmd : this.getOrderItems()) {
                    command.getOrderItemCommands().add(cmd.toSubclass());
                }
            }
            if (this.getOrderAdjustments() != null) {
                for (CreateOrMergePatchOrderAdjustmentDto cmd : this.getOrderAdjustments()) {
                    command.getOrderAdjustmentCommands().add(cmd.toSubclass());
                }
            }
            if (this.getOrderShipGroups() != null) {
                for (CreateOrMergePatchOrderShipGroupDto cmd : this.getOrderShipGroups()) {
                    command.getOrderShipGroupCommands().add(cmd.toSubclass());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateOrder command)
    {
        copyTo((CreateOrMergePatchOrder) command);
    }

    public void copyTo(MergePatchOrder command)
    {
        copyTo((CreateOrMergePatchOrder) command);
        command.setIsPropertyOrderTypeIdRemoved(this.getIsPropertyOrderTypeIdRemoved());
        command.setIsPropertyOrderNameRemoved(this.getIsPropertyOrderNameRemoved());
        command.setIsPropertyExternalIdRemoved(this.getIsPropertyExternalIdRemoved());
        command.setIsPropertySalesChannelEnumIdRemoved(this.getIsPropertySalesChannelEnumIdRemoved());
        command.setIsPropertyOrderDateRemoved(this.getIsPropertyOrderDateRemoved());
        command.setIsPropertyPriorityRemoved(this.getIsPropertyPriorityRemoved());
        command.setIsPropertyEntryDateRemoved(this.getIsPropertyEntryDateRemoved());
        command.setIsPropertyPickSheetPrintedDateRemoved(this.getIsPropertyPickSheetPrintedDateRemoved());
        command.setIsPropertyVisitIdRemoved(this.getIsPropertyVisitIdRemoved());
        command.setIsPropertyStatusIdRemoved(this.getIsPropertyStatusIdRemoved());
        command.setIsPropertyFirstAttemptOrderIdRemoved(this.getIsPropertyFirstAttemptOrderIdRemoved());
        command.setIsPropertyCurrencyUomIdRemoved(this.getIsPropertyCurrencyUomIdRemoved());
        command.setIsPropertySyncStatusIdRemoved(this.getIsPropertySyncStatusIdRemoved());
        command.setIsPropertyBillingAccountIdRemoved(this.getIsPropertyBillingAccountIdRemoved());
        command.setIsPropertyOriginFacilityIdRemoved(this.getIsPropertyOriginFacilityIdRemoved());
        command.setIsPropertyProductStoreIdRemoved(this.getIsPropertyProductStoreIdRemoved());
        command.setIsPropertyTerminalIdRemoved(this.getIsPropertyTerminalIdRemoved());
        command.setIsPropertyTransactionIdRemoved(this.getIsPropertyTransactionIdRemoved());
        command.setIsPropertyAutoOrderShoppingListIdRemoved(this.getIsPropertyAutoOrderShoppingListIdRemoved());
        command.setIsPropertyNeedsInventoryIssuanceRemoved(this.getIsPropertyNeedsInventoryIssuanceRemoved());
        command.setIsPropertyIsRushOrderRemoved(this.getIsPropertyIsRushOrderRemoved());
        command.setIsPropertyInternalCodeRemoved(this.getIsPropertyInternalCodeRemoved());
        command.setIsPropertyRemainingSubTotalRemoved(this.getIsPropertyRemainingSubTotalRemoved());
        command.setIsPropertyGrandTotalRemoved(this.getIsPropertyGrandTotalRemoved());
        command.setIsPropertyIsViewedRemoved(this.getIsPropertyIsViewedRemoved());
        command.setIsPropertyInvoicePerShipmentRemoved(this.getIsPropertyInvoicePerShipmentRemoved());
        command.setIsPropertyMemoRemoved(this.getIsPropertyMemoRemoved());
        command.setIsPropertyFulfillmentStatusIdRemoved(this.getIsPropertyFulfillmentStatusIdRemoved());
    }

    public static class CreateOrderDto extends CreateOrMergePatchOrderDto implements OrderCommand.CreateOrder
    {
        public CreateOrderDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public OrderCommand.CreateOrder toCreateOrder()
        {
            return (OrderCommand.CreateOrder) toCommand();
        }


        @Override
        public CreateOrderRoleCommandCollection getCreateOrderRoleCommands() {
            return new CreateOrderRoleCommandCollection() {
                @Override
                public void add(OrderRoleCommand.CreateOrderRole c) {
                    java.util.List<CreateOrMergePatchOrderRoleDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderRoles()));
                    list.add((CreateOrMergePatchOrderRoleDto) c);
                    setOrderRoles(list.toArray(new CreateOrMergePatchOrderRoleDto[0]));
                }

                @Override
                public void remove(OrderRoleCommand.CreateOrderRole c) {
                    java.util.List<CreateOrMergePatchOrderRoleDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderRoles()));
                    list.remove((CreateOrMergePatchOrderRoleDto) c);
                    setOrderRoles(list.toArray(new CreateOrMergePatchOrderRoleDto[0]));
                }

                @Override
                public void clear() {
                    setOrderRoles(new CreateOrMergePatchOrderRoleDto[]{});
                }

                @Override
                public java.util.Iterator<OrderRoleCommand.CreateOrderRole> iterator() {
                    return java.util.Arrays.stream(getOrderRoles())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (OrderRoleCommand.CreateOrderRole) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public OrderRoleCommand.CreateOrderRole newCreateOrderRole() {
            return new CreateOrMergePatchOrderRoleDto.CreateOrderRoleDto();
        }


        @Override
        public CreateOrderContactMechCommandCollection getCreateOrderContactMechCommands() {
            return new CreateOrderContactMechCommandCollection() {
                @Override
                public void add(OrderContactMechCommand.CreateOrderContactMech c) {
                    java.util.List<CreateOrMergePatchOrderContactMechDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderContactMechanisms()));
                    list.add((CreateOrMergePatchOrderContactMechDto) c);
                    setOrderContactMechanisms(list.toArray(new CreateOrMergePatchOrderContactMechDto[0]));
                }

                @Override
                public void remove(OrderContactMechCommand.CreateOrderContactMech c) {
                    java.util.List<CreateOrMergePatchOrderContactMechDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderContactMechanisms()));
                    list.remove((CreateOrMergePatchOrderContactMechDto) c);
                    setOrderContactMechanisms(list.toArray(new CreateOrMergePatchOrderContactMechDto[0]));
                }

                @Override
                public void clear() {
                    setOrderContactMechanisms(new CreateOrMergePatchOrderContactMechDto[]{});
                }

                @Override
                public java.util.Iterator<OrderContactMechCommand.CreateOrderContactMech> iterator() {
                    return java.util.Arrays.stream(getOrderContactMechanisms())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (OrderContactMechCommand.CreateOrderContactMech) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public OrderContactMechCommand.CreateOrderContactMech newCreateOrderContactMech() {
            return new CreateOrMergePatchOrderContactMechDto.CreateOrderContactMechDto();
        }


        @Override
        public CreateOrderItemCommandCollection getCreateOrderItemCommands() {
            return new CreateOrderItemCommandCollection() {
                @Override
                public void add(OrderItemCommand.CreateOrderItem c) {
                    java.util.List<CreateOrMergePatchOrderItemDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderItems()));
                    list.add((CreateOrMergePatchOrderItemDto) c);
                    setOrderItems(list.toArray(new CreateOrMergePatchOrderItemDto[0]));
                }

                @Override
                public void remove(OrderItemCommand.CreateOrderItem c) {
                    java.util.List<CreateOrMergePatchOrderItemDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderItems()));
                    list.remove((CreateOrMergePatchOrderItemDto) c);
                    setOrderItems(list.toArray(new CreateOrMergePatchOrderItemDto[0]));
                }

                @Override
                public void clear() {
                    setOrderItems(new CreateOrMergePatchOrderItemDto[]{});
                }

                @Override
                public java.util.Iterator<OrderItemCommand.CreateOrderItem> iterator() {
                    return java.util.Arrays.stream(getOrderItems())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (OrderItemCommand.CreateOrderItem) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public OrderItemCommand.CreateOrderItem newCreateOrderItem() {
            return new CreateOrMergePatchOrderItemDto.CreateOrderItemDto();
        }


        @Override
        public CreateOrderAdjustmentCommandCollection getCreateOrderAdjustmentCommands() {
            return new CreateOrderAdjustmentCommandCollection() {
                @Override
                public void add(OrderAdjustmentCommand.CreateOrderAdjustment c) {
                    java.util.List<CreateOrMergePatchOrderAdjustmentDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderAdjustments()));
                    list.add((CreateOrMergePatchOrderAdjustmentDto) c);
                    setOrderAdjustments(list.toArray(new CreateOrMergePatchOrderAdjustmentDto[0]));
                }

                @Override
                public void remove(OrderAdjustmentCommand.CreateOrderAdjustment c) {
                    java.util.List<CreateOrMergePatchOrderAdjustmentDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderAdjustments()));
                    list.remove((CreateOrMergePatchOrderAdjustmentDto) c);
                    setOrderAdjustments(list.toArray(new CreateOrMergePatchOrderAdjustmentDto[0]));
                }

                @Override
                public void clear() {
                    setOrderAdjustments(new CreateOrMergePatchOrderAdjustmentDto[]{});
                }

                @Override
                public java.util.Iterator<OrderAdjustmentCommand.CreateOrderAdjustment> iterator() {
                    return java.util.Arrays.stream(getOrderAdjustments())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (OrderAdjustmentCommand.CreateOrderAdjustment) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public OrderAdjustmentCommand.CreateOrderAdjustment newCreateOrderAdjustment() {
            return new CreateOrMergePatchOrderAdjustmentDto.CreateOrderAdjustmentDto();
        }


        @Override
        public CreateOrderShipGroupCommandCollection getCreateOrderShipGroupCommands() {
            return new CreateOrderShipGroupCommandCollection() {
                @Override
                public void add(OrderShipGroupCommand.CreateOrderShipGroup c) {
                    java.util.List<CreateOrMergePatchOrderShipGroupDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderShipGroups()));
                    list.add((CreateOrMergePatchOrderShipGroupDto) c);
                    setOrderShipGroups(list.toArray(new CreateOrMergePatchOrderShipGroupDto[0]));
                }

                @Override
                public void remove(OrderShipGroupCommand.CreateOrderShipGroup c) {
                    java.util.List<CreateOrMergePatchOrderShipGroupDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderShipGroups()));
                    list.remove((CreateOrMergePatchOrderShipGroupDto) c);
                    setOrderShipGroups(list.toArray(new CreateOrMergePatchOrderShipGroupDto[0]));
                }

                @Override
                public void clear() {
                    setOrderShipGroups(new CreateOrMergePatchOrderShipGroupDto[]{});
                }

                @Override
                public java.util.Iterator<OrderShipGroupCommand.CreateOrderShipGroup> iterator() {
                    return java.util.Arrays.stream(getOrderShipGroups())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (OrderShipGroupCommand.CreateOrderShipGroup) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public OrderShipGroupCommand.CreateOrderShipGroup newCreateOrderShipGroup() {
            return new CreateOrMergePatchOrderShipGroupDto.CreateOrderShipGroupDto();
        }

    }

    public static class MergePatchOrderDto extends CreateOrMergePatchOrderDto implements OrderCommand.MergePatchOrder
    {
        public MergePatchOrderDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public OrderCommand.MergePatchOrder toMergePatchOrder()
        {
            return (OrderCommand.MergePatchOrder) toCommand();
        }


        @Override
        public OrderRoleCommandCollection getOrderRoleCommands() {
            return new OrderRoleCommandCollection() {
                @Override
                public void add(OrderRoleCommand c) {
                    java.util.List<CreateOrMergePatchOrderRoleDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderRoles()));
                    list.add((CreateOrMergePatchOrderRoleDto) c);
                    setOrderRoles(list.toArray(new CreateOrMergePatchOrderRoleDto[0]));
                }

                @Override
                public void remove(OrderRoleCommand c) {
                    java.util.List<CreateOrMergePatchOrderRoleDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderRoles()));
                    list.remove((CreateOrMergePatchOrderRoleDto) c);
                    setOrderRoles(list.toArray(new CreateOrMergePatchOrderRoleDto[0]));
                }

                @Override
                public void clear() {
                    setOrderRoles(new CreateOrMergePatchOrderRoleDto[]{});
                }

                @Override
                public java.util.Iterator<OrderRoleCommand> iterator() {
                    return java.util.Arrays.stream(getOrderRoles())
                            .map(e -> (OrderRoleCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public OrderRoleCommand.CreateOrderRole newCreateOrderRole() {
            return new CreateOrMergePatchOrderRoleDto.CreateOrderRoleDto();
        }

        @Override
        public OrderRoleCommand.MergePatchOrderRole newMergePatchOrderRole() {
            return new CreateOrMergePatchOrderRoleDto.MergePatchOrderRoleDto();
        }

        @Override
        public OrderRoleCommand.RemoveOrderRole newRemoveOrderRole() {
            return new RemoveOrderRoleDto();
        }


        @Override
        public OrderContactMechCommandCollection getOrderContactMechCommands() {
            return new OrderContactMechCommandCollection() {
                @Override
                public void add(OrderContactMechCommand c) {
                    java.util.List<CreateOrMergePatchOrderContactMechDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderContactMechanisms()));
                    list.add((CreateOrMergePatchOrderContactMechDto) c);
                    setOrderContactMechanisms(list.toArray(new CreateOrMergePatchOrderContactMechDto[0]));
                }

                @Override
                public void remove(OrderContactMechCommand c) {
                    java.util.List<CreateOrMergePatchOrderContactMechDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderContactMechanisms()));
                    list.remove((CreateOrMergePatchOrderContactMechDto) c);
                    setOrderContactMechanisms(list.toArray(new CreateOrMergePatchOrderContactMechDto[0]));
                }

                @Override
                public void clear() {
                    setOrderContactMechanisms(new CreateOrMergePatchOrderContactMechDto[]{});
                }

                @Override
                public java.util.Iterator<OrderContactMechCommand> iterator() {
                    return java.util.Arrays.stream(getOrderContactMechanisms())
                            .map(e -> (OrderContactMechCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public OrderContactMechCommand.CreateOrderContactMech newCreateOrderContactMech() {
            return new CreateOrMergePatchOrderContactMechDto.CreateOrderContactMechDto();
        }

        @Override
        public OrderContactMechCommand.MergePatchOrderContactMech newMergePatchOrderContactMech() {
            return new CreateOrMergePatchOrderContactMechDto.MergePatchOrderContactMechDto();
        }

        @Override
        public OrderContactMechCommand.RemoveOrderContactMech newRemoveOrderContactMech() {
            return new RemoveOrderContactMechDto();
        }


        @Override
        public OrderItemCommandCollection getOrderItemCommands() {
            return new OrderItemCommandCollection() {
                @Override
                public void add(OrderItemCommand c) {
                    java.util.List<CreateOrMergePatchOrderItemDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderItems()));
                    list.add((CreateOrMergePatchOrderItemDto) c);
                    setOrderItems(list.toArray(new CreateOrMergePatchOrderItemDto[0]));
                }

                @Override
                public void remove(OrderItemCommand c) {
                    java.util.List<CreateOrMergePatchOrderItemDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderItems()));
                    list.remove((CreateOrMergePatchOrderItemDto) c);
                    setOrderItems(list.toArray(new CreateOrMergePatchOrderItemDto[0]));
                }

                @Override
                public void clear() {
                    setOrderItems(new CreateOrMergePatchOrderItemDto[]{});
                }

                @Override
                public java.util.Iterator<OrderItemCommand> iterator() {
                    return java.util.Arrays.stream(getOrderItems())
                            .map(e -> (OrderItemCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public OrderItemCommand.CreateOrderItem newCreateOrderItem() {
            return new CreateOrMergePatchOrderItemDto.CreateOrderItemDto();
        }

        @Override
        public OrderItemCommand.MergePatchOrderItem newMergePatchOrderItem() {
            return new CreateOrMergePatchOrderItemDto.MergePatchOrderItemDto();
        }

        @Override
        public OrderItemCommand.RemoveOrderItem newRemoveOrderItem() {
            return new RemoveOrderItemDto();
        }


        @Override
        public OrderAdjustmentCommandCollection getOrderAdjustmentCommands() {
            return new OrderAdjustmentCommandCollection() {
                @Override
                public void add(OrderAdjustmentCommand c) {
                    java.util.List<CreateOrMergePatchOrderAdjustmentDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderAdjustments()));
                    list.add((CreateOrMergePatchOrderAdjustmentDto) c);
                    setOrderAdjustments(list.toArray(new CreateOrMergePatchOrderAdjustmentDto[0]));
                }

                @Override
                public void remove(OrderAdjustmentCommand c) {
                    java.util.List<CreateOrMergePatchOrderAdjustmentDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderAdjustments()));
                    list.remove((CreateOrMergePatchOrderAdjustmentDto) c);
                    setOrderAdjustments(list.toArray(new CreateOrMergePatchOrderAdjustmentDto[0]));
                }

                @Override
                public void clear() {
                    setOrderAdjustments(new CreateOrMergePatchOrderAdjustmentDto[]{});
                }

                @Override
                public java.util.Iterator<OrderAdjustmentCommand> iterator() {
                    return java.util.Arrays.stream(getOrderAdjustments())
                            .map(e -> (OrderAdjustmentCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public OrderAdjustmentCommand.CreateOrderAdjustment newCreateOrderAdjustment() {
            return new CreateOrMergePatchOrderAdjustmentDto.CreateOrderAdjustmentDto();
        }

        @Override
        public OrderAdjustmentCommand.MergePatchOrderAdjustment newMergePatchOrderAdjustment() {
            return new CreateOrMergePatchOrderAdjustmentDto.MergePatchOrderAdjustmentDto();
        }

        @Override
        public OrderAdjustmentCommand.RemoveOrderAdjustment newRemoveOrderAdjustment() {
            return new RemoveOrderAdjustmentDto();
        }


        @Override
        public OrderShipGroupCommandCollection getOrderShipGroupCommands() {
            return new OrderShipGroupCommandCollection() {
                @Override
                public void add(OrderShipGroupCommand c) {
                    java.util.List<CreateOrMergePatchOrderShipGroupDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderShipGroups()));
                    list.add((CreateOrMergePatchOrderShipGroupDto) c);
                    setOrderShipGroups(list.toArray(new CreateOrMergePatchOrderShipGroupDto[0]));
                }

                @Override
                public void remove(OrderShipGroupCommand c) {
                    java.util.List<CreateOrMergePatchOrderShipGroupDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getOrderShipGroups()));
                    list.remove((CreateOrMergePatchOrderShipGroupDto) c);
                    setOrderShipGroups(list.toArray(new CreateOrMergePatchOrderShipGroupDto[0]));
                }

                @Override
                public void clear() {
                    setOrderShipGroups(new CreateOrMergePatchOrderShipGroupDto[]{});
                }

                @Override
                public java.util.Iterator<OrderShipGroupCommand> iterator() {
                    return java.util.Arrays.stream(getOrderShipGroups())
                            .map(e -> (OrderShipGroupCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public OrderShipGroupCommand.CreateOrderShipGroup newCreateOrderShipGroup() {
            return new CreateOrMergePatchOrderShipGroupDto.CreateOrderShipGroupDto();
        }

        @Override
        public OrderShipGroupCommand.MergePatchOrderShipGroup newMergePatchOrderShipGroup() {
            return new CreateOrMergePatchOrderShipGroupDto.MergePatchOrderShipGroupDto();
        }

        @Override
        public OrderShipGroupCommand.RemoveOrderShipGroup newRemoveOrderShipGroup() {
            return new RemoveOrderShipGroupDto();
        }

    }

}

