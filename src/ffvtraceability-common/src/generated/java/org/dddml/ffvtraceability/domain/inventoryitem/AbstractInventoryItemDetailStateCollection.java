// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.inventoryitem;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.ApplicationContext;
import org.dddml.ffvtraceability.specialization.Saveable;

public abstract class AbstractInventoryItemDetailStateCollection implements EntityStateCollection.RemovalLoggedEntityStateCollection<String, InventoryItemDetailState>, Collection<InventoryItemDetailState>, Saveable {
    protected InventoryItemDetailStateDao getInventoryItemDetailStateDao()
    {
        return (InventoryItemDetailStateDao)ApplicationContext.current.get("inventoryItemDetailStateDao");
    }

    private InventoryItemState inventoryItemState;

    private Map<InventoryItemDetailId, InventoryItemDetailState> loadedInventoryItemDetailStates = new HashMap<InventoryItemDetailId, InventoryItemDetailState>();

    private Map<InventoryItemDetailId, InventoryItemDetailState> removedInventoryItemDetailStates = new HashMap<InventoryItemDetailId, InventoryItemDetailState>();

    protected Iterable<InventoryItemDetailState> getLoadedInventoryItemDetailStates() {
        return this.loadedInventoryItemDetailStates.values();
    }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    private Boolean stateCollectionReadOnly;

    public Boolean getStateCollectionReadOnly() {
        if (this.inventoryItemState instanceof AbstractInventoryItemState) {
            if (((AbstractInventoryItemState)this.inventoryItemState).getStateReadOnly() != null && ((AbstractInventoryItemState)this.inventoryItemState).getStateReadOnly()) 
            { return true; }
        }
        if (this.stateCollectionReadOnly == null) {
            return false;
        }
        return this.stateCollectionReadOnly;
    }

    public void setStateCollectionReadOnly(Boolean readOnly) {
        this.stateCollectionReadOnly = readOnly;
    }

    private boolean allLoaded;

    public boolean isAllLoaded() {
        return this.allLoaded;
    }

    protected Iterable<InventoryItemDetailState> getInnerIterable() {
        if (!getForReapplying()) {
            //if (!getStateCollectionReadOnly()) {
            //    throw new UnsupportedOperationException("State collection is NOT ReadOnly.");
            //}
            assureAllLoaded();
            return this.loadedInventoryItemDetailStates.values();
        } else {
            List<InventoryItemDetailState> ss = new ArrayList<InventoryItemDetailState>();
            for (InventoryItemDetailState s : loadedInventoryItemDetailStates.values()) {
                ss.add(s);
            }
            return ss;
        }
    }

    public boolean isLazy() {
        return true;
    }

    protected void assureAllLoaded() {
        if (!allLoaded) {
            Iterable<InventoryItemDetailState> ss = getInventoryItemDetailStateDao().findByInventoryItemId(inventoryItemState.getInventoryItemId(), inventoryItemState);
            for (InventoryItemDetailState s : ss) {
                if (!this.loadedInventoryItemDetailStates.containsKey(((InventoryItemDetailState.SqlInventoryItemDetailState)s).getInventoryItemDetailId()) 
                    && !this.removedInventoryItemDetailStates.containsKey(((InventoryItemDetailState.SqlInventoryItemDetailState)s).getInventoryItemDetailId())) {
                    this.loadedInventoryItemDetailStates.put(((InventoryItemDetailState.SqlInventoryItemDetailState)s).getInventoryItemDetailId(), s);
                }
            }
            allLoaded = true;
        }
    }

    public AbstractInventoryItemDetailStateCollection(InventoryItemState outerState) {
        this.inventoryItemState = outerState;
        this.setForReapplying(((InventoryItemState.SqlInventoryItemState)outerState).getForReapplying());
    }

    @Override
    public Iterator<InventoryItemDetailState> iterator() {
        return getInnerIterable().iterator();
    }

    @Override
    public java.util.stream.Stream<InventoryItemDetailState> stream() {
        return this.loadedInventoryItemDetailStates.values().stream();
    }

    public InventoryItemDetailState get(String inventoryItemDetailSeqId) {
        return get(inventoryItemDetailSeqId, true, false);
    }

    public InventoryItemDetailState getOrAddDefault(String inventoryItemDetailSeqId) {
        return get(inventoryItemDetailSeqId, false, false);
    }

    protected InventoryItemDetailState get(String inventoryItemDetailSeqId, boolean nullAllowed, boolean forCreation) {
        InventoryItemDetailId globalId = new InventoryItemDetailId(inventoryItemState.getInventoryItemId(), inventoryItemDetailSeqId);
        if (loadedInventoryItemDetailStates.containsKey(globalId)) {
            InventoryItemDetailState state = loadedInventoryItemDetailStates.get(globalId);
            if (state instanceof AbstractInventoryItemDetailState) {
                ((AbstractInventoryItemDetailState)state).setStateReadOnly(getStateCollectionReadOnly());
            }
            return state;
        }
        boolean justNewIfNotLoaded = forCreation || getForReapplying();
        if (justNewIfNotLoaded) {
            if (getStateCollectionReadOnly()) {
                throw new UnsupportedOperationException("State collection is ReadOnly.");
            }
            InventoryItemDetailState state = AbstractInventoryItemDetailState.SimpleInventoryItemDetailState.newForReapplying();
            ((InventoryItemDetailState.SqlInventoryItemDetailState)state).setInventoryItemDetailId(globalId);
            loadedInventoryItemDetailStates.put(globalId, state);
            return state;
        } else {
            InventoryItemDetailState state = getInventoryItemDetailStateDao().get(globalId, nullAllowed, inventoryItemState);
            if (state != null) {
                if (state instanceof AbstractInventoryItemDetailState) {
                    ((AbstractInventoryItemDetailState)state).setStateReadOnly(getStateCollectionReadOnly());
                }
                if (((InventoryItemDetailState.SqlInventoryItemDetailState)state).isStateUnsaved() && getStateCollectionReadOnly()) {
                    return state;//throw new UnsupportedOperationException("State collection is ReadOnly.");
                }
                loadedInventoryItemDetailStates.put(globalId, state);
            }
            return state;
        }

    }

    public boolean remove(InventoryItemDetailState state) {
        if (getStateCollectionReadOnly()) {
            throw new UnsupportedOperationException("State collection is ReadOnly.");
        }
        this.loadedInventoryItemDetailStates.remove(((InventoryItemDetailState.SqlInventoryItemDetailState)state).getInventoryItemDetailId());
        if (this.removedInventoryItemDetailStates.containsKey(((InventoryItemDetailState.SqlInventoryItemDetailState)state).getInventoryItemDetailId())) {
            return false;
        }
        this.removedInventoryItemDetailStates.put(((InventoryItemDetailState.SqlInventoryItemDetailState)state).getInventoryItemDetailId(), state);
        return true;
    }

    @Override
    public boolean add(InventoryItemDetailState state) {
        if (getStateCollectionReadOnly()) {
            throw new UnsupportedOperationException("State collection is ReadOnly.");
        }
        this.removedInventoryItemDetailStates.remove(((InventoryItemDetailState.SqlInventoryItemDetailState)state).getInventoryItemDetailId());
        if (this.loadedInventoryItemDetailStates.containsKey(((InventoryItemDetailState.SqlInventoryItemDetailState)state).getInventoryItemDetailId())) {
            return false;
        }
        this.loadedInventoryItemDetailStates.put(((InventoryItemDetailState.SqlInventoryItemDetailState)state).getInventoryItemDetailId(), state);
        return true;
    }

    public Collection<InventoryItemDetailState> getLoadedStates() {
        return Collections.unmodifiableCollection(this.loadedInventoryItemDetailStates.values());
    }

    public Collection<InventoryItemDetailState> getRemovedStates() {
        return Collections.unmodifiableCollection(this.removedInventoryItemDetailStates.values());
    }

    public int size() {
        assureAllLoaded();
        return this.loadedInventoryItemDetailStates.size();
    }

    public boolean isEmpty() {
        assureAllLoaded();
        return this.loadedInventoryItemDetailStates.isEmpty();
    }

    public boolean contains(Object o) {
        if (loadedInventoryItemDetailStates.values().contains(o)) {
            return true;
        }
        assureAllLoaded();
        return this.loadedInventoryItemDetailStates.containsValue(o);
    }

    public Object[] toArray() {
        assureAllLoaded();
        return this.loadedInventoryItemDetailStates.values().toArray();
    }

    public <T> T[] toArray(T[] a) {
        assureAllLoaded();
        return this.loadedInventoryItemDetailStates.values().toArray(a);
    }

    public boolean containsAll(Collection<?> c) {
        assureAllLoaded();
        return this.loadedInventoryItemDetailStates.values().containsAll(c);
    }

    public boolean addAll(Collection<? extends InventoryItemDetailState> c) {
        boolean b = false;
        for (InventoryItemDetailState s : c) {
            if (add(s)) {
                b = true;
            }
        }
        return b;
    }

    public boolean remove(Object o) {
        return remove((InventoryItemDetailState)o);
    }

    @Override
    public boolean removeState(InventoryItemDetailState s) {
        return remove((InventoryItemDetailState)s);
    }

    public boolean removeAll(Collection<?> c) {
        boolean b = false;
        for (Object s : c) {
            if (remove(s)) {
                b = true;
            }
        }
        return b;
    }

    public boolean retainAll(Collection<?> c) {
        throw new UnsupportedOperationException();
    }

    public void clear() {
        assureAllLoaded();
        this.loadedInventoryItemDetailStates.values().forEach(s -> this.removedInventoryItemDetailStates.put(((InventoryItemDetailState.SqlInventoryItemDetailState)s).getInventoryItemDetailId(), s));
        this.loadedInventoryItemDetailStates.clear();
    }

    //region Saveable Implements

    public void save () {
        for (InventoryItemDetailState s : this.getLoadedInventoryItemDetailStates()) {
            getInventoryItemDetailStateDao().save(s);
        }
        for (InventoryItemDetailState s : this.removedInventoryItemDetailStates.values()) {
            getInventoryItemDetailStateDao().delete(s);
        }
    }

    //endregion

}


