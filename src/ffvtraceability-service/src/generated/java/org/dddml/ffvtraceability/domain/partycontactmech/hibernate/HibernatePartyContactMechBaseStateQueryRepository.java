// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.partycontactmech.hibernate;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.hibernate.Session;
import jakarta.persistence.EntityManager;
import jakarta.persistence.criteria.*;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;
import java.util.stream.Collectors;
import org.dddml.ffvtraceability.domain.partycontactmech.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.specialization.jpa.*;
import org.springframework.transaction.annotation.Transactional;

@Repository
public class HibernatePartyContactMechBaseStateQueryRepository implements PartyContactMechBaseStateQueryRepository {
    @PersistenceContext
    private EntityManager entityManager;

    protected EntityManager getEntityManager() {
        return this.entityManager;
    }

    private static final Set<String> readOnlyPropertyPascalCaseNames = new HashSet<String>(Arrays.asList("PartyContactMechBaseId", "ActiveFromDate", "ContactMechanisms", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt"));

    private ReadOnlyProxyGenerator readOnlyProxyGenerator;

    public ReadOnlyProxyGenerator getReadOnlyProxyGenerator() {
        return readOnlyProxyGenerator;
    }

    public void setReadOnlyProxyGenerator(ReadOnlyProxyGenerator readOnlyProxyGenerator) {
        this.readOnlyProxyGenerator = readOnlyProxyGenerator;
    }

    @Transactional(readOnly = true)
    public PartyContactMechBaseState get(PartyContactMechBaseId id) {
        PartyContactMechBaseState state = (PartyContactMechBaseState)getEntityManager().find(AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState.class, id);
        return state;
    }

    @Transactional(readOnly = true)
    public Iterable<PartyContactMechBaseState> getAll(Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState> cq = cb.createQuery(AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState.class);
        Root<AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState> root = cq.from(AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState.class);
        cq.select(root);
        addNotDeletedRestriction(cb, cq, root);
        TypedQuery<AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        return query.getResultList().stream().map(PartyContactMechBaseState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public Iterable<PartyContactMechBaseState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState> cq = cb.createQuery(AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState.class);
        Root<AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState> root = cq.from(AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState.class);
        cq.select(root);
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);
        addNotDeletedRestriction(cb, cq, root);
        TypedQuery<AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        return query.getResultList().stream().map(PartyContactMechBaseState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public Iterable<PartyContactMechBaseState> get(org.dddml.support.criterion.Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState> cq = cb.createQuery(AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState.class);
        Root<AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState> root = cq.from(AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState.class);
        cq.select(root);
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);
        addNotDeletedRestriction(cb, cq, root);
        TypedQuery<AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        return query.getResultList().stream().map(PartyContactMechBaseState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PartyContactMechBaseState getFirst(Iterable<Map.Entry<String, Object>> filter, List<String> orders) {
        List<PartyContactMechBaseState> list = (List<PartyContactMechBaseState>)get(filter, orders, 0, 1);
        if (list == null || list.size() <= 0) {
            return null;
        }
        return list.get(0);
    }

    @Transactional(readOnly = true)
    public PartyContactMechBaseState getFirst(Map.Entry<String, Object> keyValue, List<String> orders) {
        List<Map.Entry<String, Object>> filter = new ArrayList<>();
        filter.add(keyValue);
        return getFirst(filter, orders);
    }

    @Transactional(readOnly = true)
    public Iterable<PartyContactMechBaseState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        Map.Entry<String, Object> keyValue = new AbstractMap.SimpleEntry<>(propertyName, propertyValue);
        List<Map.Entry<String, Object>> filter = new ArrayList<>();
        filter.add(keyValue);
        return get(filter, orders, firstResult, maxResults);
    }

    @Transactional(readOnly = true)
    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> cq = cb.createQuery(Long.class);
        Root<AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState> root = cq.from(AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState.class);
        cq.select(cb.count(root));
        if (filter != null) {
            JpaUtils.criteriaAddFilter(cb, cq, root, filter);
        }
        addNotDeletedRestriction(cb, cq, root);
        return em.createQuery(cq).getSingleResult();
    }

    @Transactional(readOnly = true)
    public long getCount(org.dddml.support.criterion.Criterion filter) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> cq = cb.createQuery(Long.class);
        Root<AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState> root = cq.from(AbstractPartyContactMechBaseState.SimplePartyContactMechBaseState.class);
        cq.select(cb.count(root));
        if (filter != null) {
            JpaUtils.criteriaAddFilter(cb, cq, root, filter);
        }
        addNotDeletedRestriction(cb, cq, root);
        return em.createQuery(cq).getSingleResult();
    }

    @Transactional(readOnly = true)
    public PartyContactMechState getPartyContactMech(PartyContactMechBaseId partyContactMechBaseId, OffsetDateTime fromDate) {
        PartyContactMechId entityId = new PartyContactMechId(partyContactMechBaseId, fromDate);
        return (PartyContactMechState) getEntityManager().find(AbstractPartyContactMechState.SimplePartyContactMechState.class, entityId);
    }

    @Transactional(readOnly = true)
    public Iterable<PartyContactMechState> getPartyContactMeches(PartyContactMechBaseId partyContactMechBaseId, org.dddml.support.criterion.Criterion filter, List<String> orders) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractPartyContactMechState.SimplePartyContactMechState> cq = cb.createQuery(AbstractPartyContactMechState.SimplePartyContactMechState.class);
        Root<AbstractPartyContactMechState.SimplePartyContactMechState> root = cq.from(AbstractPartyContactMechState.SimplePartyContactMechState.class);
        cq.select(root);

        Predicate partIdCondition = cb.and(
            cb.equal(root.get("partyContactMechId").get("partyContactMechBaseIdPartyId"), partyContactMechBaseId.getPartyId()),
            cb.equal(root.get("partyContactMechId").get("partyContactMechBaseIdContactMechId"), partyContactMechBaseId.getContactMechId())
        );
        cq.where(partIdCondition);

        // Add filter and orders
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);

        TypedQuery<AbstractPartyContactMechState.SimplePartyContactMechState> query = em.createQuery(cq);
        return query.getResultList().stream().map(PartyContactMechState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PartyContactMechPurposeState getPartyContactMechPurpose(PartyContactMechBaseId partyContactMechBaseId, OffsetDateTime partyContactMechFromDate, String contactMechPurposeTypeId) {
        PartyContactMechPurposeId entityId = new PartyContactMechPurposeId(partyContactMechBaseId, partyContactMechFromDate, contactMechPurposeTypeId);
        return (PartyContactMechPurposeState) getEntityManager().find(AbstractPartyContactMechPurposeState.SimplePartyContactMechPurposeState.class, entityId);
    }

    @Transactional(readOnly = true)
    public Iterable<PartyContactMechPurposeState> getPartyContactMechPurposes(PartyContactMechBaseId partyContactMechBaseId, OffsetDateTime partyContactMechFromDate, org.dddml.support.criterion.Criterion filter, List<String> orders) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractPartyContactMechPurposeState.SimplePartyContactMechPurposeState> cq = cb.createQuery(AbstractPartyContactMechPurposeState.SimplePartyContactMechPurposeState.class);
        Root<AbstractPartyContactMechPurposeState.SimplePartyContactMechPurposeState> root = cq.from(AbstractPartyContactMechPurposeState.SimplePartyContactMechPurposeState.class);
        cq.select(root);

        Predicate partIdCondition = cb.and(
            cb.equal(root.get("partyContactMechPurposeId").get("partyContactMechBaseIdPartyId"), partyContactMechBaseId.getPartyId()),
            cb.equal(root.get("partyContactMechPurposeId").get("partyContactMechBaseIdContactMechId"), partyContactMechBaseId.getContactMechId()),
            cb.equal(root.get("partyContactMechPurposeId").get("partyContactMechFromDate"), partyContactMechFromDate)
        );
        cq.where(partIdCondition);

        // Add filter and orders
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);

        TypedQuery<AbstractPartyContactMechPurposeState.SimplePartyContactMechPurposeState> query = em.createQuery(cq);
        return query.getResultList().stream().map(PartyContactMechPurposeState.class::cast).collect(Collectors.toList());
    }

    protected void addNotDeletedRestriction(CriteriaBuilder cb, CriteriaQuery<?> cq, Root<?> root) {
    }

}

