// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.contactmech.hibernate;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;
import org.dddml.ffvtraceability.domain.contactmech.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.specialization.hibernate.*;
import org.springframework.transaction.annotation.Transactional;

@Repository("contactMechStateRepository")
public class HibernateContactMechStateRepository implements ContactMechStateRepository {
    @PersistenceContext
    private EntityManager entityManager;

    protected EntityManager getEntityManager() {
        EntityManager em = this.entityManager;
        String currentTenantId = TenantContext.getTenantId();
        if (currentTenantId == null || currentTenantId.isEmpty()) {
            throw new IllegalStateException("Tenant context not set");
        }
        if (TenantSupport.SUPER_TENANT_ID != null && !TenantSupport.SUPER_TENANT_ID.isEmpty()
            && TenantSupport.SUPER_TENANT_ID.equals(currentTenantId)) {
            return em;
        }
        org.hibernate.Session session = em.unwrap(org.hibernate.Session.class);
        org.hibernate.Filter filter = session.enableFilter("tenantFilter");
        filter.setParameter("tenantId", currentTenantId);
        filter.validate();
        return em;
    }

    private static final Set<String> readOnlyPropertyPascalCaseNames = new HashSet<String>(Arrays.asList("ContactMechId", "ContactMechTypeId", "InfoString", "AskForName", "Address1", "Address2", "Directions", "City", "PostalCode", "PostalCodeExt", "CountryGeoId", "StateProvinceGeoId", "PostalCodeGeoId", "GeoPointId", "Email", "AskForRole", "TelecomCountryCode", "TelecomAreaCode", "TelecomContactNumber", "PhysicalLocationAddress", "TelecomCountryCode2", "TelecomAreaCode2", "TelecomContactNumber2", "CountryCode", "AreaCode", "ContactNumber", "ToName", "AttnName", "PrefectureGeoId", "CountyGeoId", "TownGeoId", "AssocTelecomContactMechId", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt"));
    
    private ReadOnlyProxyGenerator readOnlyProxyGenerator;
    
    public ReadOnlyProxyGenerator getReadOnlyProxyGenerator() {
        return readOnlyProxyGenerator;
    }

    public void setReadOnlyProxyGenerator(ReadOnlyProxyGenerator readOnlyProxyGenerator) {
        this.readOnlyProxyGenerator = readOnlyProxyGenerator;
    }

    @Transactional(readOnly = true)
    public ContactMechState get(String id, boolean nullAllowed) {
        return get(ContactMechState.class, id, nullAllowed);
    }

    @Transactional(readOnly = true)
    public ContactMechState get(Class<? extends ContactMechState> type, String id, boolean nullAllowed) {
        ContactMechState.SqlContactMechState state = (ContactMechState.SqlContactMechState)getEntityManager().find(AbstractContactMechState.class, id);
        if (state != null && !type.isAssignableFrom(state.getClass())) {
            throw new ClassCastException(String.format("state is NOT instance of %1$s", type.getName()));
        }
        if (!nullAllowed && state == null) {
            state = (ContactMechState.SqlContactMechState)newEmptyState(type);
            state.setContactMechId(id);
        }
        return state;
    }

    private ContactMechState newEmptyState(Class<? extends ContactMechState> type) {
        ContactMechState state = null;
        Class<? extends AbstractContactMechState> clazz = null;
        if (state != null) {
            // do nothing.
        }
        else if (type.equals(MiscContactMechState.class)) {
            clazz = AbstractMiscContactMechState.SimpleMiscContactMechState.class;
        }
        else if (type.equals(TelecomNumberState.class)) {
            clazz = AbstractTelecomNumberState.SimpleTelecomNumberState.class;
        }
        else if (type.equals(PostalAddressState.class)) {
            clazz = AbstractPostalAddressState.SimplePostalAddressState.class;
        }
        else {
            throw new IllegalArgumentException("type");
        }
        try {
            state = clazz.newInstance();
        } catch (InstantiationException | IllegalAccessException e) {
            throw new IllegalArgumentException("type", e);
        }
        return state;
    }

    public void save(ContactMechState state) {
        ContactMechState s = state;
        if (getReadOnlyProxyGenerator() != null) {
            s = (ContactMechState) getReadOnlyProxyGenerator().getTarget(state);
        }
        if (s.getVersion() == null) {
            entityManager.persist(s);
        } else {
            entityManager.merge(s);
        }

        if (s instanceof Saveable) {
            Saveable saveable = (Saveable) s;
            saveable.save();
        }
        entityManager.flush();
    }

    public void merge(ContactMechState detached) {
        ContactMechState persistent = getEntityManager().find(AbstractContactMechState.class, detached.getContactMechId());
        if (persistent != null) {
            merge(persistent, detached);
            entityManager.merge(persistent);
        } else {
            entityManager.persist(detached);
        }
        entityManager.flush();
    }

    private void merge(ContactMechState persistent, ContactMechState detached) {
        ((AbstractContactMechState) persistent).merge(detached);
    }

}

