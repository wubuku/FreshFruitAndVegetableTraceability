// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.order.hibernate;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.partyrole.*;
import org.dddml.ffvtraceability.domain.*;
import org.hibernate.Session;
import jakarta.persistence.EntityManager;
import jakarta.persistence.criteria.*;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;
import java.util.stream.Collectors;
import org.dddml.ffvtraceability.domain.order.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.specialization.jpa.*;
import org.springframework.transaction.annotation.Transactional;

@Repository
public class HibernateOrderHeaderStateQueryRepository implements OrderHeaderStateQueryRepository {
    @PersistenceContext
    private EntityManager entityManager;

    protected EntityManager getEntityManager() {
        EntityManager em = this.entityManager;
        String currentTenantId = TenantContext.getTenantId();
        if (currentTenantId == null || currentTenantId.isEmpty()) {
            throw new IllegalStateException("Tenant context not set");
        }
        if (TenantSupport.SUPER_TENANT_ID != null && !TenantSupport.SUPER_TENANT_ID.isEmpty()
            && TenantSupport.SUPER_TENANT_ID.equals(currentTenantId)) {
            return em;
        }
        org.hibernate.Session session = em.unwrap(org.hibernate.Session.class);
        org.hibernate.Filter filter = session.enableFilter("tenantFilter");
        filter.setParameter("tenantId", currentTenantId);
        filter.validate();
        return em;
    }

    private static final Set<String> readOnlyPropertyPascalCaseNames = new HashSet<String>(Arrays.asList("OrderId", "OrderTypeId", "OrderName", "ExternalId", "SalesChannelEnumId", "OrderDate", "Priority", "EntryDate", "PickSheetPrintedDate", "VisitId", "StatusId", "FirstAttemptOrderId", "CurrencyUomId", "SyncStatusId", "BillingAccountId", "OriginFacilityId", "ProductStoreId", "TerminalId", "TransactionId", "AutoOrderShoppingListId", "NeedsInventoryIssuance", "IsRushOrder", "InternalCode", "RemainingSubTotal", "GrandTotal", "IsViewed", "InvoicePerShipment", "Memo", "ContactDescription", "FulfillmentStatusId", "OrderItems", "OrderRoles", "OrderAdjustments", "OrderContactMechanisms", "OrderShipGroups", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt"));

    private ReadOnlyProxyGenerator readOnlyProxyGenerator;

    public ReadOnlyProxyGenerator getReadOnlyProxyGenerator() {
        return readOnlyProxyGenerator;
    }

    public void setReadOnlyProxyGenerator(ReadOnlyProxyGenerator readOnlyProxyGenerator) {
        this.readOnlyProxyGenerator = readOnlyProxyGenerator;
    }

    @Transactional(readOnly = true)
    public OrderHeaderState get(String id) {
        OrderHeaderState state = (OrderHeaderState)getEntityManager().find(AbstractOrderHeaderState.SimpleOrderHeaderState.class, id);
        return state;
    }

    @Transactional(readOnly = true)
    public Iterable<OrderHeaderState> getAll(Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractOrderHeaderState.SimpleOrderHeaderState> cq = cb.createQuery(AbstractOrderHeaderState.SimpleOrderHeaderState.class);
        Root<AbstractOrderHeaderState.SimpleOrderHeaderState> root = cq.from(AbstractOrderHeaderState.SimpleOrderHeaderState.class);
        cq.select(root);
        addNotDeletedRestriction(cb, cq, root);
        TypedQuery<AbstractOrderHeaderState.SimpleOrderHeaderState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        return query.getResultList().stream().map(OrderHeaderState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public Iterable<OrderHeaderState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractOrderHeaderState.SimpleOrderHeaderState> cq = cb.createQuery(AbstractOrderHeaderState.SimpleOrderHeaderState.class);
        Root<AbstractOrderHeaderState.SimpleOrderHeaderState> root = cq.from(AbstractOrderHeaderState.SimpleOrderHeaderState.class);
        cq.select(root);
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);
        addNotDeletedRestriction(cb, cq, root);
        TypedQuery<AbstractOrderHeaderState.SimpleOrderHeaderState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        return query.getResultList().stream().map(OrderHeaderState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public Iterable<OrderHeaderState> get(org.dddml.support.criterion.Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractOrderHeaderState.SimpleOrderHeaderState> cq = cb.createQuery(AbstractOrderHeaderState.SimpleOrderHeaderState.class);
        Root<AbstractOrderHeaderState.SimpleOrderHeaderState> root = cq.from(AbstractOrderHeaderState.SimpleOrderHeaderState.class);
        cq.select(root);
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);
        addNotDeletedRestriction(cb, cq, root);
        TypedQuery<AbstractOrderHeaderState.SimpleOrderHeaderState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        return query.getResultList().stream().map(OrderHeaderState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public OrderHeaderState getFirst(Iterable<Map.Entry<String, Object>> filter, List<String> orders) {
        List<OrderHeaderState> list = (List<OrderHeaderState>)get(filter, orders, 0, 1);
        if (list == null || list.size() <= 0) {
            return null;
        }
        return list.get(0);
    }

    @Transactional(readOnly = true)
    public OrderHeaderState getFirst(Map.Entry<String, Object> keyValue, List<String> orders) {
        List<Map.Entry<String, Object>> filter = new ArrayList<>();
        filter.add(keyValue);
        return getFirst(filter, orders);
    }

    @Transactional(readOnly = true)
    public Iterable<OrderHeaderState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        Map.Entry<String, Object> keyValue = new AbstractMap.SimpleEntry<>(propertyName, propertyValue);
        List<Map.Entry<String, Object>> filter = new ArrayList<>();
        filter.add(keyValue);
        return get(filter, orders, firstResult, maxResults);
    }

    @Transactional(readOnly = true)
    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> cq = cb.createQuery(Long.class);
        Root<AbstractOrderHeaderState.SimpleOrderHeaderState> root = cq.from(AbstractOrderHeaderState.SimpleOrderHeaderState.class);
        cq.select(cb.count(root));
        if (filter != null) {
            JpaUtils.criteriaAddFilter(cb, cq, root, filter);
        }
        addNotDeletedRestriction(cb, cq, root);
        return em.createQuery(cq).getSingleResult();
    }

    @Transactional(readOnly = true)
    public long getCount(org.dddml.support.criterion.Criterion filter) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> cq = cb.createQuery(Long.class);
        Root<AbstractOrderHeaderState.SimpleOrderHeaderState> root = cq.from(AbstractOrderHeaderState.SimpleOrderHeaderState.class);
        cq.select(cb.count(root));
        if (filter != null) {
            JpaUtils.criteriaAddFilter(cb, cq, root, filter);
        }
        addNotDeletedRestriction(cb, cq, root);
        return em.createQuery(cq).getSingleResult();
    }

    @Transactional(readOnly = true)
    public OrderRoleState getOrderRole(String orderId, PartyRoleId partyRoleId) {
        OrderRoleId entityId = new OrderRoleId(orderId, partyRoleId);
        return (OrderRoleState) getEntityManager().find(AbstractOrderRoleState.SimpleOrderRoleState.class, entityId);
    }

    @Transactional(readOnly = true)
    public Iterable<OrderRoleState> getOrderRoles(String orderId, org.dddml.support.criterion.Criterion filter, List<String> orders) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractOrderRoleState.SimpleOrderRoleState> cq = cb.createQuery(AbstractOrderRoleState.SimpleOrderRoleState.class);
        Root<AbstractOrderRoleState.SimpleOrderRoleState> root = cq.from(AbstractOrderRoleState.SimpleOrderRoleState.class);
        cq.select(root);

        Predicate partIdCondition = cb.and(
            cb.equal(root.get("orderRoleId").get("orderId"), orderId)
        );
        cq.where(partIdCondition);

        // Add filter and orders
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);

        TypedQuery<AbstractOrderRoleState.SimpleOrderRoleState> query = em.createQuery(cq);
        return query.getResultList().stream().map(OrderRoleState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public OrderContactMechState getOrderContactMech(String orderId, String contactMechPurposeTypeId) {
        OrderContactMechId entityId = new OrderContactMechId(orderId, contactMechPurposeTypeId);
        return (OrderContactMechState) getEntityManager().find(AbstractOrderContactMechState.SimpleOrderContactMechState.class, entityId);
    }

    @Transactional(readOnly = true)
    public Iterable<OrderContactMechState> getOrderContactMeches(String orderId, org.dddml.support.criterion.Criterion filter, List<String> orders) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractOrderContactMechState.SimpleOrderContactMechState> cq = cb.createQuery(AbstractOrderContactMechState.SimpleOrderContactMechState.class);
        Root<AbstractOrderContactMechState.SimpleOrderContactMechState> root = cq.from(AbstractOrderContactMechState.SimpleOrderContactMechState.class);
        cq.select(root);

        Predicate partIdCondition = cb.and(
            cb.equal(root.get("orderContactMechId").get("orderId"), orderId)
        );
        cq.where(partIdCondition);

        // Add filter and orders
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);

        TypedQuery<AbstractOrderContactMechState.SimpleOrderContactMechState> query = em.createQuery(cq);
        return query.getResultList().stream().map(OrderContactMechState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public OrderItemState getOrderItem(String orderId, String orderItemSeqId) {
        OrderItemId entityId = new OrderItemId(orderId, orderItemSeqId);
        return (OrderItemState) getEntityManager().find(AbstractOrderItemState.SimpleOrderItemState.class, entityId);
    }

    @Transactional(readOnly = true)
    public Iterable<OrderItemState> getOrderItems(String orderId, org.dddml.support.criterion.Criterion filter, List<String> orders) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractOrderItemState.SimpleOrderItemState> cq = cb.createQuery(AbstractOrderItemState.SimpleOrderItemState.class);
        Root<AbstractOrderItemState.SimpleOrderItemState> root = cq.from(AbstractOrderItemState.SimpleOrderItemState.class);
        cq.select(root);

        Predicate partIdCondition = cb.and(
            cb.equal(root.get("orderItemId").get("orderId"), orderId)
        );
        cq.where(partIdCondition);

        // Add filter and orders
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);

        TypedQuery<AbstractOrderItemState.SimpleOrderItemState> query = em.createQuery(cq);
        return query.getResultList().stream().map(OrderItemState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public OrderAdjustmentState getOrderAdjustment(String orderId, String orderAdjustmentId) {
        OrderIdOrderAdjustmentIdPair entityId = new OrderIdOrderAdjustmentIdPair(orderId, orderAdjustmentId);
        return (OrderAdjustmentState) getEntityManager().find(AbstractOrderAdjustmentState.SimpleOrderAdjustmentState.class, entityId);
    }

    @Transactional(readOnly = true)
    public Iterable<OrderAdjustmentState> getOrderAdjustments(String orderId, org.dddml.support.criterion.Criterion filter, List<String> orders) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractOrderAdjustmentState.SimpleOrderAdjustmentState> cq = cb.createQuery(AbstractOrderAdjustmentState.SimpleOrderAdjustmentState.class);
        Root<AbstractOrderAdjustmentState.SimpleOrderAdjustmentState> root = cq.from(AbstractOrderAdjustmentState.SimpleOrderAdjustmentState.class);
        cq.select(root);

        Predicate partIdCondition = cb.and(
            cb.equal(root.get("orderIdOrderAdjustmentIdPair").get("orderId"), orderId)
        );
        cq.where(partIdCondition);

        // Add filter and orders
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);

        TypedQuery<AbstractOrderAdjustmentState.SimpleOrderAdjustmentState> query = em.createQuery(cq);
        return query.getResultList().stream().map(OrderAdjustmentState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public OrderShipGroupState getOrderShipGroup(String orderId, String shipGroupSeqId) {
        OrderShipGroupId entityId = new OrderShipGroupId(orderId, shipGroupSeqId);
        return (OrderShipGroupState) getEntityManager().find(AbstractOrderShipGroupState.SimpleOrderShipGroupState.class, entityId);
    }

    @Transactional(readOnly = true)
    public Iterable<OrderShipGroupState> getOrderShipGroups(String orderId, org.dddml.support.criterion.Criterion filter, List<String> orders) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractOrderShipGroupState.SimpleOrderShipGroupState> cq = cb.createQuery(AbstractOrderShipGroupState.SimpleOrderShipGroupState.class);
        Root<AbstractOrderShipGroupState.SimpleOrderShipGroupState> root = cq.from(AbstractOrderShipGroupState.SimpleOrderShipGroupState.class);
        cq.select(root);

        Predicate partIdCondition = cb.and(
            cb.equal(root.get("orderShipGroupId").get("orderId"), orderId)
        );
        cq.where(partIdCondition);

        // Add filter and orders
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);

        TypedQuery<AbstractOrderShipGroupState.SimpleOrderShipGroupState> query = em.createQuery(cq);
        return query.getResultList().stream().map(OrderShipGroupState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public OrderItemShipGroupAssociationState getOrderItemShipGroupAssociation(String orderId, String orderShipGroupShipGroupSeqId, String orderItemSeqId) {
        OrderItemShipGroupAssociationId entityId = new OrderItemShipGroupAssociationId(orderId, orderShipGroupShipGroupSeqId, orderItemSeqId);
        return (OrderItemShipGroupAssociationState) getEntityManager().find(AbstractOrderItemShipGroupAssociationState.SimpleOrderItemShipGroupAssociationState.class, entityId);
    }

    @Transactional(readOnly = true)
    public Iterable<OrderItemShipGroupAssociationState> getOrderItemShipGroupAssociations(String orderId, String orderShipGroupShipGroupSeqId, org.dddml.support.criterion.Criterion filter, List<String> orders) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractOrderItemShipGroupAssociationState.SimpleOrderItemShipGroupAssociationState> cq = cb.createQuery(AbstractOrderItemShipGroupAssociationState.SimpleOrderItemShipGroupAssociationState.class);
        Root<AbstractOrderItemShipGroupAssociationState.SimpleOrderItemShipGroupAssociationState> root = cq.from(AbstractOrderItemShipGroupAssociationState.SimpleOrderItemShipGroupAssociationState.class);
        cq.select(root);

        Predicate partIdCondition = cb.and(
            cb.equal(root.get("orderItemShipGroupAssociationId").get("orderId"), orderId),
            cb.equal(root.get("orderItemShipGroupAssociationId").get("orderShipGroupShipGroupSeqId"), orderShipGroupShipGroupSeqId)
        );
        cq.where(partIdCondition);

        // Add filter and orders
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);

        TypedQuery<AbstractOrderItemShipGroupAssociationState.SimpleOrderItemShipGroupAssociationState> query = em.createQuery(cq);
        return query.getResultList().stream().map(OrderItemShipGroupAssociationState.class::cast).collect(Collectors.toList());
    }

    protected void addNotDeletedRestriction(CriteriaBuilder cb, CriteriaQuery<?> cq, Root<?> root) {
    }

}

