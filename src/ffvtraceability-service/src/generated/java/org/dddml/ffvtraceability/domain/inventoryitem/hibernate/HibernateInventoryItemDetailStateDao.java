// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.inventoryitem.hibernate;

import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import java.util.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.criteria.*;
import jakarta.persistence.TypedQuery;
import org.springframework.stereotype.Repository;
import java.util.stream.Collectors;
import org.dddml.ffvtraceability.domain.inventoryitem.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.specialization.jpa.*;
import org.springframework.transaction.annotation.Transactional;

@Repository("inventoryItemDetailStateDao")
public class HibernateInventoryItemDetailStateDao implements InventoryItemDetailStateDao {
    @PersistenceContext
    private EntityManager entityManager;


    protected EntityManager getEntityManager() {
        EntityManager em = this.entityManager;
        String currentTenantId = TenantContext.getTenantId();
        if (currentTenantId == null || currentTenantId.isEmpty()) {
            throw new IllegalStateException("Tenant context not set");
        }
        if (TenantSupport.SUPER_TENANT_ID != null && !TenantSupport.SUPER_TENANT_ID.isEmpty()
            && TenantSupport.SUPER_TENANT_ID.equals(currentTenantId)) {
            return em;
        }
        org.hibernate.Session session = em.unwrap(org.hibernate.Session.class);
        org.hibernate.Filter filter = session.enableFilter("tenantFilter");
        filter.setParameter("tenantId", currentTenantId);
        filter.validate();
        return em;
    }

    private static final Set<String> readOnlyPropertyPascalCaseNames = new HashSet<String>(Arrays.asList("InventoryItemDetailSeqId", "EffectiveDate", "QuantityOnHandDiff", "AvailableToPromiseDiff", "AccountingQuantityDiff", "UnitCost", "OrderId", "OrderItemSeqId", "ShipGroupSeqId", "ShipmentId", "ShipmentItemSeqId", "ReturnId", "ReturnItemSeqId", "WorkEffortId", "FixedAssetId", "MaintHistSeqId", "ItemIssuanceId", "ReceiptId", "PhysicalInventoryId", "ReasonEnumId", "Description", "InventoryTransferId", "InventoryItemAttributeHash", "InventoryItemDetailAttributeHash", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt", "__Active__", "__Deleted__", "InventoryItemId"));
    
    private ReadOnlyProxyGenerator readOnlyProxyGenerator;
    
    public ReadOnlyProxyGenerator getReadOnlyProxyGenerator() {
        return readOnlyProxyGenerator;
    }

    public void setReadOnlyProxyGenerator(ReadOnlyProxyGenerator readOnlyProxyGenerator) {
        this.readOnlyProxyGenerator = readOnlyProxyGenerator;
    }

    @Transactional(readOnly = true)
    @Override
    public InventoryItemDetailState get(InventoryItemDetailId id, boolean nullAllowed, InventoryItemState aggregateState)
    {
        Long aggregateVersion = aggregateState.getVersion();
        InventoryItemDetailState.SqlInventoryItemDetailState state = (InventoryItemDetailState.SqlInventoryItemDetailState) getEntityManager().find(AbstractInventoryItemDetailState.SimpleInventoryItemDetailState.class, id);
        if (!nullAllowed && state == null) {
            state = new AbstractInventoryItemDetailState.SimpleInventoryItemDetailState();
            state.setInventoryItemDetailId(id);
        }
        //if (getReadOnlyProxyGenerator() != null && state != null) {
        //    return (InventoryItemDetailState) getReadOnlyProxyGenerator().createProxy(state, new Class[]{InventoryItemDetailState.SqlInventoryItemDetailState.class}, "getStateReadOnly", readOnlyPropertyPascalCaseNames);
        //}
        if (state != null) { ((AbstractInventoryItemDetailState)state).setInventoryItemState(aggregateState); }
        if (nullAllowed && aggregateVersion != null) { assertNoConcurrencyConflict(id.getInventoryItemId(), aggregateVersion); }
        return state;
    }

    private void assertNoConcurrencyConflict(String aggregateId, Long aggregateVersion) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> cq = cb.createQuery(Long.class);
        Root<AbstractInventoryItemState.SimpleInventoryItemState> root = cq.from(AbstractInventoryItemState.SimpleInventoryItemState.class);
        cq.select(root.get("version"));
        cq.where(cb.equal(root.get("inventoryItemId"), aggregateId));
        Long v = em.createQuery(cq).getSingleResult();
        if (!aggregateVersion.equals(v)) {
            throw DomainError.named("concurrencyConflict", "Conflict between new state version (%1$s) and old version (%2$s)", v, aggregateVersion);
        }
    }

    @Override
    public void save(InventoryItemDetailState state)
    {
        InventoryItemDetailState s = state;
        if (getReadOnlyProxyGenerator() != null) {
            s = (InventoryItemDetailState) getReadOnlyProxyGenerator().getTarget(state);
        }
        if(s.getVersion() == null) {
            getEntityManager().persist(s);
        }else {
            getEntityManager().merge(s);
        }

        if (s instanceof Saveable)
        {
            Saveable saveable = (Saveable) s;
            saveable.save();
        }
    }

    @Transactional(readOnly = true)
    @Override
    public Iterable<InventoryItemDetailState> findByInventoryItemId(String inventoryItemId, InventoryItemState aggregateState)
    {
        Long aggregateVersion = aggregateState.getVersion();
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractInventoryItemDetailState.SimpleInventoryItemDetailState> cq = cb.createQuery(AbstractInventoryItemDetailState.SimpleInventoryItemDetailState.class);
        Root<AbstractInventoryItemDetailState.SimpleInventoryItemDetailState> root = cq.from(AbstractInventoryItemDetailState.SimpleInventoryItemDetailState.class);
        cq.select(root);

        Predicate partIdCondition = cb.and(
            cb.equal(root.get("inventoryItemDetailId").get("inventoryItemId"), inventoryItemId)
        );
        cq.where(partIdCondition);
        
        TypedQuery<AbstractInventoryItemDetailState.SimpleInventoryItemDetailState> query = em.createQuery(cq);
        List<InventoryItemDetailState> list = query.getResultList().stream().map(InventoryItemDetailState.class::cast).collect(Collectors.toList());
        list.forEach(i -> ((AbstractInventoryItemDetailState)i).setInventoryItemState(aggregateState));
        if (aggregateVersion != null) { assertNoConcurrencyConflict(inventoryItemId, aggregateVersion); }
        return list;
    }

    @Override
    public void delete(InventoryItemDetailState state)
    {
        InventoryItemDetailState s = state;
        if (getReadOnlyProxyGenerator() != null) {
            s = (InventoryItemDetailState) getReadOnlyProxyGenerator().getTarget(state);
        }
        if (s instanceof Saveable)
        {
            Saveable saveable = (Saveable) s;
            saveable.save();
        }
        getEntityManager().remove(s);
    }

}

