// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipment.hibernate;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.hibernate.Session;
import jakarta.persistence.EntityManager;
import jakarta.persistence.criteria.*;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;
import java.util.stream.Collectors;
import org.dddml.ffvtraceability.domain.shipment.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.specialization.jpa.*;
import org.springframework.transaction.annotation.Transactional;

@Repository
public class HibernateShipmentStateQueryRepository implements ShipmentStateQueryRepository {
    @PersistenceContext
    private EntityManager entityManager;

    protected EntityManager getEntityManager() {
        return this.entityManager;
    }

    private static final Set<String> readOnlyPropertyPascalCaseNames = new HashSet<String>(Arrays.asList("ShipmentId", "ShipmentTypeId", "StatusId", "QaStatusId", "PrimaryOrderId", "PrimaryReturnId", "PrimaryShipGroupSeqId", "PicklistBinId", "EstimatedReadyDate", "EstimatedShipDate", "EstimatedShipWorkEffId", "EstimatedArrivalDate", "EstimatedArrivalWorkEffId", "LatestCancelDate", "EstimatedShipCost", "CurrencyUomId", "HandlingInstructions", "OriginFacilityId", "DestinationFacilityId", "OriginContactMechId", "OriginTelecomNumberId", "DestinationContactMechId", "DestinationTelecomNumberId", "PartyIdTo", "PartyIdFrom", "AdditionalShippingCharge", "AddtlShippingChargeDesc", "ShipmentItems", "ShipmentPackages", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt"));

    private ReadOnlyProxyGenerator readOnlyProxyGenerator;

    public ReadOnlyProxyGenerator getReadOnlyProxyGenerator() {
        return readOnlyProxyGenerator;
    }

    public void setReadOnlyProxyGenerator(ReadOnlyProxyGenerator readOnlyProxyGenerator) {
        this.readOnlyProxyGenerator = readOnlyProxyGenerator;
    }

    @Transactional(readOnly = true)
    public ShipmentState get(String id) {
        ShipmentState state = (ShipmentState)getEntityManager().find(AbstractShipmentState.SimpleShipmentState.class, id);
        return state;
    }

    @Transactional(readOnly = true)
    public Iterable<ShipmentState> getAll(Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractShipmentState.SimpleShipmentState> cq = cb.createQuery(AbstractShipmentState.SimpleShipmentState.class);
        Root<AbstractShipmentState.SimpleShipmentState> root = cq.from(AbstractShipmentState.SimpleShipmentState.class);
        cq.select(root);
        addNotDeletedRestriction(cb, cq, root);
        TypedQuery<AbstractShipmentState.SimpleShipmentState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        return query.getResultList().stream().map(ShipmentState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public Iterable<ShipmentState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractShipmentState.SimpleShipmentState> cq = cb.createQuery(AbstractShipmentState.SimpleShipmentState.class);
        Root<AbstractShipmentState.SimpleShipmentState> root = cq.from(AbstractShipmentState.SimpleShipmentState.class);
        cq.select(root);
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);
        addNotDeletedRestriction(cb, cq, root);
        TypedQuery<AbstractShipmentState.SimpleShipmentState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        return query.getResultList().stream().map(ShipmentState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public Iterable<ShipmentState> get(org.dddml.support.criterion.Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractShipmentState.SimpleShipmentState> cq = cb.createQuery(AbstractShipmentState.SimpleShipmentState.class);
        Root<AbstractShipmentState.SimpleShipmentState> root = cq.from(AbstractShipmentState.SimpleShipmentState.class);
        cq.select(root);
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);
        addNotDeletedRestriction(cb, cq, root);
        TypedQuery<AbstractShipmentState.SimpleShipmentState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        return query.getResultList().stream().map(ShipmentState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public ShipmentState getFirst(Iterable<Map.Entry<String, Object>> filter, List<String> orders) {
        List<ShipmentState> list = (List<ShipmentState>)get(filter, orders, 0, 1);
        if (list == null || list.size() <= 0) {
            return null;
        }
        return list.get(0);
    }

    @Transactional(readOnly = true)
    public ShipmentState getFirst(Map.Entry<String, Object> keyValue, List<String> orders) {
        List<Map.Entry<String, Object>> filter = new ArrayList<>();
        filter.add(keyValue);
        return getFirst(filter, orders);
    }

    @Transactional(readOnly = true)
    public Iterable<ShipmentState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        Map.Entry<String, Object> keyValue = new AbstractMap.SimpleEntry<>(propertyName, propertyValue);
        List<Map.Entry<String, Object>> filter = new ArrayList<>();
        filter.add(keyValue);
        return get(filter, orders, firstResult, maxResults);
    }

    @Transactional(readOnly = true)
    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> cq = cb.createQuery(Long.class);
        Root<AbstractShipmentState.SimpleShipmentState> root = cq.from(AbstractShipmentState.SimpleShipmentState.class);
        cq.select(cb.count(root));
        if (filter != null) {
            JpaUtils.criteriaAddFilter(cb, cq, root, filter);
        }
        addNotDeletedRestriction(cb, cq, root);
        return em.createQuery(cq).getSingleResult();
    }

    @Transactional(readOnly = true)
    public long getCount(org.dddml.support.criterion.Criterion filter) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> cq = cb.createQuery(Long.class);
        Root<AbstractShipmentState.SimpleShipmentState> root = cq.from(AbstractShipmentState.SimpleShipmentState.class);
        cq.select(cb.count(root));
        if (filter != null) {
            JpaUtils.criteriaAddFilter(cb, cq, root, filter);
        }
        addNotDeletedRestriction(cb, cq, root);
        return em.createQuery(cq).getSingleResult();
    }

    @Transactional(readOnly = true)
    public ShipmentItemState getShipmentItem(String shipmentId, String shipmentItemSeqId) {
        ShipmentItemId entityId = new ShipmentItemId(shipmentId, shipmentItemSeqId);
        return (ShipmentItemState) getEntityManager().find(AbstractShipmentItemState.SimpleShipmentItemState.class, entityId);
    }

    @Transactional(readOnly = true)
    public Iterable<ShipmentItemState> getShipmentItems(String shipmentId, org.dddml.support.criterion.Criterion filter, List<String> orders) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractShipmentItemState.SimpleShipmentItemState> cq = cb.createQuery(AbstractShipmentItemState.SimpleShipmentItemState.class);
        Root<AbstractShipmentItemState.SimpleShipmentItemState> root = cq.from(AbstractShipmentItemState.SimpleShipmentItemState.class);
        cq.select(root);

        Predicate partIdCondition = cb.and(
            cb.equal(root.get("shipmentItemId").get("shipmentId"), shipmentId)
        );
        cq.where(partIdCondition);

        // Add filter and orders
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);

        TypedQuery<AbstractShipmentItemState.SimpleShipmentItemState> query = em.createQuery(cq);
        return query.getResultList().stream().map(ShipmentItemState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public ShipmentPackageState getShipmentPackage(String shipmentId, String shipmentPackageSeqId) {
        ShipmentPackageId entityId = new ShipmentPackageId(shipmentId, shipmentPackageSeqId);
        return (ShipmentPackageState) getEntityManager().find(AbstractShipmentPackageState.SimpleShipmentPackageState.class, entityId);
    }

    @Transactional(readOnly = true)
    public Iterable<ShipmentPackageState> getShipmentPackages(String shipmentId, org.dddml.support.criterion.Criterion filter, List<String> orders) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractShipmentPackageState.SimpleShipmentPackageState> cq = cb.createQuery(AbstractShipmentPackageState.SimpleShipmentPackageState.class);
        Root<AbstractShipmentPackageState.SimpleShipmentPackageState> root = cq.from(AbstractShipmentPackageState.SimpleShipmentPackageState.class);
        cq.select(root);

        Predicate partIdCondition = cb.and(
            cb.equal(root.get("shipmentPackageId").get("shipmentId"), shipmentId)
        );
        cq.where(partIdCondition);

        // Add filter and orders
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);

        TypedQuery<AbstractShipmentPackageState.SimpleShipmentPackageState> query = em.createQuery(cq);
        return query.getResultList().stream().map(ShipmentPackageState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public ShipmentPackageContentState getShipmentPackageContent(String shipmentId, String shipmentPackageSeqId, String shipmentItemSeqId) {
        ShipmentPackageContentId entityId = new ShipmentPackageContentId(shipmentId, shipmentPackageSeqId, shipmentItemSeqId);
        return (ShipmentPackageContentState) getEntityManager().find(AbstractShipmentPackageContentState.SimpleShipmentPackageContentState.class, entityId);
    }

    @Transactional(readOnly = true)
    public Iterable<ShipmentPackageContentState> getShipmentPackageContents(String shipmentId, String shipmentPackageSeqId, org.dddml.support.criterion.Criterion filter, List<String> orders) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractShipmentPackageContentState.SimpleShipmentPackageContentState> cq = cb.createQuery(AbstractShipmentPackageContentState.SimpleShipmentPackageContentState.class);
        Root<AbstractShipmentPackageContentState.SimpleShipmentPackageContentState> root = cq.from(AbstractShipmentPackageContentState.SimpleShipmentPackageContentState.class);
        cq.select(root);

        Predicate partIdCondition = cb.and(
            cb.equal(root.get("shipmentPackageContentId").get("shipmentId"), shipmentId),
            cb.equal(root.get("shipmentPackageContentId").get("shipmentPackageSeqId"), shipmentPackageSeqId)
        );
        cq.where(partIdCondition);

        // Add filter and orders
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);

        TypedQuery<AbstractShipmentPackageContentState.SimpleShipmentPackageContentState> query = em.createQuery(cq);
        return query.getResultList().stream().map(ShipmentPackageContentState.class::cast).collect(Collectors.toList());
    }

    protected void addNotDeletedRestriction(CriteriaBuilder cb, CriteriaQuery<?> cq, Root<?> root) {
    }

}

