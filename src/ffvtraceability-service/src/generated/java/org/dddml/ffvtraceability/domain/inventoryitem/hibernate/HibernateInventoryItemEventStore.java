// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.inventoryitem.hibernate;

import java.io.Serializable;
import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.specialization.hibernate.AbstractHibernateEventStore;
import jakarta.persistence.criteria.*;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.dddml.ffvtraceability.domain.inventoryitem.*;

@Component("inventoryItemEventStore")
public class HibernateInventoryItemEventStore extends AbstractHibernateEventStore {
    @Override
    protected Serializable getEventId(EventStoreAggregateId eventStoreAggregateId, long version)
    {
        return new InventoryItemEventId((String) eventStoreAggregateId.getId(), Long.valueOf(version));
    }

    @Override
    protected Class getSupportedEventType()
    {
        return AbstractInventoryItemEvent.class;
    }

    @Transactional(readOnly = true)
    @Override
    public EventStream loadEventStream(Class eventType, EventStoreAggregateId eventStoreAggregateId, long version) {
        Class supportedEventType = AbstractInventoryItemEvent.class;
        if (!eventType.isAssignableFrom(supportedEventType)) {
            throw new UnsupportedOperationException();
        }
        String idObj = (String) eventStoreAggregateId.getId();
        CriteriaBuilder cb = getEntityManager().getCriteriaBuilder();
        CriteriaQuery<AbstractInventoryItemEvent> query = cb.createQuery(AbstractInventoryItemEvent.class);
        Root<AbstractInventoryItemEvent> root = query.from(AbstractInventoryItemEvent.class);
   
        query.select(root)
                .where(cb.and(
                    cb.equal(root.get("inventoryItemEventId").get("inventoryItemId"), idObj),
                    cb.lessThanOrEqualTo(root.get("inventoryItemEventId").get("version"), version)
                ))
                .orderBy(cb.asc(root.get("inventoryItemEventId").get("version")));

        List<AbstractInventoryItemEvent> es = getEntityManager().createQuery(query).getResultList();
        for (Object e : es) {
            ((AbstractInventoryItemEvent) e).setEventReadOnly(true);
        }
        EventStream eventStream = new EventStream();
        if (es.size() > 0) {
            eventStream.setSteamVersion(((AbstractInventoryItemEvent) es.get(es.size() - 1)).getInventoryItemEventId().getVersion());
        } else {
        }
        eventStream.setEvents(new ArrayList<>(es));
        return eventStream;
    }

}

