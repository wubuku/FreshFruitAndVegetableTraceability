// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.facilityidentificationtype.hibernate;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.hibernate.Session;
import jakarta.persistence.EntityManager;
import jakarta.persistence.criteria.*;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;
import java.util.stream.Collectors;
import org.dddml.ffvtraceability.domain.facilityidentificationtype.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.specialization.jpa.*;
import org.springframework.transaction.annotation.Transactional;

@Repository
public class HibernateFacilityIdentificationTypeStateQueryRepository implements FacilityIdentificationTypeStateQueryRepository {
    @PersistenceContext
    private EntityManager entityManager;

    protected EntityManager getEntityManager() {
        return this.entityManager;
    }

    private static final Set<String> readOnlyPropertyPascalCaseNames = new HashSet<String>(Arrays.asList("FacilityIdentificationTypeId", "Description", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt", "Deleted"));

    private ReadOnlyProxyGenerator readOnlyProxyGenerator;

    public ReadOnlyProxyGenerator getReadOnlyProxyGenerator() {
        return readOnlyProxyGenerator;
    }

    public void setReadOnlyProxyGenerator(ReadOnlyProxyGenerator readOnlyProxyGenerator) {
        this.readOnlyProxyGenerator = readOnlyProxyGenerator;
    }

    @Transactional(readOnly = true)
    public FacilityIdentificationTypeState get(String id) {
        FacilityIdentificationTypeState state = (FacilityIdentificationTypeState)getEntityManager().find(AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState.class, id);
        return state;
    }

    @Transactional(readOnly = true)
    public Iterable<FacilityIdentificationTypeState> getAll(Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState> cq = cb.createQuery(AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState.class);
        Root<AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState> root = cq.from(AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState.class);
        cq.select(root);
        addNotDeletedRestriction(cb, cq, root);
        TypedQuery<AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        return query.getResultList().stream().map(FacilityIdentificationTypeState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public Iterable<FacilityIdentificationTypeState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState> cq = cb.createQuery(AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState.class);
        Root<AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState> root = cq.from(AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState.class);
        cq.select(root);
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);
        addNotDeletedRestriction(cb, cq, root);
        TypedQuery<AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        return query.getResultList().stream().map(FacilityIdentificationTypeState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public Iterable<FacilityIdentificationTypeState> get(org.dddml.support.criterion.Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState> cq = cb.createQuery(AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState.class);
        Root<AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState> root = cq.from(AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState.class);
        cq.select(root);
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);
        addNotDeletedRestriction(cb, cq, root);
        TypedQuery<AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        return query.getResultList().stream().map(FacilityIdentificationTypeState.class::cast).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public FacilityIdentificationTypeState getFirst(Iterable<Map.Entry<String, Object>> filter, List<String> orders) {
        List<FacilityIdentificationTypeState> list = (List<FacilityIdentificationTypeState>)get(filter, orders, 0, 1);
        if (list == null || list.size() <= 0) {
            return null;
        }
        return list.get(0);
    }

    @Transactional(readOnly = true)
    public FacilityIdentificationTypeState getFirst(Map.Entry<String, Object> keyValue, List<String> orders) {
        List<Map.Entry<String, Object>> filter = new ArrayList<>();
        filter.add(keyValue);
        return getFirst(filter, orders);
    }

    @Transactional(readOnly = true)
    public Iterable<FacilityIdentificationTypeState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        Map.Entry<String, Object> keyValue = new AbstractMap.SimpleEntry<>(propertyName, propertyValue);
        List<Map.Entry<String, Object>> filter = new ArrayList<>();
        filter.add(keyValue);
        return get(filter, orders, firstResult, maxResults);
    }

    @Transactional(readOnly = true)
    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> cq = cb.createQuery(Long.class);
        Root<AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState> root = cq.from(AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState.class);
        cq.select(cb.count(root));
        if (filter != null) {
            JpaUtils.criteriaAddFilter(cb, cq, root, filter);
        }
        addNotDeletedRestriction(cb, cq, root);
        return em.createQuery(cq).getSingleResult();
    }

    @Transactional(readOnly = true)
    public long getCount(org.dddml.support.criterion.Criterion filter) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> cq = cb.createQuery(Long.class);
        Root<AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState> root = cq.from(AbstractFacilityIdentificationTypeState.SimpleFacilityIdentificationTypeState.class);
        cq.select(cb.count(root));
        if (filter != null) {
            JpaUtils.criteriaAddFilter(cb, cq, root, filter);
        }
        addNotDeletedRestriction(cb, cq, root);
        return em.createQuery(cq).getSingleResult();
    }

    protected void addNotDeletedRestriction(CriteriaBuilder cb, CriteriaQuery<?> cq, Root<?> root) {
        Predicate isNull = cb.isNull(root.get("deleted"));
        Predicate isFalse = cb.equal(root.get("deleted"), false);
        Predicate notDeleted = cb.or(isNull, isFalse);
        cq.where(cq.getRestriction() == null ? notDeleted : cb.and(cq.getRestriction(), notDeleted));
    }

}

