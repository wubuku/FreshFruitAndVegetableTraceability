// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.lotidentificationtype.hibernate;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;
import org.dddml.ffvtraceability.domain.lotidentificationtype.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.specialization.hibernate.*;
import org.springframework.transaction.annotation.Transactional;

@Repository("lotIdentificationTypeStateRepository")
public class HibernateLotIdentificationTypeStateRepository implements LotIdentificationTypeStateRepository {
    @PersistenceContext
    private EntityManager entityManager;

    protected EntityManager getEntityManager() {
        return this.entityManager;
    }

    private static final Set<String> readOnlyPropertyPascalCaseNames = new HashSet<String>(Arrays.asList("LotIdentificationTypeId", "Description", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt", "Active", "Deleted"));
    
    private ReadOnlyProxyGenerator readOnlyProxyGenerator;
    
    public ReadOnlyProxyGenerator getReadOnlyProxyGenerator() {
        return readOnlyProxyGenerator;
    }

    public void setReadOnlyProxyGenerator(ReadOnlyProxyGenerator readOnlyProxyGenerator) {
        this.readOnlyProxyGenerator = readOnlyProxyGenerator;
    }

    @Transactional(readOnly = true)
    public LotIdentificationTypeState get(String id, boolean nullAllowed) {
        LotIdentificationTypeState.SqlLotIdentificationTypeState state = (LotIdentificationTypeState.SqlLotIdentificationTypeState)getEntityManager().find(AbstractLotIdentificationTypeState.SimpleLotIdentificationTypeState.class, id);
        if (!nullAllowed && state == null) {
            state = new AbstractLotIdentificationTypeState.SimpleLotIdentificationTypeState();
            state.setLotIdentificationTypeId(id);
        }
        if (getReadOnlyProxyGenerator() != null && state != null) {
            return (LotIdentificationTypeState) getReadOnlyProxyGenerator().createProxy(state, new Class[]{LotIdentificationTypeState.SqlLotIdentificationTypeState.class}, "getStateReadOnly", readOnlyPropertyPascalCaseNames);
        }
        return state;
    }

    public void save(LotIdentificationTypeState state) {
        LotIdentificationTypeState s = state;
        if (getReadOnlyProxyGenerator() != null) {
            s = (LotIdentificationTypeState) getReadOnlyProxyGenerator().getTarget(state);
        }
        if (s.getVersion() == null) {
            entityManager.persist(s);
        } else {
            entityManager.merge(s);
        }

        if (s instanceof Saveable) {
            Saveable saveable = (Saveable) s;
            saveable.save();
        }
        entityManager.flush();
    }

    public void merge(LotIdentificationTypeState detached) {
        LotIdentificationTypeState persistent = getEntityManager().find(AbstractLotIdentificationTypeState.SimpleLotIdentificationTypeState.class, detached.getLotIdentificationTypeId());
        if (persistent != null) {
            merge(persistent, detached);
            entityManager.merge(persistent);
        } else {
            entityManager.persist(detached);
        }
        entityManager.flush();
    }

    private void merge(LotIdentificationTypeState persistent, LotIdentificationTypeState detached) {
        ((AbstractLotIdentificationTypeState) persistent).merge(detached);
    }

}

