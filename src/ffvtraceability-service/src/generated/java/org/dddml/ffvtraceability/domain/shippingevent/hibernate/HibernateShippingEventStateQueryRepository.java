// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shippingevent.hibernate;

import java.util.*;
import org.dddml.ffvtraceability.domain.*;
import java.time.OffsetDateTime;
import org.hibernate.Session;
import jakarta.persistence.EntityManager;
import jakarta.persistence.criteria.*;
import jakarta.persistence.TypedQuery;
import org.hibernate.SessionFactory;
import org.dddml.ffvtraceability.domain.shippingevent.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.specialization.jpa.*;
import org.springframework.transaction.annotation.Transactional;

public class HibernateShippingEventStateQueryRepository implements ShippingEventStateQueryRepository {
    private SessionFactory sessionFactory;

    public SessionFactory getSessionFactory() { return this.sessionFactory; }

    public void setSessionFactory(SessionFactory sessionFactory) { this.sessionFactory = sessionFactory; }

    protected Session getCurrentSession() {
        return this.sessionFactory.getCurrentSession();
    }

    protected EntityManager getEntityManager() {
        return sessionFactory.createEntityManager();
    }

    private static final Set<String> readOnlyPropertyPascalCaseNames = new HashSet<String>(Arrays.asList("EventId", "TraceabilityLotCode", "QuantityAndUom", "ProductDescription", "ShipToLocation", "ShipFromLocation", "ShipDate", "TlcSourceOrTlcSourceReference", "ReferenceDocument", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt", "Active", "Deleted"));
    
    private ReadOnlyProxyGenerator readOnlyProxyGenerator;
    
    public ReadOnlyProxyGenerator getReadOnlyProxyGenerator() {
        return readOnlyProxyGenerator;
    }

    public void setReadOnlyProxyGenerator(ReadOnlyProxyGenerator readOnlyProxyGenerator) {
        this.readOnlyProxyGenerator = readOnlyProxyGenerator;
    }

    @Transactional(readOnly = true)
    public ShippingEventState get(Long id) {

        ShippingEventState state = (ShippingEventState)getCurrentSession().get(AbstractShippingEventState.SimpleShippingEventState.class, id);
        return state;
    }

    @Transactional(readOnly = true)
    public Iterable<ShippingEventState> getAll(Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<ShippingEventState> cq = cb.createQuery(ShippingEventState.class);
        Root<ShippingEventState> root = cq.from(ShippingEventState.class);
        cq.select(root);
        TypedQuery<ShippingEventState> query = em.createQuery(cq);
        JpaUtils.applyPagination(query, firstResult, maxResults);
        addNotDeletedRestriction(cb, cq, root);
        return query.getResultList();
    }

    @Transactional(readOnly = true)
    public Iterable<ShippingEventState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<ShippingEventState> cq = cb.createQuery(ShippingEventState.class);
        Root<ShippingEventState> root = cq.from(ShippingEventState.class);
        cq.select(root);
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);
        JpaUtils.applyPagination(em.createQuery(cq), firstResult, maxResults);
        addNotDeletedRestriction(cb, cq, root);
        return em.createQuery(cq).getResultList();
    }

    @Transactional(readOnly = true)
    public Iterable<ShippingEventState> get(org.dddml.support.criterion.Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<ShippingEventState> cq = cb.createQuery(ShippingEventState.class);
        Root<ShippingEventState> root = cq.from(ShippingEventState.class);
        cq.select(root);
        JpaUtils.criteriaAddFilterAndOrders(cb, cq, root, filter, orders);
        JpaUtils.applyPagination(em.createQuery(cq), firstResult, maxResults);
        addNotDeletedRestriction(cb, cq, root);
        return em.createQuery(cq).getResultList();
    }

    @Transactional(readOnly = true)
    public ShippingEventState getFirst(Iterable<Map.Entry<String, Object>> filter, List<String> orders) {
        List<ShippingEventState> list = (List<ShippingEventState>)get(filter, orders, 0, 1);
        if (list == null || list.size() <= 0)
        {
            return null;
        }
        return list.get(0);
    }

    @Transactional(readOnly = true)
    public ShippingEventState getFirst(Map.Entry<String, Object> keyValue, List<String> orders) {
        List<Map.Entry<String, Object>> filter = new ArrayList<>();
        filter.add(keyValue);
        return getFirst(filter, orders);
    }

    @Transactional(readOnly = true)
    public Iterable<ShippingEventState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        Map.Entry<String, Object> keyValue = new AbstractMap.SimpleEntry<>(propertyName, propertyValue);
        List<Map.Entry<String, Object>> filter = new ArrayList<>();
        filter.add(keyValue);
        return get(filter, orders, firstResult, maxResults);
    }

    @Transactional(readOnly = true)
    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> cq = cb.createQuery(Long.class);
        Root<ShippingEventState> root = cq.from(ShippingEventState.class);
        cq.select(cb.count(root));
        if (filter != null) {
            JpaUtils.criteriaAddFilter(cb, cq, root, filter);
        }
        addNotDeletedRestriction(cb, cq, root);
        return em.createQuery(cq).getSingleResult();
    }

    @Transactional(readOnly = true)
    public long getCount(org.dddml.support.criterion.Criterion filter) {
        EntityManager em = getEntityManager();
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> cq = cb.createQuery(Long.class);
        Root<ShippingEventState> root = cq.from(ShippingEventState.class);
        cq.select(cb.count(root));
        if (filter != null) {
            JpaUtils.criteriaAddFilter(cb, cq, root, filter);
        }
        addNotDeletedRestriction(cb, cq, root);
        return em.createQuery(cq).getSingleResult();
    }


    protected void addNotDeletedRestriction(CriteriaBuilder cb, CriteriaQuery<?> cq, Root<ShippingEventState> root) {
    }

}

