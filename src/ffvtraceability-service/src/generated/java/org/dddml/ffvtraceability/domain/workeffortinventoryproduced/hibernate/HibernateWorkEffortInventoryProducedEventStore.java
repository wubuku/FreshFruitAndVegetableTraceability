// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.workeffortinventoryproduced.hibernate;

import java.io.Serializable;
import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.dddml.ffvtraceability.domain.workeffortinventoryproduced.*;
import java.util.function.Consumer;

@Component("workEffortInventoryProducedEventStore")
public class HibernateWorkEffortInventoryProducedEventStore implements EventStore {
    @PersistenceContext
    private EntityManager entityManager;

    protected EntityManager getEntityManager() {
        return this.entityManager;
    }

    @Transactional(readOnly = true)
    @Override
    public EventStream loadEventStream(EventStoreAggregateId aggregateId) {
        throw new UnsupportedOperationException();
    }

    @Transactional
    @Override
    public void appendEvents(EventStoreAggregateId aggregateId, long version, Collection<Event> events, Consumer<Collection<Event>> afterEventsAppended) {
        for (Event e : events) {
            if (e instanceof AbstractWorkEffortInventoryProducedEvent.AbstractWorkEffortInventoryProducedStateCreated) {
                WorkEffortInventoryProducedState s = ((AbstractWorkEffortInventoryProducedEvent.AbstractWorkEffortInventoryProducedStateCreated)e).getWorkEffortInventoryProducedState();
                getEntityManager().persist(s);
            } else {
                getEntityManager().persist(e);
            }
            if (e instanceof Saveable) {
                Saveable saveable = (Saveable) e;
                saveable.save();
            }
        }
        afterEventsAppended.accept(events);
    }

    @Transactional(readOnly = true)
    @Override
    public Event getEvent(Class eventType, EventStoreAggregateId eventStoreAggregateId, long version) {
        Class supportedEventType = AbstractWorkEffortInventoryProducedEvent.SimpleWorkEffortInventoryProducedStateCreated.class;
        if (!eventType.isAssignableFrom(supportedEventType)) {
            throw new UnsupportedOperationException();
        }
        return getEvent(eventStoreAggregateId, version);
    }

    @Transactional(readOnly = true)
    @Override
    public Event getEvent(EventStoreAggregateId eventStoreAggregateId, long version) {
        WorkEffortInventoryProducedId idObj = (WorkEffortInventoryProducedId) eventStoreAggregateId.getId();
        WorkEffortInventoryProducedState state = getEntityManager().find(AbstractWorkEffortInventoryProducedState.SimpleWorkEffortInventoryProducedState.class, idObj);
        return new AbstractWorkEffortInventoryProducedEvent.SimpleWorkEffortInventoryProducedStateCreated(state);
    }

    @Transactional(readOnly = true)
    @Override
    public EventStream loadEventStream(Class eventType, EventStoreAggregateId eventStoreAggregateId, long version) {
        Class supportedEventType = AbstractWorkEffortInventoryProducedEvent.SimpleWorkEffortInventoryProducedStateCreated.class;
        if (!eventType.isAssignableFrom(supportedEventType)) {
            throw new UnsupportedOperationException();
        }
        Event e = getEvent(eventStoreAggregateId, version);
        EventStream es = new EventStream();
        es.setEvents(e != null ? Collections.singletonList(e) : Collections.emptyList());
        return es;
    }

    @Transactional(readOnly = true)
    @Override
    public boolean isEventWithCommandIdExisted(Class eventType, EventStoreAggregateId eventStoreAggregateId, String commandId) {
        throw new UnsupportedOperationException();
    }

}

