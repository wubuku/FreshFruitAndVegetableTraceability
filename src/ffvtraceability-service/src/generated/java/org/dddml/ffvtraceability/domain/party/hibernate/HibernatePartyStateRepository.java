// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.party.hibernate;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.ffvtraceability.domain.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;
import org.dddml.ffvtraceability.domain.party.*;
import org.dddml.ffvtraceability.specialization.*;
import org.dddml.ffvtraceability.specialization.hibernate.*;
import org.springframework.transaction.annotation.Transactional;

@Repository("partyStateRepository")
public class HibernatePartyStateRepository implements PartyStateRepository {
    @PersistenceContext
    private EntityManager entityManager;

    protected EntityManager getEntityManager() {
        EntityManager em = this.entityManager;
        String currentTenantId = TenantContext.getTenantId();
        if (currentTenantId == null || currentTenantId.isEmpty()) {
            throw new IllegalStateException("Tenant context not set");
        }
        if (TenantSupport.SUPER_TENANT_ID != null && !TenantSupport.SUPER_TENANT_ID.isEmpty()
            && TenantSupport.SUPER_TENANT_ID.equals(currentTenantId)) {
            return em;
        }
        org.hibernate.Session session = em.unwrap(org.hibernate.Session.class);
        org.hibernate.Filter filter = session.enableFilter("tenantFilter");
        filter.setParameter("tenantId", currentTenantId);
        filter.validate();
        return em;
    }

    private static final Set<String> readOnlyPropertyPascalCaseNames = new HashSet<String>(Arrays.asList("PartyId", "PartyTypeId", "PrimaryRoleTypeId", "ExternalId", "PreferredCurrencyUomId", "Description", "StatusId", "PartyIdentifications", "Salutation", "FirstName", "MiddleName", "LastName", "PersonalTitle", "Nickname", "Gender", "BirthDate", "DeceasedDate", "SocialSecurityNumber", "PassportNumber", "PassportExpireDate", "ExistingCustomer", "OrganizationName", "TaxIdNum", "FamilyName", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt"));
    
    private ReadOnlyProxyGenerator readOnlyProxyGenerator;
    
    public ReadOnlyProxyGenerator getReadOnlyProxyGenerator() {
        return readOnlyProxyGenerator;
    }

    public void setReadOnlyProxyGenerator(ReadOnlyProxyGenerator readOnlyProxyGenerator) {
        this.readOnlyProxyGenerator = readOnlyProxyGenerator;
    }

    @Transactional(readOnly = true)
    public PartyState get(String id, boolean nullAllowed) {
        return get(PartyState.class, id, nullAllowed);
    }

    @Transactional(readOnly = true)
    public PartyState get(Class<? extends PartyState> type, String id, boolean nullAllowed) {
        PartyState.SqlPartyState state = (PartyState.SqlPartyState)getEntityManager().find(AbstractPartyState.class, id);
        if (state != null && !type.isAssignableFrom(state.getClass())) {
            throw new ClassCastException(String.format("state is NOT instance of %1$s", type.getName()));
        }
        if (!nullAllowed && state == null) {
            state = (PartyState.SqlPartyState)newEmptyState(type);
            state.setPartyId(id);
        }
        return state;
    }

    private PartyState newEmptyState(Class<? extends PartyState> type) {
        PartyState state = null;
        Class<? extends AbstractPartyState> clazz = null;
        if (state != null) {
            // do nothing.
        }
        else if (type.equals(PartyState.class)) {
            clazz = AbstractPartyState.SimplePartyState.class;
        }
        else if (type.equals(PersonState.class)) {
            clazz = AbstractPersonState.SimplePersonState.class;
        }
        else if (type.equals(OrganizationState.class)) {
            clazz = AbstractOrganizationState.SimpleOrganizationState.class;
        }
        else if (type.equals(LegalOrganizationState.class)) {
            clazz = AbstractLegalOrganizationState.SimpleLegalOrganizationState.class;
        }
        else if (type.equals(CompanyState.class)) {
            clazz = AbstractCompanyState.SimpleCompanyState.class;
        }
        else if (type.equals(DepartmentState.class)) {
            clazz = AbstractDepartmentState.SimpleDepartmentState.class;
        }
        else if (type.equals(FamilyState.class)) {
            clazz = AbstractFamilyState.SimpleFamilyState.class;
        }
        else {
            throw new IllegalArgumentException("type");
        }
        try {
            state = clazz.newInstance();
        } catch (InstantiationException | IllegalAccessException e) {
            throw new IllegalArgumentException("type", e);
        }
        return state;
    }

    public void save(PartyState state) {
        PartyState s = state;
        if (getReadOnlyProxyGenerator() != null) {
            s = (PartyState) getReadOnlyProxyGenerator().getTarget(state);
        }
        if (s.getVersion() == null) {
            entityManager.persist(s);
        } else {
            entityManager.merge(s);
        }

        if (s instanceof Saveable) {
            Saveable saveable = (Saveable) s;
            saveable.save();
        }
        entityManager.flush();
    }

    public void merge(PartyState detached) {
        PartyState persistent = getEntityManager().find(AbstractPartyState.class, detached.getPartyId());
        if (persistent != null) {
            merge(persistent, detached);
            entityManager.merge(persistent);
        } else {
            entityManager.persist(detached);
        }
        entityManager.flush();
    }

    private void merge(PartyState persistent, PartyState detached) {
        ((AbstractPartyState) persistent).merge(detached);
    }

}

