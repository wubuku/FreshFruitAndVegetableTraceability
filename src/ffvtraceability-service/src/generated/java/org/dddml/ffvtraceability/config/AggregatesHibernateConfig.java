// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.config;

import org.dddml.ffvtraceability.domain.article.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.article.hibernate.*;
import org.dddml.ffvtraceability.domain.shippingevent.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.shippingevent.hibernate.*;
import org.dddml.ffvtraceability.domain.receivingevent.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.receivingevent.hibernate.*;
import org.dddml.ffvtraceability.domain.transformationevent.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.transformationevent.hibernate.*;
import org.dddml.ffvtraceability.domain.gs1applicationidentifier.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.gs1applicationidentifier.hibernate.*;
import org.dddml.ffvtraceability.domain.attributesetinstance.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.attributesetinstance.hibernate.*;
import org.dddml.ffvtraceability.domain.statusitem.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.statusitem.hibernate.*;
import org.dddml.ffvtraceability.domain.uom.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.uom.hibernate.*;
import org.dddml.ffvtraceability.domain.uomtype.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.uomtype.hibernate.*;
import org.dddml.ffvtraceability.domain.facility.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.facility.hibernate.*;
import org.dddml.ffvtraceability.domain.facilityidentification.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.facilityidentification.hibernate.*;
import org.dddml.ffvtraceability.domain.facilityidentificationtype.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.facilityidentificationtype.hibernate.*;
import org.dddml.ffvtraceability.domain.facilitytype.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.facilitytype.hibernate.*;
import org.dddml.ffvtraceability.domain.geo.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.geo.hibernate.*;
import org.dddml.ffvtraceability.domain.geotype.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.geotype.hibernate.*;
import org.dddml.ffvtraceability.domain.lot.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.lot.hibernate.*;
import org.dddml.ffvtraceability.domain.lotidentificationtype.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.lotidentificationtype.hibernate.*;
import org.dddml.ffvtraceability.domain.party.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.party.hibernate.*;
import org.dddml.ffvtraceability.domain.partyidentificationtype.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.partyidentificationtype.hibernate.*;
import org.dddml.ffvtraceability.domain.product.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.product.hibernate.*;
import org.dddml.ffvtraceability.domain.producttype.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.producttype.hibernate.*;
import org.dddml.ffvtraceability.domain.productcategory.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.productcategory.hibernate.*;
import org.dddml.ffvtraceability.domain.productcategorytype.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.productcategorytype.hibernate.*;
import org.dddml.ffvtraceability.domain.supplierproduct.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.supplierproduct.hibernate.*;
import org.dddml.ffvtraceability.domain.document.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.document.hibernate.*;
import org.dddml.ffvtraceability.domain.documentassociation.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.documentassociation.hibernate.*;
import org.dddml.ffvtraceability.domain.geopoint.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.geopoint.hibernate.*;
import org.dddml.ffvtraceability.domain.partyrole.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.partyrole.hibernate.*;
import org.dddml.ffvtraceability.domain.roletype.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.roletype.hibernate.*;
import org.dddml.ffvtraceability.domain.order.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.order.hibernate.*;
import org.dddml.ffvtraceability.domain.orderadjustmenttype.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.orderadjustmenttype.hibernate.*;
import org.dddml.ffvtraceability.domain.shipment.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.shipment.hibernate.*;
import org.dddml.ffvtraceability.domain.shipmenttype.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.shipmenttype.hibernate.*;
import org.dddml.ffvtraceability.domain.shippingdocument.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.shippingdocument.hibernate.*;
import org.dddml.ffvtraceability.domain.shipmentreceipt.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.shipmentreceipt.hibernate.*;
import org.dddml.ffvtraceability.specialization.AggregateEventListener;
import org.dddml.ffvtraceability.specialization.EventStore;
import org.dddml.ffvtraceability.specialization.IdGenerator;
import org.dddml.ffvtraceability.specialization.ReadOnlyProxyGenerator;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AggregatesHibernateConfig {


    @Bean
    public AbstractArticleApplicationService.SimpleArticleApplicationService articleApplicationService(
            @Qualifier("articleEventStore") EventStore articleEventStore,
            ArticleStateRepository articleStateRepository,
            ArticleStateQueryRepository articleStateQueryRepository
    ) {
        AbstractArticleApplicationService.SimpleArticleApplicationService applicationService = new AbstractArticleApplicationService.SimpleArticleApplicationService(
                articleEventStore,
                articleStateRepository,
                articleStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractShippingEventApplicationService.SimpleShippingEventApplicationService shippingEventApplicationService(
            ShippingEventStateRepository shippingEventStateRepository,
            ShippingEventStateQueryRepository shippingEventStateQueryRepository
    ) {
        AbstractShippingEventApplicationService.SimpleShippingEventApplicationService applicationService = new AbstractShippingEventApplicationService.SimpleShippingEventApplicationService(
                shippingEventStateRepository,
                shippingEventStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractReceivingEventApplicationService.SimpleReceivingEventApplicationService receivingEventApplicationService(
            ReceivingEventStateRepository receivingEventStateRepository,
            ReceivingEventStateQueryRepository receivingEventStateQueryRepository
    ) {
        AbstractReceivingEventApplicationService.SimpleReceivingEventApplicationService applicationService = new AbstractReceivingEventApplicationService.SimpleReceivingEventApplicationService(
                receivingEventStateRepository,
                receivingEventStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractTransformationEventApplicationService.SimpleTransformationEventApplicationService transformationEventApplicationService(
            TransformationEventStateRepository transformationEventStateRepository,
            TransformationEventStateQueryRepository transformationEventStateQueryRepository
    ) {
        AbstractTransformationEventApplicationService.SimpleTransformationEventApplicationService applicationService = new AbstractTransformationEventApplicationService.SimpleTransformationEventApplicationService(
                transformationEventStateRepository,
                transformationEventStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractGs1ApplicationIdentifierApplicationService.SimpleGs1ApplicationIdentifierApplicationService gs1ApplicationIdentifierApplicationService(
            Gs1ApplicationIdentifierStateRepository gs1ApplicationIdentifierStateRepository,
            Gs1ApplicationIdentifierStateQueryRepository gs1ApplicationIdentifierStateQueryRepository
    ) {
        AbstractGs1ApplicationIdentifierApplicationService.SimpleGs1ApplicationIdentifierApplicationService applicationService = new AbstractGs1ApplicationIdentifierApplicationService.SimpleGs1ApplicationIdentifierApplicationService(
                gs1ApplicationIdentifierStateRepository,
                gs1ApplicationIdentifierStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractAttributeSetInstanceApplicationService.SimpleAttributeSetInstanceApplicationService attributeSetInstanceApplicationService(
            @Qualifier("attributeSetInstanceEventStore") EventStore attributeSetInstanceEventStore,
            AttributeSetInstanceStateRepository attributeSetInstanceStateRepository,
            AttributeSetInstanceStateQueryRepository attributeSetInstanceStateQueryRepository
            , IdGenerator<String, AttributeSetInstanceCommand.CreateAttributeSetInstance, AttributeSetInstanceState> attributeSetInstanceIdGenerator
    ) {
        AbstractAttributeSetInstanceApplicationService.SimpleAttributeSetInstanceApplicationService applicationService = new AbstractAttributeSetInstanceApplicationService.SimpleAttributeSetInstanceApplicationService(
                attributeSetInstanceEventStore,
                attributeSetInstanceStateRepository,
                attributeSetInstanceStateQueryRepository
                , attributeSetInstanceIdGenerator
        );
        return applicationService;
    }



    @Bean
    public AbstractStatusItemApplicationService.SimpleStatusItemApplicationService statusItemApplicationService(
            StatusItemStateRepository statusItemStateRepository,
            StatusItemStateQueryRepository statusItemStateQueryRepository
    ) {
        AbstractStatusItemApplicationService.SimpleStatusItemApplicationService applicationService = new AbstractStatusItemApplicationService.SimpleStatusItemApplicationService(
                statusItemStateRepository,
                statusItemStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractUomApplicationService.SimpleUomApplicationService uomApplicationService(
            @Qualifier("uomEventStore") EventStore uomEventStore,
            UomStateRepository uomStateRepository,
            UomStateQueryRepository uomStateQueryRepository
    ) {
        AbstractUomApplicationService.SimpleUomApplicationService applicationService = new AbstractUomApplicationService.SimpleUomApplicationService(
                uomEventStore,
                uomStateRepository,
                uomStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractUomTypeApplicationService.SimpleUomTypeApplicationService uomTypeApplicationService(
            @Qualifier("uomTypeEventStore") EventStore uomTypeEventStore,
            UomTypeStateRepository uomTypeStateRepository,
            UomTypeStateQueryRepository uomTypeStateQueryRepository
    ) {
        AbstractUomTypeApplicationService.SimpleUomTypeApplicationService applicationService = new AbstractUomTypeApplicationService.SimpleUomTypeApplicationService(
                uomTypeEventStore,
                uomTypeStateRepository,
                uomTypeStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractFacilityApplicationService.SimpleFacilityApplicationService facilityApplicationService(
            @Qualifier("facilityEventStore") EventStore facilityEventStore,
            FacilityStateRepository facilityStateRepository,
            FacilityStateQueryRepository facilityStateQueryRepository
    ) {
        AbstractFacilityApplicationService.SimpleFacilityApplicationService applicationService = new AbstractFacilityApplicationService.SimpleFacilityApplicationService(
                facilityEventStore,
                facilityStateRepository,
                facilityStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractFacilityIdentificationApplicationService.SimpleFacilityIdentificationApplicationService facilityIdentificationApplicationService(
            @Qualifier("facilityIdentificationEventStore") EventStore facilityIdentificationEventStore,
            FacilityIdentificationStateRepository facilityIdentificationStateRepository,
            FacilityIdentificationStateQueryRepository facilityIdentificationStateQueryRepository
    ) {
        AbstractFacilityIdentificationApplicationService.SimpleFacilityIdentificationApplicationService applicationService = new AbstractFacilityIdentificationApplicationService.SimpleFacilityIdentificationApplicationService(
                facilityIdentificationEventStore,
                facilityIdentificationStateRepository,
                facilityIdentificationStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractFacilityIdentificationTypeApplicationService.SimpleFacilityIdentificationTypeApplicationService facilityIdentificationTypeApplicationService(
            @Qualifier("facilityIdentificationTypeEventStore") EventStore facilityIdentificationTypeEventStore,
            FacilityIdentificationTypeStateRepository facilityIdentificationTypeStateRepository,
            FacilityIdentificationTypeStateQueryRepository facilityIdentificationTypeStateQueryRepository
    ) {
        AbstractFacilityIdentificationTypeApplicationService.SimpleFacilityIdentificationTypeApplicationService applicationService = new AbstractFacilityIdentificationTypeApplicationService.SimpleFacilityIdentificationTypeApplicationService(
                facilityIdentificationTypeEventStore,
                facilityIdentificationTypeStateRepository,
                facilityIdentificationTypeStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractFacilityTypeApplicationService.SimpleFacilityTypeApplicationService facilityTypeApplicationService(
            FacilityTypeStateRepository facilityTypeStateRepository,
            FacilityTypeStateQueryRepository facilityTypeStateQueryRepository
    ) {
        AbstractFacilityTypeApplicationService.SimpleFacilityTypeApplicationService applicationService = new AbstractFacilityTypeApplicationService.SimpleFacilityTypeApplicationService(
                facilityTypeStateRepository,
                facilityTypeStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractGeoApplicationService.SimpleGeoApplicationService geoApplicationService(
            GeoStateRepository geoStateRepository,
            GeoStateQueryRepository geoStateQueryRepository
    ) {
        AbstractGeoApplicationService.SimpleGeoApplicationService applicationService = new AbstractGeoApplicationService.SimpleGeoApplicationService(
                geoStateRepository,
                geoStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractGeoTypeApplicationService.SimpleGeoTypeApplicationService geoTypeApplicationService(
            GeoTypeStateRepository geoTypeStateRepository,
            GeoTypeStateQueryRepository geoTypeStateQueryRepository
    ) {
        AbstractGeoTypeApplicationService.SimpleGeoTypeApplicationService applicationService = new AbstractGeoTypeApplicationService.SimpleGeoTypeApplicationService(
                geoTypeStateRepository,
                geoTypeStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractLotApplicationService.SimpleLotApplicationService lotApplicationService(
            @Qualifier("lotEventStore") EventStore lotEventStore,
            LotStateRepository lotStateRepository,
            LotStateQueryRepository lotStateQueryRepository
    ) {
        AbstractLotApplicationService.SimpleLotApplicationService applicationService = new AbstractLotApplicationService.SimpleLotApplicationService(
                lotEventStore,
                lotStateRepository,
                lotStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractLotIdentificationTypeApplicationService.SimpleLotIdentificationTypeApplicationService lotIdentificationTypeApplicationService(
            @Qualifier("lotIdentificationTypeEventStore") EventStore lotIdentificationTypeEventStore,
            LotIdentificationTypeStateRepository lotIdentificationTypeStateRepository,
            LotIdentificationTypeStateQueryRepository lotIdentificationTypeStateQueryRepository
    ) {
        AbstractLotIdentificationTypeApplicationService.SimpleLotIdentificationTypeApplicationService applicationService = new AbstractLotIdentificationTypeApplicationService.SimpleLotIdentificationTypeApplicationService(
                lotIdentificationTypeEventStore,
                lotIdentificationTypeStateRepository,
                lotIdentificationTypeStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractPartyApplicationService.SimplePartyApplicationService partyApplicationService(
            @Qualifier("partyEventStore") EventStore partyEventStore,
            PartyStateRepository partyStateRepository,
            PartyStateQueryRepository partyStateQueryRepository
    ) {
        AbstractPartyApplicationService.SimplePartyApplicationService applicationService = new AbstractPartyApplicationService.SimplePartyApplicationService(
                partyEventStore,
                partyStateRepository,
                partyStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractPartyIdentificationTypeApplicationService.SimplePartyIdentificationTypeApplicationService partyIdentificationTypeApplicationService(
            PartyIdentificationTypeStateRepository partyIdentificationTypeStateRepository,
            PartyIdentificationTypeStateQueryRepository partyIdentificationTypeStateQueryRepository
    ) {
        AbstractPartyIdentificationTypeApplicationService.SimplePartyIdentificationTypeApplicationService applicationService = new AbstractPartyIdentificationTypeApplicationService.SimplePartyIdentificationTypeApplicationService(
                partyIdentificationTypeStateRepository,
                partyIdentificationTypeStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractProductApplicationService.SimpleProductApplicationService productApplicationService(
            @Qualifier("productEventStore") EventStore productEventStore,
            ProductStateRepository productStateRepository,
            ProductStateQueryRepository productStateQueryRepository
    ) {
        AbstractProductApplicationService.SimpleProductApplicationService applicationService = new AbstractProductApplicationService.SimpleProductApplicationService(
                productEventStore,
                productStateRepository,
                productStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractProductTypeApplicationService.SimpleProductTypeApplicationService productTypeApplicationService(
            ProductTypeStateRepository productTypeStateRepository,
            ProductTypeStateQueryRepository productTypeStateQueryRepository
    ) {
        AbstractProductTypeApplicationService.SimpleProductTypeApplicationService applicationService = new AbstractProductTypeApplicationService.SimpleProductTypeApplicationService(
                productTypeStateRepository,
                productTypeStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractProductCategoryApplicationService.SimpleProductCategoryApplicationService productCategoryApplicationService(
            @Qualifier("productCategoryEventStore") EventStore productCategoryEventStore,
            ProductCategoryStateRepository productCategoryStateRepository,
            ProductCategoryStateQueryRepository productCategoryStateQueryRepository
    ) {
        AbstractProductCategoryApplicationService.SimpleProductCategoryApplicationService applicationService = new AbstractProductCategoryApplicationService.SimpleProductCategoryApplicationService(
                productCategoryEventStore,
                productCategoryStateRepository,
                productCategoryStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractProductCategoryTypeApplicationService.SimpleProductCategoryTypeApplicationService productCategoryTypeApplicationService(
            ProductCategoryTypeStateRepository productCategoryTypeStateRepository,
            ProductCategoryTypeStateQueryRepository productCategoryTypeStateQueryRepository
    ) {
        AbstractProductCategoryTypeApplicationService.SimpleProductCategoryTypeApplicationService applicationService = new AbstractProductCategoryTypeApplicationService.SimpleProductCategoryTypeApplicationService(
                productCategoryTypeStateRepository,
                productCategoryTypeStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractSupplierProductApplicationService.SimpleSupplierProductApplicationService supplierProductApplicationService(
            @Qualifier("supplierProductEventStore") EventStore supplierProductEventStore,
            SupplierProductStateRepository supplierProductStateRepository,
            SupplierProductStateQueryRepository supplierProductStateQueryRepository
    ) {
        AbstractSupplierProductApplicationService.SimpleSupplierProductApplicationService applicationService = new AbstractSupplierProductApplicationService.SimpleSupplierProductApplicationService(
                supplierProductEventStore,
                supplierProductStateRepository,
                supplierProductStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractDocumentApplicationService.SimpleDocumentApplicationService documentApplicationService(
            @Qualifier("documentEventStore") EventStore documentEventStore,
            DocumentStateRepository documentStateRepository,
            DocumentStateQueryRepository documentStateQueryRepository
    ) {
        AbstractDocumentApplicationService.SimpleDocumentApplicationService applicationService = new AbstractDocumentApplicationService.SimpleDocumentApplicationService(
                documentEventStore,
                documentStateRepository,
                documentStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractDocumentAssociationApplicationService.SimpleDocumentAssociationApplicationService documentAssociationApplicationService(
            @Qualifier("documentAssociationEventStore") EventStore documentAssociationEventStore,
            DocumentAssociationStateRepository documentAssociationStateRepository,
            DocumentAssociationStateQueryRepository documentAssociationStateQueryRepository
    ) {
        AbstractDocumentAssociationApplicationService.SimpleDocumentAssociationApplicationService applicationService = new AbstractDocumentAssociationApplicationService.SimpleDocumentAssociationApplicationService(
                documentAssociationEventStore,
                documentAssociationStateRepository,
                documentAssociationStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractGeoPointApplicationService.SimpleGeoPointApplicationService geoPointApplicationService(
            GeoPointStateRepository geoPointStateRepository,
            GeoPointStateQueryRepository geoPointStateQueryRepository
    ) {
        AbstractGeoPointApplicationService.SimpleGeoPointApplicationService applicationService = new AbstractGeoPointApplicationService.SimpleGeoPointApplicationService(
                geoPointStateRepository,
                geoPointStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractPartyRoleApplicationService.SimplePartyRoleApplicationService partyRoleApplicationService(
            @Qualifier("partyRoleEventStore") EventStore partyRoleEventStore,
            PartyRoleStateRepository partyRoleStateRepository,
            PartyRoleStateQueryRepository partyRoleStateQueryRepository
    ) {
        AbstractPartyRoleApplicationService.SimplePartyRoleApplicationService applicationService = new AbstractPartyRoleApplicationService.SimplePartyRoleApplicationService(
                partyRoleEventStore,
                partyRoleStateRepository,
                partyRoleStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractRoleTypeApplicationService.SimpleRoleTypeApplicationService roleTypeApplicationService(
            RoleTypeStateRepository roleTypeStateRepository,
            RoleTypeStateQueryRepository roleTypeStateQueryRepository
    ) {
        AbstractRoleTypeApplicationService.SimpleRoleTypeApplicationService applicationService = new AbstractRoleTypeApplicationService.SimpleRoleTypeApplicationService(
                roleTypeStateRepository,
                roleTypeStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractOrderApplicationService.SimpleOrderApplicationService orderApplicationService(
            @Qualifier("orderEventStore") EventStore orderEventStore,
            OrderHeaderStateRepository orderHeaderStateRepository,
            OrderHeaderStateQueryRepository orderHeaderStateQueryRepository
    ) {
        AbstractOrderApplicationService.SimpleOrderApplicationService applicationService = new AbstractOrderApplicationService.SimpleOrderApplicationService(
                orderEventStore,
                orderHeaderStateRepository,
                orderHeaderStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractOrderAdjustmentTypeApplicationService.SimpleOrderAdjustmentTypeApplicationService orderAdjustmentTypeApplicationService(
            OrderAdjustmentTypeStateRepository orderAdjustmentTypeStateRepository,
            OrderAdjustmentTypeStateQueryRepository orderAdjustmentTypeStateQueryRepository
    ) {
        AbstractOrderAdjustmentTypeApplicationService.SimpleOrderAdjustmentTypeApplicationService applicationService = new AbstractOrderAdjustmentTypeApplicationService.SimpleOrderAdjustmentTypeApplicationService(
                orderAdjustmentTypeStateRepository,
                orderAdjustmentTypeStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractShipmentApplicationService.SimpleShipmentApplicationService shipmentApplicationService(
            @Qualifier("shipmentEventStore") EventStore shipmentEventStore,
            ShipmentStateRepository shipmentStateRepository,
            ShipmentStateQueryRepository shipmentStateQueryRepository
    ) {
        AbstractShipmentApplicationService.SimpleShipmentApplicationService applicationService = new AbstractShipmentApplicationService.SimpleShipmentApplicationService(
                shipmentEventStore,
                shipmentStateRepository,
                shipmentStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractShipmentTypeApplicationService.SimpleShipmentTypeApplicationService shipmentTypeApplicationService(
            @Qualifier("shipmentTypeEventStore") EventStore shipmentTypeEventStore,
            ShipmentTypeStateRepository shipmentTypeStateRepository,
            ShipmentTypeStateQueryRepository shipmentTypeStateQueryRepository
    ) {
        AbstractShipmentTypeApplicationService.SimpleShipmentTypeApplicationService applicationService = new AbstractShipmentTypeApplicationService.SimpleShipmentTypeApplicationService(
                shipmentTypeEventStore,
                shipmentTypeStateRepository,
                shipmentTypeStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractShippingDocumentApplicationService.SimpleShippingDocumentApplicationService shippingDocumentApplicationService(
            @Qualifier("shippingDocumentEventStore") EventStore shippingDocumentEventStore,
            ShippingDocumentStateRepository shippingDocumentStateRepository,
            ShippingDocumentStateQueryRepository shippingDocumentStateQueryRepository
    ) {
        AbstractShippingDocumentApplicationService.SimpleShippingDocumentApplicationService applicationService = new AbstractShippingDocumentApplicationService.SimpleShippingDocumentApplicationService(
                shippingDocumentEventStore,
                shippingDocumentStateRepository,
                shippingDocumentStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AbstractShipmentReceiptApplicationService.SimpleShipmentReceiptApplicationService shipmentReceiptApplicationService(
            @Qualifier("shipmentReceiptEventStore") EventStore shipmentReceiptEventStore,
            ShipmentReceiptStateRepository shipmentReceiptStateRepository,
            ShipmentReceiptStateQueryRepository shipmentReceiptStateQueryRepository
    ) {
        AbstractShipmentReceiptApplicationService.SimpleShipmentReceiptApplicationService applicationService = new AbstractShipmentReceiptApplicationService.SimpleShipmentReceiptApplicationService(
                shipmentReceiptEventStore,
                shipmentReceiptStateRepository,
                shipmentReceiptStateQueryRepository
        );
        return applicationService;
    }


}
