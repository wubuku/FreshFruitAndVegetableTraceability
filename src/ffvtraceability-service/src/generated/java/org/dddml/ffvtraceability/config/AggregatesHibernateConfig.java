// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.config;

import org.dddml.ffvtraceability.domain.shippingevent.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.shippingevent.hibernate.*;
import org.dddml.ffvtraceability.domain.receivingevent.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.receivingevent.hibernate.*;
import org.dddml.ffvtraceability.domain.transformationevent.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.transformationevent.hibernate.*;
import org.dddml.ffvtraceability.domain.gs1applicationidentifier.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.gs1applicationidentifier.hibernate.*;
import org.dddml.ffvtraceability.domain.attributesetinstance.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.attributesetinstance.hibernate.*;
import org.dddml.ffvtraceability.domain.statusitem.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.domain.statusitem.hibernate.*;
import org.dddml.ffvtraceability.specialization.AggregateEventListener;
import org.dddml.ffvtraceability.specialization.EventStore;
import org.dddml.ffvtraceability.specialization.IdGenerator;
import org.dddml.ffvtraceability.specialization.ReadOnlyProxyGenerator;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AggregatesHibernateConfig {


    @Bean
    public ShippingEventStateRepository shippingEventStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateShippingEventStateRepository repository = new HibernateShippingEventStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public ShippingEventStateQueryRepository shippingEventStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateShippingEventStateQueryRepository repository = new HibernateShippingEventStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public AbstractShippingEventApplicationService.SimpleShippingEventApplicationService shippingEventApplicationService(
            ShippingEventStateRepository shippingEventStateRepository,
            ShippingEventStateQueryRepository shippingEventStateQueryRepository
    ) {
        AbstractShippingEventApplicationService.SimpleShippingEventApplicationService applicationService = new AbstractShippingEventApplicationService.SimpleShippingEventApplicationService(
                shippingEventStateRepository,
                shippingEventStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public ReceivingEventStateRepository receivingEventStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateReceivingEventStateRepository repository = new HibernateReceivingEventStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public ReceivingEventStateQueryRepository receivingEventStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateReceivingEventStateQueryRepository repository = new HibernateReceivingEventStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public AbstractReceivingEventApplicationService.SimpleReceivingEventApplicationService receivingEventApplicationService(
            ReceivingEventStateRepository receivingEventStateRepository,
            ReceivingEventStateQueryRepository receivingEventStateQueryRepository
    ) {
        AbstractReceivingEventApplicationService.SimpleReceivingEventApplicationService applicationService = new AbstractReceivingEventApplicationService.SimpleReceivingEventApplicationService(
                receivingEventStateRepository,
                receivingEventStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public TransformationEventStateRepository transformationEventStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTransformationEventStateRepository repository = new HibernateTransformationEventStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public TransformationEventStateQueryRepository transformationEventStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTransformationEventStateQueryRepository repository = new HibernateTransformationEventStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public AbstractTransformationEventApplicationService.SimpleTransformationEventApplicationService transformationEventApplicationService(
            TransformationEventStateRepository transformationEventStateRepository,
            TransformationEventStateQueryRepository transformationEventStateQueryRepository
    ) {
        AbstractTransformationEventApplicationService.SimpleTransformationEventApplicationService applicationService = new AbstractTransformationEventApplicationService.SimpleTransformationEventApplicationService(
                transformationEventStateRepository,
                transformationEventStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public Gs1ApplicationIdentifierStateRepository gs1ApplicationIdentifierStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateGs1ApplicationIdentifierStateRepository repository = new HibernateGs1ApplicationIdentifierStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public Gs1ApplicationIdentifierStateQueryRepository gs1ApplicationIdentifierStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateGs1ApplicationIdentifierStateQueryRepository repository = new HibernateGs1ApplicationIdentifierStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public AbstractGs1ApplicationIdentifierApplicationService.SimpleGs1ApplicationIdentifierApplicationService gs1ApplicationIdentifierApplicationService(
            Gs1ApplicationIdentifierStateRepository gs1ApplicationIdentifierStateRepository,
            Gs1ApplicationIdentifierStateQueryRepository gs1ApplicationIdentifierStateQueryRepository
    ) {
        AbstractGs1ApplicationIdentifierApplicationService.SimpleGs1ApplicationIdentifierApplicationService applicationService = new AbstractGs1ApplicationIdentifierApplicationService.SimpleGs1ApplicationIdentifierApplicationService(
                gs1ApplicationIdentifierStateRepository,
                gs1ApplicationIdentifierStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public AttributeSetInstanceStateRepository attributeSetInstanceStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateAttributeSetInstanceStateRepository repository = new HibernateAttributeSetInstanceStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public AttributeSetInstanceStateQueryRepository attributeSetInstanceStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateAttributeSetInstanceStateQueryRepository repository = new HibernateAttributeSetInstanceStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateAttributeSetInstanceEventStore attributeSetInstanceEventStore(SessionFactory hibernateSessionFactory) {
        HibernateAttributeSetInstanceEventStore eventStore = new HibernateAttributeSetInstanceEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractAttributeSetInstanceApplicationService.SimpleAttributeSetInstanceApplicationService attributeSetInstanceApplicationService(
            @Qualifier("attributeSetInstanceEventStore") EventStore attributeSetInstanceEventStore,
            AttributeSetInstanceStateRepository attributeSetInstanceStateRepository,
            AttributeSetInstanceStateQueryRepository attributeSetInstanceStateQueryRepository
            , IdGenerator<String, AttributeSetInstanceCommand.CreateAttributeSetInstance, AttributeSetInstanceState> attributeSetInstanceIdGenerator
    ) {
        AbstractAttributeSetInstanceApplicationService.SimpleAttributeSetInstanceApplicationService applicationService = new AbstractAttributeSetInstanceApplicationService.SimpleAttributeSetInstanceApplicationService(
                attributeSetInstanceEventStore,
                attributeSetInstanceStateRepository,
                attributeSetInstanceStateQueryRepository
                , attributeSetInstanceIdGenerator
        );
        return applicationService;
    }



    @Bean
    public StatusItemStateRepository statusItemStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateStatusItemStateRepository repository = new HibernateStatusItemStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public StatusItemStateQueryRepository statusItemStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateStatusItemStateQueryRepository repository = new HibernateStatusItemStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public AbstractStatusItemApplicationService.SimpleStatusItemApplicationService statusItemApplicationService(
            StatusItemStateRepository statusItemStateRepository,
            StatusItemStateQueryRepository statusItemStateQueryRepository
    ) {
        AbstractStatusItemApplicationService.SimpleStatusItemApplicationService applicationService = new AbstractStatusItemApplicationService.SimpleStatusItemApplicationService(
                statusItemStateRepository,
                statusItemStateQueryRepository
        );
        return applicationService;
    }


}
