// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.order;

import org.dddml.ffvtraceability.domain.OrderItemQuantityAllocationValue;
import org.dddml.ffvtraceability.specialization.MutationContext;
import org.dddml.ffvtraceability.specialization.VerificationContext;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Map;

import static org.dddml.ffvtraceability.domain.constants.BffOrderConstants.*;


/**
 * Implementation of the Order.UpdateFulfillmentStatus command logic.
 */
@Component("(order_UpdateFulfillmentStatus)")
public class UpdateFulfillmentStatusLogic implements IUpdateFulfillmentStatusLogic {
    public static String determineFulfillmentStatus(boolean allFulfilled, boolean anyFulfilled) {
        if (allFulfilled) {
            return FULFILLMENT_STATUS_FULFILLED;
        } else if (anyFulfilled) {
            return FULFILLMENT_STATUS_PARTIALLY_FULFILLED;
        } else {
            return FULFILLMENT_STATUS_NOT_FULFILLED;
        }
    }

    public static String determineItemFulfillmentStatus(BigDecimal totalAllocated, BigDecimal demandQuantity) {
        if (totalAllocated.compareTo(demandQuantity) >= 0) {
            return FULFILLMENT_STATUS_FULFILLED;
        } else if (totalAllocated.compareTo(BigDecimal.ZERO) > 0) {
            return FULFILLMENT_STATUS_PARTIALLY_FULFILLED;
        } else {
            return FULFILLMENT_STATUS_NOT_FULFILLED;
        }
    }

    /**
     * Verifies the Order.UpdateFulfillmentStatus command by performing validation logic
     * before the state mutation. Creates and returns an event.
     *
     * @param eventFactory         The supplier that creates new OrderEvent.FulfillmentStatusUpdated events
     * @param orderHeaderState     The current state of the OrderHeader aggregate
     * @param orderItemAllocations
     * @param verificationContext  The context information for the verification process
     * @return An event that will be applied to the current state to update the Order
     */
    public OrderEvent.FulfillmentStatusUpdated verify(java.util.function.Supplier<OrderEvent.FulfillmentStatusUpdated> eventFactory, OrderHeaderState orderHeaderState, OrderItemQuantityAllocationValue[] orderItemAllocations, VerificationContext verificationContext) {
        OrderEvent.FulfillmentStatusUpdated e = eventFactory.get();
        // TODO: implement?
        return e;
    }

    /**
     * Performs the state mutation operation of Order.UpdateFulfillmentStatus command.
     *
     * @param orderHeaderState     The current immutable state of the OrderHeader
     * @param orderItemAllocations
     * @param mutationContext      The context that provides functionality including creating mutable state
     * @return The new state of the Order
     */
    public OrderHeaderState mutate(OrderHeaderState orderHeaderState, OrderItemQuantityAllocationValue[] orderItemAllocations, MutationContext<OrderHeaderState, OrderHeaderState.MutableOrderHeaderState> mutationContext) {
        OrderHeaderState.MutableOrderHeaderState s = mutationContext.createMutableState(orderHeaderState);

        Map<OrderItemId, BigDecimal> totalAllocatedQuantities = Arrays.stream(orderItemAllocations)
                .collect(java.util.stream.Collectors.groupingBy(
                        allocation -> new OrderItemId(allocation.getOrderId(), allocation.getOrderItemSeqId()),
                        java.util.stream.Collectors.reducing(
                                BigDecimal.ZERO,
                                OrderItemQuantityAllocationValue::getQuantityAllocated,
                                BigDecimal::add
                        )
                ));

        boolean allFulfilled = true;
        boolean anyFulfilled = false;

        // 遍历订单项并更新它们的履行状态
        for (OrderItemState i : orderHeaderState.getOrderItems()) {
            OrderItemState.MutableOrderItemState orderItem = (OrderItemState.MutableOrderItemState) i;
            OrderItemId orderItemId = new OrderItemId(orderHeaderState.getOrderId(), orderItem.getOrderItemSeqId());
            BigDecimal totalAllocated = totalAllocatedQuantities.getOrDefault(orderItemId, BigDecimal.ZERO);
            BigDecimal demandQuantity = orderItem.getQuantity();
            // 更新订单项的履行状态
            orderItem.setFulfillmentStatusId(determineItemFulfillmentStatus(totalAllocated, demandQuantity));
            // 更新整体履行状态标志
            if (totalAllocated.compareTo(demandQuantity) < 0) {
                allFulfilled = false;
            }
            if (totalAllocated.compareTo(BigDecimal.ZERO) > 0) {
                anyFulfilled = true;
            }
        }
        // 确定整体履行状态
        String fulfillmentStatusId = determineFulfillmentStatus(allFulfilled, anyFulfilled);
        // 更新订单并返回状态
        s.setFulfillmentStatusId(fulfillmentStatusId);
        return s; // Return the updated state
    }
}
