// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.qainspection;

import java.math.*;
import java.util.*;
import org.dddml.ffvtraceability.domain.*;
import org.dddml.ffvtraceability.specialization.*;
import org.springframework.stereotype.Component;


import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * Implementation of the QaInspection.QaInspectionAction command logic.
 */
@Component("(qaInspection_QaInspectionAction)")
public class QaInspectionActionLogic implements IQaInspectionActionLogic {
    /**
     * Verifies the QaInspection.QaInspectionAction command by performing validation logic
     * before the state mutation. Creates and returns an event.
     * 
     * @param eventFactory The supplier that creates new QaInspectionEvent.QaInspectionActionEvent events
     * @param qaInspectionState The current state of the QaInspection aggregate
     * @param value 
     * @param verificationContext The context information for the verification process
     * @return An event that will be applied to the current state to update the QaInspection
     */
    public QaInspectionEvent.QaInspectionActionEvent verify(java.util.function.Supplier<QaInspectionEvent.QaInspectionActionEvent> eventFactory, QaInspectionState qaInspectionState, String value, VerificationContext verificationContext) {
        QaInspectionEvent.QaInspectionActionEvent e = eventFactory.get();
        // TODO: implement
        return e;
    }

    /**
     * Performs the state mutation operation of QaInspection.QaInspectionAction command.
     *
     * @param qaInspectionState The current immutable state of the QaInspection
     * @param value 
     * @param mutationContext The context that provides functionality including creating mutable state
     * @return The new state of the QaInspection
     */
    public QaInspectionState mutate(QaInspectionState qaInspectionState, String value, MutationContext<QaInspectionState, QaInspectionState.MutableQaInspectionState> mutationContext) {
        QaInspectionState.MutableQaInspectionState s = mutationContext.createMutableState(qaInspectionState);
        AbstractQaInspectionAggregate.SimpleQaInspectionQaInspectionActionCommandHandler cmdHandler = new AbstractQaInspectionAggregate.SimpleQaInspectionQaInspectionActionCommandHandler();
        cmdHandler.execute(new PropertyCommandContext<>() {
            @Override
            public String getContent() {
                return value;
            }

            @Override
            public Supplier<String> getStateGetter() {
                return qaInspectionState::getStatusId;
            }

            @Override
            public Consumer<String> getStateSetter() {
                return s::setStatusId;
            }

            @Override
            public String getOuterCommandType() {
                return "QaInspectionAction";
            }

            @Override
            public Object getExecutionEnvironment() {
                return null;
            }
        });
        return s; // Return the updated state
    }
}
