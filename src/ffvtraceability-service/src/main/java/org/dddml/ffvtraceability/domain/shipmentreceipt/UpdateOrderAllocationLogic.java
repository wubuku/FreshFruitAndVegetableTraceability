// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.ffvtraceability.domain.shipmentreceipt;

import org.dddml.ffvtraceability.domain.EntityStateCollection;
import org.dddml.ffvtraceability.domain.OrderItemQuantityAllocationValue;
import org.dddml.ffvtraceability.domain.order.OrderItemId;
import org.dddml.ffvtraceability.domain.shipment.ShipmentApplicationService;
import org.dddml.ffvtraceability.domain.shipment.ShipmentState;
import org.dddml.ffvtraceability.specialization.MutationContext;
import org.dddml.ffvtraceability.specialization.VerificationContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Arrays;
import java.util.Set;
import java.util.stream.Collectors;


/**
 * Implementation of the ShipmentReceipt.UpdateOrderAllocation command logic.
 */
@Component("(shipmentReceipt_UpdateOrderAllocation)")
public class UpdateOrderAllocationLogic implements IUpdateOrderAllocationLogic {
    @Autowired
    private ShipmentApplicationService shipmentApplicationService;

    /**
     * Verifies the ShipmentReceipt.UpdateOrderAllocation command by performing validation logic
     * before the state mutation. Creates and returns an event.
     *
     * @param eventFactory         The supplier that creates new ShipmentReceiptEvent.UpdateOrderAllocationEvent events
     * @param shipmentReceiptState The current state of the ShipmentReceipt aggregate
     * @param unallocatedQuantity
     * @param orderItemAllocations
     * @param verificationContext  The context information for the verification process
     * @return An event that will be applied to the current state to update the ShipmentReceipt
     */
    public ShipmentReceiptEvent.OrderAllocationUpdated verify(
            java.util.function.Supplier<ShipmentReceiptEvent.OrderAllocationUpdated> eventFactory,
            ShipmentReceiptState shipmentReceiptState,
            java.math.BigDecimal unallocatedQuantity,
            OrderItemQuantityAllocationValue[] orderItemAllocations,
            VerificationContext verificationContext) {
        ShipmentReceiptEvent.OrderAllocationUpdated e = eventFactory.get();
        String orderId = shipmentReceiptState.getOrderId();
        if (orderId == null && shipmentReceiptState.getShipmentId() != null) {
            ShipmentState shipmentState = shipmentApplicationService.get(shipmentReceiptState.getShipmentId());
            if (shipmentState != null) {
                orderId = shipmentState.getPrimaryOrderId();
            }
        }
        e.setPreviousOrderId(orderId);
        return e;
    }

    /**
     * Performs the state mutation operation of ShipmentReceipt.UpdateOrderAllocation command.
     *
     * @param shipmentReceiptState The current immutable state of the ShipmentReceipt
     * @param unallocatedQuantity
     * @param orderItemAllocations
     * @param mutationContext      The context that provides functionality including creating mutable state
     * @return The new state of the ShipmentReceipt
     */
    public ShipmentReceiptState mutate(ShipmentReceiptState shipmentReceiptState,
                                       java.math.BigDecimal unallocatedQuantity,
                                       OrderItemQuantityAllocationValue[] orderItemAllocations,
                                       String previousOrderId,
                                       MutationContext<ShipmentReceiptState, ShipmentReceiptState.MutableShipmentReceiptState> mutationContext) {
        ShipmentReceiptState.MutableShipmentReceiptState s = mutationContext.createMutableState(shipmentReceiptState);
        s.setQuantityUnallocated(unallocatedQuantity);

        EntityStateCollection.MutableEntityStateCollection<OrderItemId, ShipmentReceiptOrderAllocationState>
                allocationStates = s.getOrderAllocations();
        for (OrderItemQuantityAllocationValue allocation : orderItemAllocations) {
            OrderItemId orderItemId = new OrderItemId(allocation.getOrderId(), allocation.getOrderItemSeqId());
            ShipmentReceiptOrderAllocationState.MutableShipmentReceiptOrderAllocationState allocationState
                    = allocationStates.getOrAddMutableState(orderItemId);
            allocationState.setOrderItemId(orderItemId);
            allocationState.setQuantityAllocated(allocation.getQuantityAllocated());
        }

        Set<OrderItemId> oldOrderItemIds = s.getOrderAllocations().stream()
                .map(ShipmentReceiptOrderAllocationState::getOrderItemId).collect(Collectors.toSet());
        Set<OrderItemId> newOrderItemIds = Arrays.stream(orderItemAllocations)
                .map(x -> new OrderItemId(x.getOrderId(), x.getOrderItemSeqId())).collect(Collectors.toSet());
        oldOrderItemIds.removeAll(newOrderItemIds);

        for (OrderItemId orderItemId : oldOrderItemIds) {
            allocationStates.removeById(orderItemId);
        }

        return s; // Return the updated state
    }
}
